/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"runtime": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["wpJsonpScaniaBannerPluginWidget"] = window["wpJsonpScaniaBannerPluginWidget"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// run deferred modules from other chunks
/******/ 	checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ([]);function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

(window["wpJsonpScaniaBannerPluginWidget"] = window["wpJsonpScaniaBannerPluginWidget"] || []).push([["polyfills-es5"], {
  /***/
  "./node_modules/@angular-builders/custom-webpack/node_modules/@angular-devkit/build-angular/src/angular-cli-files/models/es5-polyfills.js":
  /*!************************************************************************************************************************************************!*\
    !*** ./node_modules/@angular-builders/custom-webpack/node_modules/@angular-devkit/build-angular/src/angular-cli-files/models/es5-polyfills.js ***!
    \************************************************************************************************************************************************/

  /*! no exports provided */

  /***/
  function node_modulesAngularBuildersCustomWebpackNode_modulesAngularDevkitBuildAngularSrcAngularCliFilesModelsEs5PolyfillsJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony import */


    var core_js_es_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! core-js/es/symbol */
    "./node_modules/core-js/es/symbol/index.js");
    /* harmony import */


    var core_js_es_symbol__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_es_symbol__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony import */


    var core_js_modules_es_function_bind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! core-js/modules/es.function.bind */
    "./node_modules/core-js/modules/es.function.bind.js");
    /* harmony import */


    var core_js_modules_es_function_bind__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind__WEBPACK_IMPORTED_MODULE_1__);
    /* harmony import */


    var core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! core-js/modules/es.function.name */
    "./node_modules/core-js/modules/es.function.name.js");
    /* harmony import */


    var core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name__WEBPACK_IMPORTED_MODULE_2__);
    /* harmony import */


    var core_js_modules_es_function_has_instance__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! core-js/modules/es.function.has-instance */
    "./node_modules/core-js/modules/es.function.has-instance.js");
    /* harmony import */


    var core_js_modules_es_function_has_instance__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_has_instance__WEBPACK_IMPORTED_MODULE_3__);
    /* harmony import */


    var core_js_modules_es_object_create__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! core-js/modules/es.object.create */
    "./node_modules/core-js/modules/es.object.create.js");
    /* harmony import */


    var core_js_modules_es_object_create__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create__WEBPACK_IMPORTED_MODULE_4__);
    /* harmony import */


    var core_js_modules_es_object_define_property__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! core-js/modules/es.object.define-property */
    "./node_modules/core-js/modules/es.object.define-property.js");
    /* harmony import */


    var core_js_modules_es_object_define_property__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property__WEBPACK_IMPORTED_MODULE_5__);
    /* harmony import */


    var core_js_modules_es_object_define_properties__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! core-js/modules/es.object.define-properties */
    "./node_modules/core-js/modules/es.object.define-properties.js");
    /* harmony import */


    var core_js_modules_es_object_define_properties__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_properties__WEBPACK_IMPORTED_MODULE_6__);
    /* harmony import */


    var core_js_modules_es_object_get_own_property_descriptor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! core-js/modules/es.object.get-own-property-descriptor */
    "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
    /* harmony import */


    var core_js_modules_es_object_get_own_property_descriptor__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptor__WEBPACK_IMPORTED_MODULE_7__);
    /* harmony import */


    var core_js_modules_es_object_get_prototype_of__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! core-js/modules/es.object.get-prototype-of */
    "./node_modules/core-js/modules/es.object.get-prototype-of.js");
    /* harmony import */


    var core_js_modules_es_object_get_prototype_of__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of__WEBPACK_IMPORTED_MODULE_8__);
    /* harmony import */


    var core_js_modules_es_object_keys__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! core-js/modules/es.object.keys */
    "./node_modules/core-js/modules/es.object.keys.js");
    /* harmony import */


    var core_js_modules_es_object_keys__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys__WEBPACK_IMPORTED_MODULE_9__);
    /* harmony import */


    var core_js_modules_es_object_get_own_property_names__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! core-js/modules/es.object.get-own-property-names */
    "./node_modules/core-js/modules/es.object.get-own-property-names.js");
    /* harmony import */


    var core_js_modules_es_object_get_own_property_names__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_names__WEBPACK_IMPORTED_MODULE_10__);
    /* harmony import */


    var core_js_modules_es_object_freeze__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! core-js/modules/es.object.freeze */
    "./node_modules/core-js/modules/es.object.freeze.js");
    /* harmony import */


    var core_js_modules_es_object_freeze__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_freeze__WEBPACK_IMPORTED_MODULE_11__);
    /* harmony import */


    var core_js_modules_es_object_seal__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! core-js/modules/es.object.seal */
    "./node_modules/core-js/modules/es.object.seal.js");
    /* harmony import */


    var core_js_modules_es_object_seal__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_seal__WEBPACK_IMPORTED_MODULE_12__);
    /* harmony import */


    var core_js_modules_es_object_prevent_extensions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! core-js/modules/es.object.prevent-extensions */
    "./node_modules/core-js/modules/es.object.prevent-extensions.js");
    /* harmony import */


    var core_js_modules_es_object_prevent_extensions__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_prevent_extensions__WEBPACK_IMPORTED_MODULE_13__);
    /* harmony import */


    var core_js_modules_es_object_is_frozen__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
    /*! core-js/modules/es.object.is-frozen */
    "./node_modules/core-js/modules/es.object.is-frozen.js");
    /* harmony import */


    var core_js_modules_es_object_is_frozen__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_is_frozen__WEBPACK_IMPORTED_MODULE_14__);
    /* harmony import */


    var core_js_modules_es_object_is_sealed__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
    /*! core-js/modules/es.object.is-sealed */
    "./node_modules/core-js/modules/es.object.is-sealed.js");
    /* harmony import */


    var core_js_modules_es_object_is_sealed__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_is_sealed__WEBPACK_IMPORTED_MODULE_15__);
    /* harmony import */


    var core_js_modules_es_object_is_extensible__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
    /*! core-js/modules/es.object.is-extensible */
    "./node_modules/core-js/modules/es.object.is-extensible.js");
    /* harmony import */


    var core_js_modules_es_object_is_extensible__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_is_extensible__WEBPACK_IMPORTED_MODULE_16__);
    /* harmony import */


    var core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
    /*! core-js/modules/es.object.assign */
    "./node_modules/core-js/modules/es.object.assign.js");
    /* harmony import */


    var core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_assign__WEBPACK_IMPORTED_MODULE_17__);
    /* harmony import */


    var core_js_modules_es_object_is__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
    /*! core-js/modules/es.object.is */
    "./node_modules/core-js/modules/es.object.is.js");
    /* harmony import */


    var core_js_modules_es_object_is__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_is__WEBPACK_IMPORTED_MODULE_18__);
    /* harmony import */


    var core_js_modules_es_object_set_prototype_of__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
    /*! core-js/modules/es.object.set-prototype-of */
    "./node_modules/core-js/modules/es.object.set-prototype-of.js");
    /* harmony import */


    var core_js_modules_es_object_set_prototype_of__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of__WEBPACK_IMPORTED_MODULE_19__);
    /* harmony import */


    var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
    /*! core-js/modules/es.object.to-string */
    "./node_modules/core-js/modules/es.object.to-string.js");
    /* harmony import */


    var core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string__WEBPACK_IMPORTED_MODULE_20__);
    /* harmony import */


    var core_js_modules_es_array_concat__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
    /*! core-js/modules/es.array.concat */
    "./node_modules/core-js/modules/es.array.concat.js");
    /* harmony import */


    var core_js_modules_es_array_concat__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat__WEBPACK_IMPORTED_MODULE_21__);
    /* harmony import */


    var core_js_modules_es_array_is_array__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
    /*! core-js/modules/es.array.is-array */
    "./node_modules/core-js/modules/es.array.is-array.js");
    /* harmony import */


    var core_js_modules_es_array_is_array__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_is_array__WEBPACK_IMPORTED_MODULE_22__);
    /* harmony import */


    var core_js_modules_es_array_from__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(
    /*! core-js/modules/es.array.from */
    "./node_modules/core-js/modules/es.array.from.js");
    /* harmony import */


    var core_js_modules_es_array_from__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from__WEBPACK_IMPORTED_MODULE_23__);
    /* harmony import */


    var core_js_modules_es_array_of__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(
    /*! core-js/modules/es.array.of */
    "./node_modules/core-js/modules/es.array.of.js");
    /* harmony import */


    var core_js_modules_es_array_of__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_of__WEBPACK_IMPORTED_MODULE_24__);
    /* harmony import */


    var core_js_modules_es_array_join__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(
    /*! core-js/modules/es.array.join */
    "./node_modules/core-js/modules/es.array.join.js");
    /* harmony import */


    var core_js_modules_es_array_join__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_join__WEBPACK_IMPORTED_MODULE_25__);
    /* harmony import */


    var core_js_modules_es_array_slice__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(
    /*! core-js/modules/es.array.slice */
    "./node_modules/core-js/modules/es.array.slice.js");
    /* harmony import */


    var core_js_modules_es_array_slice__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice__WEBPACK_IMPORTED_MODULE_26__);
    /* harmony import */


    var core_js_modules_es_array_splice__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(
    /*! core-js/modules/es.array.splice */
    "./node_modules/core-js/modules/es.array.splice.js");
    /* harmony import */


    var core_js_modules_es_array_splice__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_splice__WEBPACK_IMPORTED_MODULE_27__);
    /* harmony import */


    var core_js_modules_es_array_sort__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(
    /*! core-js/modules/es.array.sort */
    "./node_modules/core-js/modules/es.array.sort.js");
    /* harmony import */


    var core_js_modules_es_array_sort__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_sort__WEBPACK_IMPORTED_MODULE_28__);
    /* harmony import */


    var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(
    /*! core-js/modules/es.array.for-each */
    "./node_modules/core-js/modules/es.array.for-each.js");
    /* harmony import */


    var core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_29___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each__WEBPACK_IMPORTED_MODULE_29__);
    /* harmony import */


    var core_js_modules_es_array_map__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(
    /*! core-js/modules/es.array.map */
    "./node_modules/core-js/modules/es.array.map.js");
    /* harmony import */


    var core_js_modules_es_array_map__WEBPACK_IMPORTED_MODULE_30___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map__WEBPACK_IMPORTED_MODULE_30__);
    /* harmony import */


    var core_js_modules_es_array_filter__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(
    /*! core-js/modules/es.array.filter */
    "./node_modules/core-js/modules/es.array.filter.js");
    /* harmony import */


    var core_js_modules_es_array_filter__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter__WEBPACK_IMPORTED_MODULE_31__);
    /* harmony import */


    var core_js_modules_es_array_some__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(
    /*! core-js/modules/es.array.some */
    "./node_modules/core-js/modules/es.array.some.js");
    /* harmony import */


    var core_js_modules_es_array_some__WEBPACK_IMPORTED_MODULE_32___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_some__WEBPACK_IMPORTED_MODULE_32__);
    /* harmony import */


    var core_js_modules_es_array_every__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(
    /*! core-js/modules/es.array.every */
    "./node_modules/core-js/modules/es.array.every.js");
    /* harmony import */


    var core_js_modules_es_array_every__WEBPACK_IMPORTED_MODULE_33___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_every__WEBPACK_IMPORTED_MODULE_33__);
    /* harmony import */


    var core_js_modules_es_array_reduce__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(
    /*! core-js/modules/es.array.reduce */
    "./node_modules/core-js/modules/es.array.reduce.js");
    /* harmony import */


    var core_js_modules_es_array_reduce__WEBPACK_IMPORTED_MODULE_34___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_reduce__WEBPACK_IMPORTED_MODULE_34__);
    /* harmony import */


    var core_js_modules_es_array_reduce_right__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(
    /*! core-js/modules/es.array.reduce-right */
    "./node_modules/core-js/modules/es.array.reduce-right.js");
    /* harmony import */


    var core_js_modules_es_array_reduce_right__WEBPACK_IMPORTED_MODULE_35___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_reduce_right__WEBPACK_IMPORTED_MODULE_35__);
    /* harmony import */


    var core_js_modules_es_array_index_of__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(
    /*! core-js/modules/es.array.index-of */
    "./node_modules/core-js/modules/es.array.index-of.js");
    /* harmony import */


    var core_js_modules_es_array_index_of__WEBPACK_IMPORTED_MODULE_36___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_index_of__WEBPACK_IMPORTED_MODULE_36__);
    /* harmony import */


    var core_js_modules_es_array_last_index_of__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(
    /*! core-js/modules/es.array.last-index-of */
    "./node_modules/core-js/modules/es.array.last-index-of.js");
    /* harmony import */


    var core_js_modules_es_array_last_index_of__WEBPACK_IMPORTED_MODULE_37___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_last_index_of__WEBPACK_IMPORTED_MODULE_37__);
    /* harmony import */


    var core_js_modules_es_array_copy_within__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(
    /*! core-js/modules/es.array.copy-within */
    "./node_modules/core-js/modules/es.array.copy-within.js");
    /* harmony import */


    var core_js_modules_es_array_copy_within__WEBPACK_IMPORTED_MODULE_38___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_copy_within__WEBPACK_IMPORTED_MODULE_38__);
    /* harmony import */


    var core_js_modules_es_array_fill__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(
    /*! core-js/modules/es.array.fill */
    "./node_modules/core-js/modules/es.array.fill.js");
    /* harmony import */


    var core_js_modules_es_array_fill__WEBPACK_IMPORTED_MODULE_39___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_fill__WEBPACK_IMPORTED_MODULE_39__);
    /* harmony import */


    var core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(
    /*! core-js/modules/es.array.find */
    "./node_modules/core-js/modules/es.array.find.js");
    /* harmony import */


    var core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_40___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find__WEBPACK_IMPORTED_MODULE_40__);
    /* harmony import */


    var core_js_modules_es_array_find_index__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(
    /*! core-js/modules/es.array.find-index */
    "./node_modules/core-js/modules/es.array.find-index.js");
    /* harmony import */


    var core_js_modules_es_array_find_index__WEBPACK_IMPORTED_MODULE_41___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find_index__WEBPACK_IMPORTED_MODULE_41__);
    /* harmony import */


    var core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(
    /*! core-js/modules/es.array.iterator */
    "./node_modules/core-js/modules/es.array.iterator.js");
    /* harmony import */


    var core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_42___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator__WEBPACK_IMPORTED_MODULE_42__);
    /* harmony import */


    var core_js_modules_es_string_from_code_point__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(
    /*! core-js/modules/es.string.from-code-point */
    "./node_modules/core-js/modules/es.string.from-code-point.js");
    /* harmony import */


    var core_js_modules_es_string_from_code_point__WEBPACK_IMPORTED_MODULE_43___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_from_code_point__WEBPACK_IMPORTED_MODULE_43__);
    /* harmony import */


    var core_js_modules_es_string_raw__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(
    /*! core-js/modules/es.string.raw */
    "./node_modules/core-js/modules/es.string.raw.js");
    /* harmony import */


    var core_js_modules_es_string_raw__WEBPACK_IMPORTED_MODULE_44___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_raw__WEBPACK_IMPORTED_MODULE_44__);
    /* harmony import */


    var core_js_modules_es_string_trim__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(
    /*! core-js/modules/es.string.trim */
    "./node_modules/core-js/modules/es.string.trim.js");
    /* harmony import */


    var core_js_modules_es_string_trim__WEBPACK_IMPORTED_MODULE_45___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_trim__WEBPACK_IMPORTED_MODULE_45__);
    /* harmony import */


    var core_js_modules_es_string_iterator__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(
    /*! core-js/modules/es.string.iterator */
    "./node_modules/core-js/modules/es.string.iterator.js");
    /* harmony import */


    var core_js_modules_es_string_iterator__WEBPACK_IMPORTED_MODULE_46___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator__WEBPACK_IMPORTED_MODULE_46__);
    /* harmony import */


    var core_js_modules_es_string_code_point_at__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(
    /*! core-js/modules/es.string.code-point-at */
    "./node_modules/core-js/modules/es.string.code-point-at.js");
    /* harmony import */


    var core_js_modules_es_string_code_point_at__WEBPACK_IMPORTED_MODULE_47___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_code_point_at__WEBPACK_IMPORTED_MODULE_47__);
    /* harmony import */


    var core_js_modules_es_string_ends_with__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(
    /*! core-js/modules/es.string.ends-with */
    "./node_modules/core-js/modules/es.string.ends-with.js");
    /* harmony import */


    var core_js_modules_es_string_ends_with__WEBPACK_IMPORTED_MODULE_48___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_ends_with__WEBPACK_IMPORTED_MODULE_48__);
    /* harmony import */


    var core_js_modules_es_string_includes__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(
    /*! core-js/modules/es.string.includes */
    "./node_modules/core-js/modules/es.string.includes.js");
    /* harmony import */


    var core_js_modules_es_string_includes__WEBPACK_IMPORTED_MODULE_49___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_includes__WEBPACK_IMPORTED_MODULE_49__);
    /* harmony import */


    var core_js_modules_es_string_repeat__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(
    /*! core-js/modules/es.string.repeat */
    "./node_modules/core-js/modules/es.string.repeat.js");
    /* harmony import */


    var core_js_modules_es_string_repeat__WEBPACK_IMPORTED_MODULE_50___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_repeat__WEBPACK_IMPORTED_MODULE_50__);
    /* harmony import */


    var core_js_modules_es_string_starts_with__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(
    /*! core-js/modules/es.string.starts-with */
    "./node_modules/core-js/modules/es.string.starts-with.js");
    /* harmony import */


    var core_js_modules_es_string_starts_with__WEBPACK_IMPORTED_MODULE_51___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_starts_with__WEBPACK_IMPORTED_MODULE_51__);
    /* harmony import */


    var core_js_modules_es_string_anchor__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(
    /*! core-js/modules/es.string.anchor */
    "./node_modules/core-js/modules/es.string.anchor.js");
    /* harmony import */


    var core_js_modules_es_string_anchor__WEBPACK_IMPORTED_MODULE_52___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_anchor__WEBPACK_IMPORTED_MODULE_52__);
    /* harmony import */


    var core_js_modules_es_string_big__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(
    /*! core-js/modules/es.string.big */
    "./node_modules/core-js/modules/es.string.big.js");
    /* harmony import */


    var core_js_modules_es_string_big__WEBPACK_IMPORTED_MODULE_53___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_big__WEBPACK_IMPORTED_MODULE_53__);
    /* harmony import */


    var core_js_modules_es_string_blink__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(
    /*! core-js/modules/es.string.blink */
    "./node_modules/core-js/modules/es.string.blink.js");
    /* harmony import */


    var core_js_modules_es_string_blink__WEBPACK_IMPORTED_MODULE_54___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_blink__WEBPACK_IMPORTED_MODULE_54__);
    /* harmony import */


    var core_js_modules_es_string_bold__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(
    /*! core-js/modules/es.string.bold */
    "./node_modules/core-js/modules/es.string.bold.js");
    /* harmony import */


    var core_js_modules_es_string_bold__WEBPACK_IMPORTED_MODULE_55___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_bold__WEBPACK_IMPORTED_MODULE_55__);
    /* harmony import */


    var core_js_modules_es_string_fixed__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(
    /*! core-js/modules/es.string.fixed */
    "./node_modules/core-js/modules/es.string.fixed.js");
    /* harmony import */


    var core_js_modules_es_string_fixed__WEBPACK_IMPORTED_MODULE_56___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_fixed__WEBPACK_IMPORTED_MODULE_56__);
    /* harmony import */


    var core_js_modules_es_string_fontcolor__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(
    /*! core-js/modules/es.string.fontcolor */
    "./node_modules/core-js/modules/es.string.fontcolor.js");
    /* harmony import */


    var core_js_modules_es_string_fontcolor__WEBPACK_IMPORTED_MODULE_57___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_fontcolor__WEBPACK_IMPORTED_MODULE_57__);
    /* harmony import */


    var core_js_modules_es_string_fontsize__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(
    /*! core-js/modules/es.string.fontsize */
    "./node_modules/core-js/modules/es.string.fontsize.js");
    /* harmony import */


    var core_js_modules_es_string_fontsize__WEBPACK_IMPORTED_MODULE_58___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_fontsize__WEBPACK_IMPORTED_MODULE_58__);
    /* harmony import */


    var core_js_modules_es_string_italics__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(
    /*! core-js/modules/es.string.italics */
    "./node_modules/core-js/modules/es.string.italics.js");
    /* harmony import */


    var core_js_modules_es_string_italics__WEBPACK_IMPORTED_MODULE_59___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_italics__WEBPACK_IMPORTED_MODULE_59__);
    /* harmony import */


    var core_js_modules_es_string_link__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(
    /*! core-js/modules/es.string.link */
    "./node_modules/core-js/modules/es.string.link.js");
    /* harmony import */


    var core_js_modules_es_string_link__WEBPACK_IMPORTED_MODULE_60___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_link__WEBPACK_IMPORTED_MODULE_60__);
    /* harmony import */


    var core_js_modules_es_string_small__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(
    /*! core-js/modules/es.string.small */
    "./node_modules/core-js/modules/es.string.small.js");
    /* harmony import */


    var core_js_modules_es_string_small__WEBPACK_IMPORTED_MODULE_61___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_small__WEBPACK_IMPORTED_MODULE_61__);
    /* harmony import */


    var core_js_modules_es_string_strike__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(
    /*! core-js/modules/es.string.strike */
    "./node_modules/core-js/modules/es.string.strike.js");
    /* harmony import */


    var core_js_modules_es_string_strike__WEBPACK_IMPORTED_MODULE_62___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_strike__WEBPACK_IMPORTED_MODULE_62__);
    /* harmony import */


    var core_js_modules_es_string_sub__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(
    /*! core-js/modules/es.string.sub */
    "./node_modules/core-js/modules/es.string.sub.js");
    /* harmony import */


    var core_js_modules_es_string_sub__WEBPACK_IMPORTED_MODULE_63___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_sub__WEBPACK_IMPORTED_MODULE_63__);
    /* harmony import */


    var core_js_modules_es_string_sup__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(
    /*! core-js/modules/es.string.sup */
    "./node_modules/core-js/modules/es.string.sup.js");
    /* harmony import */


    var core_js_modules_es_string_sup__WEBPACK_IMPORTED_MODULE_64___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_sup__WEBPACK_IMPORTED_MODULE_64__);
    /* harmony import */


    var core_js_modules_es_string_match__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(
    /*! core-js/modules/es.string.match */
    "./node_modules/core-js/modules/es.string.match.js");
    /* harmony import */


    var core_js_modules_es_string_match__WEBPACK_IMPORTED_MODULE_65___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_match__WEBPACK_IMPORTED_MODULE_65__);
    /* harmony import */


    var core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(
    /*! core-js/modules/es.string.replace */
    "./node_modules/core-js/modules/es.string.replace.js");
    /* harmony import */


    var core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_66___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace__WEBPACK_IMPORTED_MODULE_66__);
    /* harmony import */


    var core_js_modules_es_string_search__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(
    /*! core-js/modules/es.string.search */
    "./node_modules/core-js/modules/es.string.search.js");
    /* harmony import */


    var core_js_modules_es_string_search__WEBPACK_IMPORTED_MODULE_67___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_search__WEBPACK_IMPORTED_MODULE_67__);
    /* harmony import */


    var core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(
    /*! core-js/modules/es.string.split */
    "./node_modules/core-js/modules/es.string.split.js");
    /* harmony import */


    var core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_68___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_split__WEBPACK_IMPORTED_MODULE_68__);
    /* harmony import */


    var core_js_modules_es_parse_int__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(
    /*! core-js/modules/es.parse-int */
    "./node_modules/core-js/modules/es.parse-int.js");
    /* harmony import */


    var core_js_modules_es_parse_int__WEBPACK_IMPORTED_MODULE_69___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_parse_int__WEBPACK_IMPORTED_MODULE_69__);
    /* harmony import */


    var core_js_modules_es_parse_float__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(
    /*! core-js/modules/es.parse-float */
    "./node_modules/core-js/modules/es.parse-float.js");
    /* harmony import */


    var core_js_modules_es_parse_float__WEBPACK_IMPORTED_MODULE_70___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_parse_float__WEBPACK_IMPORTED_MODULE_70__);
    /* harmony import */


    var core_js_es_number__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(
    /*! core-js/es/number */
    "./node_modules/core-js/es/number/index.js");
    /* harmony import */


    var core_js_es_number__WEBPACK_IMPORTED_MODULE_71___default = /*#__PURE__*/__webpack_require__.n(core_js_es_number__WEBPACK_IMPORTED_MODULE_71__);
    /* harmony import */


    var core_js_es_math__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(
    /*! core-js/es/math */
    "./node_modules/core-js/es/math/index.js");
    /* harmony import */


    var core_js_es_math__WEBPACK_IMPORTED_MODULE_72___default = /*#__PURE__*/__webpack_require__.n(core_js_es_math__WEBPACK_IMPORTED_MODULE_72__);
    /* harmony import */


    var core_js_es_date__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(
    /*! core-js/es/date */
    "./node_modules/core-js/es/date/index.js");
    /* harmony import */


    var core_js_es_date__WEBPACK_IMPORTED_MODULE_73___default = /*#__PURE__*/__webpack_require__.n(core_js_es_date__WEBPACK_IMPORTED_MODULE_73__);
    /* harmony import */


    var core_js_modules_es_regexp_constructor__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(
    /*! core-js/modules/es.regexp.constructor */
    "./node_modules/core-js/modules/es.regexp.constructor.js");
    /* harmony import */


    var core_js_modules_es_regexp_constructor__WEBPACK_IMPORTED_MODULE_74___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_constructor__WEBPACK_IMPORTED_MODULE_74__);
    /* harmony import */


    var core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(
    /*! core-js/modules/es.regexp.to-string */
    "./node_modules/core-js/modules/es.regexp.to-string.js");
    /* harmony import */


    var core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_75___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string__WEBPACK_IMPORTED_MODULE_75__);
    /* harmony import */


    var core_js_modules_es_regexp_flags__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(
    /*! core-js/modules/es.regexp.flags */
    "./node_modules/core-js/modules/es.regexp.flags.js");
    /* harmony import */


    var core_js_modules_es_regexp_flags__WEBPACK_IMPORTED_MODULE_76___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_flags__WEBPACK_IMPORTED_MODULE_76__);
    /* harmony import */


    var core_js_modules_es_map__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(
    /*! core-js/modules/es.map */
    "./node_modules/core-js/modules/es.map.js");
    /* harmony import */


    var core_js_modules_es_map__WEBPACK_IMPORTED_MODULE_77___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_map__WEBPACK_IMPORTED_MODULE_77__);
    /* harmony import */


    var core_js_modules_es_weak_map__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(
    /*! core-js/modules/es.weak-map */
    "./node_modules/core-js/modules/es.weak-map.js");
    /* harmony import */


    var core_js_modules_es_weak_map__WEBPACK_IMPORTED_MODULE_78___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map__WEBPACK_IMPORTED_MODULE_78__);
    /* harmony import */


    var core_js_modules_es_set__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(
    /*! core-js/modules/es.set */
    "./node_modules/core-js/modules/es.set.js");
    /* harmony import */


    var core_js_modules_es_set__WEBPACK_IMPORTED_MODULE_79___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_set__WEBPACK_IMPORTED_MODULE_79__);
    /* harmony import */


    var core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(
    /*! core-js/modules/web.dom-collections.for-each */
    "./node_modules/core-js/modules/web.dom-collections.for-each.js");
    /* harmony import */


    var core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_80___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each__WEBPACK_IMPORTED_MODULE_80__);
    /* harmony import */


    var core_js_modules_web_dom_collections_iterator__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(
    /*! core-js/modules/web.dom-collections.iterator */
    "./node_modules/core-js/modules/web.dom-collections.iterator.js");
    /* harmony import */


    var core_js_modules_web_dom_collections_iterator__WEBPACK_IMPORTED_MODULE_81___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator__WEBPACK_IMPORTED_MODULE_81__);
    /* harmony import */


    var core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(
    /*! core-js/modules/es.promise */
    "./node_modules/core-js/modules/es.promise.js");
    /* harmony import */


    var core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_82___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise__WEBPACK_IMPORTED_MODULE_82__);
    /* harmony import */


    var core_js_modules_es_json_to_string_tag__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(
    /*! core-js/modules/es.json.to-string-tag */
    "./node_modules/core-js/modules/es.json.to-string-tag.js");
    /* harmony import */


    var core_js_modules_es_json_to_string_tag__WEBPACK_IMPORTED_MODULE_83___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_json_to_string_tag__WEBPACK_IMPORTED_MODULE_83__);
    /* harmony import */


    var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(
    /*! regenerator-runtime/runtime */
    "./node_modules/regenerator-runtime/runtime.js");
    /* harmony import */


    var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_84___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_84__);
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // ES2015 symbol capabilities
    // ES2015 function capabilities
    // ES2015 object capabilities
    // ES2015 array capabilities
    // ES2015 string capabilities

    /***/

  },

  /***/
  "./node_modules/@webcomponents/custom-elements/custom-elements.min.js":
  /*!****************************************************************************!*\
    !*** ./node_modules/@webcomponents/custom-elements/custom-elements.min.js ***!
    \****************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesWebcomponentsCustomElementsCustomElementsMinJs(module, exports) {
    (function () {
      /*
      
       Copyright (c) 2020 The Polymer Project Authors. All rights reserved.
       This code may only be used under the BSD style license found at
       http://polymer.github.io/LICENSE.txt The complete set of authors may be found
       at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
       be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
       Google as part of the polymer project is also subject to an additional IP
       rights grant found at http://polymer.github.io/PATENTS.txt
      */
      'use strict';
      /*
      Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
      This code may only be used under the BSD style license found at
      http://polymer.github.io/LICENSE.txt The complete set of authors may be found
      at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
      be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
      Google as part of the polymer project is also subject to an additional IP
      rights grant found at http://polymer.github.io/PATENTS.txt
      */

      var n = window.Document.prototype.createElement,
          p = window.Document.prototype.createElementNS,
          aa = window.Document.prototype.importNode,
          ba = window.Document.prototype.prepend,
          ca = window.Document.prototype.append,
          da = window.DocumentFragment.prototype.prepend,
          ea = window.DocumentFragment.prototype.append,
          q = window.Node.prototype.cloneNode,
          r = window.Node.prototype.appendChild,
          t = window.Node.prototype.insertBefore,
          u = window.Node.prototype.removeChild,
          v = window.Node.prototype.replaceChild,
          w = Object.getOwnPropertyDescriptor(window.Node.prototype, "textContent"),
          y = window.Element.prototype.attachShadow,
          z = Object.getOwnPropertyDescriptor(window.Element.prototype, "innerHTML"),
          A = window.Element.prototype.getAttribute,
          B = window.Element.prototype.setAttribute,
          C = window.Element.prototype.removeAttribute,
          D = window.Element.prototype.getAttributeNS,
          E = window.Element.prototype.setAttributeNS,
          F = window.Element.prototype.removeAttributeNS,
          G = window.Element.prototype.insertAdjacentElement,
          H = window.Element.prototype.insertAdjacentHTML,
          fa = window.Element.prototype.prepend,
          ha = window.Element.prototype.append,
          ia = window.Element.prototype.before,
          ja = window.Element.prototype.after,
          ka = window.Element.prototype.replaceWith,
          la = window.Element.prototype.remove,
          ma = window.HTMLElement,
          I = Object.getOwnPropertyDescriptor(window.HTMLElement.prototype, "innerHTML"),
          na = window.HTMLElement.prototype.insertAdjacentElement,
          oa = window.HTMLElement.prototype.insertAdjacentHTML;
      var pa = new Set();
      "annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" ").forEach(function (a) {
        return pa.add(a);
      });

      function qa(a) {
        var b = pa.has(a);
        a = /^[a-z][.0-9_a-z]*-[-.0-9_a-z]*$/.test(a);
        return !b && a;
      }

      var ra = document.contains ? document.contains.bind(document) : document.documentElement.contains.bind(document.documentElement);

      function J(a) {
        var b = a.isConnected;
        if (void 0 !== b) return b;
        if (ra(a)) return !0;

        for (; a && !(a.__CE_isImportDocument || a instanceof Document);) {
          a = a.parentNode || (window.ShadowRoot && a instanceof ShadowRoot ? a.host : void 0);
        }

        return !(!a || !(a.__CE_isImportDocument || a instanceof Document));
      }

      function K(a) {
        var b = a.children;
        if (b) return Array.prototype.slice.call(b);
        b = [];

        for (a = a.firstChild; a; a = a.nextSibling) {
          a.nodeType === Node.ELEMENT_NODE && b.push(a);
        }

        return b;
      }

      function L(a, b) {
        for (; b && b !== a && !b.nextSibling;) {
          b = b.parentNode;
        }

        return b && b !== a ? b.nextSibling : null;
      }

      function M(a, b, c) {
        for (var f = a; f;) {
          if (f.nodeType === Node.ELEMENT_NODE) {
            var d = f;
            b(d);
            var e = d.localName;

            if ("link" === e && "import" === d.getAttribute("rel")) {
              f = d["import"];
              void 0 === c && (c = new Set());
              if (f instanceof Node && !c.has(f)) for (c.add(f), f = f.firstChild; f; f = f.nextSibling) {
                M(f, b, c);
              }
              f = L(a, d);
              continue;
            } else if ("template" === e) {
              f = L(a, d);
              continue;
            }

            if (d = d.__CE_shadowRoot) for (d = d.firstChild; d; d = d.nextSibling) {
              M(d, b, c);
            }
          }

          f = f.firstChild ? f.firstChild : L(a, f);
        }
      }

      ;

      function N() {
        var a = !(null === O || void 0 === O || !O.noDocumentConstructionObserver),
            b = !(null === O || void 0 === O || !O.shadyDomFastWalk);
        this.h = [];
        this.a = [];
        this.f = !1;
        this.shadyDomFastWalk = b;
        this.C = !a;
      }

      function P(a, b, c, f) {
        var d = window.ShadyDom;

        if (a.shadyDomFastWalk && d && d.inUse) {
          if (b.nodeType === Node.ELEMENT_NODE && c(b), b.querySelectorAll) for (a = d.nativeMethods.querySelectorAll.call(b, "*"), b = 0; b < a.length; b++) {
            c(a[b]);
          }
        } else M(b, c, f);
      }

      function sa(a, b) {
        a.f = !0;
        a.h.push(b);
      }

      function ta(a, b) {
        a.f = !0;
        a.a.push(b);
      }

      function Q(a, b) {
        a.f && P(a, b, function (c) {
          return R(a, c);
        });
      }

      function R(a, b) {
        if (a.f && !b.__CE_patched) {
          b.__CE_patched = !0;

          for (var c = 0; c < a.h.length; c++) {
            a.h[c](b);
          }

          for (c = 0; c < a.a.length; c++) {
            a.a[c](b);
          }
        }
      }

      function S(a, b) {
        var c = [];
        P(a, b, function (d) {
          return c.push(d);
        });

        for (b = 0; b < c.length; b++) {
          var f = c[b];
          1 === f.__CE_state ? a.connectedCallback(f) : T(a, f);
        }
      }

      function U(a, b) {
        var c = [];
        P(a, b, function (d) {
          return c.push(d);
        });

        for (b = 0; b < c.length; b++) {
          var f = c[b];
          1 === f.__CE_state && a.disconnectedCallback(f);
        }
      }

      function V(a, b, c) {
        c = void 0 === c ? {} : c;

        var f = c.D,
            d = c.upgrade || function (g) {
          return T(a, g);
        },
            e = [];

        P(a, b, function (g) {
          a.f && R(a, g);

          if ("link" === g.localName && "import" === g.getAttribute("rel")) {
            var h = g["import"];
            h instanceof Node && (h.__CE_isImportDocument = !0, h.__CE_registry = document.__CE_registry);
            h && "complete" === h.readyState ? h.__CE_documentLoadHandled = !0 : g.addEventListener("load", function () {
              var k = g["import"];

              if (!k.__CE_documentLoadHandled) {
                k.__CE_documentLoadHandled = !0;
                var l = new Set();
                f && (f.forEach(function (m) {
                  return l.add(m);
                }), l["delete"](k));
                V(a, k, {
                  D: l,
                  upgrade: d
                });
              }
            });
          } else e.push(g);
        }, f);

        for (b = 0; b < e.length; b++) {
          d(e[b]);
        }
      }

      function T(a, b) {
        try {
          var c = b.ownerDocument,
              f = c.__CE_registry;
          var d = f && (c.defaultView || c.__CE_isImportDocument) ? W(f, b.localName) : void 0;

          if (d && void 0 === b.__CE_state) {
            d.constructionStack.push(b);

            try {
              try {
                if (new d.constructorFunction() !== b) throw Error("The custom element constructor did not produce the element being upgraded.");
              } finally {
                d.constructionStack.pop();
              }
            } catch (k) {
              throw b.__CE_state = 2, k;
            }

            b.__CE_state = 1;
            b.__CE_definition = d;

            if (d.attributeChangedCallback && b.hasAttributes()) {
              var e = d.observedAttributes;

              for (d = 0; d < e.length; d++) {
                var g = e[d],
                    h = b.getAttribute(g);
                null !== h && a.attributeChangedCallback(b, g, null, h, null);
              }
            }

            J(b) && a.connectedCallback(b);
          }
        } catch (k) {
          X(k);
        }
      }

      N.prototype.connectedCallback = function (a) {
        var b = a.__CE_definition;
        if (b.connectedCallback) try {
          b.connectedCallback.call(a);
        } catch (c) {
          X(c);
        }
      };

      N.prototype.disconnectedCallback = function (a) {
        var b = a.__CE_definition;
        if (b.disconnectedCallback) try {
          b.disconnectedCallback.call(a);
        } catch (c) {
          X(c);
        }
      };

      N.prototype.attributeChangedCallback = function (a, b, c, f, d) {
        var e = a.__CE_definition;
        if (e.attributeChangedCallback && -1 < e.observedAttributes.indexOf(b)) try {
          e.attributeChangedCallback.call(a, b, c, f, d);
        } catch (g) {
          X(g);
        }
      };

      function ua(a, b, c, f) {
        var d = b.__CE_registry;
        if (d && (null === f || "http://www.w3.org/1999/xhtml" === f) && (d = W(d, c))) try {
          var e = new d.constructorFunction();
          if (void 0 === e.__CE_state || void 0 === e.__CE_definition) throw Error("Failed to construct '" + c + "': The returned value was not constructed with the HTMLElement constructor.");
          if ("http://www.w3.org/1999/xhtml" !== e.namespaceURI) throw Error("Failed to construct '" + c + "': The constructed element's namespace must be the HTML namespace.");
          if (e.hasAttributes()) throw Error("Failed to construct '" + c + "': The constructed element must not have any attributes.");
          if (null !== e.firstChild) throw Error("Failed to construct '" + c + "': The constructed element must not have any children.");
          if (null !== e.parentNode) throw Error("Failed to construct '" + c + "': The constructed element must not have a parent node.");
          if (e.ownerDocument !== b) throw Error("Failed to construct '" + c + "': The constructed element's owner document is incorrect.");
          if (e.localName !== c) throw Error("Failed to construct '" + c + "': The constructed element's local name is incorrect.");
          return e;
        } catch (g) {
          return X(g), b = null === f ? n.call(b, c) : p.call(b, f, c), Object.setPrototypeOf(b, HTMLUnknownElement.prototype), b.__CE_state = 2, b.__CE_definition = void 0, R(a, b), b;
        }
        b = null === f ? n.call(b, c) : p.call(b, f, c);
        R(a, b);
        return b;
      }

      function X(a) {
        var b = a.message,
            c = a.sourceURL || a.fileName || "",
            f = a.line || a.lineNumber || 0,
            d = a.column || a.columnNumber || 0,
            e = void 0;
        void 0 === ErrorEvent.prototype.initErrorEvent ? e = new ErrorEvent("error", {
          cancelable: !0,
          message: b,
          filename: c,
          lineno: f,
          colno: d,
          error: a
        }) : (e = document.createEvent("ErrorEvent"), e.initErrorEvent("error", !1, !0, b, c, f), e.preventDefault = function () {
          Object.defineProperty(this, "defaultPrevented", {
            configurable: !0,
            get: function get() {
              return !0;
            }
          });
        });
        void 0 === e.error && Object.defineProperty(e, "error", {
          configurable: !0,
          enumerable: !0,
          get: function get() {
            return a;
          }
        });
        window.dispatchEvent(e);
        e.defaultPrevented || console.error(a);
      }

      ;

      function va() {
        var a = this;
        this.a = void 0;
        this.w = new Promise(function (b) {
          a.g = b;
        });
      }

      va.prototype.resolve = function (a) {
        if (this.a) throw Error("Already resolved.");
        this.a = a;
        this.g(a);
      };

      function wa(a) {
        var b = document;
        this.g = void 0;
        this.b = a;
        this.a = b;
        V(this.b, this.a);
        "loading" === this.a.readyState && (this.g = new MutationObserver(this.A.bind(this)), this.g.observe(this.a, {
          childList: !0,
          subtree: !0
        }));
      }

      function xa(a) {
        a.g && a.g.disconnect();
      }

      wa.prototype.A = function (a) {
        var b = this.a.readyState;
        "interactive" !== b && "complete" !== b || xa(this);

        for (b = 0; b < a.length; b++) {
          for (var c = a[b].addedNodes, f = 0; f < c.length; f++) {
            V(this.b, c[f]);
          }
        }
      };

      function Y(a) {
        this.j = new Map();
        this.l = new Map();
        this.u = new Map();
        this.o = !1;
        this.s = new Map();

        this.i = function (b) {
          return b();
        };

        this.c = !1;
        this.m = [];
        this.b = a;
        this.v = a.C ? new wa(a) : void 0;
      }

      Y.prototype.B = function (a, b) {
        var c = this;
        if (!(b instanceof Function)) throw new TypeError("Custom element constructor getters must be functions.");
        ya(this, a);
        this.j.set(a, b);
        this.m.push(a);
        this.c || (this.c = !0, this.i(function () {
          return za(c);
        }));
      };

      Y.prototype.define = function (a, b) {
        var c = this;
        if (!(b instanceof Function)) throw new TypeError("Custom element constructors must be functions.");
        ya(this, a);
        Aa(this, a, b);
        this.m.push(a);
        this.c || (this.c = !0, this.i(function () {
          return za(c);
        }));
      };

      function ya(a, b) {
        if (!qa(b)) throw new SyntaxError("The element name '" + b + "' is not valid.");
        if (W(a, b)) throw Error("A custom element with name '" + (b + "' has already been defined."));
        if (a.o) throw Error("A custom element is already being defined.");
      }

      function Aa(a, b, c) {
        a.o = !0;
        var f;

        try {
          var d = c.prototype;
          if (!(d instanceof Object)) throw new TypeError("The custom element constructor's prototype is not an object.");

          var e = function e(m) {
            var x = d[m];
            if (void 0 !== x && !(x instanceof Function)) throw Error("The '" + m + "' callback must be a function.");
            return x;
          };

          var g = e("connectedCallback");
          var h = e("disconnectedCallback");
          var k = e("adoptedCallback");
          var l = (f = e("attributeChangedCallback")) && c.observedAttributes || [];
        } catch (m) {
          throw m;
        } finally {
          a.o = !1;
        }

        c = {
          localName: b,
          constructorFunction: c,
          connectedCallback: g,
          disconnectedCallback: h,
          adoptedCallback: k,
          attributeChangedCallback: f,
          observedAttributes: l,
          constructionStack: []
        };
        a.l.set(b, c);
        a.u.set(c.constructorFunction, c);
        return c;
      }

      Y.prototype.upgrade = function (a) {
        V(this.b, a);
      };

      function za(a) {
        if (!1 !== a.c) {
          a.c = !1;

          for (var b = [], c = a.m, f = new Map(), d = 0; d < c.length; d++) {
            f.set(c[d], []);
          }

          V(a.b, document, {
            upgrade: function upgrade(k) {
              if (void 0 === k.__CE_state) {
                var l = k.localName,
                    m = f.get(l);
                m ? m.push(k) : a.l.has(l) && b.push(k);
              }
            }
          });

          for (d = 0; d < b.length; d++) {
            T(a.b, b[d]);
          }

          for (d = 0; d < c.length; d++) {
            for (var e = c[d], g = f.get(e), h = 0; h < g.length; h++) {
              T(a.b, g[h]);
            }

            (e = a.s.get(e)) && e.resolve(void 0);
          }

          c.length = 0;
        }
      }

      Y.prototype.get = function (a) {
        if (a = W(this, a)) return a.constructorFunction;
      };

      Y.prototype.whenDefined = function (a) {
        if (!qa(a)) return Promise.reject(new SyntaxError("'" + a + "' is not a valid custom element name."));
        var b = this.s.get(a);
        if (b) return b.w;
        b = new va();
        this.s.set(a, b);
        var c = this.l.has(a) || this.j.has(a);
        a = -1 === this.m.indexOf(a);
        c && a && b.resolve(void 0);
        return b.w;
      };

      Y.prototype.polyfillWrapFlushCallback = function (a) {
        this.v && xa(this.v);
        var b = this.i;

        this.i = function (c) {
          return a(function () {
            return b(c);
          });
        };
      };

      function W(a, b) {
        var c = a.l.get(b);
        if (c) return c;

        if (c = a.j.get(b)) {
          a.j["delete"](b);

          try {
            return Aa(a, b, c());
          } catch (f) {
            X(f);
          }
        }
      }

      window.CustomElementRegistry = Y;
      Y.prototype.define = Y.prototype.define;
      Y.prototype.upgrade = Y.prototype.upgrade;
      Y.prototype.get = Y.prototype.get;
      Y.prototype.whenDefined = Y.prototype.whenDefined;
      Y.prototype.polyfillDefineLazy = Y.prototype.B;
      Y.prototype.polyfillWrapFlushCallback = Y.prototype.polyfillWrapFlushCallback;

      function Z(a, b, c) {
        function f(d) {
          return function (e) {
            for (var g = [], h = 0; h < arguments.length; ++h) {
              g[h] = arguments[h];
            }

            h = [];

            for (var k = [], l = 0; l < g.length; l++) {
              var m = g[l];
              m instanceof Element && J(m) && k.push(m);
              if (m instanceof DocumentFragment) for (m = m.firstChild; m; m = m.nextSibling) {
                h.push(m);
              } else h.push(m);
            }

            d.apply(this, g);

            for (g = 0; g < k.length; g++) {
              U(a, k[g]);
            }

            if (J(this)) for (g = 0; g < h.length; g++) {
              k = h[g], k instanceof Element && S(a, k);
            }
          };
        }

        void 0 !== c.prepend && (b.prepend = f(c.prepend));
        void 0 !== c.append && (b.append = f(c.append));
      }

      ;

      function Ba(a) {
        Document.prototype.createElement = function (b) {
          return ua(a, this, b, null);
        };

        Document.prototype.importNode = function (b, c) {
          b = aa.call(this, b, !!c);
          this.__CE_registry ? V(a, b) : Q(a, b);
          return b;
        };

        Document.prototype.createElementNS = function (b, c) {
          return ua(a, this, c, b);
        };

        Z(a, Document.prototype, {
          prepend: ba,
          append: ca
        });
      }

      ;

      function Ca(a) {
        function b(f) {
          return function (d) {
            for (var e = [], g = 0; g < arguments.length; ++g) {
              e[g] = arguments[g];
            }

            g = [];

            for (var h = [], k = 0; k < e.length; k++) {
              var l = e[k];
              l instanceof Element && J(l) && h.push(l);
              if (l instanceof DocumentFragment) for (l = l.firstChild; l; l = l.nextSibling) {
                g.push(l);
              } else g.push(l);
            }

            f.apply(this, e);

            for (e = 0; e < h.length; e++) {
              U(a, h[e]);
            }

            if (J(this)) for (e = 0; e < g.length; e++) {
              h = g[e], h instanceof Element && S(a, h);
            }
          };
        }

        var c = Element.prototype;
        void 0 !== ia && (c.before = b(ia));
        void 0 !== ja && (c.after = b(ja));
        void 0 !== ka && (c.replaceWith = function (f) {
          for (var d = [], e = 0; e < arguments.length; ++e) {
            d[e] = arguments[e];
          }

          e = [];

          for (var g = [], h = 0; h < d.length; h++) {
            var k = d[h];
            k instanceof Element && J(k) && g.push(k);
            if (k instanceof DocumentFragment) for (k = k.firstChild; k; k = k.nextSibling) {
              e.push(k);
            } else e.push(k);
          }

          h = J(this);
          ka.apply(this, d);

          for (d = 0; d < g.length; d++) {
            U(a, g[d]);
          }

          if (h) for (U(a, this), d = 0; d < e.length; d++) {
            g = e[d], g instanceof Element && S(a, g);
          }
        });
        void 0 !== la && (c.remove = function () {
          var f = J(this);
          la.call(this);
          f && U(a, this);
        });
      }

      ;

      function Da(a) {
        function b(d, e) {
          Object.defineProperty(d, "innerHTML", {
            enumerable: e.enumerable,
            configurable: !0,
            get: e.get,
            set: function set(g) {
              var h = this,
                  k = void 0;
              J(this) && (k = [], P(a, this, function (x) {
                x !== h && k.push(x);
              }));
              e.set.call(this, g);
              if (k) for (var l = 0; l < k.length; l++) {
                var m = k[l];
                1 === m.__CE_state && a.disconnectedCallback(m);
              }
              this.ownerDocument.__CE_registry ? V(a, this) : Q(a, this);
              return g;
            }
          });
        }

        function c(d, e) {
          d.insertAdjacentElement = function (g, h) {
            var k = J(h);
            g = e.call(this, g, h);
            k && U(a, h);
            J(g) && S(a, h);
            return g;
          };
        }

        function f(d, e) {
          function g(h, k) {
            for (var l = []; h !== k; h = h.nextSibling) {
              l.push(h);
            }

            for (k = 0; k < l.length; k++) {
              V(a, l[k]);
            }
          }

          d.insertAdjacentHTML = function (h, k) {
            h = h.toLowerCase();

            if ("beforebegin" === h) {
              var l = this.previousSibling;
              e.call(this, h, k);
              g(l || this.parentNode.firstChild, this);
            } else if ("afterbegin" === h) l = this.firstChild, e.call(this, h, k), g(this.firstChild, l);else if ("beforeend" === h) l = this.lastChild, e.call(this, h, k), g(l || this.firstChild, null);else if ("afterend" === h) l = this.nextSibling, e.call(this, h, k), g(this.nextSibling, l);else throw new SyntaxError("The value provided (" + String(h) + ") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");
          };
        }

        y && (Element.prototype.attachShadow = function (d) {
          d = y.call(this, d);

          if (a.f && !d.__CE_patched) {
            d.__CE_patched = !0;

            for (var e = 0; e < a.h.length; e++) {
              a.h[e](d);
            }
          }

          return this.__CE_shadowRoot = d;
        });
        z && z.get ? b(Element.prototype, z) : I && I.get ? b(HTMLElement.prototype, I) : ta(a, function (d) {
          b(d, {
            enumerable: !0,
            configurable: !0,
            get: function get() {
              return q.call(this, !0).innerHTML;
            },
            set: function set(e) {
              var g = "template" === this.localName,
                  h = g ? this.content : this,
                  k = p.call(document, this.namespaceURI, this.localName);

              for (k.innerHTML = e; 0 < h.childNodes.length;) {
                u.call(h, h.childNodes[0]);
              }

              for (e = g ? k.content : k; 0 < e.childNodes.length;) {
                r.call(h, e.childNodes[0]);
              }
            }
          });
        });

        Element.prototype.setAttribute = function (d, e) {
          if (1 !== this.__CE_state) return B.call(this, d, e);
          var g = A.call(this, d);
          B.call(this, d, e);
          e = A.call(this, d);
          a.attributeChangedCallback(this, d, g, e, null);
        };

        Element.prototype.setAttributeNS = function (d, e, g) {
          if (1 !== this.__CE_state) return E.call(this, d, e, g);
          var h = D.call(this, d, e);
          E.call(this, d, e, g);
          g = D.call(this, d, e);
          a.attributeChangedCallback(this, e, h, g, d);
        };

        Element.prototype.removeAttribute = function (d) {
          if (1 !== this.__CE_state) return C.call(this, d);
          var e = A.call(this, d);
          C.call(this, d);
          null !== e && a.attributeChangedCallback(this, d, e, null, null);
        };

        Element.prototype.removeAttributeNS = function (d, e) {
          if (1 !== this.__CE_state) return F.call(this, d, e);
          var g = D.call(this, d, e);
          F.call(this, d, e);
          var h = D.call(this, d, e);
          g !== h && a.attributeChangedCallback(this, e, g, h, d);
        };

        na ? c(HTMLElement.prototype, na) : G && c(Element.prototype, G);
        oa ? f(HTMLElement.prototype, oa) : H && f(Element.prototype, H);
        Z(a, Element.prototype, {
          prepend: fa,
          append: ha
        });
        Ca(a);
      }

      ;
      var Ea = {};

      function Fa(a) {
        function b() {
          var c = this.constructor;

          var f = document.__CE_registry.u.get(c);

          if (!f) throw Error("Failed to construct a custom element: The constructor was not registered with `customElements`.");
          var d = f.constructionStack;
          if (0 === d.length) return d = n.call(document, f.localName), Object.setPrototypeOf(d, c.prototype), d.__CE_state = 1, d.__CE_definition = f, R(a, d), d;
          var e = d.length - 1,
              g = d[e];
          if (g === Ea) throw Error("Failed to construct '" + f.localName + "': This element was already constructed.");
          d[e] = Ea;
          Object.setPrototypeOf(g, c.prototype);
          R(a, g);
          return g;
        }

        b.prototype = ma.prototype;
        Object.defineProperty(HTMLElement.prototype, "constructor", {
          writable: !0,
          configurable: !0,
          enumerable: !1,
          value: b
        });
        window.HTMLElement = b;
      }

      ;

      function Ga(a) {
        function b(c, f) {
          Object.defineProperty(c, "textContent", {
            enumerable: f.enumerable,
            configurable: !0,
            get: f.get,
            set: function set(d) {
              if (this.nodeType === Node.TEXT_NODE) f.set.call(this, d);else {
                var e = void 0;

                if (this.firstChild) {
                  var g = this.childNodes,
                      h = g.length;

                  if (0 < h && J(this)) {
                    e = Array(h);

                    for (var k = 0; k < h; k++) {
                      e[k] = g[k];
                    }
                  }
                }

                f.set.call(this, d);
                if (e) for (d = 0; d < e.length; d++) {
                  U(a, e[d]);
                }
              }
            }
          });
        }

        Node.prototype.insertBefore = function (c, f) {
          if (c instanceof DocumentFragment) {
            var d = K(c);
            c = t.call(this, c, f);
            if (J(this)) for (f = 0; f < d.length; f++) {
              S(a, d[f]);
            }
            return c;
          }

          d = c instanceof Element && J(c);
          f = t.call(this, c, f);
          d && U(a, c);
          J(this) && S(a, c);
          return f;
        };

        Node.prototype.appendChild = function (c) {
          if (c instanceof DocumentFragment) {
            var f = K(c);
            c = r.call(this, c);
            if (J(this)) for (var d = 0; d < f.length; d++) {
              S(a, f[d]);
            }
            return c;
          }

          f = c instanceof Element && J(c);
          d = r.call(this, c);
          f && U(a, c);
          J(this) && S(a, c);
          return d;
        };

        Node.prototype.cloneNode = function (c) {
          c = q.call(this, !!c);
          this.ownerDocument.__CE_registry ? V(a, c) : Q(a, c);
          return c;
        };

        Node.prototype.removeChild = function (c) {
          var f = c instanceof Element && J(c),
              d = u.call(this, c);
          f && U(a, c);
          return d;
        };

        Node.prototype.replaceChild = function (c, f) {
          if (c instanceof DocumentFragment) {
            var d = K(c);
            c = v.call(this, c, f);
            if (J(this)) for (U(a, f), f = 0; f < d.length; f++) {
              S(a, d[f]);
            }
            return c;
          }

          d = c instanceof Element && J(c);
          var e = v.call(this, c, f),
              g = J(this);
          g && U(a, f);
          d && U(a, c);
          g && S(a, c);
          return e;
        };

        w && w.get ? b(Node.prototype, w) : sa(a, function (c) {
          b(c, {
            enumerable: !0,
            configurable: !0,
            get: function get() {
              for (var f = [], d = this.firstChild; d; d = d.nextSibling) {
                d.nodeType !== Node.COMMENT_NODE && f.push(d.textContent);
              }

              return f.join("");
            },
            set: function set(f) {
              for (; this.firstChild;) {
                u.call(this, this.firstChild);
              }

              null != f && "" !== f && r.call(this, document.createTextNode(f));
            }
          });
        });
      }

      ;
      var O = window.customElements;

      function Ha() {
        var a = new N();
        Fa(a);
        Ba(a);
        Z(a, DocumentFragment.prototype, {
          prepend: da,
          append: ea
        });
        Ga(a);
        Da(a);
        a = new Y(a);
        document.__CE_registry = a;
        Object.defineProperty(window, "customElements", {
          configurable: !0,
          enumerable: !0,
          value: a
        });
      }

      O && !O.forcePolyfill && "function" == typeof O.define && "function" == typeof O.get || Ha();
      window.__CE_installPolyfill = Ha;
    }).call(self); //# sourceMappingURL=custom-elements.min.js.map

    /***/
  },

  /***/
  "./node_modules/core-js/es/date/index.js":
  /*!***********************************************!*\
    !*** ./node_modules/core-js/es/date/index.js ***!
    \***********************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsEsDateIndexJs(module, exports, __webpack_require__) {
    __webpack_require__(
    /*! ../../modules/es.date.now */
    "./node_modules/core-js/modules/es.date.now.js");

    __webpack_require__(
    /*! ../../modules/es.date.to-json */
    "./node_modules/core-js/modules/es.date.to-json.js");

    __webpack_require__(
    /*! ../../modules/es.date.to-iso-string */
    "./node_modules/core-js/modules/es.date.to-iso-string.js");

    __webpack_require__(
    /*! ../../modules/es.date.to-string */
    "./node_modules/core-js/modules/es.date.to-string.js");

    __webpack_require__(
    /*! ../../modules/es.date.to-primitive */
    "./node_modules/core-js/modules/es.date.to-primitive.js");

    var path = __webpack_require__(
    /*! ../../internals/path */
    "./node_modules/core-js/internals/path.js");

    module.exports = path.Date;
    /***/
  },

  /***/
  "./node_modules/core-js/es/math/index.js":
  /*!***********************************************!*\
    !*** ./node_modules/core-js/es/math/index.js ***!
    \***********************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsEsMathIndexJs(module, exports, __webpack_require__) {
    __webpack_require__(
    /*! ../../modules/es.math.acosh */
    "./node_modules/core-js/modules/es.math.acosh.js");

    __webpack_require__(
    /*! ../../modules/es.math.asinh */
    "./node_modules/core-js/modules/es.math.asinh.js");

    __webpack_require__(
    /*! ../../modules/es.math.atanh */
    "./node_modules/core-js/modules/es.math.atanh.js");

    __webpack_require__(
    /*! ../../modules/es.math.cbrt */
    "./node_modules/core-js/modules/es.math.cbrt.js");

    __webpack_require__(
    /*! ../../modules/es.math.clz32 */
    "./node_modules/core-js/modules/es.math.clz32.js");

    __webpack_require__(
    /*! ../../modules/es.math.cosh */
    "./node_modules/core-js/modules/es.math.cosh.js");

    __webpack_require__(
    /*! ../../modules/es.math.expm1 */
    "./node_modules/core-js/modules/es.math.expm1.js");

    __webpack_require__(
    /*! ../../modules/es.math.fround */
    "./node_modules/core-js/modules/es.math.fround.js");

    __webpack_require__(
    /*! ../../modules/es.math.hypot */
    "./node_modules/core-js/modules/es.math.hypot.js");

    __webpack_require__(
    /*! ../../modules/es.math.imul */
    "./node_modules/core-js/modules/es.math.imul.js");

    __webpack_require__(
    /*! ../../modules/es.math.log10 */
    "./node_modules/core-js/modules/es.math.log10.js");

    __webpack_require__(
    /*! ../../modules/es.math.log1p */
    "./node_modules/core-js/modules/es.math.log1p.js");

    __webpack_require__(
    /*! ../../modules/es.math.log2 */
    "./node_modules/core-js/modules/es.math.log2.js");

    __webpack_require__(
    /*! ../../modules/es.math.sign */
    "./node_modules/core-js/modules/es.math.sign.js");

    __webpack_require__(
    /*! ../../modules/es.math.sinh */
    "./node_modules/core-js/modules/es.math.sinh.js");

    __webpack_require__(
    /*! ../../modules/es.math.tanh */
    "./node_modules/core-js/modules/es.math.tanh.js");

    __webpack_require__(
    /*! ../../modules/es.math.to-string-tag */
    "./node_modules/core-js/modules/es.math.to-string-tag.js");

    __webpack_require__(
    /*! ../../modules/es.math.trunc */
    "./node_modules/core-js/modules/es.math.trunc.js");

    var path = __webpack_require__(
    /*! ../../internals/path */
    "./node_modules/core-js/internals/path.js");

    module.exports = path.Math;
    /***/
  },

  /***/
  "./node_modules/core-js/es/number/index.js":
  /*!*************************************************!*\
    !*** ./node_modules/core-js/es/number/index.js ***!
    \*************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsEsNumberIndexJs(module, exports, __webpack_require__) {
    __webpack_require__(
    /*! ../../modules/es.number.constructor */
    "./node_modules/core-js/modules/es.number.constructor.js");

    __webpack_require__(
    /*! ../../modules/es.number.epsilon */
    "./node_modules/core-js/modules/es.number.epsilon.js");

    __webpack_require__(
    /*! ../../modules/es.number.is-finite */
    "./node_modules/core-js/modules/es.number.is-finite.js");

    __webpack_require__(
    /*! ../../modules/es.number.is-integer */
    "./node_modules/core-js/modules/es.number.is-integer.js");

    __webpack_require__(
    /*! ../../modules/es.number.is-nan */
    "./node_modules/core-js/modules/es.number.is-nan.js");

    __webpack_require__(
    /*! ../../modules/es.number.is-safe-integer */
    "./node_modules/core-js/modules/es.number.is-safe-integer.js");

    __webpack_require__(
    /*! ../../modules/es.number.max-safe-integer */
    "./node_modules/core-js/modules/es.number.max-safe-integer.js");

    __webpack_require__(
    /*! ../../modules/es.number.min-safe-integer */
    "./node_modules/core-js/modules/es.number.min-safe-integer.js");

    __webpack_require__(
    /*! ../../modules/es.number.parse-float */
    "./node_modules/core-js/modules/es.number.parse-float.js");

    __webpack_require__(
    /*! ../../modules/es.number.parse-int */
    "./node_modules/core-js/modules/es.number.parse-int.js");

    __webpack_require__(
    /*! ../../modules/es.number.to-fixed */
    "./node_modules/core-js/modules/es.number.to-fixed.js");

    __webpack_require__(
    /*! ../../modules/es.number.to-precision */
    "./node_modules/core-js/modules/es.number.to-precision.js");

    var path = __webpack_require__(
    /*! ../../internals/path */
    "./node_modules/core-js/internals/path.js");

    module.exports = path.Number;
    /***/
  },

  /***/
  "./node_modules/core-js/es/symbol/index.js":
  /*!*************************************************!*\
    !*** ./node_modules/core-js/es/symbol/index.js ***!
    \*************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsEsSymbolIndexJs(module, exports, __webpack_require__) {
    __webpack_require__(
    /*! ../../modules/es.array.concat */
    "./node_modules/core-js/modules/es.array.concat.js");

    __webpack_require__(
    /*! ../../modules/es.object.to-string */
    "./node_modules/core-js/modules/es.object.to-string.js");

    __webpack_require__(
    /*! ../../modules/es.symbol */
    "./node_modules/core-js/modules/es.symbol.js");

    __webpack_require__(
    /*! ../../modules/es.symbol.async-iterator */
    "./node_modules/core-js/modules/es.symbol.async-iterator.js");

    __webpack_require__(
    /*! ../../modules/es.symbol.description */
    "./node_modules/core-js/modules/es.symbol.description.js");

    __webpack_require__(
    /*! ../../modules/es.symbol.has-instance */
    "./node_modules/core-js/modules/es.symbol.has-instance.js");

    __webpack_require__(
    /*! ../../modules/es.symbol.is-concat-spreadable */
    "./node_modules/core-js/modules/es.symbol.is-concat-spreadable.js");

    __webpack_require__(
    /*! ../../modules/es.symbol.iterator */
    "./node_modules/core-js/modules/es.symbol.iterator.js");

    __webpack_require__(
    /*! ../../modules/es.symbol.match */
    "./node_modules/core-js/modules/es.symbol.match.js");

    __webpack_require__(
    /*! ../../modules/es.symbol.match-all */
    "./node_modules/core-js/modules/es.symbol.match-all.js");

    __webpack_require__(
    /*! ../../modules/es.symbol.replace */
    "./node_modules/core-js/modules/es.symbol.replace.js");

    __webpack_require__(
    /*! ../../modules/es.symbol.search */
    "./node_modules/core-js/modules/es.symbol.search.js");

    __webpack_require__(
    /*! ../../modules/es.symbol.species */
    "./node_modules/core-js/modules/es.symbol.species.js");

    __webpack_require__(
    /*! ../../modules/es.symbol.split */
    "./node_modules/core-js/modules/es.symbol.split.js");

    __webpack_require__(
    /*! ../../modules/es.symbol.to-primitive */
    "./node_modules/core-js/modules/es.symbol.to-primitive.js");

    __webpack_require__(
    /*! ../../modules/es.symbol.to-string-tag */
    "./node_modules/core-js/modules/es.symbol.to-string-tag.js");

    __webpack_require__(
    /*! ../../modules/es.symbol.unscopables */
    "./node_modules/core-js/modules/es.symbol.unscopables.js");

    __webpack_require__(
    /*! ../../modules/es.math.to-string-tag */
    "./node_modules/core-js/modules/es.math.to-string-tag.js");

    __webpack_require__(
    /*! ../../modules/es.json.to-string-tag */
    "./node_modules/core-js/modules/es.json.to-string-tag.js");

    var path = __webpack_require__(
    /*! ../../internals/path */
    "./node_modules/core-js/internals/path.js");

    module.exports = path.Symbol;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/a-function.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/internals/a-function.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsAFunctionJs(module, exports) {
    module.exports = function (it) {
      if (typeof it != 'function') {
        throw TypeError(String(it) + ' is not a function');
      }

      return it;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/a-possible-prototype.js":
  /*!****************************************************************!*\
    !*** ./node_modules/core-js/internals/a-possible-prototype.js ***!
    \****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsAPossiblePrototypeJs(module, exports, __webpack_require__) {
    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    module.exports = function (it) {
      if (!isObject(it) && it !== null) {
        throw TypeError("Can't set " + String(it) + ' as a prototype');
      }

      return it;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/add-to-unscopables.js":
  /*!**************************************************************!*\
    !*** ./node_modules/core-js/internals/add-to-unscopables.js ***!
    \**************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsAddToUnscopablesJs(module, exports, __webpack_require__) {
    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var create = __webpack_require__(
    /*! ../internals/object-create */
    "./node_modules/core-js/internals/object-create.js");

    var definePropertyModule = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js");

    var UNSCOPABLES = wellKnownSymbol('unscopables');
    var ArrayPrototype = Array.prototype; // Array.prototype[@@unscopables]
    // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

    if (ArrayPrototype[UNSCOPABLES] == undefined) {
      definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
        configurable: true,
        value: create(null)
      });
    } // add a key to Array.prototype[@@unscopables]


    module.exports = function (key) {
      ArrayPrototype[UNSCOPABLES][key] = true;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/advance-string-index.js":
  /*!****************************************************************!*\
    !*** ./node_modules/core-js/internals/advance-string-index.js ***!
    \****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsAdvanceStringIndexJs(module, exports, __webpack_require__) {
    "use strict";

    var charAt = __webpack_require__(
    /*! ../internals/string-multibyte */
    "./node_modules/core-js/internals/string-multibyte.js").charAt; // `AdvanceStringIndex` abstract operation
    // https://tc39.github.io/ecma262/#sec-advancestringindex


    module.exports = function (S, index, unicode) {
      return index + (unicode ? charAt(S, index).length : 1);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/an-instance.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/internals/an-instance.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsAnInstanceJs(module, exports) {
    module.exports = function (it, Constructor, name) {
      if (!(it instanceof Constructor)) {
        throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
      }

      return it;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/an-object.js":
  /*!*****************************************************!*\
    !*** ./node_modules/core-js/internals/an-object.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsAnObjectJs(module, exports, __webpack_require__) {
    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    module.exports = function (it) {
      if (!isObject(it)) {
        throw TypeError(String(it) + ' is not an object');
      }

      return it;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/array-copy-within.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/internals/array-copy-within.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsArrayCopyWithinJs(module, exports, __webpack_require__) {
    "use strict";

    var toObject = __webpack_require__(
    /*! ../internals/to-object */
    "./node_modules/core-js/internals/to-object.js");

    var toAbsoluteIndex = __webpack_require__(
    /*! ../internals/to-absolute-index */
    "./node_modules/core-js/internals/to-absolute-index.js");

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js");

    var min = Math.min; // `Array.prototype.copyWithin` method implementation
    // https://tc39.github.io/ecma262/#sec-array.prototype.copywithin

    module.exports = [].copyWithin || function copyWithin(target
    /* = 0 */
    , start
    /* = 0, end = @length */
    ) {
      var O = toObject(this);
      var len = toLength(O.length);
      var to = toAbsoluteIndex(target, len);
      var from = toAbsoluteIndex(start, len);
      var end = arguments.length > 2 ? arguments[2] : undefined;
      var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
      var inc = 1;

      if (from < to && to < from + count) {
        inc = -1;
        from += count - 1;
        to += count - 1;
      }

      while (count-- > 0) {
        if (from in O) O[to] = O[from];else delete O[to];
        to += inc;
        from += inc;
      }

      return O;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/array-fill.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/internals/array-fill.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsArrayFillJs(module, exports, __webpack_require__) {
    "use strict";

    var toObject = __webpack_require__(
    /*! ../internals/to-object */
    "./node_modules/core-js/internals/to-object.js");

    var toAbsoluteIndex = __webpack_require__(
    /*! ../internals/to-absolute-index */
    "./node_modules/core-js/internals/to-absolute-index.js");

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js"); // `Array.prototype.fill` method implementation
    // https://tc39.github.io/ecma262/#sec-array.prototype.fill


    module.exports = function fill(value
    /* , start = 0, end = @length */
    ) {
      var O = toObject(this);
      var length = toLength(O.length);
      var argumentsLength = arguments.length;
      var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
      var end = argumentsLength > 2 ? arguments[2] : undefined;
      var endPos = end === undefined ? length : toAbsoluteIndex(end, length);

      while (endPos > index) {
        O[index++] = value;
      }

      return O;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/array-for-each.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/internals/array-for-each.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsArrayForEachJs(module, exports, __webpack_require__) {
    "use strict";

    var $forEach = __webpack_require__(
    /*! ../internals/array-iteration */
    "./node_modules/core-js/internals/array-iteration.js").forEach;

    var arrayMethodIsStrict = __webpack_require__(
    /*! ../internals/array-method-is-strict */
    "./node_modules/core-js/internals/array-method-is-strict.js");

    var arrayMethodUsesToLength = __webpack_require__(
    /*! ../internals/array-method-uses-to-length */
    "./node_modules/core-js/internals/array-method-uses-to-length.js");

    var STRICT_METHOD = arrayMethodIsStrict('forEach');
    var USES_TO_LENGTH = arrayMethodUsesToLength('forEach'); // `Array.prototype.forEach` method implementation
    // https://tc39.github.io/ecma262/#sec-array.prototype.foreach

    module.exports = !STRICT_METHOD || !USES_TO_LENGTH ? function forEach(callbackfn
    /* , thisArg */
    ) {
      return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    } : [].forEach;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/array-from.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/internals/array-from.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsArrayFromJs(module, exports, __webpack_require__) {
    "use strict";

    var bind = __webpack_require__(
    /*! ../internals/function-bind-context */
    "./node_modules/core-js/internals/function-bind-context.js");

    var toObject = __webpack_require__(
    /*! ../internals/to-object */
    "./node_modules/core-js/internals/to-object.js");

    var callWithSafeIterationClosing = __webpack_require__(
    /*! ../internals/call-with-safe-iteration-closing */
    "./node_modules/core-js/internals/call-with-safe-iteration-closing.js");

    var isArrayIteratorMethod = __webpack_require__(
    /*! ../internals/is-array-iterator-method */
    "./node_modules/core-js/internals/is-array-iterator-method.js");

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js");

    var createProperty = __webpack_require__(
    /*! ../internals/create-property */
    "./node_modules/core-js/internals/create-property.js");

    var getIteratorMethod = __webpack_require__(
    /*! ../internals/get-iterator-method */
    "./node_modules/core-js/internals/get-iterator-method.js"); // `Array.from` method implementation
    // https://tc39.github.io/ecma262/#sec-array.from


    module.exports = function from(arrayLike
    /* , mapfn = undefined, thisArg = undefined */
    ) {
      var O = toObject(arrayLike);
      var C = typeof this == 'function' ? this : Array;
      var argumentsLength = arguments.length;
      var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
      var mapping = mapfn !== undefined;
      var iteratorMethod = getIteratorMethod(O);
      var index = 0;
      var length, result, step, iterator, next, value;
      if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2); // if the target is not iterable or it's an array with the default iterator - use a simple case

      if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
        iterator = iteratorMethod.call(O);
        next = iterator.next;
        result = new C();

        for (; !(step = next.call(iterator)).done; index++) {
          value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
          createProperty(result, index, value);
        }
      } else {
        length = toLength(O.length);
        result = new C(length);

        for (; length > index; index++) {
          value = mapping ? mapfn(O[index], index) : O[index];
          createProperty(result, index, value);
        }
      }

      result.length = index;
      return result;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/array-includes.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/internals/array-includes.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsArrayIncludesJs(module, exports, __webpack_require__) {
    var toIndexedObject = __webpack_require__(
    /*! ../internals/to-indexed-object */
    "./node_modules/core-js/internals/to-indexed-object.js");

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js");

    var toAbsoluteIndex = __webpack_require__(
    /*! ../internals/to-absolute-index */
    "./node_modules/core-js/internals/to-absolute-index.js"); // `Array.prototype.{ indexOf, includes }` methods implementation


    var createMethod = function createMethod(IS_INCLUDES) {
      return function ($this, el, fromIndex) {
        var O = toIndexedObject($this);
        var length = toLength(O.length);
        var index = toAbsoluteIndex(fromIndex, length);
        var value; // Array#includes uses SameValueZero equality algorithm
        // eslint-disable-next-line no-self-compare

        if (IS_INCLUDES && el != el) while (length > index) {
          value = O[index++]; // eslint-disable-next-line no-self-compare

          if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
        } else for (; length > index; index++) {
          if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
        }
        return !IS_INCLUDES && -1;
      };
    };

    module.exports = {
      // `Array.prototype.includes` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.includes
      includes: createMethod(true),
      // `Array.prototype.indexOf` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
      indexOf: createMethod(false)
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/array-iteration.js":
  /*!***********************************************************!*\
    !*** ./node_modules/core-js/internals/array-iteration.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsArrayIterationJs(module, exports, __webpack_require__) {
    var bind = __webpack_require__(
    /*! ../internals/function-bind-context */
    "./node_modules/core-js/internals/function-bind-context.js");

    var IndexedObject = __webpack_require__(
    /*! ../internals/indexed-object */
    "./node_modules/core-js/internals/indexed-object.js");

    var toObject = __webpack_require__(
    /*! ../internals/to-object */
    "./node_modules/core-js/internals/to-object.js");

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js");

    var arraySpeciesCreate = __webpack_require__(
    /*! ../internals/array-species-create */
    "./node_modules/core-js/internals/array-species-create.js");

    var push = [].push; // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation

    var createMethod = function createMethod(TYPE) {
      var IS_MAP = TYPE == 1;
      var IS_FILTER = TYPE == 2;
      var IS_SOME = TYPE == 3;
      var IS_EVERY = TYPE == 4;
      var IS_FIND_INDEX = TYPE == 6;
      var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
      return function ($this, callbackfn, that, specificCreate) {
        var O = toObject($this);
        var self = IndexedObject(O);
        var boundFunction = bind(callbackfn, that, 3);
        var length = toLength(self.length);
        var index = 0;
        var create = specificCreate || arraySpeciesCreate;
        var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
        var value, result;

        for (; length > index; index++) {
          if (NO_HOLES || index in self) {
            value = self[index];
            result = boundFunction(value, index, O);

            if (TYPE) {
              if (IS_MAP) target[index] = result; // map
              else if (result) switch (TYPE) {
                  case 3:
                    return true;
                  // some

                  case 5:
                    return value;
                  // find

                  case 6:
                    return index;
                  // findIndex

                  case 2:
                    push.call(target, value);
                  // filter
                } else if (IS_EVERY) return false; // every
            }
          }
        }

        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
      };
    };

    module.exports = {
      // `Array.prototype.forEach` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
      forEach: createMethod(0),
      // `Array.prototype.map` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.map
      map: createMethod(1),
      // `Array.prototype.filter` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.filter
      filter: createMethod(2),
      // `Array.prototype.some` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.some
      some: createMethod(3),
      // `Array.prototype.every` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.every
      every: createMethod(4),
      // `Array.prototype.find` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.find
      find: createMethod(5),
      // `Array.prototype.findIndex` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
      findIndex: createMethod(6)
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/array-last-index-of.js":
  /*!***************************************************************!*\
    !*** ./node_modules/core-js/internals/array-last-index-of.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsArrayLastIndexOfJs(module, exports, __webpack_require__) {
    "use strict";

    var toIndexedObject = __webpack_require__(
    /*! ../internals/to-indexed-object */
    "./node_modules/core-js/internals/to-indexed-object.js");

    var toInteger = __webpack_require__(
    /*! ../internals/to-integer */
    "./node_modules/core-js/internals/to-integer.js");

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js");

    var arrayMethodIsStrict = __webpack_require__(
    /*! ../internals/array-method-is-strict */
    "./node_modules/core-js/internals/array-method-is-strict.js");

    var arrayMethodUsesToLength = __webpack_require__(
    /*! ../internals/array-method-uses-to-length */
    "./node_modules/core-js/internals/array-method-uses-to-length.js");

    var min = Math.min;
    var nativeLastIndexOf = [].lastIndexOf;
    var NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
    var STRICT_METHOD = arrayMethodIsStrict('lastIndexOf'); // For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method

    var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', {
      ACCESSORS: true,
      1: 0
    });
    var FORCED = NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH; // `Array.prototype.lastIndexOf` method implementation
    // https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof

    module.exports = FORCED ? function lastIndexOf(searchElement
    /* , fromIndex = @[*-1] */
    ) {
      // convert -0 to +0
      if (NEGATIVE_ZERO) return nativeLastIndexOf.apply(this, arguments) || 0;
      var O = toIndexedObject(this);
      var length = toLength(O.length);
      var index = length - 1;
      if (arguments.length > 1) index = min(index, toInteger(arguments[1]));
      if (index < 0) index = length + index;

      for (; index >= 0; index--) {
        if (index in O && O[index] === searchElement) return index || 0;
      }

      return -1;
    } : nativeLastIndexOf;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/array-method-has-species-support.js":
  /*!****************************************************************************!*\
    !*** ./node_modules/core-js/internals/array-method-has-species-support.js ***!
    \****************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsArrayMethodHasSpeciesSupportJs(module, exports, __webpack_require__) {
    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var V8_VERSION = __webpack_require__(
    /*! ../internals/engine-v8-version */
    "./node_modules/core-js/internals/engine-v8-version.js");

    var SPECIES = wellKnownSymbol('species');

    module.exports = function (METHOD_NAME) {
      // We can't use this feature detection in V8 since it causes
      // deoptimization and serious performance degradation
      // https://github.com/zloirock/core-js/issues/677
      return V8_VERSION >= 51 || !fails(function () {
        var array = [];
        var constructor = array.constructor = {};

        constructor[SPECIES] = function () {
          return {
            foo: 1
          };
        };

        return array[METHOD_NAME](Boolean).foo !== 1;
      });
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/array-method-is-strict.js":
  /*!******************************************************************!*\
    !*** ./node_modules/core-js/internals/array-method-is-strict.js ***!
    \******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsArrayMethodIsStrictJs(module, exports, __webpack_require__) {
    "use strict";

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    module.exports = function (METHOD_NAME, argument) {
      var method = [][METHOD_NAME];
      return !!method && fails(function () {
        // eslint-disable-next-line no-useless-call,no-throw-literal
        method.call(null, argument || function () {
          throw 1;
        }, 1);
      });
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/array-method-uses-to-length.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/core-js/internals/array-method-uses-to-length.js ***!
    \***********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsArrayMethodUsesToLengthJs(module, exports, __webpack_require__) {
    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var has = __webpack_require__(
    /*! ../internals/has */
    "./node_modules/core-js/internals/has.js");

    var defineProperty = Object.defineProperty;
    var cache = {};

    var thrower = function thrower(it) {
      throw it;
    };

    module.exports = function (METHOD_NAME, options) {
      if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
      if (!options) options = {};
      var method = [][METHOD_NAME];
      var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
      var argument0 = has(options, 0) ? options[0] : thrower;
      var argument1 = has(options, 1) ? options[1] : undefined;
      return cache[METHOD_NAME] = !!method && !fails(function () {
        if (ACCESSORS && !DESCRIPTORS) return true;
        var O = {
          length: -1
        };
        if (ACCESSORS) defineProperty(O, 1, {
          enumerable: true,
          get: thrower
        });else O[1] = 1;
        method.call(O, argument0, argument1);
      });
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/array-reduce.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/internals/array-reduce.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsArrayReduceJs(module, exports, __webpack_require__) {
    var aFunction = __webpack_require__(
    /*! ../internals/a-function */
    "./node_modules/core-js/internals/a-function.js");

    var toObject = __webpack_require__(
    /*! ../internals/to-object */
    "./node_modules/core-js/internals/to-object.js");

    var IndexedObject = __webpack_require__(
    /*! ../internals/indexed-object */
    "./node_modules/core-js/internals/indexed-object.js");

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js"); // `Array.prototype.{ reduce, reduceRight }` methods implementation


    var createMethod = function createMethod(IS_RIGHT) {
      return function (that, callbackfn, argumentsLength, memo) {
        aFunction(callbackfn);
        var O = toObject(that);
        var self = IndexedObject(O);
        var length = toLength(O.length);
        var index = IS_RIGHT ? length - 1 : 0;
        var i = IS_RIGHT ? -1 : 1;
        if (argumentsLength < 2) while (true) {
          if (index in self) {
            memo = self[index];
            index += i;
            break;
          }

          index += i;

          if (IS_RIGHT ? index < 0 : length <= index) {
            throw TypeError('Reduce of empty array with no initial value');
          }
        }

        for (; IS_RIGHT ? index >= 0 : length > index; index += i) {
          if (index in self) {
            memo = callbackfn(memo, self[index], index, O);
          }
        }

        return memo;
      };
    };

    module.exports = {
      // `Array.prototype.reduce` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
      left: createMethod(false),
      // `Array.prototype.reduceRight` method
      // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
      right: createMethod(true)
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/array-species-create.js":
  /*!****************************************************************!*\
    !*** ./node_modules/core-js/internals/array-species-create.js ***!
    \****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsArraySpeciesCreateJs(module, exports, __webpack_require__) {
    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var isArray = __webpack_require__(
    /*! ../internals/is-array */
    "./node_modules/core-js/internals/is-array.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var SPECIES = wellKnownSymbol('species'); // `ArraySpeciesCreate` abstract operation
    // https://tc39.github.io/ecma262/#sec-arrayspeciescreate

    module.exports = function (originalArray, length) {
      var C;

      if (isArray(originalArray)) {
        C = originalArray.constructor; // cross-realm fallback

        if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;else if (isObject(C)) {
          C = C[SPECIES];
          if (C === null) C = undefined;
        }
      }

      return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/call-with-safe-iteration-closing.js":
  /*!****************************************************************************!*\
    !*** ./node_modules/core-js/internals/call-with-safe-iteration-closing.js ***!
    \****************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsCallWithSafeIterationClosingJs(module, exports, __webpack_require__) {
    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js"); // call something on iterator step with safe closing on error


    module.exports = function (iterator, fn, value, ENTRIES) {
      try {
        return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
      } catch (error) {
        var returnMethod = iterator['return'];
        if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
        throw error;
      }
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/check-correctness-of-iteration.js":
  /*!**************************************************************************!*\
    !*** ./node_modules/core-js/internals/check-correctness-of-iteration.js ***!
    \**************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsCheckCorrectnessOfIterationJs(module, exports, __webpack_require__) {
    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var ITERATOR = wellKnownSymbol('iterator');
    var SAFE_CLOSING = false;

    try {
      var called = 0;
      var iteratorWithReturn = {
        next: function next() {
          return {
            done: !!called++
          };
        },
        'return': function _return() {
          SAFE_CLOSING = true;
        }
      };

      iteratorWithReturn[ITERATOR] = function () {
        return this;
      }; // eslint-disable-next-line no-throw-literal


      Array.from(iteratorWithReturn, function () {
        throw 2;
      });
    } catch (error) {
      /* empty */
    }

    module.exports = function (exec, SKIP_CLOSING) {
      if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
      var ITERATION_SUPPORT = false;

      try {
        var object = {};

        object[ITERATOR] = function () {
          return {
            next: function next() {
              return {
                done: ITERATION_SUPPORT = true
              };
            }
          };
        };

        exec(object);
      } catch (error) {
        /* empty */
      }

      return ITERATION_SUPPORT;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/classof-raw.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/internals/classof-raw.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsClassofRawJs(module, exports) {
    var toString = {}.toString;

    module.exports = function (it) {
      return toString.call(it).slice(8, -1);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/classof.js":
  /*!***************************************************!*\
    !*** ./node_modules/core-js/internals/classof.js ***!
    \***************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsClassofJs(module, exports, __webpack_require__) {
    var TO_STRING_TAG_SUPPORT = __webpack_require__(
    /*! ../internals/to-string-tag-support */
    "./node_modules/core-js/internals/to-string-tag-support.js");

    var classofRaw = __webpack_require__(
    /*! ../internals/classof-raw */
    "./node_modules/core-js/internals/classof-raw.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var TO_STRING_TAG = wellKnownSymbol('toStringTag'); // ES3 wrong here

    var CORRECT_ARGUMENTS = classofRaw(function () {
      return arguments;
    }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

    var tryGet = function tryGet(it, key) {
      try {
        return it[key];
      } catch (error) {
        /* empty */
      }
    }; // getting tag from ES6+ `Object.prototype.toString`


    module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
      var O, tag, result;
      return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
      : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag // builtinTag case
      : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback
      : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/collection-strong.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/internals/collection-strong.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsCollectionStrongJs(module, exports, __webpack_require__) {
    "use strict";

    var defineProperty = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js").f;

    var create = __webpack_require__(
    /*! ../internals/object-create */
    "./node_modules/core-js/internals/object-create.js");

    var redefineAll = __webpack_require__(
    /*! ../internals/redefine-all */
    "./node_modules/core-js/internals/redefine-all.js");

    var bind = __webpack_require__(
    /*! ../internals/function-bind-context */
    "./node_modules/core-js/internals/function-bind-context.js");

    var anInstance = __webpack_require__(
    /*! ../internals/an-instance */
    "./node_modules/core-js/internals/an-instance.js");

    var iterate = __webpack_require__(
    /*! ../internals/iterate */
    "./node_modules/core-js/internals/iterate.js");

    var defineIterator = __webpack_require__(
    /*! ../internals/define-iterator */
    "./node_modules/core-js/internals/define-iterator.js");

    var setSpecies = __webpack_require__(
    /*! ../internals/set-species */
    "./node_modules/core-js/internals/set-species.js");

    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var fastKey = __webpack_require__(
    /*! ../internals/internal-metadata */
    "./node_modules/core-js/internals/internal-metadata.js").fastKey;

    var InternalStateModule = __webpack_require__(
    /*! ../internals/internal-state */
    "./node_modules/core-js/internals/internal-state.js");

    var setInternalState = InternalStateModule.set;
    var internalStateGetterFor = InternalStateModule.getterFor;
    module.exports = {
      getConstructor: function getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
        var C = wrapper(function (that, iterable) {
          anInstance(that, C, CONSTRUCTOR_NAME);
          setInternalState(that, {
            type: CONSTRUCTOR_NAME,
            index: create(null),
            first: undefined,
            last: undefined,
            size: 0
          });
          if (!DESCRIPTORS) that.size = 0;
          if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
        });
        var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

        var define = function define(that, key, value) {
          var state = getInternalState(that);
          var entry = getEntry(that, key);
          var previous, index; // change existing entry

          if (entry) {
            entry.value = value; // create new entry
          } else {
            state.last = entry = {
              index: index = fastKey(key, true),
              key: key,
              value: value,
              previous: previous = state.last,
              next: undefined,
              removed: false
            };
            if (!state.first) state.first = entry;
            if (previous) previous.next = entry;
            if (DESCRIPTORS) state.size++;else that.size++; // add to index

            if (index !== 'F') state.index[index] = entry;
          }

          return that;
        };

        var getEntry = function getEntry(that, key) {
          var state = getInternalState(that); // fast case

          var index = fastKey(key);
          var entry;
          if (index !== 'F') return state.index[index]; // frozen object case

          for (entry = state.first; entry; entry = entry.next) {
            if (entry.key == key) return entry;
          }
        };

        redefineAll(C.prototype, {
          // 23.1.3.1 Map.prototype.clear()
          // 23.2.3.2 Set.prototype.clear()
          clear: function clear() {
            var that = this;
            var state = getInternalState(that);
            var data = state.index;
            var entry = state.first;

            while (entry) {
              entry.removed = true;
              if (entry.previous) entry.previous = entry.previous.next = undefined;
              delete data[entry.index];
              entry = entry.next;
            }

            state.first = state.last = undefined;
            if (DESCRIPTORS) state.size = 0;else that.size = 0;
          },
          // 23.1.3.3 Map.prototype.delete(key)
          // 23.2.3.4 Set.prototype.delete(value)
          'delete': function _delete(key) {
            var that = this;
            var state = getInternalState(that);
            var entry = getEntry(that, key);

            if (entry) {
              var next = entry.next;
              var prev = entry.previous;
              delete state.index[entry.index];
              entry.removed = true;
              if (prev) prev.next = next;
              if (next) next.previous = prev;
              if (state.first == entry) state.first = next;
              if (state.last == entry) state.last = prev;
              if (DESCRIPTORS) state.size--;else that.size--;
            }

            return !!entry;
          },
          // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
          // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
          forEach: function forEach(callbackfn
          /* , that = undefined */
          ) {
            var state = getInternalState(this);
            var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
            var entry;

            while (entry = entry ? entry.next : state.first) {
              boundFunction(entry.value, entry.key, this); // revert to the last existing entry

              while (entry && entry.removed) {
                entry = entry.previous;
              }
            }
          },
          // 23.1.3.7 Map.prototype.has(key)
          // 23.2.3.7 Set.prototype.has(value)
          has: function has(key) {
            return !!getEntry(this, key);
          }
        });
        redefineAll(C.prototype, IS_MAP ? {
          // 23.1.3.6 Map.prototype.get(key)
          get: function get(key) {
            var entry = getEntry(this, key);
            return entry && entry.value;
          },
          // 23.1.3.9 Map.prototype.set(key, value)
          set: function set(key, value) {
            return define(this, key === 0 ? 0 : key, value);
          }
        } : {
          // 23.2.3.1 Set.prototype.add(value)
          add: function add(value) {
            return define(this, value = value === 0 ? 0 : value, value);
          }
        });
        if (DESCRIPTORS) defineProperty(C.prototype, 'size', {
          get: function get() {
            return getInternalState(this).size;
          }
        });
        return C;
      },
      setStrong: function setStrong(C, CONSTRUCTOR_NAME, IS_MAP) {
        var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
        var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
        var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME); // add .keys, .values, .entries, [@@iterator]
        // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11

        defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
          setInternalState(this, {
            type: ITERATOR_NAME,
            target: iterated,
            state: getInternalCollectionState(iterated),
            kind: kind,
            last: undefined
          });
        }, function () {
          var state = getInternalIteratorState(this);
          var kind = state.kind;
          var entry = state.last; // revert to the last existing entry

          while (entry && entry.removed) {
            entry = entry.previous;
          } // get next entry


          if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
            // or finish the iteration
            state.target = undefined;
            return {
              value: undefined,
              done: true
            };
          } // return step by kind


          if (kind == 'keys') return {
            value: entry.key,
            done: false
          };
          if (kind == 'values') return {
            value: entry.value,
            done: false
          };
          return {
            value: [entry.key, entry.value],
            done: false
          };
        }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2

        setSpecies(CONSTRUCTOR_NAME);
      }
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/collection-weak.js":
  /*!***********************************************************!*\
    !*** ./node_modules/core-js/internals/collection-weak.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsCollectionWeakJs(module, exports, __webpack_require__) {
    "use strict";

    var redefineAll = __webpack_require__(
    /*! ../internals/redefine-all */
    "./node_modules/core-js/internals/redefine-all.js");

    var getWeakData = __webpack_require__(
    /*! ../internals/internal-metadata */
    "./node_modules/core-js/internals/internal-metadata.js").getWeakData;

    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var anInstance = __webpack_require__(
    /*! ../internals/an-instance */
    "./node_modules/core-js/internals/an-instance.js");

    var iterate = __webpack_require__(
    /*! ../internals/iterate */
    "./node_modules/core-js/internals/iterate.js");

    var ArrayIterationModule = __webpack_require__(
    /*! ../internals/array-iteration */
    "./node_modules/core-js/internals/array-iteration.js");

    var $has = __webpack_require__(
    /*! ../internals/has */
    "./node_modules/core-js/internals/has.js");

    var InternalStateModule = __webpack_require__(
    /*! ../internals/internal-state */
    "./node_modules/core-js/internals/internal-state.js");

    var setInternalState = InternalStateModule.set;
    var internalStateGetterFor = InternalStateModule.getterFor;
    var find = ArrayIterationModule.find;
    var findIndex = ArrayIterationModule.findIndex;
    var id = 0; // fallback for uncaught frozen keys

    var uncaughtFrozenStore = function uncaughtFrozenStore(store) {
      return store.frozen || (store.frozen = new UncaughtFrozenStore());
    };

    var UncaughtFrozenStore = function UncaughtFrozenStore() {
      this.entries = [];
    };

    var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
      return find(store.entries, function (it) {
        return it[0] === key;
      });
    };

    UncaughtFrozenStore.prototype = {
      get: function get(key) {
        var entry = findUncaughtFrozen(this, key);
        if (entry) return entry[1];
      },
      has: function has(key) {
        return !!findUncaughtFrozen(this, key);
      },
      set: function set(key, value) {
        var entry = findUncaughtFrozen(this, key);
        if (entry) entry[1] = value;else this.entries.push([key, value]);
      },
      'delete': function _delete(key) {
        var index = findIndex(this.entries, function (it) {
          return it[0] === key;
        });
        if (~index) this.entries.splice(index, 1);
        return !!~index;
      }
    };
    module.exports = {
      getConstructor: function getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
        var C = wrapper(function (that, iterable) {
          anInstance(that, C, CONSTRUCTOR_NAME);
          setInternalState(that, {
            type: CONSTRUCTOR_NAME,
            id: id++,
            frozen: undefined
          });
          if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
        });
        var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

        var define = function define(that, key, value) {
          var state = getInternalState(that);
          var data = getWeakData(anObject(key), true);
          if (data === true) uncaughtFrozenStore(state).set(key, value);else data[state.id] = value;
          return that;
        };

        redefineAll(C.prototype, {
          // 23.3.3.2 WeakMap.prototype.delete(key)
          // 23.4.3.3 WeakSet.prototype.delete(value)
          'delete': function _delete(key) {
            var state = getInternalState(this);
            if (!isObject(key)) return false;
            var data = getWeakData(key);
            if (data === true) return uncaughtFrozenStore(state)['delete'](key);
            return data && $has(data, state.id) && delete data[state.id];
          },
          // 23.3.3.4 WeakMap.prototype.has(key)
          // 23.4.3.4 WeakSet.prototype.has(value)
          has: function has(key) {
            var state = getInternalState(this);
            if (!isObject(key)) return false;
            var data = getWeakData(key);
            if (data === true) return uncaughtFrozenStore(state).has(key);
            return data && $has(data, state.id);
          }
        });
        redefineAll(C.prototype, IS_MAP ? {
          // 23.3.3.3 WeakMap.prototype.get(key)
          get: function get(key) {
            var state = getInternalState(this);

            if (isObject(key)) {
              var data = getWeakData(key);
              if (data === true) return uncaughtFrozenStore(state).get(key);
              return data ? data[state.id] : undefined;
            }
          },
          // 23.3.3.5 WeakMap.prototype.set(key, value)
          set: function set(key, value) {
            return define(this, key, value);
          }
        } : {
          // 23.4.3.1 WeakSet.prototype.add(value)
          add: function add(value) {
            return define(this, value, true);
          }
        });
        return C;
      }
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/collection.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/internals/collection.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsCollectionJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var isForced = __webpack_require__(
    /*! ../internals/is-forced */
    "./node_modules/core-js/internals/is-forced.js");

    var redefine = __webpack_require__(
    /*! ../internals/redefine */
    "./node_modules/core-js/internals/redefine.js");

    var InternalMetadataModule = __webpack_require__(
    /*! ../internals/internal-metadata */
    "./node_modules/core-js/internals/internal-metadata.js");

    var iterate = __webpack_require__(
    /*! ../internals/iterate */
    "./node_modules/core-js/internals/iterate.js");

    var anInstance = __webpack_require__(
    /*! ../internals/an-instance */
    "./node_modules/core-js/internals/an-instance.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var checkCorrectnessOfIteration = __webpack_require__(
    /*! ../internals/check-correctness-of-iteration */
    "./node_modules/core-js/internals/check-correctness-of-iteration.js");

    var setToStringTag = __webpack_require__(
    /*! ../internals/set-to-string-tag */
    "./node_modules/core-js/internals/set-to-string-tag.js");

    var inheritIfRequired = __webpack_require__(
    /*! ../internals/inherit-if-required */
    "./node_modules/core-js/internals/inherit-if-required.js");

    module.exports = function (CONSTRUCTOR_NAME, wrapper, common) {
      var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
      var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
      var ADDER = IS_MAP ? 'set' : 'add';
      var NativeConstructor = global[CONSTRUCTOR_NAME];
      var NativePrototype = NativeConstructor && NativeConstructor.prototype;
      var Constructor = NativeConstructor;
      var exported = {};

      var fixMethod = function fixMethod(KEY) {
        var nativeMethod = NativePrototype[KEY];
        redefine(NativePrototype, KEY, KEY == 'add' ? function add(value) {
          nativeMethod.call(this, value === 0 ? 0 : value);
          return this;
        } : KEY == 'delete' ? function (key) {
          return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
        } : KEY == 'get' ? function get(key) {
          return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
        } : KEY == 'has' ? function has(key) {
          return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
        } : function set(key, value) {
          nativeMethod.call(this, key === 0 ? 0 : key, value);
          return this;
        });
      }; // eslint-disable-next-line max-len


      if (isForced(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
        new NativeConstructor().entries().next();
      })))) {
        // create collection constructor
        Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
        InternalMetadataModule.REQUIRED = true;
      } else if (isForced(CONSTRUCTOR_NAME, true)) {
        var instance = new Constructor(); // early implementations not supports chaining

        var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false

        var THROWS_ON_PRIMITIVES = fails(function () {
          instance.has(1);
        }); // most early implementations doesn't supports iterables, most modern - not close it correctly
        // eslint-disable-next-line no-new

        var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) {
          new NativeConstructor(iterable);
        }); // for early implementations -0 and +0 not the same

        var BUGGY_ZERO = !IS_WEAK && fails(function () {
          // V8 ~ Chromium 42- fails only with 5+ elements
          var $instance = new NativeConstructor();
          var index = 5;

          while (index--) {
            $instance[ADDER](index, index);
          }

          return !$instance.has(-0);
        });

        if (!ACCEPT_ITERABLES) {
          Constructor = wrapper(function (dummy, iterable) {
            anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
            var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
            if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
            return that;
          });
          Constructor.prototype = NativePrototype;
          NativePrototype.constructor = Constructor;
        }

        if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
          fixMethod('delete');
          fixMethod('has');
          IS_MAP && fixMethod('get');
        }

        if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method

        if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
      }

      exported[CONSTRUCTOR_NAME] = Constructor;
      $({
        global: true,
        forced: Constructor != NativeConstructor
      }, exported);
      setToStringTag(Constructor, CONSTRUCTOR_NAME);
      if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
      return Constructor;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/copy-constructor-properties.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/core-js/internals/copy-constructor-properties.js ***!
    \***********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsCopyConstructorPropertiesJs(module, exports, __webpack_require__) {
    var has = __webpack_require__(
    /*! ../internals/has */
    "./node_modules/core-js/internals/has.js");

    var ownKeys = __webpack_require__(
    /*! ../internals/own-keys */
    "./node_modules/core-js/internals/own-keys.js");

    var getOwnPropertyDescriptorModule = __webpack_require__(
    /*! ../internals/object-get-own-property-descriptor */
    "./node_modules/core-js/internals/object-get-own-property-descriptor.js");

    var definePropertyModule = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js");

    module.exports = function (target, source) {
      var keys = ownKeys(source);
      var defineProperty = definePropertyModule.f;
      var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
      }
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/correct-is-regexp-logic.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/core-js/internals/correct-is-regexp-logic.js ***!
    \*******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsCorrectIsRegexpLogicJs(module, exports, __webpack_require__) {
    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var MATCH = wellKnownSymbol('match');

    module.exports = function (METHOD_NAME) {
      var regexp = /./;

      try {
        '/./'[METHOD_NAME](regexp);
      } catch (e) {
        try {
          regexp[MATCH] = false;
          return '/./'[METHOD_NAME](regexp);
        } catch (f) {
          /* empty */
        }
      }

      return false;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/correct-prototype-getter.js":
  /*!********************************************************************!*\
    !*** ./node_modules/core-js/internals/correct-prototype-getter.js ***!
    \********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsCorrectPrototypeGetterJs(module, exports, __webpack_require__) {
    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    module.exports = !fails(function () {
      function F() {
        /* empty */
      }

      F.prototype.constructor = null;
      return Object.getPrototypeOf(new F()) !== F.prototype;
    });
    /***/
  },

  /***/
  "./node_modules/core-js/internals/create-html.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/internals/create-html.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsCreateHtmlJs(module, exports, __webpack_require__) {
    var requireObjectCoercible = __webpack_require__(
    /*! ../internals/require-object-coercible */
    "./node_modules/core-js/internals/require-object-coercible.js");

    var quot = /"/g; // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
    // https://tc39.github.io/ecma262/#sec-createhtml

    module.exports = function (string, tag, attribute, value) {
      var S = String(requireObjectCoercible(string));
      var p1 = '<' + tag;
      if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
      return p1 + '>' + S + '</' + tag + '>';
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/create-iterator-constructor.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/core-js/internals/create-iterator-constructor.js ***!
    \***********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsCreateIteratorConstructorJs(module, exports, __webpack_require__) {
    "use strict";

    var IteratorPrototype = __webpack_require__(
    /*! ../internals/iterators-core */
    "./node_modules/core-js/internals/iterators-core.js").IteratorPrototype;

    var create = __webpack_require__(
    /*! ../internals/object-create */
    "./node_modules/core-js/internals/object-create.js");

    var createPropertyDescriptor = __webpack_require__(
    /*! ../internals/create-property-descriptor */
    "./node_modules/core-js/internals/create-property-descriptor.js");

    var setToStringTag = __webpack_require__(
    /*! ../internals/set-to-string-tag */
    "./node_modules/core-js/internals/set-to-string-tag.js");

    var Iterators = __webpack_require__(
    /*! ../internals/iterators */
    "./node_modules/core-js/internals/iterators.js");

    var returnThis = function returnThis() {
      return this;
    };

    module.exports = function (IteratorConstructor, NAME, next) {
      var TO_STRING_TAG = NAME + ' Iterator';
      IteratorConstructor.prototype = create(IteratorPrototype, {
        next: createPropertyDescriptor(1, next)
      });
      setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
      Iterators[TO_STRING_TAG] = returnThis;
      return IteratorConstructor;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/create-non-enumerable-property.js":
  /*!**************************************************************************!*\
    !*** ./node_modules/core-js/internals/create-non-enumerable-property.js ***!
    \**************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsCreateNonEnumerablePropertyJs(module, exports, __webpack_require__) {
    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var definePropertyModule = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js");

    var createPropertyDescriptor = __webpack_require__(
    /*! ../internals/create-property-descriptor */
    "./node_modules/core-js/internals/create-property-descriptor.js");

    module.exports = DESCRIPTORS ? function (object, key, value) {
      return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
    } : function (object, key, value) {
      object[key] = value;
      return object;
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/create-property-descriptor.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/core-js/internals/create-property-descriptor.js ***!
    \**********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsCreatePropertyDescriptorJs(module, exports) {
    module.exports = function (bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value: value
      };
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/create-property.js":
  /*!***********************************************************!*\
    !*** ./node_modules/core-js/internals/create-property.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsCreatePropertyJs(module, exports, __webpack_require__) {
    "use strict";

    var toPrimitive = __webpack_require__(
    /*! ../internals/to-primitive */
    "./node_modules/core-js/internals/to-primitive.js");

    var definePropertyModule = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js");

    var createPropertyDescriptor = __webpack_require__(
    /*! ../internals/create-property-descriptor */
    "./node_modules/core-js/internals/create-property-descriptor.js");

    module.exports = function (object, key, value) {
      var propertyKey = toPrimitive(key);
      if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));else object[propertyKey] = value;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/date-to-iso-string.js":
  /*!**************************************************************!*\
    !*** ./node_modules/core-js/internals/date-to-iso-string.js ***!
    \**************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsDateToIsoStringJs(module, exports, __webpack_require__) {
    "use strict";

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var padStart = __webpack_require__(
    /*! ../internals/string-pad */
    "./node_modules/core-js/internals/string-pad.js").start;

    var abs = Math.abs;
    var DatePrototype = Date.prototype;
    var getTime = DatePrototype.getTime;
    var nativeDateToISOString = DatePrototype.toISOString; // `Date.prototype.toISOString` method implementation
    // https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
    // PhantomJS / old WebKit fails here:

    module.exports = fails(function () {
      return nativeDateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
    }) || !fails(function () {
      nativeDateToISOString.call(new Date(NaN));
    }) ? function toISOString() {
      if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
      var date = this;
      var year = date.getUTCFullYear();
      var milliseconds = date.getUTCMilliseconds();
      var sign = year < 0 ? '-' : year > 9999 ? '+' : '';
      return sign + padStart(abs(year), sign ? 6 : 4, 0) + '-' + padStart(date.getUTCMonth() + 1, 2, 0) + '-' + padStart(date.getUTCDate(), 2, 0) + 'T' + padStart(date.getUTCHours(), 2, 0) + ':' + padStart(date.getUTCMinutes(), 2, 0) + ':' + padStart(date.getUTCSeconds(), 2, 0) + '.' + padStart(milliseconds, 3, 0) + 'Z';
    } : nativeDateToISOString;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/date-to-primitive.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/internals/date-to-primitive.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsDateToPrimitiveJs(module, exports, __webpack_require__) {
    "use strict";

    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js");

    var toPrimitive = __webpack_require__(
    /*! ../internals/to-primitive */
    "./node_modules/core-js/internals/to-primitive.js");

    module.exports = function (hint) {
      if (hint !== 'string' && hint !== 'number' && hint !== 'default') {
        throw TypeError('Incorrect hint');
      }

      return toPrimitive(anObject(this), hint !== 'number');
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/define-iterator.js":
  /*!***********************************************************!*\
    !*** ./node_modules/core-js/internals/define-iterator.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsDefineIteratorJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var createIteratorConstructor = __webpack_require__(
    /*! ../internals/create-iterator-constructor */
    "./node_modules/core-js/internals/create-iterator-constructor.js");

    var getPrototypeOf = __webpack_require__(
    /*! ../internals/object-get-prototype-of */
    "./node_modules/core-js/internals/object-get-prototype-of.js");

    var setPrototypeOf = __webpack_require__(
    /*! ../internals/object-set-prototype-of */
    "./node_modules/core-js/internals/object-set-prototype-of.js");

    var setToStringTag = __webpack_require__(
    /*! ../internals/set-to-string-tag */
    "./node_modules/core-js/internals/set-to-string-tag.js");

    var createNonEnumerableProperty = __webpack_require__(
    /*! ../internals/create-non-enumerable-property */
    "./node_modules/core-js/internals/create-non-enumerable-property.js");

    var redefine = __webpack_require__(
    /*! ../internals/redefine */
    "./node_modules/core-js/internals/redefine.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var IS_PURE = __webpack_require__(
    /*! ../internals/is-pure */
    "./node_modules/core-js/internals/is-pure.js");

    var Iterators = __webpack_require__(
    /*! ../internals/iterators */
    "./node_modules/core-js/internals/iterators.js");

    var IteratorsCore = __webpack_require__(
    /*! ../internals/iterators-core */
    "./node_modules/core-js/internals/iterators-core.js");

    var IteratorPrototype = IteratorsCore.IteratorPrototype;
    var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
    var ITERATOR = wellKnownSymbol('iterator');
    var KEYS = 'keys';
    var VALUES = 'values';
    var ENTRIES = 'entries';

    var returnThis = function returnThis() {
      return this;
    };

    module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
      createIteratorConstructor(IteratorConstructor, NAME, next);

      var getIterationMethod = function getIterationMethod(KIND) {
        if (KIND === DEFAULT && defaultIterator) return defaultIterator;
        if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];

        switch (KIND) {
          case KEYS:
            return function keys() {
              return new IteratorConstructor(this, KIND);
            };

          case VALUES:
            return function values() {
              return new IteratorConstructor(this, KIND);
            };

          case ENTRIES:
            return function entries() {
              return new IteratorConstructor(this, KIND);
            };
        }

        return function () {
          return new IteratorConstructor(this);
        };
      };

      var TO_STRING_TAG = NAME + ' Iterator';
      var INCORRECT_VALUES_NAME = false;
      var IterablePrototype = Iterable.prototype;
      var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];
      var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
      var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
      var CurrentIteratorPrototype, methods, KEY; // fix native

      if (anyNativeIterator) {
        CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));

        if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
          if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
            if (setPrototypeOf) {
              setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
            } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
              createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
            }
          } // Set @@toStringTag to native iterators


          setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
          if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
        }
      } // fix Array#{values, @@iterator}.name in V8 / FF


      if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
        INCORRECT_VALUES_NAME = true;

        defaultIterator = function values() {
          return nativeIterator.call(this);
        };
      } // define iterator


      if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
        createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
      }

      Iterators[NAME] = defaultIterator; // export additional methods

      if (DEFAULT) {
        methods = {
          values: getIterationMethod(VALUES),
          keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
          entries: getIterationMethod(ENTRIES)
        };
        if (FORCED) for (KEY in methods) {
          if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
            redefine(IterablePrototype, KEY, methods[KEY]);
          }
        } else $({
          target: NAME,
          proto: true,
          forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
        }, methods);
      }

      return methods;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/define-well-known-symbol.js":
  /*!********************************************************************!*\
    !*** ./node_modules/core-js/internals/define-well-known-symbol.js ***!
    \********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsDefineWellKnownSymbolJs(module, exports, __webpack_require__) {
    var path = __webpack_require__(
    /*! ../internals/path */
    "./node_modules/core-js/internals/path.js");

    var has = __webpack_require__(
    /*! ../internals/has */
    "./node_modules/core-js/internals/has.js");

    var wrappedWellKnownSymbolModule = __webpack_require__(
    /*! ../internals/well-known-symbol-wrapped */
    "./node_modules/core-js/internals/well-known-symbol-wrapped.js");

    var defineProperty = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js").f;

    module.exports = function (NAME) {
      var Symbol = path.Symbol || (path.Symbol = {});
      if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
        value: wrappedWellKnownSymbolModule.f(NAME)
      });
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/descriptors.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/internals/descriptors.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsDescriptorsJs(module, exports, __webpack_require__) {
    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js"); // Thank's IE8 for his funny defineProperty


    module.exports = !fails(function () {
      return Object.defineProperty({}, 1, {
        get: function get() {
          return 7;
        }
      })[1] != 7;
    });
    /***/
  },

  /***/
  "./node_modules/core-js/internals/document-create-element.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/core-js/internals/document-create-element.js ***!
    \*******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsDocumentCreateElementJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var document = global.document; // typeof document.createElement is 'object' in old IE

    var EXISTS = isObject(document) && isObject(document.createElement);

    module.exports = function (it) {
      return EXISTS ? document.createElement(it) : {};
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/dom-iterables.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/internals/dom-iterables.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsDomIterablesJs(module, exports) {
    // iterable DOM collections
    // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
    module.exports = {
      CSSRuleList: 0,
      CSSStyleDeclaration: 0,
      CSSValueList: 0,
      ClientRectList: 0,
      DOMRectList: 0,
      DOMStringList: 0,
      DOMTokenList: 1,
      DataTransferItemList: 0,
      FileList: 0,
      HTMLAllCollection: 0,
      HTMLCollection: 0,
      HTMLFormElement: 0,
      HTMLSelectElement: 0,
      MediaList: 0,
      MimeTypeArray: 0,
      NamedNodeMap: 0,
      NodeList: 1,
      PaintRequestList: 0,
      Plugin: 0,
      PluginArray: 0,
      SVGLengthList: 0,
      SVGNumberList: 0,
      SVGPathSegList: 0,
      SVGPointList: 0,
      SVGStringList: 0,
      SVGTransformList: 0,
      SourceBufferList: 0,
      StyleSheetList: 0,
      TextTrackCueList: 0,
      TextTrackList: 0,
      TouchList: 0
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/engine-is-ios.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/internals/engine-is-ios.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsEngineIsIosJs(module, exports, __webpack_require__) {
    var userAgent = __webpack_require__(
    /*! ../internals/engine-user-agent */
    "./node_modules/core-js/internals/engine-user-agent.js");

    module.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);
    /***/
  },

  /***/
  "./node_modules/core-js/internals/engine-user-agent.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/internals/engine-user-agent.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsEngineUserAgentJs(module, exports, __webpack_require__) {
    var getBuiltIn = __webpack_require__(
    /*! ../internals/get-built-in */
    "./node_modules/core-js/internals/get-built-in.js");

    module.exports = getBuiltIn('navigator', 'userAgent') || '';
    /***/
  },

  /***/
  "./node_modules/core-js/internals/engine-v8-version.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/internals/engine-v8-version.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsEngineV8VersionJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var userAgent = __webpack_require__(
    /*! ../internals/engine-user-agent */
    "./node_modules/core-js/internals/engine-user-agent.js");

    var process = global.process;
    var versions = process && process.versions;
    var v8 = versions && versions.v8;
    var match, version;

    if (v8) {
      match = v8.split('.');
      version = match[0] + match[1];
    } else if (userAgent) {
      match = userAgent.match(/Edge\/(\d+)/);

      if (!match || match[1] >= 74) {
        match = userAgent.match(/Chrome\/(\d+)/);
        if (match) version = match[1];
      }
    }

    module.exports = version && +version;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/enum-bug-keys.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/internals/enum-bug-keys.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsEnumBugKeysJs(module, exports) {
    // IE8- don't enum bug keys
    module.exports = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];
    /***/
  },

  /***/
  "./node_modules/core-js/internals/export.js":
  /*!**************************************************!*\
    !*** ./node_modules/core-js/internals/export.js ***!
    \**************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsExportJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var getOwnPropertyDescriptor = __webpack_require__(
    /*! ../internals/object-get-own-property-descriptor */
    "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;

    var createNonEnumerableProperty = __webpack_require__(
    /*! ../internals/create-non-enumerable-property */
    "./node_modules/core-js/internals/create-non-enumerable-property.js");

    var redefine = __webpack_require__(
    /*! ../internals/redefine */
    "./node_modules/core-js/internals/redefine.js");

    var setGlobal = __webpack_require__(
    /*! ../internals/set-global */
    "./node_modules/core-js/internals/set-global.js");

    var copyConstructorProperties = __webpack_require__(
    /*! ../internals/copy-constructor-properties */
    "./node_modules/core-js/internals/copy-constructor-properties.js");

    var isForced = __webpack_require__(
    /*! ../internals/is-forced */
    "./node_modules/core-js/internals/is-forced.js");
    /*
      options.target      - name of the target object
      options.global      - target is the global object
      options.stat        - export as static methods of target
      options.proto       - export as prototype methods of target
      options.real        - real prototype method for the `pure` version
      options.forced      - export even if the native feature is available
      options.bind        - bind methods to the target, required for the `pure` version
      options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
      options.unsafe      - use the simple assignment of property instead of delete + defineProperty
      options.sham        - add a flag to not completely full polyfills
      options.enumerable  - export as enumerable property
      options.noTargetGet - prevent calling a getter on target
    */


    module.exports = function (options, source) {
      var TARGET = options.target;
      var GLOBAL = options.global;
      var STATIC = options.stat;
      var FORCED, target, key, targetProperty, sourceProperty, descriptor;

      if (GLOBAL) {
        target = global;
      } else if (STATIC) {
        target = global[TARGET] || setGlobal(TARGET, {});
      } else {
        target = (global[TARGET] || {}).prototype;
      }

      if (target) for (key in source) {
        sourceProperty = source[key];

        if (options.noTargetGet) {
          descriptor = getOwnPropertyDescriptor(target, key);
          targetProperty = descriptor && descriptor.value;
        } else targetProperty = target[key];

        FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target

        if (!FORCED && targetProperty !== undefined) {
          if (typeof sourceProperty === typeof targetProperty) continue;
          copyConstructorProperties(sourceProperty, targetProperty);
        } // add a flag to not completely full polyfills


        if (options.sham || targetProperty && targetProperty.sham) {
          createNonEnumerableProperty(sourceProperty, 'sham', true);
        } // extend global


        redefine(target, key, sourceProperty, options);
      }
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/fails.js":
  /*!*************************************************!*\
    !*** ./node_modules/core-js/internals/fails.js ***!
    \*************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsFailsJs(module, exports) {
    module.exports = function (exec) {
      try {
        return !!exec();
      } catch (error) {
        return true;
      }
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js":
  /*!******************************************************************************!*\
    !*** ./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js ***!
    \******************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsFixRegexpWellKnownSymbolLogicJs(module, exports, __webpack_require__) {
    "use strict"; // TODO: Remove from `core-js@4` since it's moved to entry points

    __webpack_require__(
    /*! ../modules/es.regexp.exec */
    "./node_modules/core-js/modules/es.regexp.exec.js");

    var redefine = __webpack_require__(
    /*! ../internals/redefine */
    "./node_modules/core-js/internals/redefine.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var regexpExec = __webpack_require__(
    /*! ../internals/regexp-exec */
    "./node_modules/core-js/internals/regexp-exec.js");

    var createNonEnumerableProperty = __webpack_require__(
    /*! ../internals/create-non-enumerable-property */
    "./node_modules/core-js/internals/create-non-enumerable-property.js");

    var SPECIES = wellKnownSymbol('species');
    var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
      // #replace needs built-in support for named groups.
      // #match works fine because it just return the exec results, even if it has
      // a "grops" property.
      var re = /./;

      re.exec = function () {
        var result = [];
        result.groups = {
          a: '7'
        };
        return result;
      };

      return ''.replace(re, '$<a>') !== '7';
    }); // IE <= 11 replaces $0 with the whole match, as if it was $&
    // https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0

    var REPLACE_KEEPS_$0 = function () {
      return 'a'.replace(/./, '$0') === '$0';
    }();

    var REPLACE = wellKnownSymbol('replace'); // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string

    var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function () {
      if (/./[REPLACE]) {
        return /./[REPLACE]('a', '$0') === '';
      }

      return false;
    }(); // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
    // Weex JS has frozen built-in prototypes, so use try / catch wrapper


    var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
      var re = /(?:)/;
      var originalExec = re.exec;

      re.exec = function () {
        return originalExec.apply(this, arguments);
      };

      var result = 'ab'.split(re);
      return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
    });

    module.exports = function (KEY, length, exec, sham) {
      var SYMBOL = wellKnownSymbol(KEY);
      var DELEGATES_TO_SYMBOL = !fails(function () {
        // String methods call symbol-named RegEp methods
        var O = {};

        O[SYMBOL] = function () {
          return 7;
        };

        return ''[KEY](O) != 7;
      });
      var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
        // Symbol-named RegExp methods call .exec
        var execCalled = false;
        var re = /a/;

        if (KEY === 'split') {
          // We can't use real regex here since it causes deoptimization
          // and serious performance degradation in V8
          // https://github.com/zloirock/core-js/issues/306
          re = {}; // RegExp[@@split] doesn't call the regex's exec method, but first creates
          // a new one. We need to return the patched regex when creating the new one.

          re.constructor = {};

          re.constructor[SPECIES] = function () {
            return re;
          };

          re.flags = '';
          re[SYMBOL] = /./[SYMBOL];
        }

        re.exec = function () {
          execCalled = true;
          return null;
        };

        re[SYMBOL]('');
        return !execCalled;
      });

      if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !(REPLACE_SUPPORTS_NAMED_GROUPS && REPLACE_KEEPS_$0 && !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE) || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
        var nativeRegExpMethod = /./[SYMBOL];
        var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
          if (regexp.exec === regexpExec) {
            if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
              // The native String method already delegates to @@method (this
              // polyfilled function), leasing to infinite recursion.
              // We avoid it by directly calling the native @@method method.
              return {
                done: true,
                value: nativeRegExpMethod.call(regexp, str, arg2)
              };
            }

            return {
              done: true,
              value: nativeMethod.call(str, regexp, arg2)
            };
          }

          return {
            done: false
          };
        }, {
          REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
          REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
        });
        var stringMethod = methods[0];
        var regexMethod = methods[1];
        redefine(String.prototype, KEY, stringMethod);
        redefine(RegExp.prototype, SYMBOL, length == 2 // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
        // 21.2.5.11 RegExp.prototype[@@split](string, limit)
        ? function (string, arg) {
          return regexMethod.call(string, this, arg);
        } // 21.2.5.6 RegExp.prototype[@@match](string)
        // 21.2.5.9 RegExp.prototype[@@search](string)
        : function (string) {
          return regexMethod.call(string, this);
        });
      }

      if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/freezing.js":
  /*!****************************************************!*\
    !*** ./node_modules/core-js/internals/freezing.js ***!
    \****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsFreezingJs(module, exports, __webpack_require__) {
    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    module.exports = !fails(function () {
      return Object.isExtensible(Object.preventExtensions({}));
    });
    /***/
  },

  /***/
  "./node_modules/core-js/internals/function-bind-context.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/core-js/internals/function-bind-context.js ***!
    \*****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsFunctionBindContextJs(module, exports, __webpack_require__) {
    var aFunction = __webpack_require__(
    /*! ../internals/a-function */
    "./node_modules/core-js/internals/a-function.js"); // optional / simple context binding


    module.exports = function (fn, that, length) {
      aFunction(fn);
      if (that === undefined) return fn;

      switch (length) {
        case 0:
          return function () {
            return fn.call(that);
          };

        case 1:
          return function (a) {
            return fn.call(that, a);
          };

        case 2:
          return function (a, b) {
            return fn.call(that, a, b);
          };

        case 3:
          return function (a, b, c) {
            return fn.call(that, a, b, c);
          };
      }

      return function ()
      /* ...args */
      {
        return fn.apply(that, arguments);
      };
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/function-bind.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/internals/function-bind.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsFunctionBindJs(module, exports, __webpack_require__) {
    "use strict";

    var aFunction = __webpack_require__(
    /*! ../internals/a-function */
    "./node_modules/core-js/internals/a-function.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var slice = [].slice;
    var factories = {};

    var construct = function construct(C, argsLength, args) {
      if (!(argsLength in factories)) {
        for (var list = [], i = 0; i < argsLength; i++) {
          list[i] = 'a[' + i + ']';
        } // eslint-disable-next-line no-new-func


        factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
      }

      return factories[argsLength](C, args);
    }; // `Function.prototype.bind` method implementation
    // https://tc39.github.io/ecma262/#sec-function.prototype.bind


    module.exports = Function.bind || function bind(that
    /* , ...args */
    ) {
      var fn = aFunction(this);
      var partArgs = slice.call(arguments, 1);

      var boundFunction = function bound()
      /* args... */
      {
        var args = partArgs.concat(slice.call(arguments));
        return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
      };

      if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
      return boundFunction;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/get-built-in.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/internals/get-built-in.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsGetBuiltInJs(module, exports, __webpack_require__) {
    var path = __webpack_require__(
    /*! ../internals/path */
    "./node_modules/core-js/internals/path.js");

    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var aFunction = function aFunction(variable) {
      return typeof variable == 'function' ? variable : undefined;
    };

    module.exports = function (namespace, method) {
      return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace]) : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/get-iterator-method.js":
  /*!***************************************************************!*\
    !*** ./node_modules/core-js/internals/get-iterator-method.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsGetIteratorMethodJs(module, exports, __webpack_require__) {
    var classof = __webpack_require__(
    /*! ../internals/classof */
    "./node_modules/core-js/internals/classof.js");

    var Iterators = __webpack_require__(
    /*! ../internals/iterators */
    "./node_modules/core-js/internals/iterators.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var ITERATOR = wellKnownSymbol('iterator');

    module.exports = function (it) {
      if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/global.js":
  /*!**************************************************!*\
    !*** ./node_modules/core-js/internals/global.js ***!
    \**************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsGlobalJs(module, exports) {
    var check = function check(it) {
      return it && it.Math == Math && it;
    }; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028


    module.exports = // eslint-disable-next-line no-undef
    check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || check(typeof self == 'object' && self) || check(typeof global == 'object' && global) || // eslint-disable-next-line no-new-func
    Function('return this')();
    /***/
  },

  /***/
  "./node_modules/core-js/internals/has.js":
  /*!***********************************************!*\
    !*** ./node_modules/core-js/internals/has.js ***!
    \***********************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsHasJs(module, exports) {
    var hasOwnProperty = {}.hasOwnProperty;

    module.exports = function (it, key) {
      return hasOwnProperty.call(it, key);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/hidden-keys.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/internals/hidden-keys.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsHiddenKeysJs(module, exports) {
    module.exports = {};
    /***/
  },

  /***/
  "./node_modules/core-js/internals/host-report-errors.js":
  /*!**************************************************************!*\
    !*** ./node_modules/core-js/internals/host-report-errors.js ***!
    \**************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsHostReportErrorsJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    module.exports = function (a, b) {
      var console = global.console;

      if (console && console.error) {
        arguments.length === 1 ? console.error(a) : console.error(a, b);
      }
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/html.js":
  /*!************************************************!*\
    !*** ./node_modules/core-js/internals/html.js ***!
    \************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsHtmlJs(module, exports, __webpack_require__) {
    var getBuiltIn = __webpack_require__(
    /*! ../internals/get-built-in */
    "./node_modules/core-js/internals/get-built-in.js");

    module.exports = getBuiltIn('document', 'documentElement');
    /***/
  },

  /***/
  "./node_modules/core-js/internals/ie8-dom-define.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/internals/ie8-dom-define.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsIe8DomDefineJs(module, exports, __webpack_require__) {
    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var createElement = __webpack_require__(
    /*! ../internals/document-create-element */
    "./node_modules/core-js/internals/document-create-element.js"); // Thank's IE8 for his funny defineProperty


    module.exports = !DESCRIPTORS && !fails(function () {
      return Object.defineProperty(createElement('div'), 'a', {
        get: function get() {
          return 7;
        }
      }).a != 7;
    });
    /***/
  },

  /***/
  "./node_modules/core-js/internals/indexed-object.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/internals/indexed-object.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsIndexedObjectJs(module, exports, __webpack_require__) {
    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var classof = __webpack_require__(
    /*! ../internals/classof-raw */
    "./node_modules/core-js/internals/classof-raw.js");

    var split = ''.split; // fallback for non-array-like ES3 and non-enumerable old V8 strings

    module.exports = fails(function () {
      // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
      // eslint-disable-next-line no-prototype-builtins
      return !Object('z').propertyIsEnumerable(0);
    }) ? function (it) {
      return classof(it) == 'String' ? split.call(it, '') : Object(it);
    } : Object;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/inherit-if-required.js":
  /*!***************************************************************!*\
    !*** ./node_modules/core-js/internals/inherit-if-required.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsInheritIfRequiredJs(module, exports, __webpack_require__) {
    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var setPrototypeOf = __webpack_require__(
    /*! ../internals/object-set-prototype-of */
    "./node_modules/core-js/internals/object-set-prototype-of.js"); // makes subclassing work correct for wrapped built-ins


    module.exports = function ($this, dummy, Wrapper) {
      var NewTarget, NewTargetPrototype;
      if ( // it can work only with native `setPrototypeOf`
      setPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
      typeof (NewTarget = dummy.constructor) == 'function' && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype) setPrototypeOf($this, NewTargetPrototype);
      return $this;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/inspect-source.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/internals/inspect-source.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsInspectSourceJs(module, exports, __webpack_require__) {
    var store = __webpack_require__(
    /*! ../internals/shared-store */
    "./node_modules/core-js/internals/shared-store.js");

    var functionToString = Function.toString; // this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper

    if (typeof store.inspectSource != 'function') {
      store.inspectSource = function (it) {
        return functionToString.call(it);
      };
    }

    module.exports = store.inspectSource;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/internal-metadata.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/internals/internal-metadata.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsInternalMetadataJs(module, exports, __webpack_require__) {
    var hiddenKeys = __webpack_require__(
    /*! ../internals/hidden-keys */
    "./node_modules/core-js/internals/hidden-keys.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var has = __webpack_require__(
    /*! ../internals/has */
    "./node_modules/core-js/internals/has.js");

    var defineProperty = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js").f;

    var uid = __webpack_require__(
    /*! ../internals/uid */
    "./node_modules/core-js/internals/uid.js");

    var FREEZING = __webpack_require__(
    /*! ../internals/freezing */
    "./node_modules/core-js/internals/freezing.js");

    var METADATA = uid('meta');
    var id = 0;

    var isExtensible = Object.isExtensible || function () {
      return true;
    };

    var setMetadata = function setMetadata(it) {
      defineProperty(it, METADATA, {
        value: {
          objectID: 'O' + ++id,
          // object ID
          weakData: {} // weak collections IDs

        }
      });
    };

    var fastKey = function fastKey(it, create) {
      // return a primitive with prefix
      if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

      if (!has(it, METADATA)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return 'F'; // not necessary to add metadata

        if (!create) return 'E'; // add missing metadata

        setMetadata(it); // return object ID
      }

      return it[METADATA].objectID;
    };

    var getWeakData = function getWeakData(it, create) {
      if (!has(it, METADATA)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return true; // not necessary to add metadata

        if (!create) return false; // add missing metadata

        setMetadata(it); // return the store of weak collections IDs
      }

      return it[METADATA].weakData;
    }; // add metadata on freeze-family methods calling


    var onFreeze = function onFreeze(it) {
      if (FREEZING && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
      return it;
    };

    var meta = module.exports = {
      REQUIRED: false,
      fastKey: fastKey,
      getWeakData: getWeakData,
      onFreeze: onFreeze
    };
    hiddenKeys[METADATA] = true;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/internal-state.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/internals/internal-state.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsInternalStateJs(module, exports, __webpack_require__) {
    var NATIVE_WEAK_MAP = __webpack_require__(
    /*! ../internals/native-weak-map */
    "./node_modules/core-js/internals/native-weak-map.js");

    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var createNonEnumerableProperty = __webpack_require__(
    /*! ../internals/create-non-enumerable-property */
    "./node_modules/core-js/internals/create-non-enumerable-property.js");

    var objectHas = __webpack_require__(
    /*! ../internals/has */
    "./node_modules/core-js/internals/has.js");

    var sharedKey = __webpack_require__(
    /*! ../internals/shared-key */
    "./node_modules/core-js/internals/shared-key.js");

    var hiddenKeys = __webpack_require__(
    /*! ../internals/hidden-keys */
    "./node_modules/core-js/internals/hidden-keys.js");

    var WeakMap = global.WeakMap;
    var set, get, has;

    var enforce = function enforce(it) {
      return has(it) ? get(it) : set(it, {});
    };

    var getterFor = function getterFor(TYPE) {
      return function (it) {
        var state;

        if (!isObject(it) || (state = get(it)).type !== TYPE) {
          throw TypeError('Incompatible receiver, ' + TYPE + ' required');
        }

        return state;
      };
    };

    if (NATIVE_WEAK_MAP) {
      var store = new WeakMap();
      var wmget = store.get;
      var wmhas = store.has;
      var wmset = store.set;

      set = function set(it, metadata) {
        wmset.call(store, it, metadata);
        return metadata;
      };

      get = function get(it) {
        return wmget.call(store, it) || {};
      };

      has = function has(it) {
        return wmhas.call(store, it);
      };
    } else {
      var STATE = sharedKey('state');
      hiddenKeys[STATE] = true;

      set = function set(it, metadata) {
        createNonEnumerableProperty(it, STATE, metadata);
        return metadata;
      };

      get = function get(it) {
        return objectHas(it, STATE) ? it[STATE] : {};
      };

      has = function has(it) {
        return objectHas(it, STATE);
      };
    }

    module.exports = {
      set: set,
      get: get,
      has: has,
      enforce: enforce,
      getterFor: getterFor
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/is-array-iterator-method.js":
  /*!********************************************************************!*\
    !*** ./node_modules/core-js/internals/is-array-iterator-method.js ***!
    \********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsIsArrayIteratorMethodJs(module, exports, __webpack_require__) {
    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var Iterators = __webpack_require__(
    /*! ../internals/iterators */
    "./node_modules/core-js/internals/iterators.js");

    var ITERATOR = wellKnownSymbol('iterator');
    var ArrayPrototype = Array.prototype; // check on default Array iterator

    module.exports = function (it) {
      return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/is-array.js":
  /*!****************************************************!*\
    !*** ./node_modules/core-js/internals/is-array.js ***!
    \****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsIsArrayJs(module, exports, __webpack_require__) {
    var classof = __webpack_require__(
    /*! ../internals/classof-raw */
    "./node_modules/core-js/internals/classof-raw.js"); // `IsArray` abstract operation
    // https://tc39.github.io/ecma262/#sec-isarray


    module.exports = Array.isArray || function isArray(arg) {
      return classof(arg) == 'Array';
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/is-forced.js":
  /*!*****************************************************!*\
    !*** ./node_modules/core-js/internals/is-forced.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsIsForcedJs(module, exports, __webpack_require__) {
    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var replacement = /#|\.prototype\./;

    var isForced = function isForced(feature, detection) {
      var value = data[normalize(feature)];
      return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;
    };

    var normalize = isForced.normalize = function (string) {
      return String(string).replace(replacement, '.').toLowerCase();
    };

    var data = isForced.data = {};
    var NATIVE = isForced.NATIVE = 'N';
    var POLYFILL = isForced.POLYFILL = 'P';
    module.exports = isForced;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/is-integer.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/internals/is-integer.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsIsIntegerJs(module, exports, __webpack_require__) {
    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var floor = Math.floor; // `Number.isInteger` method implementation
    // https://tc39.github.io/ecma262/#sec-number.isinteger

    module.exports = function isInteger(it) {
      return !isObject(it) && isFinite(it) && floor(it) === it;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/is-object.js":
  /*!*****************************************************!*\
    !*** ./node_modules/core-js/internals/is-object.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsIsObjectJs(module, exports) {
    module.exports = function (it) {
      return typeof it === 'object' ? it !== null : typeof it === 'function';
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/is-pure.js":
  /*!***************************************************!*\
    !*** ./node_modules/core-js/internals/is-pure.js ***!
    \***************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsIsPureJs(module, exports) {
    module.exports = false;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/is-regexp.js":
  /*!*****************************************************!*\
    !*** ./node_modules/core-js/internals/is-regexp.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsIsRegexpJs(module, exports, __webpack_require__) {
    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var classof = __webpack_require__(
    /*! ../internals/classof-raw */
    "./node_modules/core-js/internals/classof-raw.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var MATCH = wellKnownSymbol('match'); // `IsRegExp` abstract operation
    // https://tc39.github.io/ecma262/#sec-isregexp

    module.exports = function (it) {
      var isRegExp;
      return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/iterate.js":
  /*!***************************************************!*\
    !*** ./node_modules/core-js/internals/iterate.js ***!
    \***************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsIterateJs(module, exports, __webpack_require__) {
    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js");

    var isArrayIteratorMethod = __webpack_require__(
    /*! ../internals/is-array-iterator-method */
    "./node_modules/core-js/internals/is-array-iterator-method.js");

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js");

    var bind = __webpack_require__(
    /*! ../internals/function-bind-context */
    "./node_modules/core-js/internals/function-bind-context.js");

    var getIteratorMethod = __webpack_require__(
    /*! ../internals/get-iterator-method */
    "./node_modules/core-js/internals/get-iterator-method.js");

    var callWithSafeIterationClosing = __webpack_require__(
    /*! ../internals/call-with-safe-iteration-closing */
    "./node_modules/core-js/internals/call-with-safe-iteration-closing.js");

    var Result = function Result(stopped, result) {
      this.stopped = stopped;
      this.result = result;
    };

    var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
      var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);
      var iterator, iterFn, index, length, result, next, step;

      if (IS_ITERATOR) {
        iterator = iterable;
      } else {
        iterFn = getIteratorMethod(iterable);
        if (typeof iterFn != 'function') throw TypeError('Target is not iterable'); // optimisation for array iterators

        if (isArrayIteratorMethod(iterFn)) {
          for (index = 0, length = toLength(iterable.length); length > index; index++) {
            result = AS_ENTRIES ? boundFunction(anObject(step = iterable[index])[0], step[1]) : boundFunction(iterable[index]);
            if (result && result instanceof Result) return result;
          }

          return new Result(false);
        }

        iterator = iterFn.call(iterable);
      }

      next = iterator.next;

      while (!(step = next.call(iterator)).done) {
        result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
        if (typeof result == 'object' && result && result instanceof Result) return result;
      }

      return new Result(false);
    };

    iterate.stop = function (result) {
      return new Result(true, result);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/iterators-core.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/internals/iterators-core.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsIteratorsCoreJs(module, exports, __webpack_require__) {
    "use strict";

    var getPrototypeOf = __webpack_require__(
    /*! ../internals/object-get-prototype-of */
    "./node_modules/core-js/internals/object-get-prototype-of.js");

    var createNonEnumerableProperty = __webpack_require__(
    /*! ../internals/create-non-enumerable-property */
    "./node_modules/core-js/internals/create-non-enumerable-property.js");

    var has = __webpack_require__(
    /*! ../internals/has */
    "./node_modules/core-js/internals/has.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var IS_PURE = __webpack_require__(
    /*! ../internals/is-pure */
    "./node_modules/core-js/internals/is-pure.js");

    var ITERATOR = wellKnownSymbol('iterator');
    var BUGGY_SAFARI_ITERATORS = false;

    var returnThis = function returnThis() {
      return this;
    }; // `%IteratorPrototype%` object
    // https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object


    var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

    if ([].keys) {
      arrayIterator = [].keys(); // Safari 8 has buggy iterators w/o `next`

      if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;else {
        PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
        if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
      }
    }

    if (IteratorPrototype == undefined) IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

    if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
      createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
    }

    module.exports = {
      IteratorPrototype: IteratorPrototype,
      BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/iterators.js":
  /*!*****************************************************!*\
    !*** ./node_modules/core-js/internals/iterators.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsIteratorsJs(module, exports) {
    module.exports = {};
    /***/
  },

  /***/
  "./node_modules/core-js/internals/math-expm1.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/internals/math-expm1.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsMathExpm1Js(module, exports) {
    var nativeExpm1 = Math.expm1;
    var exp = Math.exp; // `Math.expm1` method implementation
    // https://tc39.github.io/ecma262/#sec-math.expm1

    module.exports = !nativeExpm1 // Old FF bug
    || nativeExpm1(10) > 22025.465794806719 || nativeExpm1(10) < 22025.4657948067165168 // Tor Browser bug
    || nativeExpm1(-2e-17) != -2e-17 ? function expm1(x) {
      return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;
    } : nativeExpm1;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/math-fround.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/internals/math-fround.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsMathFroundJs(module, exports, __webpack_require__) {
    var sign = __webpack_require__(
    /*! ../internals/math-sign */
    "./node_modules/core-js/internals/math-sign.js");

    var abs = Math.abs;
    var pow = Math.pow;
    var EPSILON = pow(2, -52);
    var EPSILON32 = pow(2, -23);
    var MAX32 = pow(2, 127) * (2 - EPSILON32);
    var MIN32 = pow(2, -126);

    var roundTiesToEven = function roundTiesToEven(n) {
      return n + 1 / EPSILON - 1 / EPSILON;
    }; // `Math.fround` method implementation
    // https://tc39.github.io/ecma262/#sec-math.fround


    module.exports = Math.fround || function fround(x) {
      var $abs = abs(x);
      var $sign = sign(x);
      var a, result;
      if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
      a = (1 + EPSILON32 / EPSILON) * $abs;
      result = a - (a - $abs); // eslint-disable-next-line no-self-compare

      if (result > MAX32 || result != result) return $sign * Infinity;
      return $sign * result;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/math-log1p.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/internals/math-log1p.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsMathLog1pJs(module, exports) {
    var log = Math.log; // `Math.log1p` method implementation
    // https://tc39.github.io/ecma262/#sec-math.log1p

    module.exports = Math.log1p || function log1p(x) {
      return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log(1 + x);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/math-sign.js":
  /*!*****************************************************!*\
    !*** ./node_modules/core-js/internals/math-sign.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsMathSignJs(module, exports) {
    // `Math.sign` method implementation
    // https://tc39.github.io/ecma262/#sec-math.sign
    module.exports = Math.sign || function sign(x) {
      // eslint-disable-next-line no-self-compare
      return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/microtask.js":
  /*!*****************************************************!*\
    !*** ./node_modules/core-js/internals/microtask.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsMicrotaskJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var getOwnPropertyDescriptor = __webpack_require__(
    /*! ../internals/object-get-own-property-descriptor */
    "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;

    var classof = __webpack_require__(
    /*! ../internals/classof-raw */
    "./node_modules/core-js/internals/classof-raw.js");

    var macrotask = __webpack_require__(
    /*! ../internals/task */
    "./node_modules/core-js/internals/task.js").set;

    var IS_IOS = __webpack_require__(
    /*! ../internals/engine-is-ios */
    "./node_modules/core-js/internals/engine-is-ios.js");

    var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
    var process = global.process;
    var Promise = global.Promise;
    var IS_NODE = classof(process) == 'process'; // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`

    var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
    var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
    var flush, head, last, notify, toggle, node, promise, then; // modern engines have queueMicrotask method

    if (!queueMicrotask) {
      flush = function flush() {
        var parent, fn;
        if (IS_NODE && (parent = process.domain)) parent.exit();

        while (head) {
          fn = head.fn;
          head = head.next;

          try {
            fn();
          } catch (error) {
            if (head) notify();else last = undefined;
            throw error;
          }
        }

        last = undefined;
        if (parent) parent.enter();
      }; // Node.js


      if (IS_NODE) {
        notify = function notify() {
          process.nextTick(flush);
        }; // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339

      } else if (MutationObserver && !IS_IOS) {
        toggle = true;
        node = document.createTextNode('');
        new MutationObserver(flush).observe(node, {
          characterData: true
        });

        notify = function notify() {
          node.data = toggle = !toggle;
        }; // environments with maybe non-completely correct, but existent Promise

      } else if (Promise && Promise.resolve) {
        // Promise.resolve without an argument throws an error in LG WebOS 2
        promise = Promise.resolve(undefined);
        then = promise.then;

        notify = function notify() {
          then.call(promise, flush);
        }; // for other environments - macrotask based on:
        // - setImmediate
        // - MessageChannel
        // - window.postMessag
        // - onreadystatechange
        // - setTimeout

      } else {
        notify = function notify() {
          // strange IE + webpack dev server bug - use .call(global)
          macrotask.call(global, flush);
        };
      }
    }

    module.exports = queueMicrotask || function (fn) {
      var task = {
        fn: fn,
        next: undefined
      };
      if (last) last.next = task;

      if (!head) {
        head = task;
        notify();
      }

      last = task;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/native-promise-constructor.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/core-js/internals/native-promise-constructor.js ***!
    \**********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsNativePromiseConstructorJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    module.exports = global.Promise;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/native-symbol.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/internals/native-symbol.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsNativeSymbolJs(module, exports, __webpack_require__) {
    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
      // Chrome 38 Symbol has incorrect toString conversion
      // eslint-disable-next-line no-undef
      return !String(Symbol());
    });
    /***/
  },

  /***/
  "./node_modules/core-js/internals/native-weak-map.js":
  /*!***********************************************************!*\
    !*** ./node_modules/core-js/internals/native-weak-map.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsNativeWeakMapJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var inspectSource = __webpack_require__(
    /*! ../internals/inspect-source */
    "./node_modules/core-js/internals/inspect-source.js");

    var WeakMap = global.WeakMap;
    module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));
    /***/
  },

  /***/
  "./node_modules/core-js/internals/new-promise-capability.js":
  /*!******************************************************************!*\
    !*** ./node_modules/core-js/internals/new-promise-capability.js ***!
    \******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsNewPromiseCapabilityJs(module, exports, __webpack_require__) {
    "use strict";

    var aFunction = __webpack_require__(
    /*! ../internals/a-function */
    "./node_modules/core-js/internals/a-function.js");

    var PromiseCapability = function PromiseCapability(C) {
      var resolve, reject;
      this.promise = new C(function ($$resolve, $$reject) {
        if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
        resolve = $$resolve;
        reject = $$reject;
      });
      this.resolve = aFunction(resolve);
      this.reject = aFunction(reject);
    }; // 25.4.1.5 NewPromiseCapability(C)


    module.exports.f = function (C) {
      return new PromiseCapability(C);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/not-a-regexp.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/internals/not-a-regexp.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsNotARegexpJs(module, exports, __webpack_require__) {
    var isRegExp = __webpack_require__(
    /*! ../internals/is-regexp */
    "./node_modules/core-js/internals/is-regexp.js");

    module.exports = function (it) {
      if (isRegExp(it)) {
        throw TypeError("The method doesn't accept regular expressions");
      }

      return it;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/number-is-finite.js":
  /*!************************************************************!*\
    !*** ./node_modules/core-js/internals/number-is-finite.js ***!
    \************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsNumberIsFiniteJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var globalIsFinite = global.isFinite; // `Number.isFinite` method
    // https://tc39.github.io/ecma262/#sec-number.isfinite

    module.exports = Number.isFinite || function isFinite(it) {
      return typeof it == 'number' && globalIsFinite(it);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/number-parse-float.js":
  /*!**************************************************************!*\
    !*** ./node_modules/core-js/internals/number-parse-float.js ***!
    \**************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsNumberParseFloatJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var trim = __webpack_require__(
    /*! ../internals/string-trim */
    "./node_modules/core-js/internals/string-trim.js").trim;

    var whitespaces = __webpack_require__(
    /*! ../internals/whitespaces */
    "./node_modules/core-js/internals/whitespaces.js");

    var $parseFloat = global.parseFloat;
    var FORCED = 1 / $parseFloat(whitespaces + '-0') !== -Infinity; // `parseFloat` method
    // https://tc39.github.io/ecma262/#sec-parsefloat-string

    module.exports = FORCED ? function parseFloat(string) {
      var trimmedString = trim(String(string));
      var result = $parseFloat(trimmedString);
      return result === 0 && trimmedString.charAt(0) == '-' ? -0 : result;
    } : $parseFloat;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/number-parse-int.js":
  /*!************************************************************!*\
    !*** ./node_modules/core-js/internals/number-parse-int.js ***!
    \************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsNumberParseIntJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var trim = __webpack_require__(
    /*! ../internals/string-trim */
    "./node_modules/core-js/internals/string-trim.js").trim;

    var whitespaces = __webpack_require__(
    /*! ../internals/whitespaces */
    "./node_modules/core-js/internals/whitespaces.js");

    var $parseInt = global.parseInt;
    var hex = /^[+-]?0[Xx]/;
    var FORCED = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22; // `parseInt` method
    // https://tc39.github.io/ecma262/#sec-parseint-string-radix

    module.exports = FORCED ? function parseInt(string, radix) {
      var S = trim(String(string));
      return $parseInt(S, radix >>> 0 || (hex.test(S) ? 16 : 10));
    } : $parseInt;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/object-assign.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/internals/object-assign.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsObjectAssignJs(module, exports, __webpack_require__) {
    "use strict";

    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var objectKeys = __webpack_require__(
    /*! ../internals/object-keys */
    "./node_modules/core-js/internals/object-keys.js");

    var getOwnPropertySymbolsModule = __webpack_require__(
    /*! ../internals/object-get-own-property-symbols */
    "./node_modules/core-js/internals/object-get-own-property-symbols.js");

    var propertyIsEnumerableModule = __webpack_require__(
    /*! ../internals/object-property-is-enumerable */
    "./node_modules/core-js/internals/object-property-is-enumerable.js");

    var toObject = __webpack_require__(
    /*! ../internals/to-object */
    "./node_modules/core-js/internals/to-object.js");

    var IndexedObject = __webpack_require__(
    /*! ../internals/indexed-object */
    "./node_modules/core-js/internals/indexed-object.js");

    var nativeAssign = Object.assign;
    var defineProperty = Object.defineProperty; // `Object.assign` method
    // https://tc39.github.io/ecma262/#sec-object.assign

    module.exports = !nativeAssign || fails(function () {
      // should have correct order of operations (Edge bug)
      if (DESCRIPTORS && nativeAssign({
        b: 1
      }, nativeAssign(defineProperty({}, 'a', {
        enumerable: true,
        get: function get() {
          defineProperty(this, 'b', {
            value: 3,
            enumerable: false
          });
        }
      }), {
        b: 2
      })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)

      var A = {};
      var B = {}; // eslint-disable-next-line no-undef

      var symbol = Symbol();
      var alphabet = 'abcdefghijklmnopqrst';
      A[symbol] = 7;
      alphabet.split('').forEach(function (chr) {
        B[chr] = chr;
      });
      return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
    }) ? function assign(target, source) {
      // eslint-disable-line no-unused-vars
      var T = toObject(target);
      var argumentsLength = arguments.length;
      var index = 1;
      var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
      var propertyIsEnumerable = propertyIsEnumerableModule.f;

      while (argumentsLength > index) {
        var S = IndexedObject(arguments[index++]);
        var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
        var length = keys.length;
        var j = 0;
        var key;

        while (length > j) {
          key = keys[j++];
          if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
        }
      }

      return T;
    } : nativeAssign;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/object-create.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/internals/object-create.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsObjectCreateJs(module, exports, __webpack_require__) {
    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js");

    var defineProperties = __webpack_require__(
    /*! ../internals/object-define-properties */
    "./node_modules/core-js/internals/object-define-properties.js");

    var enumBugKeys = __webpack_require__(
    /*! ../internals/enum-bug-keys */
    "./node_modules/core-js/internals/enum-bug-keys.js");

    var hiddenKeys = __webpack_require__(
    /*! ../internals/hidden-keys */
    "./node_modules/core-js/internals/hidden-keys.js");

    var html = __webpack_require__(
    /*! ../internals/html */
    "./node_modules/core-js/internals/html.js");

    var documentCreateElement = __webpack_require__(
    /*! ../internals/document-create-element */
    "./node_modules/core-js/internals/document-create-element.js");

    var sharedKey = __webpack_require__(
    /*! ../internals/shared-key */
    "./node_modules/core-js/internals/shared-key.js");

    var GT = '>';
    var LT = '<';
    var PROTOTYPE = 'prototype';
    var SCRIPT = 'script';
    var IE_PROTO = sharedKey('IE_PROTO');

    var EmptyConstructor = function EmptyConstructor() {
      /* empty */
    };

    var scriptTag = function scriptTag(content) {
      return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
    }; // Create object with fake `null` prototype: use ActiveX Object with cleared prototype


    var NullProtoObjectViaActiveX = function NullProtoObjectViaActiveX(activeXDocument) {
      activeXDocument.write(scriptTag(''));
      activeXDocument.close();
      var temp = activeXDocument.parentWindow.Object;
      activeXDocument = null; // avoid memory leak

      return temp;
    }; // Create object with fake `null` prototype: use iframe Object with cleared prototype


    var NullProtoObjectViaIFrame = function NullProtoObjectViaIFrame() {
      // Thrash, waste and sodomy: IE GC bug
      var iframe = documentCreateElement('iframe');
      var JS = 'java' + SCRIPT + ':';
      var iframeDocument;
      iframe.style.display = 'none';
      html.appendChild(iframe); // https://github.com/zloirock/core-js/issues/475

      iframe.src = String(JS);
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(scriptTag('document.F=Object'));
      iframeDocument.close();
      return iframeDocument.F;
    }; // Check for document.domain and active x support
    // No need to use active x approach when document.domain is not set
    // see https://github.com/es-shims/es5-shim/issues/150
    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
    // avoid IE GC bug


    var activeXDocument;

    var _NullProtoObject = function NullProtoObject() {
      try {
        /* global ActiveXObject */
        activeXDocument = document.domain && new ActiveXObject('htmlfile');
      } catch (error) {
        /* ignore */
      }

      _NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
      var length = enumBugKeys.length;

      while (length--) {
        delete _NullProtoObject[PROTOTYPE][enumBugKeys[length]];
      }

      return _NullProtoObject();
    };

    hiddenKeys[IE_PROTO] = true; // `Object.create` method
    // https://tc39.github.io/ecma262/#sec-object.create

    module.exports = Object.create || function create(O, Properties) {
      var result;

      if (O !== null) {
        EmptyConstructor[PROTOTYPE] = anObject(O);
        result = new EmptyConstructor();
        EmptyConstructor[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

        result[IE_PROTO] = O;
      } else result = _NullProtoObject();

      return Properties === undefined ? result : defineProperties(result, Properties);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/object-define-properties.js":
  /*!********************************************************************!*\
    !*** ./node_modules/core-js/internals/object-define-properties.js ***!
    \********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsObjectDefinePropertiesJs(module, exports, __webpack_require__) {
    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var definePropertyModule = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js");

    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js");

    var objectKeys = __webpack_require__(
    /*! ../internals/object-keys */
    "./node_modules/core-js/internals/object-keys.js"); // `Object.defineProperties` method
    // https://tc39.github.io/ecma262/#sec-object.defineproperties


    module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
      anObject(O);
      var keys = objectKeys(Properties);
      var length = keys.length;
      var index = 0;
      var key;

      while (length > index) {
        definePropertyModule.f(O, key = keys[index++], Properties[key]);
      }

      return O;
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/object-define-property.js":
  /*!******************************************************************!*\
    !*** ./node_modules/core-js/internals/object-define-property.js ***!
    \******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsObjectDefinePropertyJs(module, exports, __webpack_require__) {
    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var IE8_DOM_DEFINE = __webpack_require__(
    /*! ../internals/ie8-dom-define */
    "./node_modules/core-js/internals/ie8-dom-define.js");

    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js");

    var toPrimitive = __webpack_require__(
    /*! ../internals/to-primitive */
    "./node_modules/core-js/internals/to-primitive.js");

    var nativeDefineProperty = Object.defineProperty; // `Object.defineProperty` method
    // https://tc39.github.io/ecma262/#sec-object.defineproperty

    exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
      anObject(O);
      P = toPrimitive(P, true);
      anObject(Attributes);
      if (IE8_DOM_DEFINE) try {
        return nativeDefineProperty(O, P, Attributes);
      } catch (error) {
        /* empty */
      }
      if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
      if ('value' in Attributes) O[P] = Attributes.value;
      return O;
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/object-get-own-property-descriptor.js":
  /*!******************************************************************************!*\
    !*** ./node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
    \******************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsObjectGetOwnPropertyDescriptorJs(module, exports, __webpack_require__) {
    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var propertyIsEnumerableModule = __webpack_require__(
    /*! ../internals/object-property-is-enumerable */
    "./node_modules/core-js/internals/object-property-is-enumerable.js");

    var createPropertyDescriptor = __webpack_require__(
    /*! ../internals/create-property-descriptor */
    "./node_modules/core-js/internals/create-property-descriptor.js");

    var toIndexedObject = __webpack_require__(
    /*! ../internals/to-indexed-object */
    "./node_modules/core-js/internals/to-indexed-object.js");

    var toPrimitive = __webpack_require__(
    /*! ../internals/to-primitive */
    "./node_modules/core-js/internals/to-primitive.js");

    var has = __webpack_require__(
    /*! ../internals/has */
    "./node_modules/core-js/internals/has.js");

    var IE8_DOM_DEFINE = __webpack_require__(
    /*! ../internals/ie8-dom-define */
    "./node_modules/core-js/internals/ie8-dom-define.js");

    var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
    // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor

    exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
      O = toIndexedObject(O);
      P = toPrimitive(P, true);
      if (IE8_DOM_DEFINE) try {
        return nativeGetOwnPropertyDescriptor(O, P);
      } catch (error) {
        /* empty */
      }
      if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/object-get-own-property-names-external.js":
  /*!**********************************************************************************!*\
    !*** ./node_modules/core-js/internals/object-get-own-property-names-external.js ***!
    \**********************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsObjectGetOwnPropertyNamesExternalJs(module, exports, __webpack_require__) {
    var toIndexedObject = __webpack_require__(
    /*! ../internals/to-indexed-object */
    "./node_modules/core-js/internals/to-indexed-object.js");

    var nativeGetOwnPropertyNames = __webpack_require__(
    /*! ../internals/object-get-own-property-names */
    "./node_modules/core-js/internals/object-get-own-property-names.js").f;

    var toString = {}.toString;
    var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

    var getWindowNames = function getWindowNames(it) {
      try {
        return nativeGetOwnPropertyNames(it);
      } catch (error) {
        return windowNames.slice();
      }
    }; // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window


    module.exports.f = function getOwnPropertyNames(it) {
      return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : nativeGetOwnPropertyNames(toIndexedObject(it));
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/object-get-own-property-names.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/core-js/internals/object-get-own-property-names.js ***!
    \*************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsObjectGetOwnPropertyNamesJs(module, exports, __webpack_require__) {
    var internalObjectKeys = __webpack_require__(
    /*! ../internals/object-keys-internal */
    "./node_modules/core-js/internals/object-keys-internal.js");

    var enumBugKeys = __webpack_require__(
    /*! ../internals/enum-bug-keys */
    "./node_modules/core-js/internals/enum-bug-keys.js");

    var hiddenKeys = enumBugKeys.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method
    // https://tc39.github.io/ecma262/#sec-object.getownpropertynames

    exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
      return internalObjectKeys(O, hiddenKeys);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/object-get-own-property-symbols.js":
  /*!***************************************************************************!*\
    !*** ./node_modules/core-js/internals/object-get-own-property-symbols.js ***!
    \***************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsObjectGetOwnPropertySymbolsJs(module, exports) {
    exports.f = Object.getOwnPropertySymbols;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/object-get-prototype-of.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/core-js/internals/object-get-prototype-of.js ***!
    \*******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsObjectGetPrototypeOfJs(module, exports, __webpack_require__) {
    var has = __webpack_require__(
    /*! ../internals/has */
    "./node_modules/core-js/internals/has.js");

    var toObject = __webpack_require__(
    /*! ../internals/to-object */
    "./node_modules/core-js/internals/to-object.js");

    var sharedKey = __webpack_require__(
    /*! ../internals/shared-key */
    "./node_modules/core-js/internals/shared-key.js");

    var CORRECT_PROTOTYPE_GETTER = __webpack_require__(
    /*! ../internals/correct-prototype-getter */
    "./node_modules/core-js/internals/correct-prototype-getter.js");

    var IE_PROTO = sharedKey('IE_PROTO');
    var ObjectPrototype = Object.prototype; // `Object.getPrototypeOf` method
    // https://tc39.github.io/ecma262/#sec-object.getprototypeof

    module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
      O = toObject(O);
      if (has(O, IE_PROTO)) return O[IE_PROTO];

      if (typeof O.constructor == 'function' && O instanceof O.constructor) {
        return O.constructor.prototype;
      }

      return O instanceof Object ? ObjectPrototype : null;
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/object-keys-internal.js":
  /*!****************************************************************!*\
    !*** ./node_modules/core-js/internals/object-keys-internal.js ***!
    \****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsObjectKeysInternalJs(module, exports, __webpack_require__) {
    var has = __webpack_require__(
    /*! ../internals/has */
    "./node_modules/core-js/internals/has.js");

    var toIndexedObject = __webpack_require__(
    /*! ../internals/to-indexed-object */
    "./node_modules/core-js/internals/to-indexed-object.js");

    var indexOf = __webpack_require__(
    /*! ../internals/array-includes */
    "./node_modules/core-js/internals/array-includes.js").indexOf;

    var hiddenKeys = __webpack_require__(
    /*! ../internals/hidden-keys */
    "./node_modules/core-js/internals/hidden-keys.js");

    module.exports = function (object, names) {
      var O = toIndexedObject(object);
      var i = 0;
      var result = [];
      var key;

      for (key in O) {
        !has(hiddenKeys, key) && has(O, key) && result.push(key);
      } // Don't enum bug & hidden keys


      while (names.length > i) {
        if (has(O, key = names[i++])) {
          ~indexOf(result, key) || result.push(key);
        }
      }

      return result;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/object-keys.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/internals/object-keys.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsObjectKeysJs(module, exports, __webpack_require__) {
    var internalObjectKeys = __webpack_require__(
    /*! ../internals/object-keys-internal */
    "./node_modules/core-js/internals/object-keys-internal.js");

    var enumBugKeys = __webpack_require__(
    /*! ../internals/enum-bug-keys */
    "./node_modules/core-js/internals/enum-bug-keys.js"); // `Object.keys` method
    // https://tc39.github.io/ecma262/#sec-object.keys


    module.exports = Object.keys || function keys(O) {
      return internalObjectKeys(O, enumBugKeys);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/object-property-is-enumerable.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/core-js/internals/object-property-is-enumerable.js ***!
    \*************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsObjectPropertyIsEnumerableJs(module, exports, __webpack_require__) {
    "use strict";

    var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug

    var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({
      1: 2
    }, 1); // `Object.prototype.propertyIsEnumerable` method implementation
    // https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable

    exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
      var descriptor = getOwnPropertyDescriptor(this, V);
      return !!descriptor && descriptor.enumerable;
    } : nativePropertyIsEnumerable;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/object-set-prototype-of.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/core-js/internals/object-set-prototype-of.js ***!
    \*******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsObjectSetPrototypeOfJs(module, exports, __webpack_require__) {
    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js");

    var aPossiblePrototype = __webpack_require__(
    /*! ../internals/a-possible-prototype */
    "./node_modules/core-js/internals/a-possible-prototype.js"); // `Object.setPrototypeOf` method
    // https://tc39.github.io/ecma262/#sec-object.setprototypeof
    // Works with __proto__ only. Old v8 can't work with null proto objects.

    /* eslint-disable no-proto */


    module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
      var CORRECT_SETTER = false;
      var test = {};
      var setter;

      try {
        setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
        setter.call(test, []);
        CORRECT_SETTER = test instanceof Array;
      } catch (error) {
        /* empty */
      }

      return function setPrototypeOf(O, proto) {
        anObject(O);
        aPossiblePrototype(proto);
        if (CORRECT_SETTER) setter.call(O, proto);else O.__proto__ = proto;
        return O;
      };
    }() : undefined);
    /***/
  },

  /***/
  "./node_modules/core-js/internals/object-to-string.js":
  /*!************************************************************!*\
    !*** ./node_modules/core-js/internals/object-to-string.js ***!
    \************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsObjectToStringJs(module, exports, __webpack_require__) {
    "use strict";

    var TO_STRING_TAG_SUPPORT = __webpack_require__(
    /*! ../internals/to-string-tag-support */
    "./node_modules/core-js/internals/to-string-tag-support.js");

    var classof = __webpack_require__(
    /*! ../internals/classof */
    "./node_modules/core-js/internals/classof.js"); // `Object.prototype.toString` method implementation
    // https://tc39.github.io/ecma262/#sec-object.prototype.tostring


    module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
      return '[object ' + classof(this) + ']';
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/own-keys.js":
  /*!****************************************************!*\
    !*** ./node_modules/core-js/internals/own-keys.js ***!
    \****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsOwnKeysJs(module, exports, __webpack_require__) {
    var getBuiltIn = __webpack_require__(
    /*! ../internals/get-built-in */
    "./node_modules/core-js/internals/get-built-in.js");

    var getOwnPropertyNamesModule = __webpack_require__(
    /*! ../internals/object-get-own-property-names */
    "./node_modules/core-js/internals/object-get-own-property-names.js");

    var getOwnPropertySymbolsModule = __webpack_require__(
    /*! ../internals/object-get-own-property-symbols */
    "./node_modules/core-js/internals/object-get-own-property-symbols.js");

    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js"); // all object keys, includes non-enumerable and symbols


    module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
      var keys = getOwnPropertyNamesModule.f(anObject(it));
      var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
      return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/path.js":
  /*!************************************************!*\
    !*** ./node_modules/core-js/internals/path.js ***!
    \************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsPathJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    module.exports = global;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/perform.js":
  /*!***************************************************!*\
    !*** ./node_modules/core-js/internals/perform.js ***!
    \***************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsPerformJs(module, exports) {
    module.exports = function (exec) {
      try {
        return {
          error: false,
          value: exec()
        };
      } catch (error) {
        return {
          error: true,
          value: error
        };
      }
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/promise-resolve.js":
  /*!***********************************************************!*\
    !*** ./node_modules/core-js/internals/promise-resolve.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsPromiseResolveJs(module, exports, __webpack_require__) {
    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var newPromiseCapability = __webpack_require__(
    /*! ../internals/new-promise-capability */
    "./node_modules/core-js/internals/new-promise-capability.js");

    module.exports = function (C, x) {
      anObject(C);
      if (isObject(x) && x.constructor === C) return x;
      var promiseCapability = newPromiseCapability.f(C);
      var resolve = promiseCapability.resolve;
      resolve(x);
      return promiseCapability.promise;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/redefine-all.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/internals/redefine-all.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsRedefineAllJs(module, exports, __webpack_require__) {
    var redefine = __webpack_require__(
    /*! ../internals/redefine */
    "./node_modules/core-js/internals/redefine.js");

    module.exports = function (target, src, options) {
      for (var key in src) {
        redefine(target, key, src[key], options);
      }

      return target;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/redefine.js":
  /*!****************************************************!*\
    !*** ./node_modules/core-js/internals/redefine.js ***!
    \****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsRedefineJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var createNonEnumerableProperty = __webpack_require__(
    /*! ../internals/create-non-enumerable-property */
    "./node_modules/core-js/internals/create-non-enumerable-property.js");

    var has = __webpack_require__(
    /*! ../internals/has */
    "./node_modules/core-js/internals/has.js");

    var setGlobal = __webpack_require__(
    /*! ../internals/set-global */
    "./node_modules/core-js/internals/set-global.js");

    var inspectSource = __webpack_require__(
    /*! ../internals/inspect-source */
    "./node_modules/core-js/internals/inspect-source.js");

    var InternalStateModule = __webpack_require__(
    /*! ../internals/internal-state */
    "./node_modules/core-js/internals/internal-state.js");

    var getInternalState = InternalStateModule.get;
    var enforceInternalState = InternalStateModule.enforce;
    var TEMPLATE = String(String).split('String');
    (module.exports = function (O, key, value, options) {
      var unsafe = options ? !!options.unsafe : false;
      var simple = options ? !!options.enumerable : false;
      var noTargetGet = options ? !!options.noTargetGet : false;

      if (typeof value == 'function') {
        if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
        enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
      }

      if (O === global) {
        if (simple) O[key] = value;else setGlobal(key, value);
        return;
      } else if (!unsafe) {
        delete O[key];
      } else if (!noTargetGet && O[key]) {
        simple = true;
      }

      if (simple) O[key] = value;else createNonEnumerableProperty(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
    })(Function.prototype, 'toString', function toString() {
      return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
    });
    /***/
  },

  /***/
  "./node_modules/core-js/internals/regexp-exec-abstract.js":
  /*!****************************************************************!*\
    !*** ./node_modules/core-js/internals/regexp-exec-abstract.js ***!
    \****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsRegexpExecAbstractJs(module, exports, __webpack_require__) {
    var classof = __webpack_require__(
    /*! ./classof-raw */
    "./node_modules/core-js/internals/classof-raw.js");

    var regexpExec = __webpack_require__(
    /*! ./regexp-exec */
    "./node_modules/core-js/internals/regexp-exec.js"); // `RegExpExec` abstract operation
    // https://tc39.github.io/ecma262/#sec-regexpexec


    module.exports = function (R, S) {
      var exec = R.exec;

      if (typeof exec === 'function') {
        var result = exec.call(R, S);

        if (typeof result !== 'object') {
          throw TypeError('RegExp exec method returned something other than an Object or null');
        }

        return result;
      }

      if (classof(R) !== 'RegExp') {
        throw TypeError('RegExp#exec called on incompatible receiver');
      }

      return regexpExec.call(R, S);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/regexp-exec.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/internals/regexp-exec.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsRegexpExecJs(module, exports, __webpack_require__) {
    "use strict";

    var regexpFlags = __webpack_require__(
    /*! ./regexp-flags */
    "./node_modules/core-js/internals/regexp-flags.js");

    var stickyHelpers = __webpack_require__(
    /*! ./regexp-sticky-helpers */
    "./node_modules/core-js/internals/regexp-sticky-helpers.js");

    var nativeExec = RegExp.prototype.exec; // This always refers to the native implementation, because the
    // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
    // which loads this file before patching the method.

    var nativeReplace = String.prototype.replace;
    var patchedExec = nativeExec;

    var UPDATES_LAST_INDEX_WRONG = function () {
      var re1 = /a/;
      var re2 = /b*/g;
      nativeExec.call(re1, 'a');
      nativeExec.call(re2, 'a');
      return re1.lastIndex !== 0 || re2.lastIndex !== 0;
    }();

    var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET; // nonparticipating capturing group, copied from es5-shim's String#split patch.

    var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
    var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;

    if (PATCH) {
      patchedExec = function exec(str) {
        var re = this;
        var lastIndex, reCopy, match, i;
        var sticky = UNSUPPORTED_Y && re.sticky;
        var flags = regexpFlags.call(re);
        var source = re.source;
        var charsAdded = 0;
        var strCopy = str;

        if (sticky) {
          flags = flags.replace('y', '');

          if (flags.indexOf('g') === -1) {
            flags += 'g';
          }

          strCopy = String(str).slice(re.lastIndex); // Support anchored sticky behavior.

          if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
            source = '(?: ' + source + ')';
            strCopy = ' ' + strCopy;
            charsAdded++;
          } // ^(? + rx + ) is needed, in combination with some str slicing, to
          // simulate the 'y' flag.


          reCopy = new RegExp('^(?:' + source + ')', flags);
        }

        if (NPCG_INCLUDED) {
          reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
        }

        if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;
        match = nativeExec.call(sticky ? reCopy : re, strCopy);

        if (sticky) {
          if (match) {
            match.input = match.input.slice(charsAdded);
            match[0] = match[0].slice(charsAdded);
            match.index = re.lastIndex;
            re.lastIndex += match[0].length;
          } else re.lastIndex = 0;
        } else if (UPDATES_LAST_INDEX_WRONG && match) {
          re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
        }

        if (NPCG_INCLUDED && match && match.length > 1) {
          // Fix browsers whose `exec` methods don't consistently return `undefined`
          // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
          nativeReplace.call(match[0], reCopy, function () {
            for (i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undefined) match[i] = undefined;
            }
          });
        }

        return match;
      };
    }

    module.exports = patchedExec;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/regexp-flags.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/internals/regexp-flags.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsRegexpFlagsJs(module, exports, __webpack_require__) {
    "use strict";

    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js"); // `RegExp.prototype.flags` getter implementation
    // https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags


    module.exports = function () {
      var that = anObject(this);
      var result = '';
      if (that.global) result += 'g';
      if (that.ignoreCase) result += 'i';
      if (that.multiline) result += 'm';
      if (that.dotAll) result += 's';
      if (that.unicode) result += 'u';
      if (that.sticky) result += 'y';
      return result;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/regexp-sticky-helpers.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/core-js/internals/regexp-sticky-helpers.js ***!
    \*****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsRegexpStickyHelpersJs(module, exports, __webpack_require__) {
    "use strict";

    var fails = __webpack_require__(
    /*! ./fails */
    "./node_modules/core-js/internals/fails.js"); // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
    // so we use an intermediate function.


    function RE(s, f) {
      return RegExp(s, f);
    }

    exports.UNSUPPORTED_Y = fails(function () {
      // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
      var re = RE('a', 'y');
      re.lastIndex = 2;
      return re.exec('abcd') != null;
    });
    exports.BROKEN_CARET = fails(function () {
      // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
      var re = RE('^r', 'gy');
      re.lastIndex = 2;
      return re.exec('str') != null;
    });
    /***/
  },

  /***/
  "./node_modules/core-js/internals/require-object-coercible.js":
  /*!********************************************************************!*\
    !*** ./node_modules/core-js/internals/require-object-coercible.js ***!
    \********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsRequireObjectCoercibleJs(module, exports) {
    // `RequireObjectCoercible` abstract operation
    // https://tc39.github.io/ecma262/#sec-requireobjectcoercible
    module.exports = function (it) {
      if (it == undefined) throw TypeError("Can't call method on " + it);
      return it;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/same-value.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/internals/same-value.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsSameValueJs(module, exports) {
    // `SameValue` abstract operation
    // https://tc39.github.io/ecma262/#sec-samevalue
    module.exports = Object.is || function is(x, y) {
      // eslint-disable-next-line no-self-compare
      return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/set-global.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/internals/set-global.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsSetGlobalJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var createNonEnumerableProperty = __webpack_require__(
    /*! ../internals/create-non-enumerable-property */
    "./node_modules/core-js/internals/create-non-enumerable-property.js");

    module.exports = function (key, value) {
      try {
        createNonEnumerableProperty(global, key, value);
      } catch (error) {
        global[key] = value;
      }

      return value;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/set-species.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/internals/set-species.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsSetSpeciesJs(module, exports, __webpack_require__) {
    "use strict";

    var getBuiltIn = __webpack_require__(
    /*! ../internals/get-built-in */
    "./node_modules/core-js/internals/get-built-in.js");

    var definePropertyModule = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var SPECIES = wellKnownSymbol('species');

    module.exports = function (CONSTRUCTOR_NAME) {
      var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
      var defineProperty = definePropertyModule.f;

      if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
        defineProperty(Constructor, SPECIES, {
          configurable: true,
          get: function get() {
            return this;
          }
        });
      }
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/set-to-string-tag.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/internals/set-to-string-tag.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsSetToStringTagJs(module, exports, __webpack_require__) {
    var defineProperty = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js").f;

    var has = __webpack_require__(
    /*! ../internals/has */
    "./node_modules/core-js/internals/has.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var TO_STRING_TAG = wellKnownSymbol('toStringTag');

    module.exports = function (it, TAG, STATIC) {
      if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
        defineProperty(it, TO_STRING_TAG, {
          configurable: true,
          value: TAG
        });
      }
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/shared-key.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/internals/shared-key.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsSharedKeyJs(module, exports, __webpack_require__) {
    var shared = __webpack_require__(
    /*! ../internals/shared */
    "./node_modules/core-js/internals/shared.js");

    var uid = __webpack_require__(
    /*! ../internals/uid */
    "./node_modules/core-js/internals/uid.js");

    var keys = shared('keys');

    module.exports = function (key) {
      return keys[key] || (keys[key] = uid(key));
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/shared-store.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/internals/shared-store.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsSharedStoreJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var setGlobal = __webpack_require__(
    /*! ../internals/set-global */
    "./node_modules/core-js/internals/set-global.js");

    var SHARED = '__core-js_shared__';
    var store = global[SHARED] || setGlobal(SHARED, {});
    module.exports = store;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/shared.js":
  /*!**************************************************!*\
    !*** ./node_modules/core-js/internals/shared.js ***!
    \**************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsSharedJs(module, exports, __webpack_require__) {
    var IS_PURE = __webpack_require__(
    /*! ../internals/is-pure */
    "./node_modules/core-js/internals/is-pure.js");

    var store = __webpack_require__(
    /*! ../internals/shared-store */
    "./node_modules/core-js/internals/shared-store.js");

    (module.exports = function (key, value) {
      return store[key] || (store[key] = value !== undefined ? value : {});
    })('versions', []).push({
      version: '3.6.4',
      mode: IS_PURE ? 'pure' : 'global',
      copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
    });
    /***/
  },

  /***/
  "./node_modules/core-js/internals/species-constructor.js":
  /*!***************************************************************!*\
    !*** ./node_modules/core-js/internals/species-constructor.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsSpeciesConstructorJs(module, exports, __webpack_require__) {
    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js");

    var aFunction = __webpack_require__(
    /*! ../internals/a-function */
    "./node_modules/core-js/internals/a-function.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var SPECIES = wellKnownSymbol('species'); // `SpeciesConstructor` abstract operation
    // https://tc39.github.io/ecma262/#sec-speciesconstructor

    module.exports = function (O, defaultConstructor) {
      var C = anObject(O).constructor;
      var S;
      return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/string-html-forced.js":
  /*!**************************************************************!*\
    !*** ./node_modules/core-js/internals/string-html-forced.js ***!
    \**************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsStringHtmlForcedJs(module, exports, __webpack_require__) {
    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js"); // check the existence of a method, lowercase
    // of a tag and escaping quotes in arguments


    module.exports = function (METHOD_NAME) {
      return fails(function () {
        var test = ''[METHOD_NAME]('"');
        return test !== test.toLowerCase() || test.split('"').length > 3;
      });
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/string-multibyte.js":
  /*!************************************************************!*\
    !*** ./node_modules/core-js/internals/string-multibyte.js ***!
    \************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsStringMultibyteJs(module, exports, __webpack_require__) {
    var toInteger = __webpack_require__(
    /*! ../internals/to-integer */
    "./node_modules/core-js/internals/to-integer.js");

    var requireObjectCoercible = __webpack_require__(
    /*! ../internals/require-object-coercible */
    "./node_modules/core-js/internals/require-object-coercible.js"); // `String.prototype.{ codePointAt, at }` methods implementation


    var createMethod = function createMethod(CONVERT_TO_STRING) {
      return function ($this, pos) {
        var S = String(requireObjectCoercible($this));
        var position = toInteger(pos);
        var size = S.length;
        var first, second;
        if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
        first = S.charCodeAt(position);
        return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
      };
    };

    module.exports = {
      // `String.prototype.codePointAt` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
      codeAt: createMethod(false),
      // `String.prototype.at` method
      // https://github.com/mathiasbynens/String.prototype.at
      charAt: createMethod(true)
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/string-pad.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/internals/string-pad.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsStringPadJs(module, exports, __webpack_require__) {
    // https://github.com/tc39/proposal-string-pad-start-end
    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js");

    var repeat = __webpack_require__(
    /*! ../internals/string-repeat */
    "./node_modules/core-js/internals/string-repeat.js");

    var requireObjectCoercible = __webpack_require__(
    /*! ../internals/require-object-coercible */
    "./node_modules/core-js/internals/require-object-coercible.js");

    var ceil = Math.ceil; // `String.prototype.{ padStart, padEnd }` methods implementation

    var createMethod = function createMethod(IS_END) {
      return function ($this, maxLength, fillString) {
        var S = String(requireObjectCoercible($this));
        var stringLength = S.length;
        var fillStr = fillString === undefined ? ' ' : String(fillString);
        var intMaxLength = toLength(maxLength);
        var fillLen, stringFiller;
        if (intMaxLength <= stringLength || fillStr == '') return S;
        fillLen = intMaxLength - stringLength;
        stringFiller = repeat.call(fillStr, ceil(fillLen / fillStr.length));
        if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
        return IS_END ? S + stringFiller : stringFiller + S;
      };
    };

    module.exports = {
      // `String.prototype.padStart` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.padstart
      start: createMethod(false),
      // `String.prototype.padEnd` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.padend
      end: createMethod(true)
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/string-repeat.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/internals/string-repeat.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsStringRepeatJs(module, exports, __webpack_require__) {
    "use strict";

    var toInteger = __webpack_require__(
    /*! ../internals/to-integer */
    "./node_modules/core-js/internals/to-integer.js");

    var requireObjectCoercible = __webpack_require__(
    /*! ../internals/require-object-coercible */
    "./node_modules/core-js/internals/require-object-coercible.js"); // `String.prototype.repeat` method implementation
    // https://tc39.github.io/ecma262/#sec-string.prototype.repeat


    module.exports = ''.repeat || function repeat(count) {
      var str = String(requireObjectCoercible(this));
      var result = '';
      var n = toInteger(count);
      if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');

      for (; n > 0; (n >>>= 1) && (str += str)) {
        if (n & 1) result += str;
      }

      return result;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/string-trim-forced.js":
  /*!**************************************************************!*\
    !*** ./node_modules/core-js/internals/string-trim-forced.js ***!
    \**************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsStringTrimForcedJs(module, exports, __webpack_require__) {
    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var whitespaces = __webpack_require__(
    /*! ../internals/whitespaces */
    "./node_modules/core-js/internals/whitespaces.js");

    var non = "\u200B\x85\u180E"; // check that a method works with the correct list
    // of whitespaces and has a correct name

    module.exports = function (METHOD_NAME) {
      return fails(function () {
        return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
      });
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/string-trim.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/internals/string-trim.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsStringTrimJs(module, exports, __webpack_require__) {
    var requireObjectCoercible = __webpack_require__(
    /*! ../internals/require-object-coercible */
    "./node_modules/core-js/internals/require-object-coercible.js");

    var whitespaces = __webpack_require__(
    /*! ../internals/whitespaces */
    "./node_modules/core-js/internals/whitespaces.js");

    var whitespace = '[' + whitespaces + ']';
    var ltrim = RegExp('^' + whitespace + whitespace + '*');
    var rtrim = RegExp(whitespace + whitespace + '*$'); // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation

    var createMethod = function createMethod(TYPE) {
      return function ($this) {
        var string = String(requireObjectCoercible($this));
        if (TYPE & 1) string = string.replace(ltrim, '');
        if (TYPE & 2) string = string.replace(rtrim, '');
        return string;
      };
    };

    module.exports = {
      // `String.prototype.{ trimLeft, trimStart }` methods
      // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
      start: createMethod(1),
      // `String.prototype.{ trimRight, trimEnd }` methods
      // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
      end: createMethod(2),
      // `String.prototype.trim` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.trim
      trim: createMethod(3)
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/task.js":
  /*!************************************************!*\
    !*** ./node_modules/core-js/internals/task.js ***!
    \************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsTaskJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var classof = __webpack_require__(
    /*! ../internals/classof-raw */
    "./node_modules/core-js/internals/classof-raw.js");

    var bind = __webpack_require__(
    /*! ../internals/function-bind-context */
    "./node_modules/core-js/internals/function-bind-context.js");

    var html = __webpack_require__(
    /*! ../internals/html */
    "./node_modules/core-js/internals/html.js");

    var createElement = __webpack_require__(
    /*! ../internals/document-create-element */
    "./node_modules/core-js/internals/document-create-element.js");

    var IS_IOS = __webpack_require__(
    /*! ../internals/engine-is-ios */
    "./node_modules/core-js/internals/engine-is-ios.js");

    var location = global.location;
    var set = global.setImmediate;
    var clear = global.clearImmediate;
    var process = global.process;
    var MessageChannel = global.MessageChannel;
    var Dispatch = global.Dispatch;
    var counter = 0;
    var queue = {};
    var ONREADYSTATECHANGE = 'onreadystatechange';
    var defer, channel, port;

    var run = function run(id) {
      // eslint-disable-next-line no-prototype-builtins
      if (queue.hasOwnProperty(id)) {
        var fn = queue[id];
        delete queue[id];
        fn();
      }
    };

    var runner = function runner(id) {
      return function () {
        run(id);
      };
    };

    var listener = function listener(event) {
      run(event.data);
    };

    var post = function post(id) {
      // old engines have not location.origin
      global.postMessage(id + '', location.protocol + '//' + location.host);
    }; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


    if (!set || !clear) {
      set = function setImmediate(fn) {
        var args = [];
        var i = 1;

        while (arguments.length > i) {
          args.push(arguments[i++]);
        }

        queue[++counter] = function () {
          // eslint-disable-next-line no-new-func
          (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
        };

        defer(counter);
        return counter;
      };

      clear = function clearImmediate(id) {
        delete queue[id];
      }; // Node.js 0.8-


      if (classof(process) == 'process') {
        defer = function defer(id) {
          process.nextTick(runner(id));
        }; // Sphere (JS game engine) Dispatch API

      } else if (Dispatch && Dispatch.now) {
        defer = function defer(id) {
          Dispatch.now(runner(id));
        }; // Browsers with MessageChannel, includes WebWorkers
        // except iOS - https://github.com/zloirock/core-js/issues/624

      } else if (MessageChannel && !IS_IOS) {
        channel = new MessageChannel();
        port = channel.port2;
        channel.port1.onmessage = listener;
        defer = bind(port.postMessage, port, 1); // Browsers with postMessage, skip WebWorkers
        // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
      } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts && !fails(post)) {
        defer = post;
        global.addEventListener('message', listener, false); // IE8-
      } else if (ONREADYSTATECHANGE in createElement('script')) {
        defer = function defer(id) {
          html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
            html.removeChild(this);
            run(id);
          };
        }; // Rest old browsers

      } else {
        defer = function defer(id) {
          setTimeout(runner(id), 0);
        };
      }
    }

    module.exports = {
      set: set,
      clear: clear
    };
    /***/
  },

  /***/
  "./node_modules/core-js/internals/this-number-value.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/internals/this-number-value.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsThisNumberValueJs(module, exports, __webpack_require__) {
    var classof = __webpack_require__(
    /*! ../internals/classof-raw */
    "./node_modules/core-js/internals/classof-raw.js"); // `thisNumberValue` abstract operation
    // https://tc39.github.io/ecma262/#sec-thisnumbervalue


    module.exports = function (value) {
      if (typeof value != 'number' && classof(value) != 'Number') {
        throw TypeError('Incorrect invocation');
      }

      return +value;
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/to-absolute-index.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/internals/to-absolute-index.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsToAbsoluteIndexJs(module, exports, __webpack_require__) {
    var toInteger = __webpack_require__(
    /*! ../internals/to-integer */
    "./node_modules/core-js/internals/to-integer.js");

    var max = Math.max;
    var min = Math.min; // Helper for a popular repeating case of the spec:
    // Let integer be ? ToInteger(index).
    // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).

    module.exports = function (index, length) {
      var integer = toInteger(index);
      return integer < 0 ? max(integer + length, 0) : min(integer, length);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/to-indexed-object.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/internals/to-indexed-object.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsToIndexedObjectJs(module, exports, __webpack_require__) {
    // toObject with fallback for non-array-like ES3 strings
    var IndexedObject = __webpack_require__(
    /*! ../internals/indexed-object */
    "./node_modules/core-js/internals/indexed-object.js");

    var requireObjectCoercible = __webpack_require__(
    /*! ../internals/require-object-coercible */
    "./node_modules/core-js/internals/require-object-coercible.js");

    module.exports = function (it) {
      return IndexedObject(requireObjectCoercible(it));
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/to-integer.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/internals/to-integer.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsToIntegerJs(module, exports) {
    var ceil = Math.ceil;
    var floor = Math.floor; // `ToInteger` abstract operation
    // https://tc39.github.io/ecma262/#sec-tointeger

    module.exports = function (argument) {
      return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/to-length.js":
  /*!*****************************************************!*\
    !*** ./node_modules/core-js/internals/to-length.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsToLengthJs(module, exports, __webpack_require__) {
    var toInteger = __webpack_require__(
    /*! ../internals/to-integer */
    "./node_modules/core-js/internals/to-integer.js");

    var min = Math.min; // `ToLength` abstract operation
    // https://tc39.github.io/ecma262/#sec-tolength

    module.exports = function (argument) {
      return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/to-object.js":
  /*!*****************************************************!*\
    !*** ./node_modules/core-js/internals/to-object.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsToObjectJs(module, exports, __webpack_require__) {
    var requireObjectCoercible = __webpack_require__(
    /*! ../internals/require-object-coercible */
    "./node_modules/core-js/internals/require-object-coercible.js"); // `ToObject` abstract operation
    // https://tc39.github.io/ecma262/#sec-toobject


    module.exports = function (argument) {
      return Object(requireObjectCoercible(argument));
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/to-primitive.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/internals/to-primitive.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsToPrimitiveJs(module, exports, __webpack_require__) {
    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js"); // `ToPrimitive` abstract operation
    // https://tc39.github.io/ecma262/#sec-toprimitive
    // instead of the ES6 spec version, we didn't implement @@toPrimitive case
    // and the second argument - flag - preferred type is a string


    module.exports = function (input, PREFERRED_STRING) {
      if (!isObject(input)) return input;
      var fn, val;
      if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
      if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
      if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
      throw TypeError("Can't convert object to primitive value");
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/to-string-tag-support.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/core-js/internals/to-string-tag-support.js ***!
    \*****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsToStringTagSupportJs(module, exports, __webpack_require__) {
    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var TO_STRING_TAG = wellKnownSymbol('toStringTag');
    var test = {};
    test[TO_STRING_TAG] = 'z';
    module.exports = String(test) === '[object z]';
    /***/
  },

  /***/
  "./node_modules/core-js/internals/uid.js":
  /*!***********************************************!*\
    !*** ./node_modules/core-js/internals/uid.js ***!
    \***********************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsUidJs(module, exports) {
    var id = 0;
    var postfix = Math.random();

    module.exports = function (key) {
      return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/use-symbol-as-uid.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/internals/use-symbol-as-uid.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsUseSymbolAsUidJs(module, exports, __webpack_require__) {
    var NATIVE_SYMBOL = __webpack_require__(
    /*! ../internals/native-symbol */
    "./node_modules/core-js/internals/native-symbol.js");

    module.exports = NATIVE_SYMBOL // eslint-disable-next-line no-undef
    && !Symbol.sham // eslint-disable-next-line no-undef
    && typeof Symbol.iterator == 'symbol';
    /***/
  },

  /***/
  "./node_modules/core-js/internals/well-known-symbol-wrapped.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/core-js/internals/well-known-symbol-wrapped.js ***!
    \*********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsWellKnownSymbolWrappedJs(module, exports, __webpack_require__) {
    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    exports.f = wellKnownSymbol;
    /***/
  },

  /***/
  "./node_modules/core-js/internals/well-known-symbol.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/internals/well-known-symbol.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsWellKnownSymbolJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var shared = __webpack_require__(
    /*! ../internals/shared */
    "./node_modules/core-js/internals/shared.js");

    var has = __webpack_require__(
    /*! ../internals/has */
    "./node_modules/core-js/internals/has.js");

    var uid = __webpack_require__(
    /*! ../internals/uid */
    "./node_modules/core-js/internals/uid.js");

    var NATIVE_SYMBOL = __webpack_require__(
    /*! ../internals/native-symbol */
    "./node_modules/core-js/internals/native-symbol.js");

    var USE_SYMBOL_AS_UID = __webpack_require__(
    /*! ../internals/use-symbol-as-uid */
    "./node_modules/core-js/internals/use-symbol-as-uid.js");

    var WellKnownSymbolsStore = shared('wks');
    var Symbol = global.Symbol;
    var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

    module.exports = function (name) {
      if (!has(WellKnownSymbolsStore, name)) {
        if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
      }

      return WellKnownSymbolsStore[name];
    };
    /***/

  },

  /***/
  "./node_modules/core-js/internals/whitespaces.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/internals/whitespaces.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsInternalsWhitespacesJs(module, exports) {
    // a string of all valid unicode whitespaces
    // eslint-disable-next-line max-len
    module.exports = "\t\n\x0B\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.concat.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.concat.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayConcatJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var isArray = __webpack_require__(
    /*! ../internals/is-array */
    "./node_modules/core-js/internals/is-array.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var toObject = __webpack_require__(
    /*! ../internals/to-object */
    "./node_modules/core-js/internals/to-object.js");

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js");

    var createProperty = __webpack_require__(
    /*! ../internals/create-property */
    "./node_modules/core-js/internals/create-property.js");

    var arraySpeciesCreate = __webpack_require__(
    /*! ../internals/array-species-create */
    "./node_modules/core-js/internals/array-species-create.js");

    var arrayMethodHasSpeciesSupport = __webpack_require__(
    /*! ../internals/array-method-has-species-support */
    "./node_modules/core-js/internals/array-method-has-species-support.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var V8_VERSION = __webpack_require__(
    /*! ../internals/engine-v8-version */
    "./node_modules/core-js/internals/engine-v8-version.js");

    var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
    var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
    var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded'; // We can't use this feature detection in V8 since it causes
    // deoptimization and serious performance degradation
    // https://github.com/zloirock/core-js/issues/679

    var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
      var array = [];
      array[IS_CONCAT_SPREADABLE] = false;
      return array.concat()[0] !== array;
    });
    var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

    var isConcatSpreadable = function isConcatSpreadable(O) {
      if (!isObject(O)) return false;
      var spreadable = O[IS_CONCAT_SPREADABLE];
      return spreadable !== undefined ? !!spreadable : isArray(O);
    };

    var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT; // `Array.prototype.concat` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.concat
    // with adding support of @@isConcatSpreadable and @@species

    $({
      target: 'Array',
      proto: true,
      forced: FORCED
    }, {
      concat: function concat(arg) {
        // eslint-disable-line no-unused-vars
        var O = toObject(this);
        var A = arraySpeciesCreate(O, 0);
        var n = 0;
        var i, k, length, len, E;

        for (i = -1, length = arguments.length; i < length; i++) {
          E = i === -1 ? O : arguments[i];

          if (isConcatSpreadable(E)) {
            len = toLength(E.length);
            if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);

            for (k = 0; k < len; k++, n++) {
              if (k in E) createProperty(A, n, E[k]);
            }
          } else {
            if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
            createProperty(A, n++, E);
          }
        }

        A.length = n;
        return A;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.copy-within.js":
  /*!**************************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.copy-within.js ***!
    \**************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayCopyWithinJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var copyWithin = __webpack_require__(
    /*! ../internals/array-copy-within */
    "./node_modules/core-js/internals/array-copy-within.js");

    var addToUnscopables = __webpack_require__(
    /*! ../internals/add-to-unscopables */
    "./node_modules/core-js/internals/add-to-unscopables.js"); // `Array.prototype.copyWithin` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.copywithin


    $({
      target: 'Array',
      proto: true
    }, {
      copyWithin: copyWithin
    }); // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

    addToUnscopables('copyWithin');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.every.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.every.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayEveryJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var $every = __webpack_require__(
    /*! ../internals/array-iteration */
    "./node_modules/core-js/internals/array-iteration.js").every;

    var arrayMethodIsStrict = __webpack_require__(
    /*! ../internals/array-method-is-strict */
    "./node_modules/core-js/internals/array-method-is-strict.js");

    var arrayMethodUsesToLength = __webpack_require__(
    /*! ../internals/array-method-uses-to-length */
    "./node_modules/core-js/internals/array-method-uses-to-length.js");

    var STRICT_METHOD = arrayMethodIsStrict('every');
    var USES_TO_LENGTH = arrayMethodUsesToLength('every'); // `Array.prototype.every` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.every

    $({
      target: 'Array',
      proto: true,
      forced: !STRICT_METHOD || !USES_TO_LENGTH
    }, {
      every: function every(callbackfn
      /* , thisArg */
      ) {
        return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.fill.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.fill.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayFillJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var fill = __webpack_require__(
    /*! ../internals/array-fill */
    "./node_modules/core-js/internals/array-fill.js");

    var addToUnscopables = __webpack_require__(
    /*! ../internals/add-to-unscopables */
    "./node_modules/core-js/internals/add-to-unscopables.js"); // `Array.prototype.fill` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.fill


    $({
      target: 'Array',
      proto: true
    }, {
      fill: fill
    }); // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

    addToUnscopables('fill');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.filter.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.filter.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayFilterJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var $filter = __webpack_require__(
    /*! ../internals/array-iteration */
    "./node_modules/core-js/internals/array-iteration.js").filter;

    var arrayMethodHasSpeciesSupport = __webpack_require__(
    /*! ../internals/array-method-has-species-support */
    "./node_modules/core-js/internals/array-method-has-species-support.js");

    var arrayMethodUsesToLength = __webpack_require__(
    /*! ../internals/array-method-uses-to-length */
    "./node_modules/core-js/internals/array-method-uses-to-length.js");

    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter'); // Edge 14- issue

    var USES_TO_LENGTH = arrayMethodUsesToLength('filter'); // `Array.prototype.filter` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.filter
    // with adding support of @@species

    $({
      target: 'Array',
      proto: true,
      forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
    }, {
      filter: function filter(callbackfn
      /* , thisArg */
      ) {
        return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.find-index.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.find-index.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayFindIndexJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var $findIndex = __webpack_require__(
    /*! ../internals/array-iteration */
    "./node_modules/core-js/internals/array-iteration.js").findIndex;

    var addToUnscopables = __webpack_require__(
    /*! ../internals/add-to-unscopables */
    "./node_modules/core-js/internals/add-to-unscopables.js");

    var arrayMethodUsesToLength = __webpack_require__(
    /*! ../internals/array-method-uses-to-length */
    "./node_modules/core-js/internals/array-method-uses-to-length.js");

    var FIND_INDEX = 'findIndex';
    var SKIPS_HOLES = true;
    var USES_TO_LENGTH = arrayMethodUsesToLength(FIND_INDEX); // Shouldn't skip holes

    if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () {
      SKIPS_HOLES = false;
    }); // `Array.prototype.findIndex` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.findindex

    $({
      target: 'Array',
      proto: true,
      forced: SKIPS_HOLES || !USES_TO_LENGTH
    }, {
      findIndex: function findIndex(callbackfn
      /* , that = undefined */
      ) {
        return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    }); // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

    addToUnscopables(FIND_INDEX);
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.find.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.find.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayFindJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var $find = __webpack_require__(
    /*! ../internals/array-iteration */
    "./node_modules/core-js/internals/array-iteration.js").find;

    var addToUnscopables = __webpack_require__(
    /*! ../internals/add-to-unscopables */
    "./node_modules/core-js/internals/add-to-unscopables.js");

    var arrayMethodUsesToLength = __webpack_require__(
    /*! ../internals/array-method-uses-to-length */
    "./node_modules/core-js/internals/array-method-uses-to-length.js");

    var FIND = 'find';
    var SKIPS_HOLES = true;
    var USES_TO_LENGTH = arrayMethodUsesToLength(FIND); // Shouldn't skip holes

    if (FIND in []) Array(1)[FIND](function () {
      SKIPS_HOLES = false;
    }); // `Array.prototype.find` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.find

    $({
      target: 'Array',
      proto: true,
      forced: SKIPS_HOLES || !USES_TO_LENGTH
    }, {
      find: function find(callbackfn
      /* , that = undefined */
      ) {
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    }); // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

    addToUnscopables(FIND);
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.for-each.js":
  /*!***********************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.for-each.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayForEachJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var forEach = __webpack_require__(
    /*! ../internals/array-for-each */
    "./node_modules/core-js/internals/array-for-each.js"); // `Array.prototype.forEach` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.foreach


    $({
      target: 'Array',
      proto: true,
      forced: [].forEach != forEach
    }, {
      forEach: forEach
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.from.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.from.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayFromJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var from = __webpack_require__(
    /*! ../internals/array-from */
    "./node_modules/core-js/internals/array-from.js");

    var checkCorrectnessOfIteration = __webpack_require__(
    /*! ../internals/check-correctness-of-iteration */
    "./node_modules/core-js/internals/check-correctness-of-iteration.js");

    var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
      Array.from(iterable);
    }); // `Array.from` method
    // https://tc39.github.io/ecma262/#sec-array.from

    $({
      target: 'Array',
      stat: true,
      forced: INCORRECT_ITERATION
    }, {
      from: from
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.index-of.js":
  /*!***********************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.index-of.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayIndexOfJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var $indexOf = __webpack_require__(
    /*! ../internals/array-includes */
    "./node_modules/core-js/internals/array-includes.js").indexOf;

    var arrayMethodIsStrict = __webpack_require__(
    /*! ../internals/array-method-is-strict */
    "./node_modules/core-js/internals/array-method-is-strict.js");

    var arrayMethodUsesToLength = __webpack_require__(
    /*! ../internals/array-method-uses-to-length */
    "./node_modules/core-js/internals/array-method-uses-to-length.js");

    var nativeIndexOf = [].indexOf;
    var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
    var STRICT_METHOD = arrayMethodIsStrict('indexOf');
    var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', {
      ACCESSORS: true,
      1: 0
    }); // `Array.prototype.indexOf` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.indexof

    $({
      target: 'Array',
      proto: true,
      forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH
    }, {
      indexOf: function indexOf(searchElement
      /* , fromIndex = 0 */
      ) {
        return NEGATIVE_ZERO // convert -0 to +0
        ? nativeIndexOf.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.is-array.js":
  /*!***********************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.is-array.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayIsArrayJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var isArray = __webpack_require__(
    /*! ../internals/is-array */
    "./node_modules/core-js/internals/is-array.js"); // `Array.isArray` method
    // https://tc39.github.io/ecma262/#sec-array.isarray


    $({
      target: 'Array',
      stat: true
    }, {
      isArray: isArray
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.iterator.js":
  /*!***********************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.iterator.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayIteratorJs(module, exports, __webpack_require__) {
    "use strict";

    var toIndexedObject = __webpack_require__(
    /*! ../internals/to-indexed-object */
    "./node_modules/core-js/internals/to-indexed-object.js");

    var addToUnscopables = __webpack_require__(
    /*! ../internals/add-to-unscopables */
    "./node_modules/core-js/internals/add-to-unscopables.js");

    var Iterators = __webpack_require__(
    /*! ../internals/iterators */
    "./node_modules/core-js/internals/iterators.js");

    var InternalStateModule = __webpack_require__(
    /*! ../internals/internal-state */
    "./node_modules/core-js/internals/internal-state.js");

    var defineIterator = __webpack_require__(
    /*! ../internals/define-iterator */
    "./node_modules/core-js/internals/define-iterator.js");

    var ARRAY_ITERATOR = 'Array Iterator';
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR); // `Array.prototype.entries` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.entries
    // `Array.prototype.keys` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.keys
    // `Array.prototype.values` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.values
    // `Array.prototype[@@iterator]` method
    // https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
    // `CreateArrayIterator` internal method
    // https://tc39.github.io/ecma262/#sec-createarrayiterator

    module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
      setInternalState(this, {
        type: ARRAY_ITERATOR,
        target: toIndexedObject(iterated),
        // target
        index: 0,
        // next index
        kind: kind // kind

      }); // `%ArrayIteratorPrototype%.next` method
      // https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
    }, function () {
      var state = getInternalState(this);
      var target = state.target;
      var kind = state.kind;
      var index = state.index++;

      if (!target || index >= target.length) {
        state.target = undefined;
        return {
          value: undefined,
          done: true
        };
      }

      if (kind == 'keys') return {
        value: index,
        done: false
      };
      if (kind == 'values') return {
        value: target[index],
        done: false
      };
      return {
        value: [index, target[index]],
        done: false
      };
    }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values%
    // https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
    // https://tc39.github.io/ecma262/#sec-createmappedargumentsobject

    Iterators.Arguments = Iterators.Array; // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables

    addToUnscopables('keys');
    addToUnscopables('values');
    addToUnscopables('entries');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.join.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.join.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayJoinJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var IndexedObject = __webpack_require__(
    /*! ../internals/indexed-object */
    "./node_modules/core-js/internals/indexed-object.js");

    var toIndexedObject = __webpack_require__(
    /*! ../internals/to-indexed-object */
    "./node_modules/core-js/internals/to-indexed-object.js");

    var arrayMethodIsStrict = __webpack_require__(
    /*! ../internals/array-method-is-strict */
    "./node_modules/core-js/internals/array-method-is-strict.js");

    var nativeJoin = [].join;
    var ES3_STRINGS = IndexedObject != Object;
    var STRICT_METHOD = arrayMethodIsStrict('join', ','); // `Array.prototype.join` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.join

    $({
      target: 'Array',
      proto: true,
      forced: ES3_STRINGS || !STRICT_METHOD
    }, {
      join: function join(separator) {
        return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.last-index-of.js":
  /*!****************************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.last-index-of.js ***!
    \****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayLastIndexOfJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var lastIndexOf = __webpack_require__(
    /*! ../internals/array-last-index-of */
    "./node_modules/core-js/internals/array-last-index-of.js"); // `Array.prototype.lastIndexOf` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof


    $({
      target: 'Array',
      proto: true,
      forced: lastIndexOf !== [].lastIndexOf
    }, {
      lastIndexOf: lastIndexOf
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.map.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.map.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayMapJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var $map = __webpack_require__(
    /*! ../internals/array-iteration */
    "./node_modules/core-js/internals/array-iteration.js").map;

    var arrayMethodHasSpeciesSupport = __webpack_require__(
    /*! ../internals/array-method-has-species-support */
    "./node_modules/core-js/internals/array-method-has-species-support.js");

    var arrayMethodUsesToLength = __webpack_require__(
    /*! ../internals/array-method-uses-to-length */
    "./node_modules/core-js/internals/array-method-uses-to-length.js");

    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map'); // FF49- issue

    var USES_TO_LENGTH = arrayMethodUsesToLength('map'); // `Array.prototype.map` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.map
    // with adding support of @@species

    $({
      target: 'Array',
      proto: true,
      forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
    }, {
      map: function map(callbackfn
      /* , thisArg */
      ) {
        return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.of.js":
  /*!*****************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.of.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayOfJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var createProperty = __webpack_require__(
    /*! ../internals/create-property */
    "./node_modules/core-js/internals/create-property.js");

    var ISNT_GENERIC = fails(function () {
      function F() {
        /* empty */
      }

      return !(Array.of.call(F) instanceof F);
    }); // `Array.of` method
    // https://tc39.github.io/ecma262/#sec-array.of
    // WebKit Array.of isn't generic

    $({
      target: 'Array',
      stat: true,
      forced: ISNT_GENERIC
    }, {
      of: function of()
      /* ...args */
      {
        var index = 0;
        var argumentsLength = arguments.length;
        var result = new (typeof this == 'function' ? this : Array)(argumentsLength);

        while (argumentsLength > index) {
          createProperty(result, index, arguments[index++]);
        }

        result.length = argumentsLength;
        return result;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.reduce-right.js":
  /*!***************************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.reduce-right.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayReduceRightJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var $reduceRight = __webpack_require__(
    /*! ../internals/array-reduce */
    "./node_modules/core-js/internals/array-reduce.js").right;

    var arrayMethodIsStrict = __webpack_require__(
    /*! ../internals/array-method-is-strict */
    "./node_modules/core-js/internals/array-method-is-strict.js");

    var arrayMethodUsesToLength = __webpack_require__(
    /*! ../internals/array-method-uses-to-length */
    "./node_modules/core-js/internals/array-method-uses-to-length.js");

    var STRICT_METHOD = arrayMethodIsStrict('reduceRight'); // For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method

    var USES_TO_LENGTH = arrayMethodUsesToLength('reduce', {
      1: 0
    }); // `Array.prototype.reduceRight` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright

    $({
      target: 'Array',
      proto: true,
      forced: !STRICT_METHOD || !USES_TO_LENGTH
    }, {
      reduceRight: function reduceRight(callbackfn
      /* , initialValue */
      ) {
        return $reduceRight(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.reduce.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.reduce.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArrayReduceJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var $reduce = __webpack_require__(
    /*! ../internals/array-reduce */
    "./node_modules/core-js/internals/array-reduce.js").left;

    var arrayMethodIsStrict = __webpack_require__(
    /*! ../internals/array-method-is-strict */
    "./node_modules/core-js/internals/array-method-is-strict.js");

    var arrayMethodUsesToLength = __webpack_require__(
    /*! ../internals/array-method-uses-to-length */
    "./node_modules/core-js/internals/array-method-uses-to-length.js");

    var STRICT_METHOD = arrayMethodIsStrict('reduce');
    var USES_TO_LENGTH = arrayMethodUsesToLength('reduce', {
      1: 0
    }); // `Array.prototype.reduce` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.reduce

    $({
      target: 'Array',
      proto: true,
      forced: !STRICT_METHOD || !USES_TO_LENGTH
    }, {
      reduce: function reduce(callbackfn
      /* , initialValue */
      ) {
        return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.slice.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.slice.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArraySliceJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var isArray = __webpack_require__(
    /*! ../internals/is-array */
    "./node_modules/core-js/internals/is-array.js");

    var toAbsoluteIndex = __webpack_require__(
    /*! ../internals/to-absolute-index */
    "./node_modules/core-js/internals/to-absolute-index.js");

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js");

    var toIndexedObject = __webpack_require__(
    /*! ../internals/to-indexed-object */
    "./node_modules/core-js/internals/to-indexed-object.js");

    var createProperty = __webpack_require__(
    /*! ../internals/create-property */
    "./node_modules/core-js/internals/create-property.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var arrayMethodHasSpeciesSupport = __webpack_require__(
    /*! ../internals/array-method-has-species-support */
    "./node_modules/core-js/internals/array-method-has-species-support.js");

    var arrayMethodUsesToLength = __webpack_require__(
    /*! ../internals/array-method-uses-to-length */
    "./node_modules/core-js/internals/array-method-uses-to-length.js");

    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');
    var USES_TO_LENGTH = arrayMethodUsesToLength('slice', {
      ACCESSORS: true,
      0: 0,
      1: 2
    });
    var SPECIES = wellKnownSymbol('species');
    var nativeSlice = [].slice;
    var max = Math.max; // `Array.prototype.slice` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.slice
    // fallback for not array-like ES3 strings and DOM objects

    $({
      target: 'Array',
      proto: true,
      forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
    }, {
      slice: function slice(start, end) {
        var O = toIndexedObject(this);
        var length = toLength(O.length);
        var k = toAbsoluteIndex(start, length);
        var fin = toAbsoluteIndex(end === undefined ? length : end, length); // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible

        var Constructor, result, n;

        if (isArray(O)) {
          Constructor = O.constructor; // cross-realm fallback

          if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
            Constructor = undefined;
          } else if (isObject(Constructor)) {
            Constructor = Constructor[SPECIES];
            if (Constructor === null) Constructor = undefined;
          }

          if (Constructor === Array || Constructor === undefined) {
            return nativeSlice.call(O, k, fin);
          }
        }

        result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));

        for (n = 0; k < fin; k++, n++) {
          if (k in O) createProperty(result, n, O[k]);
        }

        result.length = n;
        return result;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.some.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.some.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArraySomeJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var $some = __webpack_require__(
    /*! ../internals/array-iteration */
    "./node_modules/core-js/internals/array-iteration.js").some;

    var arrayMethodIsStrict = __webpack_require__(
    /*! ../internals/array-method-is-strict */
    "./node_modules/core-js/internals/array-method-is-strict.js");

    var arrayMethodUsesToLength = __webpack_require__(
    /*! ../internals/array-method-uses-to-length */
    "./node_modules/core-js/internals/array-method-uses-to-length.js");

    var STRICT_METHOD = arrayMethodIsStrict('some');
    var USES_TO_LENGTH = arrayMethodUsesToLength('some'); // `Array.prototype.some` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.some

    $({
      target: 'Array',
      proto: true,
      forced: !STRICT_METHOD || !USES_TO_LENGTH
    }, {
      some: function some(callbackfn
      /* , thisArg */
      ) {
        return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.sort.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.sort.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArraySortJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var aFunction = __webpack_require__(
    /*! ../internals/a-function */
    "./node_modules/core-js/internals/a-function.js");

    var toObject = __webpack_require__(
    /*! ../internals/to-object */
    "./node_modules/core-js/internals/to-object.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var arrayMethodIsStrict = __webpack_require__(
    /*! ../internals/array-method-is-strict */
    "./node_modules/core-js/internals/array-method-is-strict.js");

    var test = [];
    var nativeSort = test.sort; // IE8-

    var FAILS_ON_UNDEFINED = fails(function () {
      test.sort(undefined);
    }); // V8 bug

    var FAILS_ON_NULL = fails(function () {
      test.sort(null);
    }); // Old WebKit

    var STRICT_METHOD = arrayMethodIsStrict('sort');
    var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD; // `Array.prototype.sort` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.sort

    $({
      target: 'Array',
      proto: true,
      forced: FORCED
    }, {
      sort: function sort(comparefn) {
        return comparefn === undefined ? nativeSort.call(toObject(this)) : nativeSort.call(toObject(this), aFunction(comparefn));
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.array.splice.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/modules/es.array.splice.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsArraySpliceJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var toAbsoluteIndex = __webpack_require__(
    /*! ../internals/to-absolute-index */
    "./node_modules/core-js/internals/to-absolute-index.js");

    var toInteger = __webpack_require__(
    /*! ../internals/to-integer */
    "./node_modules/core-js/internals/to-integer.js");

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js");

    var toObject = __webpack_require__(
    /*! ../internals/to-object */
    "./node_modules/core-js/internals/to-object.js");

    var arraySpeciesCreate = __webpack_require__(
    /*! ../internals/array-species-create */
    "./node_modules/core-js/internals/array-species-create.js");

    var createProperty = __webpack_require__(
    /*! ../internals/create-property */
    "./node_modules/core-js/internals/create-property.js");

    var arrayMethodHasSpeciesSupport = __webpack_require__(
    /*! ../internals/array-method-has-species-support */
    "./node_modules/core-js/internals/array-method-has-species-support.js");

    var arrayMethodUsesToLength = __webpack_require__(
    /*! ../internals/array-method-uses-to-length */
    "./node_modules/core-js/internals/array-method-uses-to-length.js");

    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');
    var USES_TO_LENGTH = arrayMethodUsesToLength('splice', {
      ACCESSORS: true,
      0: 0,
      1: 2
    });
    var max = Math.max;
    var min = Math.min;
    var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
    var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded'; // `Array.prototype.splice` method
    // https://tc39.github.io/ecma262/#sec-array.prototype.splice
    // with adding support of @@species

    $({
      target: 'Array',
      proto: true,
      forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
    }, {
      splice: function splice(start, deleteCount
      /* , ...items */
      ) {
        var O = toObject(this);
        var len = toLength(O.length);
        var actualStart = toAbsoluteIndex(start, len);
        var argumentsLength = arguments.length;
        var insertCount, actualDeleteCount, A, k, from, to;

        if (argumentsLength === 0) {
          insertCount = actualDeleteCount = 0;
        } else if (argumentsLength === 1) {
          insertCount = 0;
          actualDeleteCount = len - actualStart;
        } else {
          insertCount = argumentsLength - 2;
          actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
        }

        if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
          throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
        }

        A = arraySpeciesCreate(O, actualDeleteCount);

        for (k = 0; k < actualDeleteCount; k++) {
          from = actualStart + k;
          if (from in O) createProperty(A, k, O[from]);
        }

        A.length = actualDeleteCount;

        if (insertCount < actualDeleteCount) {
          for (k = actualStart; k < len - actualDeleteCount; k++) {
            from = k + actualDeleteCount;
            to = k + insertCount;
            if (from in O) O[to] = O[from];else delete O[to];
          }

          for (k = len; k > len - actualDeleteCount + insertCount; k--) {
            delete O[k - 1];
          }
        } else if (insertCount > actualDeleteCount) {
          for (k = len - actualDeleteCount; k > actualStart; k--) {
            from = k + actualDeleteCount - 1;
            to = k + insertCount - 1;
            if (from in O) O[to] = O[from];else delete O[to];
          }
        }

        for (k = 0; k < insertCount; k++) {
          O[k + actualStart] = arguments[k + 2];
        }

        O.length = len - actualDeleteCount + insertCount;
        return A;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.date.now.js":
  /*!*****************************************************!*\
    !*** ./node_modules/core-js/modules/es.date.now.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsDateNowJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js"); // `Date.now` method
    // https://tc39.github.io/ecma262/#sec-date.now


    $({
      target: 'Date',
      stat: true
    }, {
      now: function now() {
        return new Date().getTime();
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.date.to-iso-string.js":
  /*!***************************************************************!*\
    !*** ./node_modules/core-js/modules/es.date.to-iso-string.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsDateToIsoStringJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var toISOString = __webpack_require__(
    /*! ../internals/date-to-iso-string */
    "./node_modules/core-js/internals/date-to-iso-string.js"); // `Date.prototype.toISOString` method
    // https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
    // PhantomJS / old WebKit has a broken implementations


    $({
      target: 'Date',
      proto: true,
      forced: Date.prototype.toISOString !== toISOString
    }, {
      toISOString: toISOString
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.date.to-json.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/modules/es.date.to-json.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsDateToJsonJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var toObject = __webpack_require__(
    /*! ../internals/to-object */
    "./node_modules/core-js/internals/to-object.js");

    var toPrimitive = __webpack_require__(
    /*! ../internals/to-primitive */
    "./node_modules/core-js/internals/to-primitive.js");

    var FORCED = fails(function () {
      return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
        toISOString: function toISOString() {
          return 1;
        }
      }) !== 1;
    }); // `Date.prototype.toJSON` method
    // https://tc39.github.io/ecma262/#sec-date.prototype.tojson

    $({
      target: 'Date',
      proto: true,
      forced: FORCED
    }, {
      // eslint-disable-next-line no-unused-vars
      toJSON: function toJSON(key) {
        var O = toObject(this);
        var pv = toPrimitive(O);
        return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.date.to-primitive.js":
  /*!**************************************************************!*\
    !*** ./node_modules/core-js/modules/es.date.to-primitive.js ***!
    \**************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsDateToPrimitiveJs(module, exports, __webpack_require__) {
    var createNonEnumerableProperty = __webpack_require__(
    /*! ../internals/create-non-enumerable-property */
    "./node_modules/core-js/internals/create-non-enumerable-property.js");

    var dateToPrimitive = __webpack_require__(
    /*! ../internals/date-to-primitive */
    "./node_modules/core-js/internals/date-to-primitive.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
    var DatePrototype = Date.prototype; // `Date.prototype[@@toPrimitive]` method
    // https://tc39.github.io/ecma262/#sec-date.prototype-@@toprimitive

    if (!(TO_PRIMITIVE in DatePrototype)) {
      createNonEnumerableProperty(DatePrototype, TO_PRIMITIVE, dateToPrimitive);
    }
    /***/

  },

  /***/
  "./node_modules/core-js/modules/es.date.to-string.js":
  /*!***********************************************************!*\
    !*** ./node_modules/core-js/modules/es.date.to-string.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsDateToStringJs(module, exports, __webpack_require__) {
    var redefine = __webpack_require__(
    /*! ../internals/redefine */
    "./node_modules/core-js/internals/redefine.js");

    var DatePrototype = Date.prototype;
    var INVALID_DATE = 'Invalid Date';
    var TO_STRING = 'toString';
    var nativeDateToString = DatePrototype[TO_STRING];
    var getTime = DatePrototype.getTime; // `Date.prototype.toString` method
    // https://tc39.github.io/ecma262/#sec-date.prototype.tostring

    if (new Date(NaN) + '' != INVALID_DATE) {
      redefine(DatePrototype, TO_STRING, function toString() {
        var value = getTime.call(this); // eslint-disable-next-line no-self-compare

        return value === value ? nativeDateToString.call(this) : INVALID_DATE;
      });
    }
    /***/

  },

  /***/
  "./node_modules/core-js/modules/es.function.bind.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/modules/es.function.bind.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsFunctionBindJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var bind = __webpack_require__(
    /*! ../internals/function-bind */
    "./node_modules/core-js/internals/function-bind.js"); // `Function.prototype.bind` method
    // https://tc39.github.io/ecma262/#sec-function.prototype.bind


    $({
      target: 'Function',
      proto: true
    }, {
      bind: bind
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.function.has-instance.js":
  /*!******************************************************************!*\
    !*** ./node_modules/core-js/modules/es.function.has-instance.js ***!
    \******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsFunctionHasInstanceJs(module, exports, __webpack_require__) {
    "use strict";

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var definePropertyModule = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js");

    var getPrototypeOf = __webpack_require__(
    /*! ../internals/object-get-prototype-of */
    "./node_modules/core-js/internals/object-get-prototype-of.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var HAS_INSTANCE = wellKnownSymbol('hasInstance');
    var FunctionPrototype = Function.prototype; // `Function.prototype[@@hasInstance]` method
    // https://tc39.github.io/ecma262/#sec-function.prototype-@@hasinstance

    if (!(HAS_INSTANCE in FunctionPrototype)) {
      definePropertyModule.f(FunctionPrototype, HAS_INSTANCE, {
        value: function value(O) {
          if (typeof this != 'function' || !isObject(O)) return false;
          if (!isObject(this.prototype)) return O instanceof this; // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

          while (O = getPrototypeOf(O)) {
            if (this.prototype === O) return true;
          }

          return false;
        }
      });
    }
    /***/

  },

  /***/
  "./node_modules/core-js/modules/es.function.name.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/modules/es.function.name.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsFunctionNameJs(module, exports, __webpack_require__) {
    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var defineProperty = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js").f;

    var FunctionPrototype = Function.prototype;
    var FunctionPrototypeToString = FunctionPrototype.toString;
    var nameRE = /^\s*function ([^ (]*)/;
    var NAME = 'name'; // Function instances `.name` property
    // https://tc39.github.io/ecma262/#sec-function-instances-name

    if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
      defineProperty(FunctionPrototype, NAME, {
        configurable: true,
        get: function get() {
          try {
            return FunctionPrototypeToString.call(this).match(nameRE)[1];
          } catch (error) {
            return '';
          }
        }
      });
    }
    /***/

  },

  /***/
  "./node_modules/core-js/modules/es.json.to-string-tag.js":
  /*!***************************************************************!*\
    !*** ./node_modules/core-js/modules/es.json.to-string-tag.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsJsonToStringTagJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var setToStringTag = __webpack_require__(
    /*! ../internals/set-to-string-tag */
    "./node_modules/core-js/internals/set-to-string-tag.js"); // JSON[@@toStringTag] property
    // https://tc39.github.io/ecma262/#sec-json-@@tostringtag


    setToStringTag(global.JSON, 'JSON', true);
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.map.js":
  /*!************************************************!*\
    !*** ./node_modules/core-js/modules/es.map.js ***!
    \************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMapJs(module, exports, __webpack_require__) {
    "use strict";

    var collection = __webpack_require__(
    /*! ../internals/collection */
    "./node_modules/core-js/internals/collection.js");

    var collectionStrong = __webpack_require__(
    /*! ../internals/collection-strong */
    "./node_modules/core-js/internals/collection-strong.js"); // `Map` constructor
    // https://tc39.github.io/ecma262/#sec-map-objects


    module.exports = collection('Map', function (init) {
      return function Map() {
        return init(this, arguments.length ? arguments[0] : undefined);
      };
    }, collectionStrong);
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.acosh.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.acosh.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathAcoshJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var log1p = __webpack_require__(
    /*! ../internals/math-log1p */
    "./node_modules/core-js/internals/math-log1p.js");

    var nativeAcosh = Math.acosh;
    var log = Math.log;
    var sqrt = Math.sqrt;
    var LN2 = Math.LN2;
    var FORCED = !nativeAcosh // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
    || Math.floor(nativeAcosh(Number.MAX_VALUE)) != 710 // Tor Browser bug: Math.acosh(Infinity) -> NaN
    || nativeAcosh(Infinity) != Infinity; // `Math.acosh` method
    // https://tc39.github.io/ecma262/#sec-math.acosh

    $({
      target: 'Math',
      stat: true,
      forced: FORCED
    }, {
      acosh: function acosh(x) {
        return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? log(x) + LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.asinh.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.asinh.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathAsinhJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var nativeAsinh = Math.asinh;
    var log = Math.log;
    var sqrt = Math.sqrt;

    function asinh(x) {
      return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));
    } // `Math.asinh` method
    // https://tc39.github.io/ecma262/#sec-math.asinh
    // Tor Browser bug: Math.asinh(0) -> -0


    $({
      target: 'Math',
      stat: true,
      forced: !(nativeAsinh && 1 / nativeAsinh(0) > 0)
    }, {
      asinh: asinh
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.atanh.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.atanh.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathAtanhJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var nativeAtanh = Math.atanh;
    var log = Math.log; // `Math.atanh` method
    // https://tc39.github.io/ecma262/#sec-math.atanh
    // Tor Browser bug: Math.atanh(-0) -> 0

    $({
      target: 'Math',
      stat: true,
      forced: !(nativeAtanh && 1 / nativeAtanh(-0) < 0)
    }, {
      atanh: function atanh(x) {
        return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.cbrt.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.cbrt.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathCbrtJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var sign = __webpack_require__(
    /*! ../internals/math-sign */
    "./node_modules/core-js/internals/math-sign.js");

    var abs = Math.abs;
    var pow = Math.pow; // `Math.cbrt` method
    // https://tc39.github.io/ecma262/#sec-math.cbrt

    $({
      target: 'Math',
      stat: true
    }, {
      cbrt: function cbrt(x) {
        return sign(x = +x) * pow(abs(x), 1 / 3);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.clz32.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.clz32.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathClz32Js(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var floor = Math.floor;
    var log = Math.log;
    var LOG2E = Math.LOG2E; // `Math.clz32` method
    // https://tc39.github.io/ecma262/#sec-math.clz32

    $({
      target: 'Math',
      stat: true
    }, {
      clz32: function clz32(x) {
        return (x >>>= 0) ? 31 - floor(log(x + 0.5) * LOG2E) : 32;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.cosh.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.cosh.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathCoshJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var expm1 = __webpack_require__(
    /*! ../internals/math-expm1 */
    "./node_modules/core-js/internals/math-expm1.js");

    var nativeCosh = Math.cosh;
    var abs = Math.abs;
    var E = Math.E; // `Math.cosh` method
    // https://tc39.github.io/ecma262/#sec-math.cosh

    $({
      target: 'Math',
      stat: true,
      forced: !nativeCosh || nativeCosh(710) === Infinity
    }, {
      cosh: function cosh(x) {
        var t = expm1(abs(x) - 1) + 1;
        return (t + 1 / (t * E * E)) * (E / 2);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.expm1.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.expm1.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathExpm1Js(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var expm1 = __webpack_require__(
    /*! ../internals/math-expm1 */
    "./node_modules/core-js/internals/math-expm1.js"); // `Math.expm1` method
    // https://tc39.github.io/ecma262/#sec-math.expm1


    $({
      target: 'Math',
      stat: true,
      forced: expm1 != Math.expm1
    }, {
      expm1: expm1
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.fround.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.fround.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathFroundJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var fround = __webpack_require__(
    /*! ../internals/math-fround */
    "./node_modules/core-js/internals/math-fround.js"); // `Math.fround` method
    // https://tc39.github.io/ecma262/#sec-math.fround


    $({
      target: 'Math',
      stat: true
    }, {
      fround: fround
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.hypot.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.hypot.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathHypotJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var $hypot = Math.hypot;
    var abs = Math.abs;
    var sqrt = Math.sqrt; // Chrome 77 bug
    // https://bugs.chromium.org/p/v8/issues/detail?id=9546

    var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity; // `Math.hypot` method
    // https://tc39.github.io/ecma262/#sec-math.hypot

    $({
      target: 'Math',
      stat: true,
      forced: BUGGY
    }, {
      hypot: function hypot(value1, value2) {
        // eslint-disable-line no-unused-vars
        var sum = 0;
        var i = 0;
        var aLen = arguments.length;
        var larg = 0;
        var arg, div;

        while (i < aLen) {
          arg = abs(arguments[i++]);

          if (larg < arg) {
            div = larg / arg;
            sum = sum * div * div + 1;
            larg = arg;
          } else if (arg > 0) {
            div = arg / larg;
            sum += div * div;
          } else sum += arg;
        }

        return larg === Infinity ? Infinity : larg * sqrt(sum);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.imul.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.imul.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathImulJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var nativeImul = Math.imul;
    var FORCED = fails(function () {
      return nativeImul(0xFFFFFFFF, 5) != -5 || nativeImul.length != 2;
    }); // `Math.imul` method
    // https://tc39.github.io/ecma262/#sec-math.imul
    // some WebKit versions fails with big numbers, some has wrong arity

    $({
      target: 'Math',
      stat: true,
      forced: FORCED
    }, {
      imul: function imul(x, y) {
        var UINT16 = 0xFFFF;
        var xn = +x;
        var yn = +y;
        var xl = UINT16 & xn;
        var yl = UINT16 & yn;
        return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.log10.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.log10.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathLog10Js(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var log = Math.log;
    var LOG10E = Math.LOG10E; // `Math.log10` method
    // https://tc39.github.io/ecma262/#sec-math.log10

    $({
      target: 'Math',
      stat: true
    }, {
      log10: function log10(x) {
        return log(x) * LOG10E;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.log1p.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.log1p.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathLog1pJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var log1p = __webpack_require__(
    /*! ../internals/math-log1p */
    "./node_modules/core-js/internals/math-log1p.js"); // `Math.log1p` method
    // https://tc39.github.io/ecma262/#sec-math.log1p


    $({
      target: 'Math',
      stat: true
    }, {
      log1p: log1p
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.log2.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.log2.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathLog2Js(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var log = Math.log;
    var LN2 = Math.LN2; // `Math.log2` method
    // https://tc39.github.io/ecma262/#sec-math.log2

    $({
      target: 'Math',
      stat: true
    }, {
      log2: function log2(x) {
        return log(x) / LN2;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.sign.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.sign.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathSignJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var sign = __webpack_require__(
    /*! ../internals/math-sign */
    "./node_modules/core-js/internals/math-sign.js"); // `Math.sign` method
    // https://tc39.github.io/ecma262/#sec-math.sign


    $({
      target: 'Math',
      stat: true
    }, {
      sign: sign
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.sinh.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.sinh.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathSinhJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var expm1 = __webpack_require__(
    /*! ../internals/math-expm1 */
    "./node_modules/core-js/internals/math-expm1.js");

    var abs = Math.abs;
    var exp = Math.exp;
    var E = Math.E;
    var FORCED = fails(function () {
      return Math.sinh(-2e-17) != -2e-17;
    }); // `Math.sinh` method
    // https://tc39.github.io/ecma262/#sec-math.sinh
    // V8 near Chromium 38 has a problem with very small numbers

    $({
      target: 'Math',
      stat: true,
      forced: FORCED
    }, {
      sinh: function sinh(x) {
        return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.tanh.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.tanh.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathTanhJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var expm1 = __webpack_require__(
    /*! ../internals/math-expm1 */
    "./node_modules/core-js/internals/math-expm1.js");

    var exp = Math.exp; // `Math.tanh` method
    // https://tc39.github.io/ecma262/#sec-math.tanh

    $({
      target: 'Math',
      stat: true
    }, {
      tanh: function tanh(x) {
        var a = expm1(x = +x);
        var b = expm1(-x);
        return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.to-string-tag.js":
  /*!***************************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.to-string-tag.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathToStringTagJs(module, exports, __webpack_require__) {
    var setToStringTag = __webpack_require__(
    /*! ../internals/set-to-string-tag */
    "./node_modules/core-js/internals/set-to-string-tag.js"); // Math[@@toStringTag] property
    // https://tc39.github.io/ecma262/#sec-math-@@tostringtag


    setToStringTag(Math, 'Math', true);
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.math.trunc.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.math.trunc.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsMathTruncJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var ceil = Math.ceil;
    var floor = Math.floor; // `Math.trunc` method
    // https://tc39.github.io/ecma262/#sec-math.trunc

    $({
      target: 'Math',
      stat: true
    }, {
      trunc: function trunc(it) {
        return (it > 0 ? floor : ceil)(it);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.number.constructor.js":
  /*!***************************************************************!*\
    !*** ./node_modules/core-js/modules/es.number.constructor.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsNumberConstructorJs(module, exports, __webpack_require__) {
    "use strict";

    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var isForced = __webpack_require__(
    /*! ../internals/is-forced */
    "./node_modules/core-js/internals/is-forced.js");

    var redefine = __webpack_require__(
    /*! ../internals/redefine */
    "./node_modules/core-js/internals/redefine.js");

    var has = __webpack_require__(
    /*! ../internals/has */
    "./node_modules/core-js/internals/has.js");

    var classof = __webpack_require__(
    /*! ../internals/classof-raw */
    "./node_modules/core-js/internals/classof-raw.js");

    var inheritIfRequired = __webpack_require__(
    /*! ../internals/inherit-if-required */
    "./node_modules/core-js/internals/inherit-if-required.js");

    var toPrimitive = __webpack_require__(
    /*! ../internals/to-primitive */
    "./node_modules/core-js/internals/to-primitive.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var create = __webpack_require__(
    /*! ../internals/object-create */
    "./node_modules/core-js/internals/object-create.js");

    var getOwnPropertyNames = __webpack_require__(
    /*! ../internals/object-get-own-property-names */
    "./node_modules/core-js/internals/object-get-own-property-names.js").f;

    var getOwnPropertyDescriptor = __webpack_require__(
    /*! ../internals/object-get-own-property-descriptor */
    "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;

    var defineProperty = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js").f;

    var trim = __webpack_require__(
    /*! ../internals/string-trim */
    "./node_modules/core-js/internals/string-trim.js").trim;

    var NUMBER = 'Number';
    var NativeNumber = global[NUMBER];
    var NumberPrototype = NativeNumber.prototype; // Opera ~12 has broken Object#toString

    var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER; // `ToNumber` abstract operation
    // https://tc39.github.io/ecma262/#sec-tonumber

    var toNumber = function toNumber(argument) {
      var it = toPrimitive(argument, false);
      var first, third, radix, maxCode, digits, length, index, code;

      if (typeof it == 'string' && it.length > 2) {
        it = trim(it);
        first = it.charCodeAt(0);

        if (first === 43 || first === 45) {
          third = it.charCodeAt(2);
          if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
        } else if (first === 48) {
          switch (it.charCodeAt(1)) {
            case 66:
            case 98:
              radix = 2;
              maxCode = 49;
              break;
            // fast equal of /^0b[01]+$/i

            case 79:
            case 111:
              radix = 8;
              maxCode = 55;
              break;
            // fast equal of /^0o[0-7]+$/i

            default:
              return +it;
          }

          digits = it.slice(2);
          length = digits.length;

          for (index = 0; index < length; index++) {
            code = digits.charCodeAt(index); // parseInt parses a string to a first unavailable symbol
            // but ToNumber should return NaN if a string contains unavailable symbols

            if (code < 48 || code > maxCode) return NaN;
          }

          return parseInt(digits, radix);
        }
      }

      return +it;
    }; // `Number` constructor
    // https://tc39.github.io/ecma262/#sec-number-constructor


    if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
      var NumberWrapper = function Number(value) {
        var it = arguments.length < 1 ? 0 : value;
        var dummy = this;
        return dummy instanceof NumberWrapper // check on 1..constructor(foo) case
        && (BROKEN_CLASSOF ? fails(function () {
          NumberPrototype.valueOf.call(dummy);
        }) : classof(dummy) != NUMBER) ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
      };

      for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : ( // ES3:
      'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES2015 (in case, if modules with ES2015 Number statics required before):
      'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
        if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {
          defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
        }
      }

      NumberWrapper.prototype = NumberPrototype;
      NumberPrototype.constructor = NumberWrapper;
      redefine(global, NUMBER, NumberWrapper);
    }
    /***/

  },

  /***/
  "./node_modules/core-js/modules/es.number.epsilon.js":
  /*!***********************************************************!*\
    !*** ./node_modules/core-js/modules/es.number.epsilon.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsNumberEpsilonJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js"); // `Number.EPSILON` constant
    // https://tc39.github.io/ecma262/#sec-number.epsilon


    $({
      target: 'Number',
      stat: true
    }, {
      EPSILON: Math.pow(2, -52)
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.number.is-finite.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/modules/es.number.is-finite.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsNumberIsFiniteJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var numberIsFinite = __webpack_require__(
    /*! ../internals/number-is-finite */
    "./node_modules/core-js/internals/number-is-finite.js"); // `Number.isFinite` method
    // https://tc39.github.io/ecma262/#sec-number.isfinite


    $({
      target: 'Number',
      stat: true
    }, {
      isFinite: numberIsFinite
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.number.is-integer.js":
  /*!**************************************************************!*\
    !*** ./node_modules/core-js/modules/es.number.is-integer.js ***!
    \**************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsNumberIsIntegerJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var isInteger = __webpack_require__(
    /*! ../internals/is-integer */
    "./node_modules/core-js/internals/is-integer.js"); // `Number.isInteger` method
    // https://tc39.github.io/ecma262/#sec-number.isinteger


    $({
      target: 'Number',
      stat: true
    }, {
      isInteger: isInteger
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.number.is-nan.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/modules/es.number.is-nan.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsNumberIsNanJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js"); // `Number.isNaN` method
    // https://tc39.github.io/ecma262/#sec-number.isnan


    $({
      target: 'Number',
      stat: true
    }, {
      isNaN: function isNaN(number) {
        // eslint-disable-next-line no-self-compare
        return number != number;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.number.is-safe-integer.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/core-js/modules/es.number.is-safe-integer.js ***!
    \*******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsNumberIsSafeIntegerJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var isInteger = __webpack_require__(
    /*! ../internals/is-integer */
    "./node_modules/core-js/internals/is-integer.js");

    var abs = Math.abs; // `Number.isSafeInteger` method
    // https://tc39.github.io/ecma262/#sec-number.issafeinteger

    $({
      target: 'Number',
      stat: true
    }, {
      isSafeInteger: function isSafeInteger(number) {
        return isInteger(number) && abs(number) <= 0x1FFFFFFFFFFFFF;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.number.max-safe-integer.js":
  /*!********************************************************************!*\
    !*** ./node_modules/core-js/modules/es.number.max-safe-integer.js ***!
    \********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsNumberMaxSafeIntegerJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js"); // `Number.MAX_SAFE_INTEGER` constant
    // https://tc39.github.io/ecma262/#sec-number.max_safe_integer


    $({
      target: 'Number',
      stat: true
    }, {
      MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.number.min-safe-integer.js":
  /*!********************************************************************!*\
    !*** ./node_modules/core-js/modules/es.number.min-safe-integer.js ***!
    \********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsNumberMinSafeIntegerJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js"); // `Number.MIN_SAFE_INTEGER` constant
    // https://tc39.github.io/ecma262/#sec-number.min_safe_integer


    $({
      target: 'Number',
      stat: true
    }, {
      MIN_SAFE_INTEGER: -0x1FFFFFFFFFFFFF
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.number.parse-float.js":
  /*!***************************************************************!*\
    !*** ./node_modules/core-js/modules/es.number.parse-float.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsNumberParseFloatJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var parseFloat = __webpack_require__(
    /*! ../internals/number-parse-float */
    "./node_modules/core-js/internals/number-parse-float.js"); // `Number.parseFloat` method
    // https://tc39.github.io/ecma262/#sec-number.parseFloat


    $({
      target: 'Number',
      stat: true,
      forced: Number.parseFloat != parseFloat
    }, {
      parseFloat: parseFloat
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.number.parse-int.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/modules/es.number.parse-int.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsNumberParseIntJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var parseInt = __webpack_require__(
    /*! ../internals/number-parse-int */
    "./node_modules/core-js/internals/number-parse-int.js"); // `Number.parseInt` method
    // https://tc39.github.io/ecma262/#sec-number.parseint


    $({
      target: 'Number',
      stat: true,
      forced: Number.parseInt != parseInt
    }, {
      parseInt: parseInt
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.number.to-fixed.js":
  /*!************************************************************!*\
    !*** ./node_modules/core-js/modules/es.number.to-fixed.js ***!
    \************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsNumberToFixedJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var toInteger = __webpack_require__(
    /*! ../internals/to-integer */
    "./node_modules/core-js/internals/to-integer.js");

    var thisNumberValue = __webpack_require__(
    /*! ../internals/this-number-value */
    "./node_modules/core-js/internals/this-number-value.js");

    var repeat = __webpack_require__(
    /*! ../internals/string-repeat */
    "./node_modules/core-js/internals/string-repeat.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var nativeToFixed = 1.0.toFixed;
    var floor = Math.floor;

    var pow = function pow(x, n, acc) {
      return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
    };

    var log = function log(x) {
      var n = 0;
      var x2 = x;

      while (x2 >= 4096) {
        n += 12;
        x2 /= 4096;
      }

      while (x2 >= 2) {
        n += 1;
        x2 /= 2;
      }

      return n;
    };

    var FORCED = nativeToFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !fails(function () {
      // V8 ~ Android 4.3-
      nativeToFixed.call({});
    }); // `Number.prototype.toFixed` method
    // https://tc39.github.io/ecma262/#sec-number.prototype.tofixed

    $({
      target: 'Number',
      proto: true,
      forced: FORCED
    }, {
      // eslint-disable-next-line max-statements
      toFixed: function toFixed(fractionDigits) {
        var number = thisNumberValue(this);
        var fractDigits = toInteger(fractionDigits);
        var data = [0, 0, 0, 0, 0, 0];
        var sign = '';
        var result = '0';
        var e, z, j, k;

        var multiply = function multiply(n, c) {
          var index = -1;
          var c2 = c;

          while (++index < 6) {
            c2 += n * data[index];
            data[index] = c2 % 1e7;
            c2 = floor(c2 / 1e7);
          }
        };

        var divide = function divide(n) {
          var index = 6;
          var c = 0;

          while (--index >= 0) {
            c += data[index];
            data[index] = floor(c / n);
            c = c % n * 1e7;
          }
        };

        var dataToString = function dataToString() {
          var index = 6;
          var s = '';

          while (--index >= 0) {
            if (s !== '' || index === 0 || data[index] !== 0) {
              var t = String(data[index]);
              s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;
            }
          }

          return s;
        };

        if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits'); // eslint-disable-next-line no-self-compare

        if (number != number) return 'NaN';
        if (number <= -1e21 || number >= 1e21) return String(number);

        if (number < 0) {
          sign = '-';
          number = -number;
        }

        if (number > 1e-21) {
          e = log(number * pow(2, 69, 1)) - 69;
          z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
          z *= 0x10000000000000;
          e = 52 - e;

          if (e > 0) {
            multiply(0, z);
            j = fractDigits;

            while (j >= 7) {
              multiply(1e7, 0);
              j -= 7;
            }

            multiply(pow(10, j, 1), 0);
            j = e - 1;

            while (j >= 23) {
              divide(1 << 23);
              j -= 23;
            }

            divide(1 << j);
            multiply(1, 1);
            divide(2);
            result = dataToString();
          } else {
            multiply(0, z);
            multiply(1 << -e, 0);
            result = dataToString() + repeat.call('0', fractDigits);
          }
        }

        if (fractDigits > 0) {
          k = result.length;
          result = sign + (k <= fractDigits ? '0.' + repeat.call('0', fractDigits - k) + result : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
        } else {
          result = sign + result;
        }

        return result;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.number.to-precision.js":
  /*!****************************************************************!*\
    !*** ./node_modules/core-js/modules/es.number.to-precision.js ***!
    \****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsNumberToPrecisionJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var thisNumberValue = __webpack_require__(
    /*! ../internals/this-number-value */
    "./node_modules/core-js/internals/this-number-value.js");

    var nativeToPrecision = 1.0.toPrecision;
    var FORCED = fails(function () {
      // IE7-
      return nativeToPrecision.call(1, undefined) !== '1';
    }) || !fails(function () {
      // V8 ~ Android 4.3-
      nativeToPrecision.call({});
    }); // `Number.prototype.toPrecision` method
    // https://tc39.github.io/ecma262/#sec-number.prototype.toprecision

    $({
      target: 'Number',
      proto: true,
      forced: FORCED
    }, {
      toPrecision: function toPrecision(precision) {
        return precision === undefined ? nativeToPrecision.call(thisNumberValue(this)) : nativeToPrecision.call(thisNumberValue(this), precision);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.assign.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.assign.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectAssignJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var assign = __webpack_require__(
    /*! ../internals/object-assign */
    "./node_modules/core-js/internals/object-assign.js"); // `Object.assign` method
    // https://tc39.github.io/ecma262/#sec-object.assign


    $({
      target: 'Object',
      stat: true,
      forced: Object.assign !== assign
    }, {
      assign: assign
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.create.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.create.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectCreateJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var create = __webpack_require__(
    /*! ../internals/object-create */
    "./node_modules/core-js/internals/object-create.js"); // `Object.create` method
    // https://tc39.github.io/ecma262/#sec-object.create


    $({
      target: 'Object',
      stat: true,
      sham: !DESCRIPTORS
    }, {
      create: create
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.define-properties.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.define-properties.js ***!
    \*********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectDefinePropertiesJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var defineProperties = __webpack_require__(
    /*! ../internals/object-define-properties */
    "./node_modules/core-js/internals/object-define-properties.js"); // `Object.defineProperties` method
    // https://tc39.github.io/ecma262/#sec-object.defineproperties


    $({
      target: 'Object',
      stat: true,
      forced: !DESCRIPTORS,
      sham: !DESCRIPTORS
    }, {
      defineProperties: defineProperties
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.define-property.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.define-property.js ***!
    \*******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectDefinePropertyJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var objectDefinePropertyModile = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js"); // `Object.defineProperty` method
    // https://tc39.github.io/ecma262/#sec-object.defineproperty


    $({
      target: 'Object',
      stat: true,
      forced: !DESCRIPTORS,
      sham: !DESCRIPTORS
    }, {
      defineProperty: objectDefinePropertyModile.f
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.freeze.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.freeze.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectFreezeJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var FREEZING = __webpack_require__(
    /*! ../internals/freezing */
    "./node_modules/core-js/internals/freezing.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var onFreeze = __webpack_require__(
    /*! ../internals/internal-metadata */
    "./node_modules/core-js/internals/internal-metadata.js").onFreeze;

    var nativeFreeze = Object.freeze;
    var FAILS_ON_PRIMITIVES = fails(function () {
      nativeFreeze(1);
    }); // `Object.freeze` method
    // https://tc39.github.io/ecma262/#sec-object.freeze

    $({
      target: 'Object',
      stat: true,
      forced: FAILS_ON_PRIMITIVES,
      sham: !FREEZING
    }, {
      freeze: function freeze(it) {
        return nativeFreeze && isObject(it) ? nativeFreeze(onFreeze(it)) : it;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js":
  /*!*******************************************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.get-own-property-descriptor.js ***!
    \*******************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectGetOwnPropertyDescriptorJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var toIndexedObject = __webpack_require__(
    /*! ../internals/to-indexed-object */
    "./node_modules/core-js/internals/to-indexed-object.js");

    var nativeGetOwnPropertyDescriptor = __webpack_require__(
    /*! ../internals/object-get-own-property-descriptor */
    "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;

    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var FAILS_ON_PRIMITIVES = fails(function () {
      nativeGetOwnPropertyDescriptor(1);
    });
    var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES; // `Object.getOwnPropertyDescriptor` method
    // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor

    $({
      target: 'Object',
      stat: true,
      forced: FORCED,
      sham: !DESCRIPTORS
    }, {
      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
        return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.get-own-property-names.js":
  /*!**************************************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.get-own-property-names.js ***!
    \**************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectGetOwnPropertyNamesJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var nativeGetOwnPropertyNames = __webpack_require__(
    /*! ../internals/object-get-own-property-names-external */
    "./node_modules/core-js/internals/object-get-own-property-names-external.js").f;

    var FAILS_ON_PRIMITIVES = fails(function () {
      return !Object.getOwnPropertyNames(1);
    }); // `Object.getOwnPropertyNames` method
    // https://tc39.github.io/ecma262/#sec-object.getownpropertynames

    $({
      target: 'Object',
      stat: true,
      forced: FAILS_ON_PRIMITIVES
    }, {
      getOwnPropertyNames: nativeGetOwnPropertyNames
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.get-prototype-of.js":
  /*!********************************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.get-prototype-of.js ***!
    \********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectGetPrototypeOfJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var toObject = __webpack_require__(
    /*! ../internals/to-object */
    "./node_modules/core-js/internals/to-object.js");

    var nativeGetPrototypeOf = __webpack_require__(
    /*! ../internals/object-get-prototype-of */
    "./node_modules/core-js/internals/object-get-prototype-of.js");

    var CORRECT_PROTOTYPE_GETTER = __webpack_require__(
    /*! ../internals/correct-prototype-getter */
    "./node_modules/core-js/internals/correct-prototype-getter.js");

    var FAILS_ON_PRIMITIVES = fails(function () {
      nativeGetPrototypeOf(1);
    }); // `Object.getPrototypeOf` method
    // https://tc39.github.io/ecma262/#sec-object.getprototypeof

    $({
      target: 'Object',
      stat: true,
      forced: FAILS_ON_PRIMITIVES,
      sham: !CORRECT_PROTOTYPE_GETTER
    }, {
      getPrototypeOf: function getPrototypeOf(it) {
        return nativeGetPrototypeOf(toObject(it));
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.is-extensible.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.is-extensible.js ***!
    \*****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectIsExtensibleJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var nativeIsExtensible = Object.isExtensible;
    var FAILS_ON_PRIMITIVES = fails(function () {
      nativeIsExtensible(1);
    }); // `Object.isExtensible` method
    // https://tc39.github.io/ecma262/#sec-object.isextensible

    $({
      target: 'Object',
      stat: true,
      forced: FAILS_ON_PRIMITIVES
    }, {
      isExtensible: function isExtensible(it) {
        return isObject(it) ? nativeIsExtensible ? nativeIsExtensible(it) : true : false;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.is-frozen.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.is-frozen.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectIsFrozenJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var nativeIsFrozen = Object.isFrozen;
    var FAILS_ON_PRIMITIVES = fails(function () {
      nativeIsFrozen(1);
    }); // `Object.isFrozen` method
    // https://tc39.github.io/ecma262/#sec-object.isfrozen

    $({
      target: 'Object',
      stat: true,
      forced: FAILS_ON_PRIMITIVES
    }, {
      isFrozen: function isFrozen(it) {
        return isObject(it) ? nativeIsFrozen ? nativeIsFrozen(it) : false : true;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.is-sealed.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.is-sealed.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectIsSealedJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var nativeIsSealed = Object.isSealed;
    var FAILS_ON_PRIMITIVES = fails(function () {
      nativeIsSealed(1);
    }); // `Object.isSealed` method
    // https://tc39.github.io/ecma262/#sec-object.issealed

    $({
      target: 'Object',
      stat: true,
      forced: FAILS_ON_PRIMITIVES
    }, {
      isSealed: function isSealed(it) {
        return isObject(it) ? nativeIsSealed ? nativeIsSealed(it) : false : true;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.is.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.is.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectIsJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var is = __webpack_require__(
    /*! ../internals/same-value */
    "./node_modules/core-js/internals/same-value.js"); // `Object.is` method
    // https://tc39.github.io/ecma262/#sec-object.is


    $({
      target: 'Object',
      stat: true
    }, {
      is: is
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.keys.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.keys.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectKeysJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var toObject = __webpack_require__(
    /*! ../internals/to-object */
    "./node_modules/core-js/internals/to-object.js");

    var nativeKeys = __webpack_require__(
    /*! ../internals/object-keys */
    "./node_modules/core-js/internals/object-keys.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var FAILS_ON_PRIMITIVES = fails(function () {
      nativeKeys(1);
    }); // `Object.keys` method
    // https://tc39.github.io/ecma262/#sec-object.keys

    $({
      target: 'Object',
      stat: true,
      forced: FAILS_ON_PRIMITIVES
    }, {
      keys: function keys(it) {
        return nativeKeys(toObject(it));
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.prevent-extensions.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.prevent-extensions.js ***!
    \**********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectPreventExtensionsJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var onFreeze = __webpack_require__(
    /*! ../internals/internal-metadata */
    "./node_modules/core-js/internals/internal-metadata.js").onFreeze;

    var FREEZING = __webpack_require__(
    /*! ../internals/freezing */
    "./node_modules/core-js/internals/freezing.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var nativePreventExtensions = Object.preventExtensions;
    var FAILS_ON_PRIMITIVES = fails(function () {
      nativePreventExtensions(1);
    }); // `Object.preventExtensions` method
    // https://tc39.github.io/ecma262/#sec-object.preventextensions

    $({
      target: 'Object',
      stat: true,
      forced: FAILS_ON_PRIMITIVES,
      sham: !FREEZING
    }, {
      preventExtensions: function preventExtensions(it) {
        return nativePreventExtensions && isObject(it) ? nativePreventExtensions(onFreeze(it)) : it;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.seal.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.seal.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectSealJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var onFreeze = __webpack_require__(
    /*! ../internals/internal-metadata */
    "./node_modules/core-js/internals/internal-metadata.js").onFreeze;

    var FREEZING = __webpack_require__(
    /*! ../internals/freezing */
    "./node_modules/core-js/internals/freezing.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var nativeSeal = Object.seal;
    var FAILS_ON_PRIMITIVES = fails(function () {
      nativeSeal(1);
    }); // `Object.seal` method
    // https://tc39.github.io/ecma262/#sec-object.seal

    $({
      target: 'Object',
      stat: true,
      forced: FAILS_ON_PRIMITIVES,
      sham: !FREEZING
    }, {
      seal: function seal(it) {
        return nativeSeal && isObject(it) ? nativeSeal(onFreeze(it)) : it;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.set-prototype-of.js":
  /*!********************************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.set-prototype-of.js ***!
    \********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectSetPrototypeOfJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var setPrototypeOf = __webpack_require__(
    /*! ../internals/object-set-prototype-of */
    "./node_modules/core-js/internals/object-set-prototype-of.js"); // `Object.setPrototypeOf` method
    // https://tc39.github.io/ecma262/#sec-object.setprototypeof


    $({
      target: 'Object',
      stat: true
    }, {
      setPrototypeOf: setPrototypeOf
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.object.to-string.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/modules/es.object.to-string.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsObjectToStringJs(module, exports, __webpack_require__) {
    var TO_STRING_TAG_SUPPORT = __webpack_require__(
    /*! ../internals/to-string-tag-support */
    "./node_modules/core-js/internals/to-string-tag-support.js");

    var redefine = __webpack_require__(
    /*! ../internals/redefine */
    "./node_modules/core-js/internals/redefine.js");

    var toString = __webpack_require__(
    /*! ../internals/object-to-string */
    "./node_modules/core-js/internals/object-to-string.js"); // `Object.prototype.toString` method
    // https://tc39.github.io/ecma262/#sec-object.prototype.tostring


    if (!TO_STRING_TAG_SUPPORT) {
      redefine(Object.prototype, 'toString', toString, {
        unsafe: true
      });
    }
    /***/

  },

  /***/
  "./node_modules/core-js/modules/es.parse-float.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/modules/es.parse-float.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsParseFloatJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var parseFloatImplementation = __webpack_require__(
    /*! ../internals/number-parse-float */
    "./node_modules/core-js/internals/number-parse-float.js"); // `parseFloat` method
    // https://tc39.github.io/ecma262/#sec-parsefloat-string


    $({
      global: true,
      forced: parseFloat != parseFloatImplementation
    }, {
      parseFloat: parseFloatImplementation
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.parse-int.js":
  /*!******************************************************!*\
    !*** ./node_modules/core-js/modules/es.parse-int.js ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsParseIntJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var parseIntImplementation = __webpack_require__(
    /*! ../internals/number-parse-int */
    "./node_modules/core-js/internals/number-parse-int.js"); // `parseInt` method
    // https://tc39.github.io/ecma262/#sec-parseint-string-radix


    $({
      global: true,
      forced: parseInt != parseIntImplementation
    }, {
      parseInt: parseIntImplementation
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.promise.js":
  /*!****************************************************!*\
    !*** ./node_modules/core-js/modules/es.promise.js ***!
    \****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsPromiseJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var IS_PURE = __webpack_require__(
    /*! ../internals/is-pure */
    "./node_modules/core-js/internals/is-pure.js");

    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var getBuiltIn = __webpack_require__(
    /*! ../internals/get-built-in */
    "./node_modules/core-js/internals/get-built-in.js");

    var NativePromise = __webpack_require__(
    /*! ../internals/native-promise-constructor */
    "./node_modules/core-js/internals/native-promise-constructor.js");

    var redefine = __webpack_require__(
    /*! ../internals/redefine */
    "./node_modules/core-js/internals/redefine.js");

    var redefineAll = __webpack_require__(
    /*! ../internals/redefine-all */
    "./node_modules/core-js/internals/redefine-all.js");

    var setToStringTag = __webpack_require__(
    /*! ../internals/set-to-string-tag */
    "./node_modules/core-js/internals/set-to-string-tag.js");

    var setSpecies = __webpack_require__(
    /*! ../internals/set-species */
    "./node_modules/core-js/internals/set-species.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var aFunction = __webpack_require__(
    /*! ../internals/a-function */
    "./node_modules/core-js/internals/a-function.js");

    var anInstance = __webpack_require__(
    /*! ../internals/an-instance */
    "./node_modules/core-js/internals/an-instance.js");

    var classof = __webpack_require__(
    /*! ../internals/classof-raw */
    "./node_modules/core-js/internals/classof-raw.js");

    var inspectSource = __webpack_require__(
    /*! ../internals/inspect-source */
    "./node_modules/core-js/internals/inspect-source.js");

    var iterate = __webpack_require__(
    /*! ../internals/iterate */
    "./node_modules/core-js/internals/iterate.js");

    var checkCorrectnessOfIteration = __webpack_require__(
    /*! ../internals/check-correctness-of-iteration */
    "./node_modules/core-js/internals/check-correctness-of-iteration.js");

    var speciesConstructor = __webpack_require__(
    /*! ../internals/species-constructor */
    "./node_modules/core-js/internals/species-constructor.js");

    var task = __webpack_require__(
    /*! ../internals/task */
    "./node_modules/core-js/internals/task.js").set;

    var microtask = __webpack_require__(
    /*! ../internals/microtask */
    "./node_modules/core-js/internals/microtask.js");

    var promiseResolve = __webpack_require__(
    /*! ../internals/promise-resolve */
    "./node_modules/core-js/internals/promise-resolve.js");

    var hostReportErrors = __webpack_require__(
    /*! ../internals/host-report-errors */
    "./node_modules/core-js/internals/host-report-errors.js");

    var newPromiseCapabilityModule = __webpack_require__(
    /*! ../internals/new-promise-capability */
    "./node_modules/core-js/internals/new-promise-capability.js");

    var perform = __webpack_require__(
    /*! ../internals/perform */
    "./node_modules/core-js/internals/perform.js");

    var InternalStateModule = __webpack_require__(
    /*! ../internals/internal-state */
    "./node_modules/core-js/internals/internal-state.js");

    var isForced = __webpack_require__(
    /*! ../internals/is-forced */
    "./node_modules/core-js/internals/is-forced.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var V8_VERSION = __webpack_require__(
    /*! ../internals/engine-v8-version */
    "./node_modules/core-js/internals/engine-v8-version.js");

    var SPECIES = wellKnownSymbol('species');
    var PROMISE = 'Promise';
    var getInternalState = InternalStateModule.get;
    var setInternalState = InternalStateModule.set;
    var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
    var PromiseConstructor = NativePromise;
    var TypeError = global.TypeError;
    var document = global.document;
    var process = global.process;
    var $fetch = getBuiltIn('fetch');
    var newPromiseCapability = newPromiseCapabilityModule.f;
    var newGenericPromiseCapability = newPromiseCapability;
    var IS_NODE = classof(process) == 'process';
    var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
    var UNHANDLED_REJECTION = 'unhandledrejection';
    var REJECTION_HANDLED = 'rejectionhandled';
    var PENDING = 0;
    var FULFILLED = 1;
    var REJECTED = 2;
    var HANDLED = 1;
    var UNHANDLED = 2;
    var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;
    var FORCED = isForced(PROMISE, function () {
      var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);

      if (!GLOBAL_CORE_JS_PROMISE) {
        // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
        // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
        // We can't detect it synchronously, so just check versions
        if (V8_VERSION === 66) return true; // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test

        if (!IS_NODE && typeof PromiseRejectionEvent != 'function') return true;
      } // We need Promise#finally in the pure version for preventing prototype pollution


      if (IS_PURE && !PromiseConstructor.prototype['finally']) return true; // We can't use @@species feature detection in V8 since it causes
      // deoptimization and performance degradation
      // https://github.com/zloirock/core-js/issues/679

      if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false; // Detect correctness of subclassing with @@species support

      var promise = PromiseConstructor.resolve(1);

      var FakePromise = function FakePromise(exec) {
        exec(function () {
          /* empty */
        }, function () {
          /* empty */
        });
      };

      var constructor = promise.constructor = {};
      constructor[SPECIES] = FakePromise;
      return !(promise.then(function () {
        /* empty */
      }) instanceof FakePromise);
    });
    var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
      PromiseConstructor.all(iterable)['catch'](function () {
        /* empty */
      });
    }); // helpers

    var isThenable = function isThenable(it) {
      var then;
      return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
    };

    var notify = function notify(promise, state, isReject) {
      if (state.notified) return;
      state.notified = true;
      var chain = state.reactions;
      microtask(function () {
        var value = state.value;
        var ok = state.state == FULFILLED;
        var index = 0; // variable length - can't use forEach

        while (chain.length > index) {
          var reaction = chain[index++];
          var handler = ok ? reaction.ok : reaction.fail;
          var resolve = reaction.resolve;
          var reject = reaction.reject;
          var domain = reaction.domain;
          var result, then, exited;

          try {
            if (handler) {
              if (!ok) {
                if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
                state.rejection = HANDLED;
              }

              if (handler === true) result = value;else {
                if (domain) domain.enter();
                result = handler(value); // can throw

                if (domain) {
                  domain.exit();
                  exited = true;
                }
              }

              if (result === reaction.promise) {
                reject(TypeError('Promise-chain cycle'));
              } else if (then = isThenable(result)) {
                then.call(result, resolve, reject);
              } else resolve(result);
            } else reject(value);
          } catch (error) {
            if (domain && !exited) domain.exit();
            reject(error);
          }
        }

        state.reactions = [];
        state.notified = false;
        if (isReject && !state.rejection) onUnhandled(promise, state);
      });
    };

    var dispatchEvent = function dispatchEvent(name, promise, reason) {
      var event, handler;

      if (DISPATCH_EVENT) {
        event = document.createEvent('Event');
        event.promise = promise;
        event.reason = reason;
        event.initEvent(name, false, true);
        global.dispatchEvent(event);
      } else event = {
        promise: promise,
        reason: reason
      };

      if (handler = global['on' + name]) handler(event);else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
    };

    var onUnhandled = function onUnhandled(promise, state) {
      task.call(global, function () {
        var value = state.value;
        var IS_UNHANDLED = isUnhandled(state);
        var result;

        if (IS_UNHANDLED) {
          result = perform(function () {
            if (IS_NODE) {
              process.emit('unhandledRejection', value, promise);
            } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
          }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

          state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
          if (result.error) throw result.value;
        }
      });
    };

    var isUnhandled = function isUnhandled(state) {
      return state.rejection !== HANDLED && !state.parent;
    };

    var onHandleUnhandled = function onHandleUnhandled(promise, state) {
      task.call(global, function () {
        if (IS_NODE) {
          process.emit('rejectionHandled', promise);
        } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
      });
    };

    var bind = function bind(fn, promise, state, unwrap) {
      return function (value) {
        fn(promise, state, value, unwrap);
      };
    };

    var internalReject = function internalReject(promise, state, value, unwrap) {
      if (state.done) return;
      state.done = true;
      if (unwrap) state = unwrap;
      state.value = value;
      state.state = REJECTED;
      notify(promise, state, true);
    };

    var internalResolve = function internalResolve(promise, state, value, unwrap) {
      if (state.done) return;
      state.done = true;
      if (unwrap) state = unwrap;

      try {
        if (promise === value) throw TypeError("Promise can't be resolved itself");
        var then = isThenable(value);

        if (then) {
          microtask(function () {
            var wrapper = {
              done: false
            };

            try {
              then.call(value, bind(internalResolve, promise, wrapper, state), bind(internalReject, promise, wrapper, state));
            } catch (error) {
              internalReject(promise, wrapper, error, state);
            }
          });
        } else {
          state.value = value;
          state.state = FULFILLED;
          notify(promise, state, false);
        }
      } catch (error) {
        internalReject(promise, {
          done: false
        }, error, state);
      }
    }; // constructor polyfill


    if (FORCED) {
      // 25.4.3.1 Promise(executor)
      PromiseConstructor = function Promise(executor) {
        anInstance(this, PromiseConstructor, PROMISE);
        aFunction(executor);
        Internal.call(this);
        var state = getInternalState(this);

        try {
          executor(bind(internalResolve, this, state), bind(internalReject, this, state));
        } catch (error) {
          internalReject(this, state, error);
        }
      }; // eslint-disable-next-line no-unused-vars


      Internal = function Promise(executor) {
        setInternalState(this, {
          type: PROMISE,
          done: false,
          notified: false,
          parent: false,
          reactions: [],
          rejection: false,
          state: PENDING,
          value: undefined
        });
      };

      Internal.prototype = redefineAll(PromiseConstructor.prototype, {
        // `Promise.prototype.then` method
        // https://tc39.github.io/ecma262/#sec-promise.prototype.then
        then: function then(onFulfilled, onRejected) {
          var state = getInternalPromiseState(this);
          var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
          reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
          reaction.fail = typeof onRejected == 'function' && onRejected;
          reaction.domain = IS_NODE ? process.domain : undefined;
          state.parent = true;
          state.reactions.push(reaction);
          if (state.state != PENDING) notify(this, state, false);
          return reaction.promise;
        },
        // `Promise.prototype.catch` method
        // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
        'catch': function _catch(onRejected) {
          return this.then(undefined, onRejected);
        }
      });

      OwnPromiseCapability = function OwnPromiseCapability() {
        var promise = new Internal();
        var state = getInternalState(promise);
        this.promise = promise;
        this.resolve = bind(internalResolve, promise, state);
        this.reject = bind(internalReject, promise, state);
      };

      newPromiseCapabilityModule.f = newPromiseCapability = function newPromiseCapability(C) {
        return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
      };

      if (!IS_PURE && typeof NativePromise == 'function') {
        nativeThen = NativePromise.prototype.then; // wrap native Promise#then for native async functions

        redefine(NativePromise.prototype, 'then', function then(onFulfilled, onRejected) {
          var that = this;
          return new PromiseConstructor(function (resolve, reject) {
            nativeThen.call(that, resolve, reject);
          }).then(onFulfilled, onRejected); // https://github.com/zloirock/core-js/issues/640
        }, {
          unsafe: true
        }); // wrap fetch result

        if (typeof $fetch == 'function') $({
          global: true,
          enumerable: true,
          forced: true
        }, {
          // eslint-disable-next-line no-unused-vars
          fetch: function fetch(input
          /* , init */
          ) {
            return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));
          }
        });
      }
    }

    $({
      global: true,
      wrap: true,
      forced: FORCED
    }, {
      Promise: PromiseConstructor
    });
    setToStringTag(PromiseConstructor, PROMISE, false, true);
    setSpecies(PROMISE);
    PromiseWrapper = getBuiltIn(PROMISE); // statics

    $({
      target: PROMISE,
      stat: true,
      forced: FORCED
    }, {
      // `Promise.reject` method
      // https://tc39.github.io/ecma262/#sec-promise.reject
      reject: function reject(r) {
        var capability = newPromiseCapability(this);
        capability.reject.call(undefined, r);
        return capability.promise;
      }
    });
    $({
      target: PROMISE,
      stat: true,
      forced: IS_PURE || FORCED
    }, {
      // `Promise.resolve` method
      // https://tc39.github.io/ecma262/#sec-promise.resolve
      resolve: function resolve(x) {
        return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
      }
    });
    $({
      target: PROMISE,
      stat: true,
      forced: INCORRECT_ITERATION
    }, {
      // `Promise.all` method
      // https://tc39.github.io/ecma262/#sec-promise.all
      all: function all(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function () {
          var $promiseResolve = aFunction(C.resolve);
          var values = [];
          var counter = 0;
          var remaining = 1;
          iterate(iterable, function (promise) {
            var index = counter++;
            var alreadyCalled = false;
            values.push(undefined);
            remaining++;
            $promiseResolve.call(C, promise).then(function (value) {
              if (alreadyCalled) return;
              alreadyCalled = true;
              values[index] = value;
              --remaining || resolve(values);
            }, reject);
          });
          --remaining || resolve(values);
        });
        if (result.error) reject(result.value);
        return capability.promise;
      },
      // `Promise.race` method
      // https://tc39.github.io/ecma262/#sec-promise.race
      race: function race(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var reject = capability.reject;
        var result = perform(function () {
          var $promiseResolve = aFunction(C.resolve);
          iterate(iterable, function (promise) {
            $promiseResolve.call(C, promise).then(capability.resolve, reject);
          });
        });
        if (result.error) reject(result.value);
        return capability.promise;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.regexp.constructor.js":
  /*!***************************************************************!*\
    !*** ./node_modules/core-js/modules/es.regexp.constructor.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsRegexpConstructorJs(module, exports, __webpack_require__) {
    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var isForced = __webpack_require__(
    /*! ../internals/is-forced */
    "./node_modules/core-js/internals/is-forced.js");

    var inheritIfRequired = __webpack_require__(
    /*! ../internals/inherit-if-required */
    "./node_modules/core-js/internals/inherit-if-required.js");

    var defineProperty = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js").f;

    var getOwnPropertyNames = __webpack_require__(
    /*! ../internals/object-get-own-property-names */
    "./node_modules/core-js/internals/object-get-own-property-names.js").f;

    var isRegExp = __webpack_require__(
    /*! ../internals/is-regexp */
    "./node_modules/core-js/internals/is-regexp.js");

    var getFlags = __webpack_require__(
    /*! ../internals/regexp-flags */
    "./node_modules/core-js/internals/regexp-flags.js");

    var stickyHelpers = __webpack_require__(
    /*! ../internals/regexp-sticky-helpers */
    "./node_modules/core-js/internals/regexp-sticky-helpers.js");

    var redefine = __webpack_require__(
    /*! ../internals/redefine */
    "./node_modules/core-js/internals/redefine.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var setInternalState = __webpack_require__(
    /*! ../internals/internal-state */
    "./node_modules/core-js/internals/internal-state.js").set;

    var setSpecies = __webpack_require__(
    /*! ../internals/set-species */
    "./node_modules/core-js/internals/set-species.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var MATCH = wellKnownSymbol('match');
    var NativeRegExp = global.RegExp;
    var RegExpPrototype = NativeRegExp.prototype;
    var re1 = /a/g;
    var re2 = /a/g; // "new" should create a new object, old webkit bug

    var CORRECT_NEW = new NativeRegExp(re1) !== re1;
    var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
    var FORCED = DESCRIPTORS && isForced('RegExp', !CORRECT_NEW || UNSUPPORTED_Y || fails(function () {
      re2[MATCH] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match

      return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
    })); // `RegExp` constructor
    // https://tc39.github.io/ecma262/#sec-regexp-constructor

    if (FORCED) {
      var RegExpWrapper = function RegExp(pattern, flags) {
        var thisIsRegExp = this instanceof RegExpWrapper;
        var patternIsRegExp = isRegExp(pattern);
        var flagsAreUndefined = flags === undefined;
        var sticky;

        if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {
          return pattern;
        }

        if (CORRECT_NEW) {
          if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
        } else if (pattern instanceof RegExpWrapper) {
          if (flagsAreUndefined) flags = getFlags.call(pattern);
          pattern = pattern.source;
        }

        if (UNSUPPORTED_Y) {
          sticky = !!flags && flags.indexOf('y') > -1;
          if (sticky) flags = flags.replace(/y/g, '');
        }

        var result = inheritIfRequired(CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags), thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);
        if (UNSUPPORTED_Y && sticky) setInternalState(result, {
          sticky: sticky
        });
        return result;
      };

      var proxy = function proxy(key) {
        key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
          configurable: true,
          get: function get() {
            return NativeRegExp[key];
          },
          set: function set(it) {
            NativeRegExp[key] = it;
          }
        });
      };

      var keys = getOwnPropertyNames(NativeRegExp);
      var index = 0;

      while (keys.length > index) {
        proxy(keys[index++]);
      }

      RegExpPrototype.constructor = RegExpWrapper;
      RegExpWrapper.prototype = RegExpPrototype;
      redefine(global, 'RegExp', RegExpWrapper);
    } // https://tc39.github.io/ecma262/#sec-get-regexp-@@species


    setSpecies('RegExp');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.regexp.exec.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/modules/es.regexp.exec.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsRegexpExecJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var exec = __webpack_require__(
    /*! ../internals/regexp-exec */
    "./node_modules/core-js/internals/regexp-exec.js");

    $({
      target: 'RegExp',
      proto: true,
      forced: /./.exec !== exec
    }, {
      exec: exec
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.regexp.flags.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/modules/es.regexp.flags.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsRegexpFlagsJs(module, exports, __webpack_require__) {
    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var objectDefinePropertyModule = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js");

    var regExpFlags = __webpack_require__(
    /*! ../internals/regexp-flags */
    "./node_modules/core-js/internals/regexp-flags.js");

    var UNSUPPORTED_Y = __webpack_require__(
    /*! ../internals/regexp-sticky-helpers */
    "./node_modules/core-js/internals/regexp-sticky-helpers.js").UNSUPPORTED_Y; // `RegExp.prototype.flags` getter
    // https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags


    if (DESCRIPTORS && (/./g.flags != 'g' || UNSUPPORTED_Y)) {
      objectDefinePropertyModule.f(RegExp.prototype, 'flags', {
        configurable: true,
        get: regExpFlags
      });
    }
    /***/

  },

  /***/
  "./node_modules/core-js/modules/es.regexp.to-string.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/modules/es.regexp.to-string.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsRegexpToStringJs(module, exports, __webpack_require__) {
    "use strict";

    var redefine = __webpack_require__(
    /*! ../internals/redefine */
    "./node_modules/core-js/internals/redefine.js");

    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var flags = __webpack_require__(
    /*! ../internals/regexp-flags */
    "./node_modules/core-js/internals/regexp-flags.js");

    var TO_STRING = 'toString';
    var RegExpPrototype = RegExp.prototype;
    var nativeToString = RegExpPrototype[TO_STRING];
    var NOT_GENERIC = fails(function () {
      return nativeToString.call({
        source: 'a',
        flags: 'b'
      }) != '/a/b';
    }); // FF44- RegExp#toString has a wrong name

    var INCORRECT_NAME = nativeToString.name != TO_STRING; // `RegExp.prototype.toString` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring

    if (NOT_GENERIC || INCORRECT_NAME) {
      redefine(RegExp.prototype, TO_STRING, function toString() {
        var R = anObject(this);
        var p = String(R.source);
        var rf = R.flags;
        var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
        return '/' + p + '/' + f;
      }, {
        unsafe: true
      });
    }
    /***/

  },

  /***/
  "./node_modules/core-js/modules/es.set.js":
  /*!************************************************!*\
    !*** ./node_modules/core-js/modules/es.set.js ***!
    \************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsSetJs(module, exports, __webpack_require__) {
    "use strict";

    var collection = __webpack_require__(
    /*! ../internals/collection */
    "./node_modules/core-js/internals/collection.js");

    var collectionStrong = __webpack_require__(
    /*! ../internals/collection-strong */
    "./node_modules/core-js/internals/collection-strong.js"); // `Set` constructor
    // https://tc39.github.io/ecma262/#sec-set-objects


    module.exports = collection('Set', function (init) {
      return function Set() {
        return init(this, arguments.length ? arguments[0] : undefined);
      };
    }, collectionStrong);
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.anchor.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.anchor.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringAnchorJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var createHTML = __webpack_require__(
    /*! ../internals/create-html */
    "./node_modules/core-js/internals/create-html.js");

    var forcedStringHTMLMethod = __webpack_require__(
    /*! ../internals/string-html-forced */
    "./node_modules/core-js/internals/string-html-forced.js"); // `String.prototype.anchor` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.anchor


    $({
      target: 'String',
      proto: true,
      forced: forcedStringHTMLMethod('anchor')
    }, {
      anchor: function anchor(name) {
        return createHTML(this, 'a', 'name', name);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.big.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.big.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringBigJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var createHTML = __webpack_require__(
    /*! ../internals/create-html */
    "./node_modules/core-js/internals/create-html.js");

    var forcedStringHTMLMethod = __webpack_require__(
    /*! ../internals/string-html-forced */
    "./node_modules/core-js/internals/string-html-forced.js"); // `String.prototype.big` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.big


    $({
      target: 'String',
      proto: true,
      forced: forcedStringHTMLMethod('big')
    }, {
      big: function big() {
        return createHTML(this, 'big', '', '');
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.blink.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.blink.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringBlinkJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var createHTML = __webpack_require__(
    /*! ../internals/create-html */
    "./node_modules/core-js/internals/create-html.js");

    var forcedStringHTMLMethod = __webpack_require__(
    /*! ../internals/string-html-forced */
    "./node_modules/core-js/internals/string-html-forced.js"); // `String.prototype.blink` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.blink


    $({
      target: 'String',
      proto: true,
      forced: forcedStringHTMLMethod('blink')
    }, {
      blink: function blink() {
        return createHTML(this, 'blink', '', '');
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.bold.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.bold.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringBoldJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var createHTML = __webpack_require__(
    /*! ../internals/create-html */
    "./node_modules/core-js/internals/create-html.js");

    var forcedStringHTMLMethod = __webpack_require__(
    /*! ../internals/string-html-forced */
    "./node_modules/core-js/internals/string-html-forced.js"); // `String.prototype.bold` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.bold


    $({
      target: 'String',
      proto: true,
      forced: forcedStringHTMLMethod('bold')
    }, {
      bold: function bold() {
        return createHTML(this, 'b', '', '');
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.code-point-at.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.code-point-at.js ***!
    \*****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringCodePointAtJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var codeAt = __webpack_require__(
    /*! ../internals/string-multibyte */
    "./node_modules/core-js/internals/string-multibyte.js").codeAt; // `String.prototype.codePointAt` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat


    $({
      target: 'String',
      proto: true
    }, {
      codePointAt: function codePointAt(pos) {
        return codeAt(this, pos);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.ends-with.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.ends-with.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringEndsWithJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var getOwnPropertyDescriptor = __webpack_require__(
    /*! ../internals/object-get-own-property-descriptor */
    "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js");

    var notARegExp = __webpack_require__(
    /*! ../internals/not-a-regexp */
    "./node_modules/core-js/internals/not-a-regexp.js");

    var requireObjectCoercible = __webpack_require__(
    /*! ../internals/require-object-coercible */
    "./node_modules/core-js/internals/require-object-coercible.js");

    var correctIsRegExpLogic = __webpack_require__(
    /*! ../internals/correct-is-regexp-logic */
    "./node_modules/core-js/internals/correct-is-regexp-logic.js");

    var IS_PURE = __webpack_require__(
    /*! ../internals/is-pure */
    "./node_modules/core-js/internals/is-pure.js");

    var nativeEndsWith = ''.endsWith;
    var min = Math.min;
    var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith'); // https://github.com/zloirock/core-js/pull/702

    var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
      var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');
      return descriptor && !descriptor.writable;
    }(); // `String.prototype.endsWith` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.endswith

    $({
      target: 'String',
      proto: true,
      forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
    }, {
      endsWith: function endsWith(searchString
      /* , endPosition = @length */
      ) {
        var that = String(requireObjectCoercible(this));
        notARegExp(searchString);
        var endPosition = arguments.length > 1 ? arguments[1] : undefined;
        var len = toLength(that.length);
        var end = endPosition === undefined ? len : min(toLength(endPosition), len);
        var search = String(searchString);
        return nativeEndsWith ? nativeEndsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.fixed.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.fixed.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringFixedJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var createHTML = __webpack_require__(
    /*! ../internals/create-html */
    "./node_modules/core-js/internals/create-html.js");

    var forcedStringHTMLMethod = __webpack_require__(
    /*! ../internals/string-html-forced */
    "./node_modules/core-js/internals/string-html-forced.js"); // `String.prototype.fixed` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.fixed


    $({
      target: 'String',
      proto: true,
      forced: forcedStringHTMLMethod('fixed')
    }, {
      fixed: function fixed() {
        return createHTML(this, 'tt', '', '');
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.fontcolor.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.fontcolor.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringFontcolorJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var createHTML = __webpack_require__(
    /*! ../internals/create-html */
    "./node_modules/core-js/internals/create-html.js");

    var forcedStringHTMLMethod = __webpack_require__(
    /*! ../internals/string-html-forced */
    "./node_modules/core-js/internals/string-html-forced.js"); // `String.prototype.fontcolor` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.fontcolor


    $({
      target: 'String',
      proto: true,
      forced: forcedStringHTMLMethod('fontcolor')
    }, {
      fontcolor: function fontcolor(color) {
        return createHTML(this, 'font', 'color', color);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.fontsize.js":
  /*!************************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.fontsize.js ***!
    \************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringFontsizeJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var createHTML = __webpack_require__(
    /*! ../internals/create-html */
    "./node_modules/core-js/internals/create-html.js");

    var forcedStringHTMLMethod = __webpack_require__(
    /*! ../internals/string-html-forced */
    "./node_modules/core-js/internals/string-html-forced.js"); // `String.prototype.fontsize` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.fontsize


    $({
      target: 'String',
      proto: true,
      forced: forcedStringHTMLMethod('fontsize')
    }, {
      fontsize: function fontsize(size) {
        return createHTML(this, 'font', 'size', size);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.from-code-point.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.from-code-point.js ***!
    \*******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringFromCodePointJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var toAbsoluteIndex = __webpack_require__(
    /*! ../internals/to-absolute-index */
    "./node_modules/core-js/internals/to-absolute-index.js");

    var fromCharCode = String.fromCharCode;
    var nativeFromCodePoint = String.fromCodePoint; // length should be 1, old FF problem

    var INCORRECT_LENGTH = !!nativeFromCodePoint && nativeFromCodePoint.length != 1; // `String.fromCodePoint` method
    // https://tc39.github.io/ecma262/#sec-string.fromcodepoint

    $({
      target: 'String',
      stat: true,
      forced: INCORRECT_LENGTH
    }, {
      fromCodePoint: function fromCodePoint(x) {
        // eslint-disable-line no-unused-vars
        var elements = [];
        var length = arguments.length;
        var i = 0;
        var code;

        while (length > i) {
          code = +arguments[i++];
          if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');
          elements.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00));
        }

        return elements.join('');
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.includes.js":
  /*!************************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.includes.js ***!
    \************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringIncludesJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var notARegExp = __webpack_require__(
    /*! ../internals/not-a-regexp */
    "./node_modules/core-js/internals/not-a-regexp.js");

    var requireObjectCoercible = __webpack_require__(
    /*! ../internals/require-object-coercible */
    "./node_modules/core-js/internals/require-object-coercible.js");

    var correctIsRegExpLogic = __webpack_require__(
    /*! ../internals/correct-is-regexp-logic */
    "./node_modules/core-js/internals/correct-is-regexp-logic.js"); // `String.prototype.includes` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.includes


    $({
      target: 'String',
      proto: true,
      forced: !correctIsRegExpLogic('includes')
    }, {
      includes: function includes(searchString
      /* , position = 0 */
      ) {
        return !!~String(requireObjectCoercible(this)).indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.italics.js":
  /*!***********************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.italics.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringItalicsJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var createHTML = __webpack_require__(
    /*! ../internals/create-html */
    "./node_modules/core-js/internals/create-html.js");

    var forcedStringHTMLMethod = __webpack_require__(
    /*! ../internals/string-html-forced */
    "./node_modules/core-js/internals/string-html-forced.js"); // `String.prototype.italics` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.italics


    $({
      target: 'String',
      proto: true,
      forced: forcedStringHTMLMethod('italics')
    }, {
      italics: function italics() {
        return createHTML(this, 'i', '', '');
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.iterator.js":
  /*!************************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.iterator.js ***!
    \************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringIteratorJs(module, exports, __webpack_require__) {
    "use strict";

    var charAt = __webpack_require__(
    /*! ../internals/string-multibyte */
    "./node_modules/core-js/internals/string-multibyte.js").charAt;

    var InternalStateModule = __webpack_require__(
    /*! ../internals/internal-state */
    "./node_modules/core-js/internals/internal-state.js");

    var defineIterator = __webpack_require__(
    /*! ../internals/define-iterator */
    "./node_modules/core-js/internals/define-iterator.js");

    var STRING_ITERATOR = 'String Iterator';
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR); // `String.prototype[@@iterator]` method
    // https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator

    defineIterator(String, 'String', function (iterated) {
      setInternalState(this, {
        type: STRING_ITERATOR,
        string: String(iterated),
        index: 0
      }); // `%StringIteratorPrototype%.next` method
      // https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
    }, function next() {
      var state = getInternalState(this);
      var string = state.string;
      var index = state.index;
      var point;
      if (index >= string.length) return {
        value: undefined,
        done: true
      };
      point = charAt(string, index);
      state.index += point.length;
      return {
        value: point,
        done: false
      };
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.link.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.link.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringLinkJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var createHTML = __webpack_require__(
    /*! ../internals/create-html */
    "./node_modules/core-js/internals/create-html.js");

    var forcedStringHTMLMethod = __webpack_require__(
    /*! ../internals/string-html-forced */
    "./node_modules/core-js/internals/string-html-forced.js"); // `String.prototype.link` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.link


    $({
      target: 'String',
      proto: true,
      forced: forcedStringHTMLMethod('link')
    }, {
      link: function link(url) {
        return createHTML(this, 'a', 'href', url);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.match.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.match.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringMatchJs(module, exports, __webpack_require__) {
    "use strict";

    var fixRegExpWellKnownSymbolLogic = __webpack_require__(
    /*! ../internals/fix-regexp-well-known-symbol-logic */
    "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js");

    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js");

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js");

    var requireObjectCoercible = __webpack_require__(
    /*! ../internals/require-object-coercible */
    "./node_modules/core-js/internals/require-object-coercible.js");

    var advanceStringIndex = __webpack_require__(
    /*! ../internals/advance-string-index */
    "./node_modules/core-js/internals/advance-string-index.js");

    var regExpExec = __webpack_require__(
    /*! ../internals/regexp-exec-abstract */
    "./node_modules/core-js/internals/regexp-exec-abstract.js"); // @@match logic


    fixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
      return [// `String.prototype.match` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.match
      function match(regexp) {
        var O = requireObjectCoercible(this);
        var matcher = regexp == undefined ? undefined : regexp[MATCH];
        return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
      }, // `RegExp.prototype[@@match]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
      function (regexp) {
        var res = maybeCallNative(nativeMatch, regexp, this);
        if (res.done) return res.value;
        var rx = anObject(regexp);
        var S = String(this);
        if (!rx.global) return regExpExec(rx, S);
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
        var A = [];
        var n = 0;
        var result;

        while ((result = regExpExec(rx, S)) !== null) {
          var matchStr = String(result[0]);
          A[n] = matchStr;
          if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
          n++;
        }

        return n === 0 ? null : A;
      }];
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.raw.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.raw.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringRawJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var toIndexedObject = __webpack_require__(
    /*! ../internals/to-indexed-object */
    "./node_modules/core-js/internals/to-indexed-object.js");

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js"); // `String.raw` method
    // https://tc39.github.io/ecma262/#sec-string.raw


    $({
      target: 'String',
      stat: true
    }, {
      raw: function raw(template) {
        var rawTemplate = toIndexedObject(template.raw);
        var literalSegments = toLength(rawTemplate.length);
        var argumentsLength = arguments.length;
        var elements = [];
        var i = 0;

        while (literalSegments > i) {
          elements.push(String(rawTemplate[i++]));
          if (i < argumentsLength) elements.push(String(arguments[i]));
        }

        return elements.join('');
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.repeat.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.repeat.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringRepeatJs(module, exports, __webpack_require__) {
    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var repeat = __webpack_require__(
    /*! ../internals/string-repeat */
    "./node_modules/core-js/internals/string-repeat.js"); // `String.prototype.repeat` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.repeat


    $({
      target: 'String',
      proto: true
    }, {
      repeat: repeat
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.replace.js":
  /*!***********************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.replace.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringReplaceJs(module, exports, __webpack_require__) {
    "use strict";

    var fixRegExpWellKnownSymbolLogic = __webpack_require__(
    /*! ../internals/fix-regexp-well-known-symbol-logic */
    "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js");

    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js");

    var toObject = __webpack_require__(
    /*! ../internals/to-object */
    "./node_modules/core-js/internals/to-object.js");

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js");

    var toInteger = __webpack_require__(
    /*! ../internals/to-integer */
    "./node_modules/core-js/internals/to-integer.js");

    var requireObjectCoercible = __webpack_require__(
    /*! ../internals/require-object-coercible */
    "./node_modules/core-js/internals/require-object-coercible.js");

    var advanceStringIndex = __webpack_require__(
    /*! ../internals/advance-string-index */
    "./node_modules/core-js/internals/advance-string-index.js");

    var regExpExec = __webpack_require__(
    /*! ../internals/regexp-exec-abstract */
    "./node_modules/core-js/internals/regexp-exec-abstract.js");

    var max = Math.max;
    var min = Math.min;
    var floor = Math.floor;
    var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
    var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

    var maybeToString = function maybeToString(it) {
      return it === undefined ? it : String(it);
    }; // @@replace logic


    fixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
      var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
      var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
      var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';
      return [// `String.prototype.replace` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.replace
      function replace(searchValue, replaceValue) {
        var O = requireObjectCoercible(this);
        var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
        return replacer !== undefined ? replacer.call(searchValue, O, replaceValue) : nativeReplace.call(String(O), searchValue, replaceValue);
      }, // `RegExp.prototype[@@replace]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
      function (regexp, replaceValue) {
        if (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0 || typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1) {
          var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
          if (res.done) return res.value;
        }

        var rx = anObject(regexp);
        var S = String(this);
        var functionalReplace = typeof replaceValue === 'function';
        if (!functionalReplace) replaceValue = String(replaceValue);
        var global = rx.global;

        if (global) {
          var fullUnicode = rx.unicode;
          rx.lastIndex = 0;
        }

        var results = [];

        while (true) {
          var result = regExpExec(rx, S);
          if (result === null) break;
          results.push(result);
          if (!global) break;
          var matchStr = String(result[0]);
          if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        }

        var accumulatedResult = '';
        var nextSourcePosition = 0;

        for (var i = 0; i < results.length; i++) {
          result = results[i];
          var matched = String(result[0]);
          var position = max(min(toInteger(result.index), S.length), 0);
          var captures = []; // NOTE: This is equivalent to
          //   captures = result.slice(1).map(maybeToString)
          // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
          // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
          // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

          for (var j = 1; j < result.length; j++) {
            captures.push(maybeToString(result[j]));
          }

          var namedCaptures = result.groups;

          if (functionalReplace) {
            var replacerArgs = [matched].concat(captures, position, S);
            if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
            var replacement = String(replaceValue.apply(undefined, replacerArgs));
          } else {
            replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
          }

          if (position >= nextSourcePosition) {
            accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
            nextSourcePosition = position + matched.length;
          }
        }

        return accumulatedResult + S.slice(nextSourcePosition);
      }]; // https://tc39.github.io/ecma262/#sec-getsubstitution

      function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
        var tailPos = position + matched.length;
        var m = captures.length;
        var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;

        if (namedCaptures !== undefined) {
          namedCaptures = toObject(namedCaptures);
          symbols = SUBSTITUTION_SYMBOLS;
        }

        return nativeReplace.call(replacement, symbols, function (match, ch) {
          var capture;

          switch (ch.charAt(0)) {
            case '$':
              return '$';

            case '&':
              return matched;

            case '`':
              return str.slice(0, position);

            case "'":
              return str.slice(tailPos);

            case '<':
              capture = namedCaptures[ch.slice(1, -1)];
              break;

            default:
              // \d\d?
              var n = +ch;
              if (n === 0) return match;

              if (n > m) {
                var f = floor(n / 10);
                if (f === 0) return match;
                if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                return match;
              }

              capture = captures[n - 1];
          }

          return capture === undefined ? '' : capture;
        });
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.search.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.search.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringSearchJs(module, exports, __webpack_require__) {
    "use strict";

    var fixRegExpWellKnownSymbolLogic = __webpack_require__(
    /*! ../internals/fix-regexp-well-known-symbol-logic */
    "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js");

    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js");

    var requireObjectCoercible = __webpack_require__(
    /*! ../internals/require-object-coercible */
    "./node_modules/core-js/internals/require-object-coercible.js");

    var sameValue = __webpack_require__(
    /*! ../internals/same-value */
    "./node_modules/core-js/internals/same-value.js");

    var regExpExec = __webpack_require__(
    /*! ../internals/regexp-exec-abstract */
    "./node_modules/core-js/internals/regexp-exec-abstract.js"); // @@search logic


    fixRegExpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {
      return [// `String.prototype.search` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.search
      function search(regexp) {
        var O = requireObjectCoercible(this);
        var searcher = regexp == undefined ? undefined : regexp[SEARCH];
        return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
      }, // `RegExp.prototype[@@search]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
      function (regexp) {
        var res = maybeCallNative(nativeSearch, regexp, this);
        if (res.done) return res.value;
        var rx = anObject(regexp);
        var S = String(this);
        var previousLastIndex = rx.lastIndex;
        if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
        var result = regExpExec(rx, S);
        if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
        return result === null ? -1 : result.index;
      }];
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.small.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.small.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringSmallJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var createHTML = __webpack_require__(
    /*! ../internals/create-html */
    "./node_modules/core-js/internals/create-html.js");

    var forcedStringHTMLMethod = __webpack_require__(
    /*! ../internals/string-html-forced */
    "./node_modules/core-js/internals/string-html-forced.js"); // `String.prototype.small` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.small


    $({
      target: 'String',
      proto: true,
      forced: forcedStringHTMLMethod('small')
    }, {
      small: function small() {
        return createHTML(this, 'small', '', '');
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.split.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.split.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringSplitJs(module, exports, __webpack_require__) {
    "use strict";

    var fixRegExpWellKnownSymbolLogic = __webpack_require__(
    /*! ../internals/fix-regexp-well-known-symbol-logic */
    "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js");

    var isRegExp = __webpack_require__(
    /*! ../internals/is-regexp */
    "./node_modules/core-js/internals/is-regexp.js");

    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js");

    var requireObjectCoercible = __webpack_require__(
    /*! ../internals/require-object-coercible */
    "./node_modules/core-js/internals/require-object-coercible.js");

    var speciesConstructor = __webpack_require__(
    /*! ../internals/species-constructor */
    "./node_modules/core-js/internals/species-constructor.js");

    var advanceStringIndex = __webpack_require__(
    /*! ../internals/advance-string-index */
    "./node_modules/core-js/internals/advance-string-index.js");

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js");

    var callRegExpExec = __webpack_require__(
    /*! ../internals/regexp-exec-abstract */
    "./node_modules/core-js/internals/regexp-exec-abstract.js");

    var regexpExec = __webpack_require__(
    /*! ../internals/regexp-exec */
    "./node_modules/core-js/internals/regexp-exec.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var arrayPush = [].push;
    var min = Math.min;
    var MAX_UINT32 = 0xFFFFFFFF; // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError

    var SUPPORTS_Y = !fails(function () {
      return !RegExp(MAX_UINT32, 'y');
    }); // @@split logic

    fixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
      var internalSplit;

      if ('abbc'.split(/(b)*/)[1] == 'c' || 'test'.split(/(?:)/, -1).length != 4 || 'ab'.split(/(?:ab)*/).length != 2 || '.'.split(/(.?)(.?)/).length != 4 || '.'.split(/()()/).length > 1 || ''.split(/.?/).length) {
        // based on es5-shim implementation, need to rework it
        internalSplit = function internalSplit(separator, limit) {
          var string = String(requireObjectCoercible(this));
          var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
          if (lim === 0) return [];
          if (separator === undefined) return [string]; // If `separator` is not a regex, use native split

          if (!isRegExp(separator)) {
            return nativeSplit.call(string, separator, lim);
          }

          var output = [];
          var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
          var lastLastIndex = 0; // Make `global` and avoid `lastIndex` issues by working with a copy

          var separatorCopy = new RegExp(separator.source, flags + 'g');
          var match, lastIndex, lastLength;

          while (match = regexpExec.call(separatorCopy, string)) {
            lastIndex = separatorCopy.lastIndex;

            if (lastIndex > lastLastIndex) {
              output.push(string.slice(lastLastIndex, match.index));
              if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
              lastLength = match[0].length;
              lastLastIndex = lastIndex;
              if (output.length >= lim) break;
            }

            if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
          }

          if (lastLastIndex === string.length) {
            if (lastLength || !separatorCopy.test('')) output.push('');
          } else output.push(string.slice(lastLastIndex));

          return output.length > lim ? output.slice(0, lim) : output;
        }; // Chakra, V8

      } else if ('0'.split(undefined, 0).length) {
        internalSplit = function internalSplit(separator, limit) {
          return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
        };
      } else internalSplit = nativeSplit;

      return [// `String.prototype.split` method
      // https://tc39.github.io/ecma262/#sec-string.prototype.split
      function split(separator, limit) {
        var O = requireObjectCoercible(this);
        var splitter = separator == undefined ? undefined : separator[SPLIT];
        return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
      }, // `RegExp.prototype[@@split]` method
      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
      //
      // NOTE: This cannot be properly polyfilled in engines that don't support
      // the 'y' flag.
      function (regexp, limit) {
        var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
        if (res.done) return res.value;
        var rx = anObject(regexp);
        var S = String(this);
        var C = speciesConstructor(rx, RegExp);
        var unicodeMatching = rx.unicode;
        var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g'); // ^(? + rx + ) is needed, in combination with some S slicing, to
        // simulate the 'y' flag.

        var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
        var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
        if (lim === 0) return [];
        if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
        var p = 0;
        var q = 0;
        var A = [];

        while (q < S.length) {
          splitter.lastIndex = SUPPORTS_Y ? q : 0;
          var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
          var e;

          if (z === null || (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) {
            q = advanceStringIndex(S, q, unicodeMatching);
          } else {
            A.push(S.slice(p, q));
            if (A.length === lim) return A;

            for (var i = 1; i <= z.length - 1; i++) {
              A.push(z[i]);
              if (A.length === lim) return A;
            }

            q = p = e;
          }
        }

        A.push(S.slice(p));
        return A;
      }];
    }, !SUPPORTS_Y);
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.starts-with.js":
  /*!***************************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.starts-with.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringStartsWithJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var getOwnPropertyDescriptor = __webpack_require__(
    /*! ../internals/object-get-own-property-descriptor */
    "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;

    var toLength = __webpack_require__(
    /*! ../internals/to-length */
    "./node_modules/core-js/internals/to-length.js");

    var notARegExp = __webpack_require__(
    /*! ../internals/not-a-regexp */
    "./node_modules/core-js/internals/not-a-regexp.js");

    var requireObjectCoercible = __webpack_require__(
    /*! ../internals/require-object-coercible */
    "./node_modules/core-js/internals/require-object-coercible.js");

    var correctIsRegExpLogic = __webpack_require__(
    /*! ../internals/correct-is-regexp-logic */
    "./node_modules/core-js/internals/correct-is-regexp-logic.js");

    var IS_PURE = __webpack_require__(
    /*! ../internals/is-pure */
    "./node_modules/core-js/internals/is-pure.js");

    var nativeStartsWith = ''.startsWith;
    var min = Math.min;
    var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith'); // https://github.com/zloirock/core-js/pull/702

    var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
      var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');
      return descriptor && !descriptor.writable;
    }(); // `String.prototype.startsWith` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.startswith

    $({
      target: 'String',
      proto: true,
      forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
    }, {
      startsWith: function startsWith(searchString
      /* , position = 0 */
      ) {
        var that = String(requireObjectCoercible(this));
        notARegExp(searchString);
        var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));
        var search = String(searchString);
        return nativeStartsWith ? nativeStartsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.strike.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.strike.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringStrikeJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var createHTML = __webpack_require__(
    /*! ../internals/create-html */
    "./node_modules/core-js/internals/create-html.js");

    var forcedStringHTMLMethod = __webpack_require__(
    /*! ../internals/string-html-forced */
    "./node_modules/core-js/internals/string-html-forced.js"); // `String.prototype.strike` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.strike


    $({
      target: 'String',
      proto: true,
      forced: forcedStringHTMLMethod('strike')
    }, {
      strike: function strike() {
        return createHTML(this, 'strike', '', '');
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.sub.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.sub.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringSubJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var createHTML = __webpack_require__(
    /*! ../internals/create-html */
    "./node_modules/core-js/internals/create-html.js");

    var forcedStringHTMLMethod = __webpack_require__(
    /*! ../internals/string-html-forced */
    "./node_modules/core-js/internals/string-html-forced.js"); // `String.prototype.sub` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.sub


    $({
      target: 'String',
      proto: true,
      forced: forcedStringHTMLMethod('sub')
    }, {
      sub: function sub() {
        return createHTML(this, 'sub', '', '');
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.sup.js":
  /*!*******************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.sup.js ***!
    \*******************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringSupJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var createHTML = __webpack_require__(
    /*! ../internals/create-html */
    "./node_modules/core-js/internals/create-html.js");

    var forcedStringHTMLMethod = __webpack_require__(
    /*! ../internals/string-html-forced */
    "./node_modules/core-js/internals/string-html-forced.js"); // `String.prototype.sup` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.sup


    $({
      target: 'String',
      proto: true,
      forced: forcedStringHTMLMethod('sup')
    }, {
      sup: function sup() {
        return createHTML(this, 'sup', '', '');
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.string.trim.js":
  /*!********************************************************!*\
    !*** ./node_modules/core-js/modules/es.string.trim.js ***!
    \********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsStringTrimJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var $trim = __webpack_require__(
    /*! ../internals/string-trim */
    "./node_modules/core-js/internals/string-trim.js").trim;

    var forcedStringTrimMethod = __webpack_require__(
    /*! ../internals/string-trim-forced */
    "./node_modules/core-js/internals/string-trim-forced.js"); // `String.prototype.trim` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.trim


    $({
      target: 'String',
      proto: true,
      forced: forcedStringTrimMethod('trim')
    }, {
      trim: function trim() {
        return $trim(this);
      }
    });
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.symbol.async-iterator.js":
  /*!******************************************************************!*\
    !*** ./node_modules/core-js/modules/es.symbol.async-iterator.js ***!
    \******************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsSymbolAsyncIteratorJs(module, exports, __webpack_require__) {
    var defineWellKnownSymbol = __webpack_require__(
    /*! ../internals/define-well-known-symbol */
    "./node_modules/core-js/internals/define-well-known-symbol.js"); // `Symbol.asyncIterator` well-known symbol
    // https://tc39.github.io/ecma262/#sec-symbol.asynciterator


    defineWellKnownSymbol('asyncIterator');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.symbol.description.js":
  /*!***************************************************************!*\
    !*** ./node_modules/core-js/modules/es.symbol.description.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsSymbolDescriptionJs(module, exports, __webpack_require__) {
    "use strict"; // `Symbol.prototype.description` getter
    // https://tc39.github.io/ecma262/#sec-symbol.prototype.description

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var has = __webpack_require__(
    /*! ../internals/has */
    "./node_modules/core-js/internals/has.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var defineProperty = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js").f;

    var copyConstructorProperties = __webpack_require__(
    /*! ../internals/copy-constructor-properties */
    "./node_modules/core-js/internals/copy-constructor-properties.js");

    var NativeSymbol = global.Symbol;

    if (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) || // Safari 12 bug
    NativeSymbol().description !== undefined)) {
      var EmptyStringDescriptionStore = {}; // wrap Symbol constructor for correct work with undefined description

      var SymbolWrapper = function Symbol() {
        var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
        var result = this instanceof SymbolWrapper ? new NativeSymbol(description) // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
        : description === undefined ? NativeSymbol() : NativeSymbol(description);
        if (description === '') EmptyStringDescriptionStore[result] = true;
        return result;
      };

      copyConstructorProperties(SymbolWrapper, NativeSymbol);
      var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
      symbolPrototype.constructor = SymbolWrapper;
      var symbolToString = symbolPrototype.toString;

      var _native = String(NativeSymbol('test')) == 'Symbol(test)';

      var regexp = /^Symbol\((.*)\)[^)]+$/;
      defineProperty(symbolPrototype, 'description', {
        configurable: true,
        get: function description() {
          var symbol = isObject(this) ? this.valueOf() : this;
          var string = symbolToString.call(symbol);
          if (has(EmptyStringDescriptionStore, symbol)) return '';
          var desc = _native ? string.slice(7, -1) : string.replace(regexp, '$1');
          return desc === '' ? undefined : desc;
        }
      });
      $({
        global: true,
        forced: true
      }, {
        Symbol: SymbolWrapper
      });
    }
    /***/

  },

  /***/
  "./node_modules/core-js/modules/es.symbol.has-instance.js":
  /*!****************************************************************!*\
    !*** ./node_modules/core-js/modules/es.symbol.has-instance.js ***!
    \****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsSymbolHasInstanceJs(module, exports, __webpack_require__) {
    var defineWellKnownSymbol = __webpack_require__(
    /*! ../internals/define-well-known-symbol */
    "./node_modules/core-js/internals/define-well-known-symbol.js"); // `Symbol.hasInstance` well-known symbol
    // https://tc39.github.io/ecma262/#sec-symbol.hasinstance


    defineWellKnownSymbol('hasInstance');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.symbol.is-concat-spreadable.js":
  /*!************************************************************************!*\
    !*** ./node_modules/core-js/modules/es.symbol.is-concat-spreadable.js ***!
    \************************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsSymbolIsConcatSpreadableJs(module, exports, __webpack_require__) {
    var defineWellKnownSymbol = __webpack_require__(
    /*! ../internals/define-well-known-symbol */
    "./node_modules/core-js/internals/define-well-known-symbol.js"); // `Symbol.isConcatSpreadable` well-known symbol
    // https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable


    defineWellKnownSymbol('isConcatSpreadable');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.symbol.iterator.js":
  /*!************************************************************!*\
    !*** ./node_modules/core-js/modules/es.symbol.iterator.js ***!
    \************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsSymbolIteratorJs(module, exports, __webpack_require__) {
    var defineWellKnownSymbol = __webpack_require__(
    /*! ../internals/define-well-known-symbol */
    "./node_modules/core-js/internals/define-well-known-symbol.js"); // `Symbol.iterator` well-known symbol
    // https://tc39.github.io/ecma262/#sec-symbol.iterator


    defineWellKnownSymbol('iterator');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.symbol.js":
  /*!***************************************************!*\
    !*** ./node_modules/core-js/modules/es.symbol.js ***!
    \***************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsSymbolJs(module, exports, __webpack_require__) {
    "use strict";

    var $ = __webpack_require__(
    /*! ../internals/export */
    "./node_modules/core-js/internals/export.js");

    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var getBuiltIn = __webpack_require__(
    /*! ../internals/get-built-in */
    "./node_modules/core-js/internals/get-built-in.js");

    var IS_PURE = __webpack_require__(
    /*! ../internals/is-pure */
    "./node_modules/core-js/internals/is-pure.js");

    var DESCRIPTORS = __webpack_require__(
    /*! ../internals/descriptors */
    "./node_modules/core-js/internals/descriptors.js");

    var NATIVE_SYMBOL = __webpack_require__(
    /*! ../internals/native-symbol */
    "./node_modules/core-js/internals/native-symbol.js");

    var USE_SYMBOL_AS_UID = __webpack_require__(
    /*! ../internals/use-symbol-as-uid */
    "./node_modules/core-js/internals/use-symbol-as-uid.js");

    var fails = __webpack_require__(
    /*! ../internals/fails */
    "./node_modules/core-js/internals/fails.js");

    var has = __webpack_require__(
    /*! ../internals/has */
    "./node_modules/core-js/internals/has.js");

    var isArray = __webpack_require__(
    /*! ../internals/is-array */
    "./node_modules/core-js/internals/is-array.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var anObject = __webpack_require__(
    /*! ../internals/an-object */
    "./node_modules/core-js/internals/an-object.js");

    var toObject = __webpack_require__(
    /*! ../internals/to-object */
    "./node_modules/core-js/internals/to-object.js");

    var toIndexedObject = __webpack_require__(
    /*! ../internals/to-indexed-object */
    "./node_modules/core-js/internals/to-indexed-object.js");

    var toPrimitive = __webpack_require__(
    /*! ../internals/to-primitive */
    "./node_modules/core-js/internals/to-primitive.js");

    var createPropertyDescriptor = __webpack_require__(
    /*! ../internals/create-property-descriptor */
    "./node_modules/core-js/internals/create-property-descriptor.js");

    var nativeObjectCreate = __webpack_require__(
    /*! ../internals/object-create */
    "./node_modules/core-js/internals/object-create.js");

    var objectKeys = __webpack_require__(
    /*! ../internals/object-keys */
    "./node_modules/core-js/internals/object-keys.js");

    var getOwnPropertyNamesModule = __webpack_require__(
    /*! ../internals/object-get-own-property-names */
    "./node_modules/core-js/internals/object-get-own-property-names.js");

    var getOwnPropertyNamesExternal = __webpack_require__(
    /*! ../internals/object-get-own-property-names-external */
    "./node_modules/core-js/internals/object-get-own-property-names-external.js");

    var getOwnPropertySymbolsModule = __webpack_require__(
    /*! ../internals/object-get-own-property-symbols */
    "./node_modules/core-js/internals/object-get-own-property-symbols.js");

    var getOwnPropertyDescriptorModule = __webpack_require__(
    /*! ../internals/object-get-own-property-descriptor */
    "./node_modules/core-js/internals/object-get-own-property-descriptor.js");

    var definePropertyModule = __webpack_require__(
    /*! ../internals/object-define-property */
    "./node_modules/core-js/internals/object-define-property.js");

    var propertyIsEnumerableModule = __webpack_require__(
    /*! ../internals/object-property-is-enumerable */
    "./node_modules/core-js/internals/object-property-is-enumerable.js");

    var createNonEnumerableProperty = __webpack_require__(
    /*! ../internals/create-non-enumerable-property */
    "./node_modules/core-js/internals/create-non-enumerable-property.js");

    var redefine = __webpack_require__(
    /*! ../internals/redefine */
    "./node_modules/core-js/internals/redefine.js");

    var shared = __webpack_require__(
    /*! ../internals/shared */
    "./node_modules/core-js/internals/shared.js");

    var sharedKey = __webpack_require__(
    /*! ../internals/shared-key */
    "./node_modules/core-js/internals/shared-key.js");

    var hiddenKeys = __webpack_require__(
    /*! ../internals/hidden-keys */
    "./node_modules/core-js/internals/hidden-keys.js");

    var uid = __webpack_require__(
    /*! ../internals/uid */
    "./node_modules/core-js/internals/uid.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var wrappedWellKnownSymbolModule = __webpack_require__(
    /*! ../internals/well-known-symbol-wrapped */
    "./node_modules/core-js/internals/well-known-symbol-wrapped.js");

    var defineWellKnownSymbol = __webpack_require__(
    /*! ../internals/define-well-known-symbol */
    "./node_modules/core-js/internals/define-well-known-symbol.js");

    var setToStringTag = __webpack_require__(
    /*! ../internals/set-to-string-tag */
    "./node_modules/core-js/internals/set-to-string-tag.js");

    var InternalStateModule = __webpack_require__(
    /*! ../internals/internal-state */
    "./node_modules/core-js/internals/internal-state.js");

    var $forEach = __webpack_require__(
    /*! ../internals/array-iteration */
    "./node_modules/core-js/internals/array-iteration.js").forEach;

    var HIDDEN = sharedKey('hidden');
    var SYMBOL = 'Symbol';
    var PROTOTYPE = 'prototype';
    var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(SYMBOL);
    var ObjectPrototype = Object[PROTOTYPE];
    var $Symbol = global.Symbol;
    var $stringify = getBuiltIn('JSON', 'stringify');
    var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    var nativeDefineProperty = definePropertyModule.f;
    var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
    var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
    var AllSymbols = shared('symbols');
    var ObjectPrototypeSymbols = shared('op-symbols');
    var StringToSymbolRegistry = shared('string-to-symbol-registry');
    var SymbolToStringRegistry = shared('symbol-to-string-registry');
    var WellKnownSymbolsStore = shared('wks');
    var QObject = global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

    var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

    var setSymbolDescriptor = DESCRIPTORS && fails(function () {
      return nativeObjectCreate(nativeDefineProperty({}, 'a', {
        get: function get() {
          return nativeDefineProperty(this, 'a', {
            value: 7
          }).a;
        }
      })).a != 7;
    }) ? function (O, P, Attributes) {
      var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
      if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
      nativeDefineProperty(O, P, Attributes);

      if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
        nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
      }
    } : nativeDefineProperty;

    var wrap = function wrap(tag, description) {
      var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
      setInternalState(symbol, {
        type: SYMBOL,
        tag: tag,
        description: description
      });
      if (!DESCRIPTORS) symbol.description = description;
      return symbol;
    };

    var isSymbol = USE_SYMBOL_AS_UID ? function (it) {
      return typeof it == 'symbol';
    } : function (it) {
      return Object(it) instanceof $Symbol;
    };

    var $defineProperty = function defineProperty(O, P, Attributes) {
      if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
      anObject(O);
      var key = toPrimitive(P, true);
      anObject(Attributes);

      if (has(AllSymbols, key)) {
        if (!Attributes.enumerable) {
          if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
          O[HIDDEN][key] = true;
        } else {
          if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
          Attributes = nativeObjectCreate(Attributes, {
            enumerable: createPropertyDescriptor(0, false)
          });
        }

        return setSymbolDescriptor(O, key, Attributes);
      }

      return nativeDefineProperty(O, key, Attributes);
    };

    var $defineProperties = function defineProperties(O, Properties) {
      anObject(O);
      var properties = toIndexedObject(Properties);
      var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
      $forEach(keys, function (key) {
        if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
      });
      return O;
    };

    var $create = function create(O, Properties) {
      return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
    };

    var $propertyIsEnumerable = function propertyIsEnumerable(V) {
      var P = toPrimitive(V, true);
      var enumerable = nativePropertyIsEnumerable.call(this, P);
      if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
      return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
    };

    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
      var it = toIndexedObject(O);
      var key = toPrimitive(P, true);
      if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
      var descriptor = nativeGetOwnPropertyDescriptor(it, key);

      if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
        descriptor.enumerable = true;
      }

      return descriptor;
    };

    var $getOwnPropertyNames = function getOwnPropertyNames(O) {
      var names = nativeGetOwnPropertyNames(toIndexedObject(O));
      var result = [];
      $forEach(names, function (key) {
        if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
      });
      return result;
    };

    var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
      var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
      var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
      var result = [];
      $forEach(names, function (key) {
        if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
          result.push(AllSymbols[key]);
        }
      });
      return result;
    }; // `Symbol` constructor
    // https://tc39.github.io/ecma262/#sec-symbol-constructor


    if (!NATIVE_SYMBOL) {
      $Symbol = function Symbol() {
        if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
        var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
        var tag = uid(description);

        var setter = function setter(value) {
          if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
          if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
          setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
        };

        if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, {
          configurable: true,
          set: setter
        });
        return wrap(tag, description);
      };

      redefine($Symbol[PROTOTYPE], 'toString', function toString() {
        return getInternalState(this).tag;
      });
      redefine($Symbol, 'withoutSetter', function (description) {
        return wrap(uid(description), description);
      });
      propertyIsEnumerableModule.f = $propertyIsEnumerable;
      definePropertyModule.f = $defineProperty;
      getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
      getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
      getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

      wrappedWellKnownSymbolModule.f = function (name) {
        return wrap(wellKnownSymbol(name), name);
      };

      if (DESCRIPTORS) {
        // https://github.com/tc39/proposal-Symbol-description
        nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
          configurable: true,
          get: function description() {
            return getInternalState(this).description;
          }
        });

        if (!IS_PURE) {
          redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, {
            unsafe: true
          });
        }
      }
    }

    $({
      global: true,
      wrap: true,
      forced: !NATIVE_SYMBOL,
      sham: !NATIVE_SYMBOL
    }, {
      Symbol: $Symbol
    });
    $forEach(objectKeys(WellKnownSymbolsStore), function (name) {
      defineWellKnownSymbol(name);
    });
    $({
      target: SYMBOL,
      stat: true,
      forced: !NATIVE_SYMBOL
    }, {
      // `Symbol.for` method
      // https://tc39.github.io/ecma262/#sec-symbol.for
      'for': function _for(key) {
        var string = String(key);
        if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
        var symbol = $Symbol(string);
        StringToSymbolRegistry[string] = symbol;
        SymbolToStringRegistry[symbol] = string;
        return symbol;
      },
      // `Symbol.keyFor` method
      // https://tc39.github.io/ecma262/#sec-symbol.keyfor
      keyFor: function keyFor(sym) {
        if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
        if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
      },
      useSetter: function useSetter() {
        USE_SETTER = true;
      },
      useSimple: function useSimple() {
        USE_SETTER = false;
      }
    });
    $({
      target: 'Object',
      stat: true,
      forced: !NATIVE_SYMBOL,
      sham: !DESCRIPTORS
    }, {
      // `Object.create` method
      // https://tc39.github.io/ecma262/#sec-object.create
      create: $create,
      // `Object.defineProperty` method
      // https://tc39.github.io/ecma262/#sec-object.defineproperty
      defineProperty: $defineProperty,
      // `Object.defineProperties` method
      // https://tc39.github.io/ecma262/#sec-object.defineproperties
      defineProperties: $defineProperties,
      // `Object.getOwnPropertyDescriptor` method
      // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
      getOwnPropertyDescriptor: $getOwnPropertyDescriptor
    });
    $({
      target: 'Object',
      stat: true,
      forced: !NATIVE_SYMBOL
    }, {
      // `Object.getOwnPropertyNames` method
      // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
      getOwnPropertyNames: $getOwnPropertyNames,
      // `Object.getOwnPropertySymbols` method
      // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
      getOwnPropertySymbols: $getOwnPropertySymbols
    }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
    // https://bugs.chromium.org/p/v8/issues/detail?id=3443

    $({
      target: 'Object',
      stat: true,
      forced: fails(function () {
        getOwnPropertySymbolsModule.f(1);
      })
    }, {
      getOwnPropertySymbols: function getOwnPropertySymbols(it) {
        return getOwnPropertySymbolsModule.f(toObject(it));
      }
    }); // `JSON.stringify` method behavior with symbols
    // https://tc39.github.io/ecma262/#sec-json.stringify

    if ($stringify) {
      var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {
        var symbol = $Symbol(); // MS Edge converts symbol values to JSON as {}

        return $stringify([symbol]) != '[null]' // WebKit converts symbol values to JSON as null
        || $stringify({
          a: symbol
        }) != '{}' // V8 throws on boxed symbols
        || $stringify(Object(symbol)) != '{}';
      });
      $({
        target: 'JSON',
        stat: true,
        forced: FORCED_JSON_STRINGIFY
      }, {
        // eslint-disable-next-line no-unused-vars
        stringify: function stringify(it, replacer, space) {
          var args = [it];
          var index = 1;
          var $replacer;

          while (arguments.length > index) {
            args.push(arguments[index++]);
          }

          $replacer = replacer;
          if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

          if (!isArray(replacer)) replacer = function replacer(key, value) {
            if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
            if (!isSymbol(value)) return value;
          };
          args[1] = replacer;
          return $stringify.apply(null, args);
        }
      });
    } // `Symbol.prototype[@@toPrimitive]` method
    // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive


    if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
      createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
    } // `Symbol.prototype[@@toStringTag]` property
    // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag


    setToStringTag($Symbol, SYMBOL);
    hiddenKeys[HIDDEN] = true;
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.symbol.match-all.js":
  /*!*************************************************************!*\
    !*** ./node_modules/core-js/modules/es.symbol.match-all.js ***!
    \*************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsSymbolMatchAllJs(module, exports, __webpack_require__) {
    var defineWellKnownSymbol = __webpack_require__(
    /*! ../internals/define-well-known-symbol */
    "./node_modules/core-js/internals/define-well-known-symbol.js"); // `Symbol.matchAll` well-known symbol


    defineWellKnownSymbol('matchAll');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.symbol.match.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/modules/es.symbol.match.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsSymbolMatchJs(module, exports, __webpack_require__) {
    var defineWellKnownSymbol = __webpack_require__(
    /*! ../internals/define-well-known-symbol */
    "./node_modules/core-js/internals/define-well-known-symbol.js"); // `Symbol.match` well-known symbol
    // https://tc39.github.io/ecma262/#sec-symbol.match


    defineWellKnownSymbol('match');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.symbol.replace.js":
  /*!***********************************************************!*\
    !*** ./node_modules/core-js/modules/es.symbol.replace.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsSymbolReplaceJs(module, exports, __webpack_require__) {
    var defineWellKnownSymbol = __webpack_require__(
    /*! ../internals/define-well-known-symbol */
    "./node_modules/core-js/internals/define-well-known-symbol.js"); // `Symbol.replace` well-known symbol
    // https://tc39.github.io/ecma262/#sec-symbol.replace


    defineWellKnownSymbol('replace');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.symbol.search.js":
  /*!**********************************************************!*\
    !*** ./node_modules/core-js/modules/es.symbol.search.js ***!
    \**********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsSymbolSearchJs(module, exports, __webpack_require__) {
    var defineWellKnownSymbol = __webpack_require__(
    /*! ../internals/define-well-known-symbol */
    "./node_modules/core-js/internals/define-well-known-symbol.js"); // `Symbol.search` well-known symbol
    // https://tc39.github.io/ecma262/#sec-symbol.search


    defineWellKnownSymbol('search');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.symbol.species.js":
  /*!***********************************************************!*\
    !*** ./node_modules/core-js/modules/es.symbol.species.js ***!
    \***********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsSymbolSpeciesJs(module, exports, __webpack_require__) {
    var defineWellKnownSymbol = __webpack_require__(
    /*! ../internals/define-well-known-symbol */
    "./node_modules/core-js/internals/define-well-known-symbol.js"); // `Symbol.species` well-known symbol
    // https://tc39.github.io/ecma262/#sec-symbol.species


    defineWellKnownSymbol('species');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.symbol.split.js":
  /*!*********************************************************!*\
    !*** ./node_modules/core-js/modules/es.symbol.split.js ***!
    \*********************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsSymbolSplitJs(module, exports, __webpack_require__) {
    var defineWellKnownSymbol = __webpack_require__(
    /*! ../internals/define-well-known-symbol */
    "./node_modules/core-js/internals/define-well-known-symbol.js"); // `Symbol.split` well-known symbol
    // https://tc39.github.io/ecma262/#sec-symbol.split


    defineWellKnownSymbol('split');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.symbol.to-primitive.js":
  /*!****************************************************************!*\
    !*** ./node_modules/core-js/modules/es.symbol.to-primitive.js ***!
    \****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsSymbolToPrimitiveJs(module, exports, __webpack_require__) {
    var defineWellKnownSymbol = __webpack_require__(
    /*! ../internals/define-well-known-symbol */
    "./node_modules/core-js/internals/define-well-known-symbol.js"); // `Symbol.toPrimitive` well-known symbol
    // https://tc39.github.io/ecma262/#sec-symbol.toprimitive


    defineWellKnownSymbol('toPrimitive');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.symbol.to-string-tag.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/core-js/modules/es.symbol.to-string-tag.js ***!
    \*****************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsSymbolToStringTagJs(module, exports, __webpack_require__) {
    var defineWellKnownSymbol = __webpack_require__(
    /*! ../internals/define-well-known-symbol */
    "./node_modules/core-js/internals/define-well-known-symbol.js"); // `Symbol.toStringTag` well-known symbol
    // https://tc39.github.io/ecma262/#sec-symbol.tostringtag


    defineWellKnownSymbol('toStringTag');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.symbol.unscopables.js":
  /*!***************************************************************!*\
    !*** ./node_modules/core-js/modules/es.symbol.unscopables.js ***!
    \***************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsSymbolUnscopablesJs(module, exports, __webpack_require__) {
    var defineWellKnownSymbol = __webpack_require__(
    /*! ../internals/define-well-known-symbol */
    "./node_modules/core-js/internals/define-well-known-symbol.js"); // `Symbol.unscopables` well-known symbol
    // https://tc39.github.io/ecma262/#sec-symbol.unscopables


    defineWellKnownSymbol('unscopables');
    /***/
  },

  /***/
  "./node_modules/core-js/modules/es.weak-map.js":
  /*!*****************************************************!*\
    !*** ./node_modules/core-js/modules/es.weak-map.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesEsWeakMapJs(module, exports, __webpack_require__) {
    "use strict";

    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var redefineAll = __webpack_require__(
    /*! ../internals/redefine-all */
    "./node_modules/core-js/internals/redefine-all.js");

    var InternalMetadataModule = __webpack_require__(
    /*! ../internals/internal-metadata */
    "./node_modules/core-js/internals/internal-metadata.js");

    var collection = __webpack_require__(
    /*! ../internals/collection */
    "./node_modules/core-js/internals/collection.js");

    var collectionWeak = __webpack_require__(
    /*! ../internals/collection-weak */
    "./node_modules/core-js/internals/collection-weak.js");

    var isObject = __webpack_require__(
    /*! ../internals/is-object */
    "./node_modules/core-js/internals/is-object.js");

    var enforceIternalState = __webpack_require__(
    /*! ../internals/internal-state */
    "./node_modules/core-js/internals/internal-state.js").enforce;

    var NATIVE_WEAK_MAP = __webpack_require__(
    /*! ../internals/native-weak-map */
    "./node_modules/core-js/internals/native-weak-map.js");

    var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
    var isExtensible = Object.isExtensible;
    var InternalWeakMap;

    var wrapper = function wrapper(init) {
      return function WeakMap() {
        return init(this, arguments.length ? arguments[0] : undefined);
      };
    }; // `WeakMap` constructor
    // https://tc39.github.io/ecma262/#sec-weakmap-constructor


    var $WeakMap = module.exports = collection('WeakMap', wrapper, collectionWeak); // IE11 WeakMap frozen keys fix
    // We can't use feature detection because it crash some old IE builds
    // https://github.com/zloirock/core-js/issues/485

    if (NATIVE_WEAK_MAP && IS_IE11) {
      InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
      InternalMetadataModule.REQUIRED = true;
      var WeakMapPrototype = $WeakMap.prototype;
      var nativeDelete = WeakMapPrototype['delete'];
      var nativeHas = WeakMapPrototype.has;
      var nativeGet = WeakMapPrototype.get;
      var nativeSet = WeakMapPrototype.set;
      redefineAll(WeakMapPrototype, {
        'delete': function _delete(key) {
          if (isObject(key) && !isExtensible(key)) {
            var state = enforceIternalState(this);
            if (!state.frozen) state.frozen = new InternalWeakMap();
            return nativeDelete.call(this, key) || state.frozen['delete'](key);
          }

          return nativeDelete.call(this, key);
        },
        has: function has(key) {
          if (isObject(key) && !isExtensible(key)) {
            var state = enforceIternalState(this);
            if (!state.frozen) state.frozen = new InternalWeakMap();
            return nativeHas.call(this, key) || state.frozen.has(key);
          }

          return nativeHas.call(this, key);
        },
        get: function get(key) {
          if (isObject(key) && !isExtensible(key)) {
            var state = enforceIternalState(this);
            if (!state.frozen) state.frozen = new InternalWeakMap();
            return nativeHas.call(this, key) ? nativeGet.call(this, key) : state.frozen.get(key);
          }

          return nativeGet.call(this, key);
        },
        set: function set(key, value) {
          if (isObject(key) && !isExtensible(key)) {
            var state = enforceIternalState(this);
            if (!state.frozen) state.frozen = new InternalWeakMap();
            nativeHas.call(this, key) ? nativeSet.call(this, key, value) : state.frozen.set(key, value);
          } else nativeSet.call(this, key, value);

          return this;
        }
      });
    }
    /***/

  },

  /***/
  "./node_modules/core-js/modules/web.dom-collections.for-each.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/core-js/modules/web.dom-collections.for-each.js ***!
    \**********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesWebDomCollectionsForEachJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var DOMIterables = __webpack_require__(
    /*! ../internals/dom-iterables */
    "./node_modules/core-js/internals/dom-iterables.js");

    var forEach = __webpack_require__(
    /*! ../internals/array-for-each */
    "./node_modules/core-js/internals/array-for-each.js");

    var createNonEnumerableProperty = __webpack_require__(
    /*! ../internals/create-non-enumerable-property */
    "./node_modules/core-js/internals/create-non-enumerable-property.js");

    for (var COLLECTION_NAME in DOMIterables) {
      var Collection = global[COLLECTION_NAME];
      var CollectionPrototype = Collection && Collection.prototype; // some Chrome versions have non-configurable methods on DOMTokenList

      if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
        createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
      } catch (error) {
        CollectionPrototype.forEach = forEach;
      }
    }
    /***/

  },

  /***/
  "./node_modules/core-js/modules/web.dom-collections.iterator.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/core-js/modules/web.dom-collections.iterator.js ***!
    \**********************************************************************/

  /*! no static exports found */

  /***/
  function node_modulesCoreJsModulesWebDomCollectionsIteratorJs(module, exports, __webpack_require__) {
    var global = __webpack_require__(
    /*! ../internals/global */
    "./node_modules/core-js/internals/global.js");

    var DOMIterables = __webpack_require__(
    /*! ../internals/dom-iterables */
    "./node_modules/core-js/internals/dom-iterables.js");

    var ArrayIteratorMethods = __webpack_require__(
    /*! ../modules/es.array.iterator */
    "./node_modules/core-js/modules/es.array.iterator.js");

    var createNonEnumerableProperty = __webpack_require__(
    /*! ../internals/create-non-enumerable-property */
    "./node_modules/core-js/internals/create-non-enumerable-property.js");

    var wellKnownSymbol = __webpack_require__(
    /*! ../internals/well-known-symbol */
    "./node_modules/core-js/internals/well-known-symbol.js");

    var ITERATOR = wellKnownSymbol('iterator');
    var TO_STRING_TAG = wellKnownSymbol('toStringTag');
    var ArrayValues = ArrayIteratorMethods.values;

    for (var COLLECTION_NAME in DOMIterables) {
      var Collection = global[COLLECTION_NAME];
      var CollectionPrototype = Collection && Collection.prototype;

      if (CollectionPrototype) {
        // some Chrome versions have non-configurable methods on DOMTokenList
        if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
          createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
        } catch (error) {
          CollectionPrototype[ITERATOR] = ArrayValues;
        }

        if (!CollectionPrototype[TO_STRING_TAG]) {
          createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
        }

        if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
          // some Chrome versions have non-configurable methods on DOMTokenList
          if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
            createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
          } catch (error) {
            CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
          }
        }
      }
    }
    /***/

  },

  /***/
  "./node_modules/regenerator-runtime/runtime.js":
  /*!*****************************************************!*\
    !*** ./node_modules/regenerator-runtime/runtime.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesRegeneratorRuntimeRuntimeJs(module, exports, __webpack_require__) {
    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var runtime = function (exports) {
      "use strict";

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined; // More compressible than void 0.

      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.

        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.

      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.


      var IteratorPrototype = {};

      IteratorPrototype[iteratorSymbol] = function () {
        return this;
      };

      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          prototype[method] = function (arg) {
            return this._invoke(method, arg);
          };
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;

          if (!(toStringTagSymbol in genFun)) {
            genFun[toStringTagSymbol] = "GeneratorFunction";
          }
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      }; // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.


      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function (unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        } // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).


        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);

      AsyncIterator.prototype[asyncIteratorSymbol] = function () {
        return this;
      };

      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.

      exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            } // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted; // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.

              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      } // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.


      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

          context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined;
          }
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        } // The delegate iterator is finished, so forget it and continue with
        // the outer generator.


        context.delegate = null;
        return ContinueSentinel;
      } // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.


      defineIteratorMethods(Gp);
      Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.

      Gp[iteratorSymbol] = function () {
        return this;
      };

      Gp.toString = function () {
        return "[object Generator]";
      };

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse(); // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.

        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          } // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.


          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined;
              next.done = true;
              return next;
            };

            return next.next = next;
          }
        } // Return an iterator with no values.


        return {
          next: doneResult
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined,
          done: true
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          this.prev = 0;
          this.next = 0; // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.

          this.sent = this._sent = undefined;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined;
              }
            }
          }
        },
        stop: function stop() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          } // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.


          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined;
          }

          return ContinueSentinel;
        }
      }; // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.

      return exports;
    }( // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    true ? module.exports : undefined);

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      Function("r", "regeneratorRuntime = r")(runtime);
    }
    /***/

  },

  /***/
  "./node_modules/zone.js/dist/zone-evergreen.js":
  /*!*****************************************************!*\
    !*** ./node_modules/zone.js/dist/zone-evergreen.js ***!
    \*****************************************************/

  /*! no static exports found */

  /***/
  function node_modulesZoneJsDistZoneEvergreenJs(module, exports, __webpack_require__) {
    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;
    /**
    * @license Angular v9.1.0-next.4+61.sha-e552591.with-local-changes
    * (c) 2010-2020 Google LLC. https://angular.io/
    * License: MIT
    */


    (function (factory) {
      true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
    })(function () {
      'use strict';
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      var Zone$1 = function (global) {
        var performance = global['performance'];

        function mark(name) {
          performance && performance['mark'] && performance['mark'](name);
        }

        function performanceMeasure(name, label) {
          performance && performance['measure'] && performance['measure'](name, label);
        }

        mark('Zone'); // Initialize before it's accessed below.
        // __Zone_symbol_prefix global can be used to override the default zone
        // symbol prefix with a custom one if needed.

        var symbolPrefix = global['__Zone_symbol_prefix'] || '__zone_symbol__';

        function __symbol__(name) {
          return symbolPrefix + name;
        }

        var checkDuplicate = global[__symbol__('forceDuplicateZoneCheck')] === true;

        if (global['Zone']) {
          // if global['Zone'] already exists (maybe zone.js was already loaded or
          // some other lib also registered a global object named Zone), we may need
          // to throw an error, but sometimes user may not want this error.
          // For example,
          // we have two web pages, page1 includes zone.js, page2 doesn't.
          // and the 1st time user load page1 and page2, everything work fine,
          // but when user load page2 again, error occurs because global['Zone'] already exists.
          // so we add a flag to let user choose whether to throw this error or not.
          // By default, if existing Zone is from zone.js, we will not throw the error.
          if (checkDuplicate || typeof global['Zone'].__symbol__ !== 'function') {
            throw new Error('Zone already loaded.');
          } else {
            return global['Zone'];
          }
        }

        var Zone = /*#__PURE__*/function () {
          function Zone(parent, zoneSpec) {
            _classCallCheck(this, Zone);

            this._parent = parent;
            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';
            this._properties = zoneSpec && zoneSpec.properties || {};
            this._zoneDelegate = new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
          }

          _createClass(Zone, [{
            key: "get",
            value: function get(key) {
              var zone = this.getZoneWith(key);
              if (zone) return zone._properties[key];
            }
          }, {
            key: "getZoneWith",
            value: function getZoneWith(key) {
              var current = this;

              while (current) {
                if (current._properties.hasOwnProperty(key)) {
                  return current;
                }

                current = current._parent;
              }

              return null;
            }
          }, {
            key: "fork",
            value: function fork(zoneSpec) {
              if (!zoneSpec) throw new Error('ZoneSpec required!');
              return this._zoneDelegate.fork(this, zoneSpec);
            }
          }, {
            key: "wrap",
            value: function wrap(callback, source) {
              if (typeof callback !== 'function') {
                throw new Error('Expecting function got: ' + callback);
              }

              var _callback = this._zoneDelegate.intercept(this, callback, source);

              var zone = this;
              return function () {
                return zone.runGuarded(_callback, this, arguments, source);
              };
            }
          }, {
            key: "run",
            value: function run(callback, applyThis, applyArgs, source) {
              _currentZoneFrame = {
                parent: _currentZoneFrame,
                zone: this
              };

              try {
                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
              } finally {
                _currentZoneFrame = _currentZoneFrame.parent;
              }
            }
          }, {
            key: "runGuarded",
            value: function runGuarded(callback) {
              var applyThis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
              var applyArgs = arguments.length > 2 ? arguments[2] : undefined;
              var source = arguments.length > 3 ? arguments[3] : undefined;
              _currentZoneFrame = {
                parent: _currentZoneFrame,
                zone: this
              };

              try {
                try {
                  return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
                } catch (error) {
                  if (this._zoneDelegate.handleError(this, error)) {
                    throw error;
                  }
                }
              } finally {
                _currentZoneFrame = _currentZoneFrame.parent;
              }
            }
          }, {
            key: "runTask",
            value: function runTask(task, applyThis, applyArgs) {
              if (task.zone != this) {
                throw new Error('A task can only be run in the zone of creation! (Creation: ' + (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');
              } // https://github.com/angular/zone.js/issues/778, sometimes eventTask
              // will run in notScheduled(canceled) state, we should not try to
              // run such kind of task but just return


              if (task.state === notScheduled && (task.type === eventTask || task.type === macroTask)) {
                return;
              }

              var reEntryGuard = task.state != running;
              reEntryGuard && task._transitionTo(running, scheduled);
              task.runCount++;
              var previousTask = _currentTask;
              _currentTask = task;
              _currentZoneFrame = {
                parent: _currentZoneFrame,
                zone: this
              };

              try {
                if (task.type == macroTask && task.data && !task.data.isPeriodic) {
                  task.cancelFn = undefined;
                }

                try {
                  return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
                } catch (error) {
                  if (this._zoneDelegate.handleError(this, error)) {
                    throw error;
                  }
                }
              } finally {
                // if the task's state is notScheduled or unknown, then it has already been cancelled
                // we should not reset the state to scheduled
                if (task.state !== notScheduled && task.state !== unknown) {
                  if (task.type == eventTask || task.data && task.data.isPeriodic) {
                    reEntryGuard && task._transitionTo(scheduled, running);
                  } else {
                    task.runCount = 0;

                    this._updateTaskCount(task, -1);

                    reEntryGuard && task._transitionTo(notScheduled, running, notScheduled);
                  }
                }

                _currentZoneFrame = _currentZoneFrame.parent;
                _currentTask = previousTask;
              }
            }
          }, {
            key: "scheduleTask",
            value: function scheduleTask(task) {
              if (task.zone && task.zone !== this) {
                // check if the task was rescheduled, the newZone
                // should not be the children of the original zone
                var newZone = this;

                while (newZone) {
                  if (newZone === task.zone) {
                    throw Error("can not reschedule task to ".concat(this.name, " which is descendants of the original zone ").concat(task.zone.name));
                  }

                  newZone = newZone.parent;
                }
              }

              task._transitionTo(scheduling, notScheduled);

              var zoneDelegates = [];
              task._zoneDelegates = zoneDelegates;
              task._zone = this;

              try {
                task = this._zoneDelegate.scheduleTask(this, task);
              } catch (err) {
                // should set task's state to unknown when scheduleTask throw error
                // because the err may from reschedule, so the fromState maybe notScheduled
                task._transitionTo(unknown, scheduling, notScheduled); // TODO: @JiaLiPassion, should we check the result from handleError?


                this._zoneDelegate.handleError(this, err);

                throw err;
              }

              if (task._zoneDelegates === zoneDelegates) {
                // we have to check because internally the delegate can reschedule the task.
                this._updateTaskCount(task, 1);
              }

              if (task.state == scheduling) {
                task._transitionTo(scheduled, scheduling);
              }

              return task;
            }
          }, {
            key: "scheduleMicroTask",
            value: function scheduleMicroTask(source, callback, data, customSchedule) {
              return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, undefined));
            }
          }, {
            key: "scheduleMacroTask",
            value: function scheduleMacroTask(source, callback, data, customSchedule, customCancel) {
              return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));
            }
          }, {
            key: "scheduleEventTask",
            value: function scheduleEventTask(source, callback, data, customSchedule, customCancel) {
              return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));
            }
          }, {
            key: "cancelTask",
            value: function cancelTask(task) {
              if (task.zone != this) throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' + (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');

              task._transitionTo(canceling, scheduled, running);

              try {
                this._zoneDelegate.cancelTask(this, task);
              } catch (err) {
                // if error occurs when cancelTask, transit the state to unknown
                task._transitionTo(unknown, canceling);

                this._zoneDelegate.handleError(this, err);

                throw err;
              }

              this._updateTaskCount(task, -1);

              task._transitionTo(notScheduled, canceling);

              task.runCount = 0;
              return task;
            }
          }, {
            key: "_updateTaskCount",
            value: function _updateTaskCount(task, count) {
              var zoneDelegates = task._zoneDelegates;

              if (count == -1) {
                task._zoneDelegates = null;
              }

              for (var i = 0; i < zoneDelegates.length; i++) {
                zoneDelegates[i]._updateTaskCount(task.type, count);
              }
            }
          }, {
            key: "parent",
            get: function get() {
              return this._parent;
            }
          }, {
            key: "name",
            get: function get() {
              return this._name;
            }
          }], [{
            key: "assertZonePatched",
            value: function assertZonePatched() {
              if (global['Promise'] !== patches['ZoneAwarePromise']) {
                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' + 'has been overwritten.\n' + 'Most likely cause is that a Promise polyfill has been loaded ' + 'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' + 'If you must load one, do so before loading zone.js.)');
              }
            }
          }, {
            key: "__load_patch",
            // tslint:disable-next-line:require-internal-with-underscore
            value: function __load_patch(name, fn) {
              if (patches.hasOwnProperty(name)) {
                if (checkDuplicate) {
                  throw Error('Already loaded patch: ' + name);
                }
              } else if (!global['__Zone_disable_' + name]) {
                var perfName = 'Zone:' + name;
                mark(perfName);
                patches[name] = fn(global, Zone, _api);
                performanceMeasure(perfName, perfName);
              }
            }
          }, {
            key: "root",
            get: function get() {
              var zone = Zone.current;

              while (zone.parent) {
                zone = zone.parent;
              }

              return zone;
            }
          }, {
            key: "current",
            get: function get() {
              return _currentZoneFrame.zone;
            }
          }, {
            key: "currentTask",
            get: function get() {
              return _currentTask;
            }
          }]);

          return Zone;
        }(); // tslint:disable-next-line:require-internal-with-underscore


        Zone.__symbol__ = __symbol__;
        var DELEGATE_ZS = {
          name: '',
          onHasTask: function onHasTask(delegate, _, target, hasTaskState) {
            return delegate.hasTask(target, hasTaskState);
          },
          onScheduleTask: function onScheduleTask(delegate, _, target, task) {
            return delegate.scheduleTask(target, task);
          },
          onInvokeTask: function onInvokeTask(delegate, _, target, task, applyThis, applyArgs) {
            return delegate.invokeTask(target, task, applyThis, applyArgs);
          },
          onCancelTask: function onCancelTask(delegate, _, target, task) {
            return delegate.cancelTask(target, task);
          }
        };

        var ZoneDelegate = /*#__PURE__*/function () {
          function ZoneDelegate(zone, parentDelegate, zoneSpec) {
            _classCallCheck(this, ZoneDelegate);

            this._taskCounts = {
              'microTask': 0,
              'macroTask': 0,
              'eventTask': 0
            };
            this.zone = zone;
            this._parentDelegate = parentDelegate;
            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
            this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate._forkCurrZone);
            this._interceptZS = zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
            this._interceptDlgt = zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
            this._interceptCurrZone = zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate._interceptCurrZone);
            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
            this._invokeDlgt = zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
            this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate._invokeCurrZone);
            this._handleErrorZS = zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
            this._handleErrorDlgt = zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
            this._handleErrorCurrZone = zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate._handleErrorCurrZone);
            this._scheduleTaskZS = zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
            this._scheduleTaskDlgt = zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
            this._scheduleTaskCurrZone = zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate._scheduleTaskCurrZone);
            this._invokeTaskZS = zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
            this._invokeTaskDlgt = zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
            this._invokeTaskCurrZone = zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate._invokeTaskCurrZone);
            this._cancelTaskZS = zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
            this._cancelTaskDlgt = zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
            this._cancelTaskCurrZone = zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate._cancelTaskCurrZone);
            this._hasTaskZS = null;
            this._hasTaskDlgt = null;
            this._hasTaskDlgtOwner = null;
            this._hasTaskCurrZone = null;
            var zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;
            var parentHasTask = parentDelegate && parentDelegate._hasTaskZS;

            if (zoneSpecHasTask || parentHasTask) {
              // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such
              // a case all task related interceptors must go through this ZD. We can't short circuit it.
              this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;
              this._hasTaskDlgt = parentDelegate;
              this._hasTaskDlgtOwner = this;
              this._hasTaskCurrZone = zone;

              if (!zoneSpec.onScheduleTask) {
                this._scheduleTaskZS = DELEGATE_ZS;
                this._scheduleTaskDlgt = parentDelegate;
                this._scheduleTaskCurrZone = this.zone;
              }

              if (!zoneSpec.onInvokeTask) {
                this._invokeTaskZS = DELEGATE_ZS;
                this._invokeTaskDlgt = parentDelegate;
                this._invokeTaskCurrZone = this.zone;
              }

              if (!zoneSpec.onCancelTask) {
                this._cancelTaskZS = DELEGATE_ZS;
                this._cancelTaskDlgt = parentDelegate;
                this._cancelTaskCurrZone = this.zone;
              }
            }
          }

          _createClass(ZoneDelegate, [{
            key: "fork",
            value: function fork(targetZone, zoneSpec) {
              return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) : new Zone(targetZone, zoneSpec);
            }
          }, {
            key: "intercept",
            value: function intercept(targetZone, callback, source) {
              return this._interceptZS ? this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) : callback;
            }
          }, {
            key: "invoke",
            value: function invoke(targetZone, callback, applyThis, applyArgs, source) {
              return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) : callback.apply(applyThis, applyArgs);
            }
          }, {
            key: "handleError",
            value: function handleError(targetZone, error) {
              return this._handleErrorZS ? this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) : true;
            }
          }, {
            key: "scheduleTask",
            value: function scheduleTask(targetZone, task) {
              var returnTask = task;

              if (this._scheduleTaskZS) {
                if (this._hasTaskZS) {
                  returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);
                } // clang-format off


                returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task); // clang-format on

                if (!returnTask) returnTask = task;
              } else {
                if (task.scheduleFn) {
                  task.scheduleFn(task);
                } else if (task.type == microTask) {
                  scheduleMicroTask(task);
                } else {
                  throw new Error('Task is missing scheduleFn.');
                }
              }

              return returnTask;
            }
          }, {
            key: "invokeTask",
            value: function invokeTask(targetZone, task, applyThis, applyArgs) {
              return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) : task.callback.apply(applyThis, applyArgs);
            }
          }, {
            key: "cancelTask",
            value: function cancelTask(targetZone, task) {
              var value;

              if (this._cancelTaskZS) {
                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);
              } else {
                if (!task.cancelFn) {
                  throw Error('Task is not cancelable');
                }

                value = task.cancelFn(task);
              }

              return value;
            }
          }, {
            key: "hasTask",
            value: function hasTask(targetZone, isEmpty) {
              // hasTask should not throw error so other ZoneDelegate
              // can still trigger hasTask callback
              try {
                this._hasTaskZS && this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);
              } catch (err) {
                this.handleError(targetZone, err);
              }
            } // tslint:disable-next-line:require-internal-with-underscore

          }, {
            key: "_updateTaskCount",
            value: function _updateTaskCount(type, count) {
              var counts = this._taskCounts;
              var prev = counts[type];
              var next = counts[type] = prev + count;

              if (next < 0) {
                throw new Error('More tasks executed then were scheduled.');
              }

              if (prev == 0 || next == 0) {
                var isEmpty = {
                  microTask: counts['microTask'] > 0,
                  macroTask: counts['macroTask'] > 0,
                  eventTask: counts['eventTask'] > 0,
                  change: type
                };
                this.hasTask(this.zone, isEmpty);
              }
            }
          }]);

          return ZoneDelegate;
        }();

        var ZoneTask = /*#__PURE__*/function () {
          function ZoneTask(type, source, callback, options, scheduleFn, cancelFn) {
            _classCallCheck(this, ZoneTask);

            // tslint:disable-next-line:require-internal-with-underscore
            this._zone = null;
            this.runCount = 0; // tslint:disable-next-line:require-internal-with-underscore

            this._zoneDelegates = null; // tslint:disable-next-line:require-internal-with-underscore

            this._state = 'notScheduled';
            this.type = type;
            this.source = source;
            this.data = options;
            this.scheduleFn = scheduleFn;
            this.cancelFn = cancelFn;

            if (!callback) {
              throw new Error('callback is not defined');
            }

            this.callback = callback;
            var self = this; // TODO: @JiaLiPassion options should have interface

            if (type === eventTask && options && options.useG) {
              this.invoke = ZoneTask.invokeTask;
            } else {
              this.invoke = function () {
                return ZoneTask.invokeTask.call(global, self, this, arguments);
              };
            }
          }

          _createClass(ZoneTask, [{
            key: "cancelScheduleRequest",
            value: function cancelScheduleRequest() {
              this._transitionTo(notScheduled, scheduling);
            } // tslint:disable-next-line:require-internal-with-underscore

          }, {
            key: "_transitionTo",
            value: function _transitionTo(toState, fromState1, fromState2) {
              if (this._state === fromState1 || this._state === fromState2) {
                this._state = toState;

                if (toState == notScheduled) {
                  this._zoneDelegates = null;
                }
              } else {
                throw new Error("".concat(this.type, " '").concat(this.source, "': can not transition to '").concat(toState, "', expecting state '").concat(fromState1, "'").concat(fromState2 ? ' or \'' + fromState2 + '\'' : '', ", was '").concat(this._state, "'."));
              }
            }
          }, {
            key: "toString",
            value: function toString() {
              if (this.data && typeof this.data.handleId !== 'undefined') {
                return this.data.handleId.toString();
              } else {
                return Object.prototype.toString.call(this);
              }
            } // add toJSON method to prevent cyclic error when
            // call JSON.stringify(zoneTask)

          }, {
            key: "toJSON",
            value: function toJSON() {
              return {
                type: this.type,
                state: this.state,
                source: this.source,
                zone: this.zone.name,
                runCount: this.runCount
              };
            }
          }, {
            key: "zone",
            get: function get() {
              return this._zone;
            }
          }, {
            key: "state",
            get: function get() {
              return this._state;
            }
          }], [{
            key: "invokeTask",
            value: function invokeTask(task, target, args) {
              if (!task) {
                task = this;
              }

              _numberOfNestedTaskFrames++;

              try {
                task.runCount++;
                return task.zone.runTask(task, target, args);
              } finally {
                if (_numberOfNestedTaskFrames == 1) {
                  drainMicroTaskQueue();
                }

                _numberOfNestedTaskFrames--;
              }
            }
          }]);

          return ZoneTask;
        }(); //////////////////////////////////////////////////////
        //////////////////////////////////////////////////////
        ///  MICROTASK QUEUE
        //////////////////////////////////////////////////////
        //////////////////////////////////////////////////////


        var symbolSetTimeout = __symbol__('setTimeout');

        var symbolPromise = __symbol__('Promise');

        var symbolThen = __symbol__('then');

        var _microTaskQueue = [];
        var _isDrainingMicrotaskQueue = false;
        var nativeMicroTaskQueuePromise;

        function scheduleMicroTask(task) {
          // if we are not running in any task, and there has not been anything scheduled
          // we must bootstrap the initial task creation by manually scheduling the drain
          if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {
            // We are not running in Task, so we need to kickstart the microtask queue.
            if (!nativeMicroTaskQueuePromise) {
              if (global[symbolPromise]) {
                nativeMicroTaskQueuePromise = global[symbolPromise].resolve(0);
              }
            }

            if (nativeMicroTaskQueuePromise) {
              var nativeThen = nativeMicroTaskQueuePromise[symbolThen];

              if (!nativeThen) {
                // native Promise is not patchable, we need to use `then` directly
                // issue 1078
                nativeThen = nativeMicroTaskQueuePromise['then'];
              }

              nativeThen.call(nativeMicroTaskQueuePromise, drainMicroTaskQueue);
            } else {
              global[symbolSetTimeout](drainMicroTaskQueue, 0);
            }
          }

          task && _microTaskQueue.push(task);
        }

        function drainMicroTaskQueue() {
          if (!_isDrainingMicrotaskQueue) {
            _isDrainingMicrotaskQueue = true;

            while (_microTaskQueue.length) {
              var queue = _microTaskQueue;
              _microTaskQueue = [];

              for (var i = 0; i < queue.length; i++) {
                var task = queue[i];

                try {
                  task.zone.runTask(task, null, null);
                } catch (error) {
                  _api.onUnhandledError(error);
                }
              }
            }

            _api.microtaskDrainDone();

            _isDrainingMicrotaskQueue = false;
          }
        } //////////////////////////////////////////////////////
        //////////////////////////////////////////////////////
        ///  BOOTSTRAP
        //////////////////////////////////////////////////////
        //////////////////////////////////////////////////////


        var NO_ZONE = {
          name: 'NO ZONE'
        };
        var notScheduled = 'notScheduled',
            scheduling = 'scheduling',
            scheduled = 'scheduled',
            running = 'running',
            canceling = 'canceling',
            unknown = 'unknown';
        var microTask = 'microTask',
            macroTask = 'macroTask',
            eventTask = 'eventTask';
        var patches = {};
        var _api = {
          symbol: __symbol__,
          currentZoneFrame: function currentZoneFrame() {
            return _currentZoneFrame;
          },
          onUnhandledError: noop,
          microtaskDrainDone: noop,
          scheduleMicroTask: scheduleMicroTask,
          showUncaughtError: function showUncaughtError() {
            return !Zone[__symbol__('ignoreConsoleErrorUncaughtError')];
          },
          patchEventTarget: function patchEventTarget() {
            return [];
          },
          patchOnProperties: noop,
          patchMethod: function patchMethod() {
            return noop;
          },
          bindArguments: function bindArguments() {
            return [];
          },
          patchThen: function patchThen() {
            return noop;
          },
          patchMacroTask: function patchMacroTask() {
            return noop;
          },
          setNativePromise: function setNativePromise(NativePromise) {
            // sometimes NativePromise.resolve static function
            // is not ready yet, (such as core-js/es6.promise)
            // so we need to check here.
            if (NativePromise && typeof NativePromise.resolve === 'function') {
              nativeMicroTaskQueuePromise = NativePromise.resolve(0);
            }
          },
          patchEventPrototype: function patchEventPrototype() {
            return noop;
          },
          isIEOrEdge: function isIEOrEdge() {
            return false;
          },
          getGlobalObjects: function getGlobalObjects() {
            return undefined;
          },
          ObjectDefineProperty: function ObjectDefineProperty() {
            return noop;
          },
          ObjectGetOwnPropertyDescriptor: function ObjectGetOwnPropertyDescriptor() {
            return undefined;
          },
          ObjectCreate: function ObjectCreate() {
            return undefined;
          },
          ArraySlice: function ArraySlice() {
            return [];
          },
          patchClass: function patchClass() {
            return noop;
          },
          wrapWithCurrentZone: function wrapWithCurrentZone() {
            return noop;
          },
          filterProperties: function filterProperties() {
            return [];
          },
          attachOriginToPatched: function attachOriginToPatched() {
            return noop;
          },
          _redefineProperty: function _redefineProperty() {
            return noop;
          },
          patchCallbacks: function patchCallbacks() {
            return noop;
          }
        };
        var _currentZoneFrame = {
          parent: null,
          zone: new Zone(null, null)
        };
        var _currentTask = null;
        var _numberOfNestedTaskFrames = 0;

        function noop() {}

        performanceMeasure('Zone', 'Zone');
        return global['Zone'] = Zone;
      }(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      Zone.__load_patch('ZoneAwarePromise', function (global, Zone, api) {
        var ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        var ObjectDefineProperty = Object.defineProperty;

        function readableObjectToString(obj) {
          if (obj && obj.toString === Object.prototype.toString) {
            var className = obj.constructor && obj.constructor.name;
            return (className ? className : '') + ': ' + JSON.stringify(obj);
          }

          return obj ? obj.toString() : Object.prototype.toString.call(obj);
        }

        var __symbol__ = api.symbol;
        var _uncaughtPromiseErrors = [];
        var isDisableWrappingUncaughtPromiseRejection = global[__symbol__('DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION')] === true;

        var symbolPromise = __symbol__('Promise');

        var symbolThen = __symbol__('then');

        var creationTrace = '__creationTrace__';

        api.onUnhandledError = function (e) {
          if (api.showUncaughtError()) {
            var rejection = e && e.rejection;

            if (rejection) {
              console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);
            } else {
              console.error(e);
            }
          }
        };

        api.microtaskDrainDone = function () {
          var _loop = function _loop() {
            var uncaughtPromiseError = _uncaughtPromiseErrors.shift();

            try {
              uncaughtPromiseError.zone.runGuarded(function () {
                throw uncaughtPromiseError;
              });
            } catch (error) {
              handleUnhandledRejection(error);
            }
          };

          while (_uncaughtPromiseErrors.length) {
            _loop();
          }
        };

        var UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL = __symbol__('unhandledPromiseRejectionHandler');

        function handleUnhandledRejection(e) {
          api.onUnhandledError(e);

          try {
            var handler = Zone[UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL];

            if (typeof handler === 'function') {
              handler.call(this, e);
            }
          } catch (err) {}
        }

        function isThenable(value) {
          return value && value.then;
        }

        function forwardResolution(value) {
          return value;
        }

        function forwardRejection(rejection) {
          return ZoneAwarePromise.reject(rejection);
        }

        var symbolState = __symbol__('state');

        var symbolValue = __symbol__('value');

        var symbolFinally = __symbol__('finally');

        var symbolParentPromiseValue = __symbol__('parentPromiseValue');

        var symbolParentPromiseState = __symbol__('parentPromiseState');

        var source = 'Promise.then';
        var UNRESOLVED = null;
        var RESOLVED = true;
        var REJECTED = false;
        var REJECTED_NO_CATCH = 0;

        function makeResolver(promise, state) {
          return function (v) {
            try {
              resolvePromise(promise, state, v);
            } catch (err) {
              resolvePromise(promise, false, err);
            } // Do not return value or you will break the Promise spec.

          };
        }

        var once = function once() {
          var wasCalled = false;
          return function wrapper(wrappedFunction) {
            return function () {
              if (wasCalled) {
                return;
              }

              wasCalled = true;
              wrappedFunction.apply(null, arguments);
            };
          };
        };

        var TYPE_ERROR = 'Promise resolved with itself';

        var CURRENT_TASK_TRACE_SYMBOL = __symbol__('currentTaskTrace'); // Promise Resolution


        function resolvePromise(promise, state, value) {
          var onceWrapper = once();

          if (promise === value) {
            throw new TypeError(TYPE_ERROR);
          }

          if (promise[symbolState] === UNRESOLVED) {
            // should only get value.then once based on promise spec.
            var then = null;

            try {
              if (typeof value === 'object' || typeof value === 'function') {
                then = value && value.then;
              }
            } catch (err) {
              onceWrapper(function () {
                resolvePromise(promise, false, err);
              })();
              return promise;
            } // if (value instanceof ZoneAwarePromise) {


            if (state !== REJECTED && value instanceof ZoneAwarePromise && value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) && value[symbolState] !== UNRESOLVED) {
              clearRejectedNoCatch(value);
              resolvePromise(promise, value[symbolState], value[symbolValue]);
            } else if (state !== REJECTED && typeof then === 'function') {
              try {
                then.call(value, onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false)));
              } catch (err) {
                onceWrapper(function () {
                  resolvePromise(promise, false, err);
                })();
              }
            } else {
              promise[symbolState] = state;
              var queue = promise[symbolValue];
              promise[symbolValue] = value;

              if (promise[symbolFinally] === symbolFinally) {
                // the promise is generated by Promise.prototype.finally
                if (state === RESOLVED) {
                  // the state is resolved, should ignore the value
                  // and use parent promise value
                  promise[symbolState] = promise[symbolParentPromiseState];
                  promise[symbolValue] = promise[symbolParentPromiseValue];
                }
              } // record task information in value when error occurs, so we can
              // do some additional work such as render longStackTrace


              if (state === REJECTED && value instanceof Error) {
                // check if longStackTraceZone is here
                var trace = Zone.currentTask && Zone.currentTask.data && Zone.currentTask.data[creationTrace];

                if (trace) {
                  // only keep the long stack trace into error when in longStackTraceZone
                  ObjectDefineProperty(value, CURRENT_TASK_TRACE_SYMBOL, {
                    configurable: true,
                    enumerable: false,
                    writable: true,
                    value: trace
                  });
                }
              }

              for (var i = 0; i < queue.length;) {
                scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
              }

              if (queue.length == 0 && state == REJECTED) {
                promise[symbolState] = REJECTED_NO_CATCH;
                var uncaughtPromiseError = value;

                if (!isDisableWrappingUncaughtPromiseRejection) {
                  // If disable wrapping uncaught promise reject
                  // and the rejected value is an Error object,
                  // use the value instead of wrapping it.
                  try {
                    // Here we throws a new Error to print more readable error log
                    // and if the value is not an error, zone.js builds an `Error`
                    // Object here to attach the stack information.
                    throw new Error('Uncaught (in promise): ' + readableObjectToString(value) + (value && value.stack ? '\n' + value.stack : ''));
                  } catch (err) {
                    uncaughtPromiseError = err;
                  }
                }

                uncaughtPromiseError.rejection = value;
                uncaughtPromiseError.promise = promise;
                uncaughtPromiseError.zone = Zone.current;
                uncaughtPromiseError.task = Zone.currentTask;

                _uncaughtPromiseErrors.push(uncaughtPromiseError);

                api.scheduleMicroTask(); // to make sure that it is running
              }
            }
          } // Resolving an already resolved promise is a noop.


          return promise;
        }

        var REJECTION_HANDLED_HANDLER = __symbol__('rejectionHandledHandler');

        function clearRejectedNoCatch(promise) {
          if (promise[symbolState] === REJECTED_NO_CATCH) {
            // if the promise is rejected no catch status
            // and queue.length > 0, means there is a error handler
            // here to handle the rejected promise, we should trigger
            // windows.rejectionhandled eventHandler or nodejs rejectionHandled
            // eventHandler
            try {
              var handler = Zone[REJECTION_HANDLED_HANDLER];

              if (handler && typeof handler === 'function') {
                handler.call(this, {
                  rejection: promise[symbolValue],
                  promise: promise
                });
              }
            } catch (err) {}

            promise[symbolState] = REJECTED;

            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
              if (promise === _uncaughtPromiseErrors[i].promise) {
                _uncaughtPromiseErrors.splice(i, 1);
              }
            }
          }
        }

        function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
          clearRejectedNoCatch(promise);
          var promiseState = promise[symbolState];
          var delegate = promiseState ? typeof onFulfilled === 'function' ? onFulfilled : forwardResolution : typeof onRejected === 'function' ? onRejected : forwardRejection;
          zone.scheduleMicroTask(source, function () {
            try {
              var parentPromiseValue = promise[symbolValue];
              var isFinallyPromise = !!chainPromise && symbolFinally === chainPromise[symbolFinally];

              if (isFinallyPromise) {
                // if the promise is generated from finally call, keep parent promise's state and value
                chainPromise[symbolParentPromiseValue] = parentPromiseValue;
                chainPromise[symbolParentPromiseState] = promiseState;
              } // should not pass value to finally callback


              var value = zone.run(delegate, undefined, isFinallyPromise && delegate !== forwardRejection && delegate !== forwardResolution ? [] : [parentPromiseValue]);
              resolvePromise(chainPromise, true, value);
            } catch (error) {
              // if error occurs, should always return this error
              resolvePromise(chainPromise, false, error);
            }
          }, chainPromise);
        }

        var ZONE_AWARE_PROMISE_TO_STRING = 'function ZoneAwarePromise() { [native code] }';

        var noop = function noop() {};

        var ZoneAwarePromise = /*#__PURE__*/function () {
          _createClass(ZoneAwarePromise, null, [{
            key: "toString",
            value: function toString() {
              return ZONE_AWARE_PROMISE_TO_STRING;
            }
          }, {
            key: "resolve",
            value: function resolve(value) {
              return resolvePromise(new this(null), RESOLVED, value);
            }
          }, {
            key: "reject",
            value: function reject(error) {
              return resolvePromise(new this(null), REJECTED, error);
            }
          }, {
            key: "race",
            value: function race(values) {
              var resolve;
              var reject;
              var promise = new this(function (res, rej) {
                resolve = res;
                reject = rej;
              });

              function onResolve(value) {
                resolve(value);
              }

              function onReject(error) {
                reject(error);
              }

              var _iterator = _createForOfIteratorHelper(values),
                  _step;

              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  var value = _step.value;

                  if (!isThenable(value)) {
                    value = this.resolve(value);
                  }

                  value.then(onResolve, onReject);
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }

              return promise;
            }
          }, {
            key: "all",
            value: function all(values) {
              return ZoneAwarePromise.allWithCallback(values);
            }
          }, {
            key: "allSettled",
            value: function allSettled(values) {
              var P = this && this.prototype instanceof ZoneAwarePromise ? this : ZoneAwarePromise;
              return P.allWithCallback(values, {
                thenCallback: function thenCallback(value) {
                  return {
                    status: 'fulfilled',
                    value: value
                  };
                },
                errorCallback: function errorCallback(err) {
                  return {
                    status: 'rejected',
                    reason: err
                  };
                }
              });
            }
          }, {
            key: "allWithCallback",
            value: function allWithCallback(values, callback) {
              var _this = this;

              var resolve;
              var reject;
              var promise = new this(function (res, rej) {
                resolve = res;
                reject = rej;
              }); // Start at 2 to prevent prematurely resolving if .then is called immediately.

              var unresolvedCount = 2;
              var valueIndex = 0;
              var resolvedValues = [];

              var _iterator2 = _createForOfIteratorHelper(values),
                  _step2;

              try {
                var _loop2 = function _loop2() {
                  var value = _step2.value;

                  if (!isThenable(value)) {
                    value = _this.resolve(value);
                  }

                  var curValueIndex = valueIndex;

                  try {
                    value.then(function (value) {
                      resolvedValues[curValueIndex] = callback ? callback.thenCallback(value) : value;
                      unresolvedCount--;

                      if (unresolvedCount === 0) {
                        resolve(resolvedValues);
                      }
                    }, function (err) {
                      if (!callback) {
                        reject(err);
                      } else {
                        resolvedValues[curValueIndex] = callback.errorCallback(err);
                        unresolvedCount--;

                        if (unresolvedCount === 0) {
                          resolve(resolvedValues);
                        }
                      }
                    });
                  } catch (thenErr) {
                    reject(thenErr);
                  }

                  unresolvedCount++;
                  valueIndex++;
                };

                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  _loop2();
                } // Make the unresolvedCount zero-based again.

              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }

              unresolvedCount -= 2;

              if (unresolvedCount === 0) {
                resolve(resolvedValues);
              }

              return promise;
            }
          }]);

          function ZoneAwarePromise(executor) {
            _classCallCheck(this, ZoneAwarePromise);

            var promise = this;

            if (!(promise instanceof ZoneAwarePromise)) {
              throw new Error('Must be an instanceof Promise.');
            }

            promise[symbolState] = UNRESOLVED;
            promise[symbolValue] = []; // queue;

            try {
              executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
            } catch (error) {
              resolvePromise(promise, false, error);
            }
          }

          _createClass(ZoneAwarePromise, [{
            key: "then",
            value: function then(onFulfilled, onRejected) {
              var C = this.constructor[Symbol.species];

              if (!C || typeof C !== 'function') {
                C = this.constructor || ZoneAwarePromise;
              }

              var chainPromise = new C(noop);
              var zone = Zone.current;

              if (this[symbolState] == UNRESOLVED) {
                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
              } else {
                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
              }

              return chainPromise;
            }
          }, {
            key: "catch",
            value: function _catch(onRejected) {
              return this.then(null, onRejected);
            }
          }, {
            key: "finally",
            value: function _finally(onFinally) {
              var C = this.constructor[Symbol.species];

              if (!C || typeof C !== 'function') {
                C = ZoneAwarePromise;
              }

              var chainPromise = new C(noop);
              chainPromise[symbolFinally] = symbolFinally;
              var zone = Zone.current;

              if (this[symbolState] == UNRESOLVED) {
                this[symbolValue].push(zone, chainPromise, onFinally, onFinally);
              } else {
                scheduleResolveOrReject(this, zone, chainPromise, onFinally, onFinally);
              }

              return chainPromise;
            }
          }, {
            key: Symbol.toStringTag,
            get: function get() {
              return 'Promise';
            }
          }, {
            key: Symbol.species,
            get: function get() {
              return ZoneAwarePromise;
            }
          }]);

          return ZoneAwarePromise;
        }(); // Protect against aggressive optimizers dropping seemingly unused properties.
        // E.g. Closure Compiler in advanced mode.


        ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;
        ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;
        ZoneAwarePromise['race'] = ZoneAwarePromise.race;
        ZoneAwarePromise['all'] = ZoneAwarePromise.all;
        var NativePromise = global[symbolPromise] = global['Promise'];

        var ZONE_AWARE_PROMISE = Zone.__symbol__('ZoneAwarePromise');

        var desc = ObjectGetOwnPropertyDescriptor(global, 'Promise');

        if (!desc || desc.configurable) {
          desc && delete desc.writable;
          desc && delete desc.value;

          if (!desc) {
            desc = {
              configurable: true,
              enumerable: true
            };
          }

          desc.get = function () {
            // if we already set ZoneAwarePromise, use patched one
            // otherwise return native one.
            return global[ZONE_AWARE_PROMISE] ? global[ZONE_AWARE_PROMISE] : global[symbolPromise];
          };

          desc.set = function (NewNativePromise) {
            if (NewNativePromise === ZoneAwarePromise) {
              // if the NewNativePromise is ZoneAwarePromise
              // save to global
              global[ZONE_AWARE_PROMISE] = NewNativePromise;
            } else {
              // if the NewNativePromise is not ZoneAwarePromise
              // for example: after load zone.js, some library just
              // set es6-promise to global, if we set it to global
              // directly, assertZonePatched will fail and angular
              // will not loaded, so we just set the NewNativePromise
              // to global[symbolPromise], so the result is just like
              // we load ES6 Promise before zone.js
              global[symbolPromise] = NewNativePromise;

              if (!NewNativePromise.prototype[symbolThen]) {
                patchThen(NewNativePromise);
              }

              api.setNativePromise(NewNativePromise);
            }
          };

          ObjectDefineProperty(global, 'Promise', desc);
        }

        global['Promise'] = ZoneAwarePromise;

        var symbolThenPatched = __symbol__('thenPatched');

        function patchThen(Ctor) {
          var proto = Ctor.prototype;
          var prop = ObjectGetOwnPropertyDescriptor(proto, 'then');

          if (prop && (prop.writable === false || !prop.configurable)) {
            // check Ctor.prototype.then propertyDescriptor is writable or not
            // in meteor env, writable is false, we should ignore such case
            return;
          }

          var originalThen = proto.then; // Keep a reference to the original method.

          proto[symbolThen] = originalThen;

          Ctor.prototype.then = function (onResolve, onReject) {
            var _this2 = this;

            var wrapped = new ZoneAwarePromise(function (resolve, reject) {
              originalThen.call(_this2, resolve, reject);
            });
            return wrapped.then(onResolve, onReject);
          };

          Ctor[symbolThenPatched] = true;
        }

        api.patchThen = patchThen;

        function zoneify(fn) {
          return function () {
            var resultPromise = fn.apply(this, arguments);

            if (resultPromise instanceof ZoneAwarePromise) {
              return resultPromise;
            }

            var ctor = resultPromise.constructor;

            if (!ctor[symbolThenPatched]) {
              patchThen(ctor);
            }

            return resultPromise;
          };
        }

        if (NativePromise) {
          patchThen(NativePromise);
          var fetch = global['fetch'];

          if (typeof fetch == 'function') {
            global[api.symbol('fetch')] = fetch;
            global['fetch'] = zoneify(fetch);
          }
        } // This is not part of public API, but it is useful for tests, so we expose it.


        Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;
        return ZoneAwarePromise;
      });
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Suppress closure compiler errors about unknown 'Zone' variable
       * @fileoverview
       * @suppress {undefinedVars,globalThis,missingRequire}
       */
      /// <reference types="node"/>
      // issue #989, to reduce bundle size, use short name

      /** Object.getOwnPropertyDescriptor */


      var ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      /** Object.defineProperty */

      var ObjectDefineProperty = Object.defineProperty;
      /** Object.getPrototypeOf */

      var ObjectGetPrototypeOf = Object.getPrototypeOf;
      /** Object.create */

      var ObjectCreate = Object.create;
      /** Array.prototype.slice */

      var ArraySlice = Array.prototype.slice;
      /** addEventListener string const */

      var ADD_EVENT_LISTENER_STR = 'addEventListener';
      /** removeEventListener string const */

      var REMOVE_EVENT_LISTENER_STR = 'removeEventListener';
      /** zoneSymbol addEventListener */

      var ZONE_SYMBOL_ADD_EVENT_LISTENER = Zone.__symbol__(ADD_EVENT_LISTENER_STR);
      /** zoneSymbol removeEventListener */


      var ZONE_SYMBOL_REMOVE_EVENT_LISTENER = Zone.__symbol__(REMOVE_EVENT_LISTENER_STR);
      /** true string const */


      var TRUE_STR = 'true';
      /** false string const */

      var FALSE_STR = 'false';
      /** Zone symbol prefix string const. */

      var ZONE_SYMBOL_PREFIX = Zone.__symbol__('');

      function wrapWithCurrentZone(callback, source) {
        return Zone.current.wrap(callback, source);
      }

      function scheduleMacroTaskWithCurrentZone(source, callback, data, customSchedule, customCancel) {
        return Zone.current.scheduleMacroTask(source, callback, data, customSchedule, customCancel);
      }

      var zoneSymbol = Zone.__symbol__;
      var isWindowExists = typeof window !== 'undefined';
      var internalWindow = isWindowExists ? window : undefined;

      var _global = isWindowExists && internalWindow || typeof self === 'object' && self || global;

      var REMOVE_ATTRIBUTE = 'removeAttribute';
      var NULL_ON_PROP_VALUE = [null];

      function bindArguments(args, source) {
        for (var i = args.length - 1; i >= 0; i--) {
          if (typeof args[i] === 'function') {
            args[i] = wrapWithCurrentZone(args[i], source + '_' + i);
          }
        }

        return args;
      }

      function patchPrototype(prototype, fnNames) {
        var source = prototype.constructor['name'];

        var _loop3 = function _loop3(i) {
          var name = fnNames[i];
          var delegate = prototype[name];

          if (delegate) {
            var prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, name);

            if (!isPropertyWritable(prototypeDesc)) {
              return "continue";
            }

            prototype[name] = function (delegate) {
              var patched = function patched() {
                return delegate.apply(this, bindArguments(arguments, source + '.' + name));
              };

              attachOriginToPatched(patched, delegate);
              return patched;
            }(delegate);
          }
        };

        for (var i = 0; i < fnNames.length; i++) {
          var _ret = _loop3(i);

          if (_ret === "continue") continue;
        }
      }

      function isPropertyWritable(propertyDesc) {
        if (!propertyDesc) {
          return true;
        }

        if (propertyDesc.writable === false) {
          return false;
        }

        return !(typeof propertyDesc.get === 'function' && typeof propertyDesc.set === 'undefined');
      }

      var isWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope; // Make sure to access `process` through `_global` so that WebPack does not accidentally browserify
      // this code.

      var isNode = !('nw' in _global) && typeof _global.process !== 'undefined' && {}.toString.call(_global.process) === '[object process]';
      var isBrowser = !isNode && !isWebWorker && !!(isWindowExists && internalWindow['HTMLElement']); // we are in electron of nw, so we are both browser and nodejs
      // Make sure to access `process` through `_global` so that WebPack does not accidentally browserify
      // this code.

      var isMix = typeof _global.process !== 'undefined' && {}.toString.call(_global.process) === '[object process]' && !isWebWorker && !!(isWindowExists && internalWindow['HTMLElement']);
      var zoneSymbolEventNames = {};

      var wrapFn = function wrapFn(event) {
        // https://github.com/angular/zone.js/issues/911, in IE, sometimes
        // event will be undefined, so we need to use window.event
        event = event || _global.event;

        if (!event) {
          return;
        }

        var eventNameSymbol = zoneSymbolEventNames[event.type];

        if (!eventNameSymbol) {
          eventNameSymbol = zoneSymbolEventNames[event.type] = zoneSymbol('ON_PROPERTY' + event.type);
        }

        var target = this || event.target || _global;
        var listener = target[eventNameSymbol];
        var result;

        if (isBrowser && target === internalWindow && event.type === 'error') {
          // window.onerror have different signiture
          // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror#window.onerror
          // and onerror callback will prevent default when callback return true
          var errorEvent = event;
          result = listener && listener.call(this, errorEvent.message, errorEvent.filename, errorEvent.lineno, errorEvent.colno, errorEvent.error);

          if (result === true) {
            event.preventDefault();
          }
        } else {
          result = listener && listener.apply(this, arguments);

          if (result != undefined && !result) {
            event.preventDefault();
          }
        }

        return result;
      };

      function patchProperty(obj, prop, prototype) {
        var desc = ObjectGetOwnPropertyDescriptor(obj, prop);

        if (!desc && prototype) {
          // when patch window object, use prototype to check prop exist or not
          var prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, prop);

          if (prototypeDesc) {
            desc = {
              enumerable: true,
              configurable: true
            };
          }
        } // if the descriptor not exists or is not configurable
        // just return


        if (!desc || !desc.configurable) {
          return;
        }

        var onPropPatchedSymbol = zoneSymbol('on' + prop + 'patched');

        if (obj.hasOwnProperty(onPropPatchedSymbol) && obj[onPropPatchedSymbol]) {
          return;
        } // A property descriptor cannot have getter/setter and be writable
        // deleting the writable and value properties avoids this error:
        //
        // TypeError: property descriptors must not specify a value or be writable when a
        // getter or setter has been specified


        delete desc.writable;
        delete desc.value;
        var originalDescGet = desc.get;
        var originalDescSet = desc.set; // substr(2) cuz 'onclick' -> 'click', etc

        var eventName = prop.substr(2);
        var eventNameSymbol = zoneSymbolEventNames[eventName];

        if (!eventNameSymbol) {
          eventNameSymbol = zoneSymbolEventNames[eventName] = zoneSymbol('ON_PROPERTY' + eventName);
        }

        desc.set = function (newValue) {
          // in some of windows's onproperty callback, this is undefined
          // so we need to check it
          var target = this;

          if (!target && obj === _global) {
            target = _global;
          }

          if (!target) {
            return;
          }

          var previousValue = target[eventNameSymbol];

          if (previousValue) {
            target.removeEventListener(eventName, wrapFn);
          } // issue #978, when onload handler was added before loading zone.js
          // we should remove it with originalDescSet


          if (originalDescSet) {
            originalDescSet.apply(target, NULL_ON_PROP_VALUE);
          }

          if (typeof newValue === 'function') {
            target[eventNameSymbol] = newValue;
            target.addEventListener(eventName, wrapFn, false);
          } else {
            target[eventNameSymbol] = null;
          }
        }; // The getter would return undefined for unassigned properties but the default value of an
        // unassigned property is null


        desc.get = function () {
          // in some of windows's onproperty callback, this is undefined
          // so we need to check it
          var target = this;

          if (!target && obj === _global) {
            target = _global;
          }

          if (!target) {
            return null;
          }

          var listener = target[eventNameSymbol];

          if (listener) {
            return listener;
          } else if (originalDescGet) {
            // result will be null when use inline event attribute,
            // such as <button onclick="func();">OK</button>
            // because the onclick function is internal raw uncompiled handler
            // the onclick will be evaluated when first time event was triggered or
            // the property is accessed, https://github.com/angular/zone.js/issues/525
            // so we should use original native get to retrieve the handler
            var value = originalDescGet && originalDescGet.call(this);

            if (value) {
              desc.set.call(this, value);

              if (typeof target[REMOVE_ATTRIBUTE] === 'function') {
                target.removeAttribute(prop);
              }

              return value;
            }
          }

          return null;
        };

        ObjectDefineProperty(obj, prop, desc);
        obj[onPropPatchedSymbol] = true;
      }

      function patchOnProperties(obj, properties, prototype) {
        if (properties) {
          for (var i = 0; i < properties.length; i++) {
            patchProperty(obj, 'on' + properties[i], prototype);
          }
        } else {
          var onProperties = [];

          for (var prop in obj) {
            if (prop.substr(0, 2) == 'on') {
              onProperties.push(prop);
            }
          }

          for (var j = 0; j < onProperties.length; j++) {
            patchProperty(obj, onProperties[j], prototype);
          }
        }
      }

      var originalInstanceKey = zoneSymbol('originalInstance'); // wrap some native API on `window`

      function patchClass(className) {
        var OriginalClass = _global[className];
        if (!OriginalClass) return; // keep original class in global

        _global[zoneSymbol(className)] = OriginalClass;

        _global[className] = function () {
          var a = bindArguments(arguments, className);

          switch (a.length) {
            case 0:
              this[originalInstanceKey] = new OriginalClass();
              break;

            case 1:
              this[originalInstanceKey] = new OriginalClass(a[0]);
              break;

            case 2:
              this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
              break;

            case 3:
              this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
              break;

            case 4:
              this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
              break;

            default:
              throw new Error('Arg list too long.');
          }
        }; // attach original delegate to patched function


        attachOriginToPatched(_global[className], OriginalClass);
        var instance = new OriginalClass(function () {});
        var prop;

        for (prop in instance) {
          // https://bugs.webkit.org/show_bug.cgi?id=44721
          if (className === 'XMLHttpRequest' && prop === 'responseBlob') continue;

          (function (prop) {
            if (typeof instance[prop] === 'function') {
              _global[className].prototype[prop] = function () {
                return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
              };
            } else {
              ObjectDefineProperty(_global[className].prototype, prop, {
                set: function set(fn) {
                  if (typeof fn === 'function') {
                    this[originalInstanceKey][prop] = wrapWithCurrentZone(fn, className + '.' + prop); // keep callback in wrapped function so we can
                    // use it in Function.prototype.toString to return
                    // the native one.

                    attachOriginToPatched(this[originalInstanceKey][prop], fn);
                  } else {
                    this[originalInstanceKey][prop] = fn;
                  }
                },
                get: function get() {
                  return this[originalInstanceKey][prop];
                }
              });
            }
          })(prop);
        }

        for (prop in OriginalClass) {
          if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
            _global[className][prop] = OriginalClass[prop];
          }
        }
      }

      function copySymbolProperties(src, dest) {
        if (typeof Object.getOwnPropertySymbols !== 'function') {
          return;
        }

        var symbols = Object.getOwnPropertySymbols(src);
        symbols.forEach(function (symbol) {
          var desc = Object.getOwnPropertyDescriptor(src, symbol);
          Object.defineProperty(dest, symbol, {
            get: function get() {
              return src[symbol];
            },
            set: function set(value) {
              if (desc && (!desc.writable || typeof desc.set !== 'function')) {
                // if src[symbol] is not writable or not have a setter, just return
                return;
              }

              src[symbol] = value;
            },
            enumerable: desc ? desc.enumerable : true,
            configurable: desc ? desc.configurable : true
          });
        });
      }

      var shouldCopySymbolProperties = false;

      function patchMethod(target, name, patchFn) {
        var proto = target;

        while (proto && !proto.hasOwnProperty(name)) {
          proto = ObjectGetPrototypeOf(proto);
        }

        if (!proto && target[name]) {
          // somehow we did not find it, but we can see it. This happens on IE for Window properties.
          proto = target;
        }

        var delegateName = zoneSymbol(name);
        var delegate = null;

        if (proto && !(delegate = proto[delegateName])) {
          delegate = proto[delegateName] = proto[name]; // check whether proto[name] is writable
          // some property is readonly in safari, such as HtmlCanvasElement.prototype.toBlob

          var desc = proto && ObjectGetOwnPropertyDescriptor(proto, name);

          if (isPropertyWritable(desc)) {
            var patchDelegate = patchFn(delegate, delegateName, name);

            proto[name] = function () {
              return patchDelegate(this, arguments);
            };

            attachOriginToPatched(proto[name], delegate);

            if (shouldCopySymbolProperties) {
              copySymbolProperties(delegate, proto[name]);
            }
          }
        }

        return delegate;
      } // TODO: @JiaLiPassion, support cancel task later if necessary


      function patchMacroTask(obj, funcName, metaCreator) {
        var setNative = null;

        function scheduleTask(task) {
          var data = task.data;

          data.args[data.cbIdx] = function () {
            task.invoke.apply(this, arguments);
          };

          setNative.apply(data.target, data.args);
          return task;
        }

        setNative = patchMethod(obj, funcName, function (delegate) {
          return function (self, args) {
            var meta = metaCreator(self, args);

            if (meta.cbIdx >= 0 && typeof args[meta.cbIdx] === 'function') {
              return scheduleMacroTaskWithCurrentZone(meta.name, args[meta.cbIdx], meta, scheduleTask);
            } else {
              // cause an error by calling it directly.
              return delegate.apply(self, args);
            }
          };
        });
      }

      function attachOriginToPatched(patched, original) {
        patched[zoneSymbol('OriginalDelegate')] = original;
      }

      var isDetectedIEOrEdge = false;
      var ieOrEdge = false;

      function isIE() {
        try {
          var ua = internalWindow.navigator.userAgent;

          if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1) {
            return true;
          }
        } catch (error) {}

        return false;
      }

      function isIEOrEdge() {
        if (isDetectedIEOrEdge) {
          return ieOrEdge;
        }

        isDetectedIEOrEdge = true;

        try {
          var ua = internalWindow.navigator.userAgent;

          if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1 || ua.indexOf('Edge/') !== -1) {
            ieOrEdge = true;
          }
        } catch (error) {}

        return ieOrEdge;
      }
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // override Function.prototype.toString to make zone.js patched function
      // look like native function


      Zone.__load_patch('toString', function (global) {
        // patch Func.prototype.toString to let them look like native
        var originalFunctionToString = Function.prototype.toString;
        var ORIGINAL_DELEGATE_SYMBOL = zoneSymbol('OriginalDelegate');
        var PROMISE_SYMBOL = zoneSymbol('Promise');
        var ERROR_SYMBOL = zoneSymbol('Error');

        var newFunctionToString = function toString() {
          if (typeof this === 'function') {
            var originalDelegate = this[ORIGINAL_DELEGATE_SYMBOL];

            if (originalDelegate) {
              if (typeof originalDelegate === 'function') {
                return originalFunctionToString.call(originalDelegate);
              } else {
                return Object.prototype.toString.call(originalDelegate);
              }
            }

            if (this === Promise) {
              var nativePromise = global[PROMISE_SYMBOL];

              if (nativePromise) {
                return originalFunctionToString.call(nativePromise);
              }
            }

            if (this === Error) {
              var nativeError = global[ERROR_SYMBOL];

              if (nativeError) {
                return originalFunctionToString.call(nativeError);
              }
            }
          }

          return originalFunctionToString.call(this);
        };

        newFunctionToString[ORIGINAL_DELEGATE_SYMBOL] = originalFunctionToString;
        Function.prototype.toString = newFunctionToString; // patch Object.prototype.toString to let them look like native

        var originalObjectToString = Object.prototype.toString;
        var PROMISE_OBJECT_TO_STRING = '[object Promise]';

        Object.prototype.toString = function () {
          if (this instanceof Promise) {
            return PROMISE_OBJECT_TO_STRING;
          }

          return originalObjectToString.call(this);
        };
      });
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var passiveSupported = false;

      if (typeof window !== 'undefined') {
        try {
          var options = Object.defineProperty({}, 'passive', {
            get: function get() {
              passiveSupported = true;
            }
          });
          window.addEventListener('test', options, options);
          window.removeEventListener('test', options, options);
        } catch (err) {
          passiveSupported = false;
        }
      } // an identifier to tell ZoneTask do not create a new invoke closure


      var OPTIMIZED_ZONE_EVENT_TASK_DATA = {
        useG: true
      };
      var zoneSymbolEventNames$1 = {};
      var globalSources = {};
      var EVENT_NAME_SYMBOL_REGX = new RegExp('^' + ZONE_SYMBOL_PREFIX + '(\\w+)(true|false)$');
      var IMMEDIATE_PROPAGATION_SYMBOL = zoneSymbol('propagationStopped');

      function prepareEventNames(eventName, eventNameToString) {
        var falseEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + FALSE_STR;
        var trueEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + TRUE_STR;
        var symbol = ZONE_SYMBOL_PREFIX + falseEventName;
        var symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;
        zoneSymbolEventNames$1[eventName] = {};
        zoneSymbolEventNames$1[eventName][FALSE_STR] = symbol;
        zoneSymbolEventNames$1[eventName][TRUE_STR] = symbolCapture;
      }

      function patchEventTarget(_global, apis, patchOptions) {
        var ADD_EVENT_LISTENER = patchOptions && patchOptions.add || ADD_EVENT_LISTENER_STR;
        var REMOVE_EVENT_LISTENER = patchOptions && patchOptions.rm || REMOVE_EVENT_LISTENER_STR;
        var LISTENERS_EVENT_LISTENER = patchOptions && patchOptions.listeners || 'eventListeners';
        var REMOVE_ALL_LISTENERS_EVENT_LISTENER = patchOptions && patchOptions.rmAll || 'removeAllListeners';
        var zoneSymbolAddEventListener = zoneSymbol(ADD_EVENT_LISTENER);
        var ADD_EVENT_LISTENER_SOURCE = '.' + ADD_EVENT_LISTENER + ':';
        var PREPEND_EVENT_LISTENER = 'prependListener';
        var PREPEND_EVENT_LISTENER_SOURCE = '.' + PREPEND_EVENT_LISTENER + ':';

        var invokeTask = function invokeTask(task, target, event) {
          // for better performance, check isRemoved which is set
          // by removeEventListener
          if (task.isRemoved) {
            return;
          }

          var delegate = task.callback;

          if (typeof delegate === 'object' && delegate.handleEvent) {
            // create the bind version of handleEvent when invoke
            task.callback = function (event) {
              return delegate.handleEvent(event);
            };

            task.originalDelegate = delegate;
          } // invoke static task.invoke


          task.invoke(task, target, [event]);
          var options = task.options;

          if (options && typeof options === 'object' && options.once) {
            // if options.once is true, after invoke once remove listener here
            // only browser need to do this, nodejs eventEmitter will cal removeListener
            // inside EventEmitter.once
            var _delegate = task.originalDelegate ? task.originalDelegate : task.callback;

            target[REMOVE_EVENT_LISTENER].call(target, event.type, _delegate, options);
          }
        }; // global shared zoneAwareCallback to handle all event callback with capture = false


        var globalZoneAwareCallback = function globalZoneAwareCallback(event) {
          // https://github.com/angular/zone.js/issues/911, in IE, sometimes
          // event will be undefined, so we need to use window.event
          event = event || _global.event;

          if (!event) {
            return;
          } // event.target is needed for Samsung TV and SourceBuffer
          // || global is needed https://github.com/angular/zone.js/issues/190


          var target = this || event.target || _global;
          var tasks = target[zoneSymbolEventNames$1[event.type][FALSE_STR]];

          if (tasks) {
            // invoke all tasks which attached to current target with given event.type and capture = false
            // for performance concern, if task.length === 1, just invoke
            if (tasks.length === 1) {
              invokeTask(tasks[0], target, event);
            } else {
              // https://github.com/angular/zone.js/issues/836
              // copy the tasks array before invoke, to avoid
              // the callback will remove itself or other listener
              var copyTasks = tasks.slice();

              for (var i = 0; i < copyTasks.length; i++) {
                if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {
                  break;
                }

                invokeTask(copyTasks[i], target, event);
              }
            }
          }
        }; // global shared zoneAwareCallback to handle all event callback with capture = true


        var globalZoneAwareCaptureCallback = function globalZoneAwareCaptureCallback(event) {
          // https://github.com/angular/zone.js/issues/911, in IE, sometimes
          // event will be undefined, so we need to use window.event
          event = event || _global.event;

          if (!event) {
            return;
          } // event.target is needed for Samsung TV and SourceBuffer
          // || global is needed https://github.com/angular/zone.js/issues/190


          var target = this || event.target || _global;
          var tasks = target[zoneSymbolEventNames$1[event.type][TRUE_STR]];

          if (tasks) {
            // invoke all tasks which attached to current target with given event.type and capture = false
            // for performance concern, if task.length === 1, just invoke
            if (tasks.length === 1) {
              invokeTask(tasks[0], target, event);
            } else {
              // https://github.com/angular/zone.js/issues/836
              // copy the tasks array before invoke, to avoid
              // the callback will remove itself or other listener
              var copyTasks = tasks.slice();

              for (var i = 0; i < copyTasks.length; i++) {
                if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {
                  break;
                }

                invokeTask(copyTasks[i], target, event);
              }
            }
          }
        };

        function patchEventTargetMethods(obj, patchOptions) {
          if (!obj) {
            return false;
          }

          var useGlobalCallback = true;

          if (patchOptions && patchOptions.useG !== undefined) {
            useGlobalCallback = patchOptions.useG;
          }

          var validateHandler = patchOptions && patchOptions.vh;
          var checkDuplicate = true;

          if (patchOptions && patchOptions.chkDup !== undefined) {
            checkDuplicate = patchOptions.chkDup;
          }

          var returnTarget = false;

          if (patchOptions && patchOptions.rt !== undefined) {
            returnTarget = patchOptions.rt;
          }

          var proto = obj;

          while (proto && !proto.hasOwnProperty(ADD_EVENT_LISTENER)) {
            proto = ObjectGetPrototypeOf(proto);
          }

          if (!proto && obj[ADD_EVENT_LISTENER]) {
            // somehow we did not find it, but we can see it. This happens on IE for Window properties.
            proto = obj;
          }

          if (!proto) {
            return false;
          }

          if (proto[zoneSymbolAddEventListener]) {
            return false;
          }

          var eventNameToString = patchOptions && patchOptions.eventNameToString; // a shared global taskData to pass data for scheduleEventTask
          // so we do not need to create a new object just for pass some data

          var taskData = {};
          var nativeAddEventListener = proto[zoneSymbolAddEventListener] = proto[ADD_EVENT_LISTENER];
          var nativeRemoveEventListener = proto[zoneSymbol(REMOVE_EVENT_LISTENER)] = proto[REMOVE_EVENT_LISTENER];
          var nativeListeners = proto[zoneSymbol(LISTENERS_EVENT_LISTENER)] = proto[LISTENERS_EVENT_LISTENER];
          var nativeRemoveAllListeners = proto[zoneSymbol(REMOVE_ALL_LISTENERS_EVENT_LISTENER)] = proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER];
          var nativePrependEventListener;

          if (patchOptions && patchOptions.prepend) {
            nativePrependEventListener = proto[zoneSymbol(patchOptions.prepend)] = proto[patchOptions.prepend];
          }
          /**
           * This util function will build an option object with passive option
           * to handle all possible input from the user.
           */


          function buildEventListenerOptions(options, passive) {
            if (!passiveSupported && typeof options === 'object' && options) {
              // doesn't support passive but user want to pass an object as options.
              // this will not work on some old browser, so we just pass a boolean
              // as useCapture parameter
              return !!options.capture;
            }

            if (!passiveSupported || !passive) {
              return options;
            }

            if (typeof options === 'boolean') {
              return {
                capture: options,
                passive: true
              };
            }

            if (!options) {
              return {
                passive: true
              };
            }

            if (typeof options === 'object' && options.passive !== false) {
              return Object.assign(Object.assign({}, options), {
                passive: true
              });
            }

            return options;
          }

          var customScheduleGlobal = function customScheduleGlobal(task) {
            // if there is already a task for the eventName + capture,
            // just return, because we use the shared globalZoneAwareCallback here.
            if (taskData.isExisting) {
              return;
            }

            return nativeAddEventListener.call(taskData.target, taskData.eventName, taskData.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, taskData.options);
          };

          var customCancelGlobal = function customCancelGlobal(task) {
            // if task is not marked as isRemoved, this call is directly
            // from Zone.prototype.cancelTask, we should remove the task
            // from tasksList of target first
            if (!task.isRemoved) {
              var symbolEventNames = zoneSymbolEventNames$1[task.eventName];
              var symbolEventName;

              if (symbolEventNames) {
                symbolEventName = symbolEventNames[task.capture ? TRUE_STR : FALSE_STR];
              }

              var existingTasks = symbolEventName && task.target[symbolEventName];

              if (existingTasks) {
                for (var i = 0; i < existingTasks.length; i++) {
                  var existingTask = existingTasks[i];

                  if (existingTask === task) {
                    existingTasks.splice(i, 1); // set isRemoved to data for faster invokeTask check

                    task.isRemoved = true;

                    if (existingTasks.length === 0) {
                      // all tasks for the eventName + capture have gone,
                      // remove globalZoneAwareCallback and remove the task cache from target
                      task.allRemoved = true;
                      task.target[symbolEventName] = null;
                    }

                    break;
                  }
                }
              }
            } // if all tasks for the eventName + capture have gone,
            // we will really remove the global event callback,
            // if not, return


            if (!task.allRemoved) {
              return;
            }

            return nativeRemoveEventListener.call(task.target, task.eventName, task.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, task.options);
          };

          var customScheduleNonGlobal = function customScheduleNonGlobal(task) {
            return nativeAddEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);
          };

          var customSchedulePrepend = function customSchedulePrepend(task) {
            return nativePrependEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);
          };

          var customCancelNonGlobal = function customCancelNonGlobal(task) {
            return nativeRemoveEventListener.call(task.target, task.eventName, task.invoke, task.options);
          };

          var customSchedule = useGlobalCallback ? customScheduleGlobal : customScheduleNonGlobal;
          var customCancel = useGlobalCallback ? customCancelGlobal : customCancelNonGlobal;

          var compareTaskCallbackVsDelegate = function compareTaskCallbackVsDelegate(task, delegate) {
            var typeOfDelegate = typeof delegate;
            return typeOfDelegate === 'function' && task.callback === delegate || typeOfDelegate === 'object' && task.originalDelegate === delegate;
          };

          var compare = patchOptions && patchOptions.diff ? patchOptions.diff : compareTaskCallbackVsDelegate;
          var blackListedEvents = Zone[zoneSymbol('BLACK_LISTED_EVENTS')];

          var passiveEvents = _global[zoneSymbol('PASSIVE_EVENTS')];

          var makeAddListener = function makeAddListener(nativeListener, addSource, customScheduleFn, customCancelFn) {
            var returnTarget = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
            var prepend = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
            return function () {
              var target = this || _global;
              var eventName = arguments[0];

              if (patchOptions && patchOptions.transferEventName) {
                eventName = patchOptions.transferEventName(eventName);
              }

              var delegate = arguments[1];

              if (!delegate) {
                return nativeListener.apply(this, arguments);
              }

              if (isNode && eventName === 'uncaughtException') {
                // don't patch uncaughtException of nodejs to prevent endless loop
                return nativeListener.apply(this, arguments);
              } // don't create the bind delegate function for handleEvent
              // case here to improve addEventListener performance
              // we will create the bind delegate when invoke


              var isHandleEvent = false;

              if (typeof delegate !== 'function') {
                if (!delegate.handleEvent) {
                  return nativeListener.apply(this, arguments);
                }

                isHandleEvent = true;
              }

              if (validateHandler && !validateHandler(nativeListener, delegate, target, arguments)) {
                return;
              }

              var passive = passiveSupported && !!passiveEvents && passiveEvents.indexOf(eventName) !== -1;
              var options = buildEventListenerOptions(arguments[2], passive);

              if (blackListedEvents) {
                // check black list
                for (var i = 0; i < blackListedEvents.length; i++) {
                  if (eventName === blackListedEvents[i]) {
                    if (passive) {
                      return nativeListener.call(target, eventName, delegate, options);
                    } else {
                      return nativeListener.apply(this, arguments);
                    }
                  }
                }
              }

              var capture = !options ? false : typeof options === 'boolean' ? true : options.capture;
              var once = options && typeof options === 'object' ? options.once : false;
              var zone = Zone.current;
              var symbolEventNames = zoneSymbolEventNames$1[eventName];

              if (!symbolEventNames) {
                prepareEventNames(eventName, eventNameToString);
                symbolEventNames = zoneSymbolEventNames$1[eventName];
              }

              var symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];
              var existingTasks = target[symbolEventName];
              var isExisting = false;

              if (existingTasks) {
                // already have task registered
                isExisting = true;

                if (checkDuplicate) {
                  for (var _i = 0; _i < existingTasks.length; _i++) {
                    if (compare(existingTasks[_i], delegate)) {
                      // same callback, same capture, same event name, just return
                      return;
                    }
                  }
                }
              } else {
                existingTasks = target[symbolEventName] = [];
              }

              var source;
              var constructorName = target.constructor['name'];
              var targetSource = globalSources[constructorName];

              if (targetSource) {
                source = targetSource[eventName];
              }

              if (!source) {
                source = constructorName + addSource + (eventNameToString ? eventNameToString(eventName) : eventName);
              } // do not create a new object as task.data to pass those things
              // just use the global shared one


              taskData.options = options;

              if (once) {
                // if addEventListener with once options, we don't pass it to
                // native addEventListener, instead we keep the once setting
                // and handle ourselves.
                taskData.options.once = false;
              }

              taskData.target = target;
              taskData.capture = capture;
              taskData.eventName = eventName;
              taskData.isExisting = isExisting;
              var data = useGlobalCallback ? OPTIMIZED_ZONE_EVENT_TASK_DATA : undefined; // keep taskData into data to allow onScheduleEventTask to access the task information

              if (data) {
                data.taskData = taskData;
              }

              var task = zone.scheduleEventTask(source, delegate, data, customScheduleFn, customCancelFn); // should clear taskData.target to avoid memory leak
              // issue, https://github.com/angular/angular/issues/20442

              taskData.target = null; // need to clear up taskData because it is a global object

              if (data) {
                data.taskData = null;
              } // have to save those information to task in case
              // application may call task.zone.cancelTask() directly


              if (once) {
                options.once = true;
              }

              if (!(!passiveSupported && typeof task.options === 'boolean')) {
                // if not support passive, and we pass an option object
                // to addEventListener, we should save the options to task
                task.options = options;
              }

              task.target = target;
              task.capture = capture;
              task.eventName = eventName;

              if (isHandleEvent) {
                // save original delegate for compare to check duplicate
                task.originalDelegate = delegate;
              }

              if (!prepend) {
                existingTasks.push(task);
              } else {
                existingTasks.unshift(task);
              }

              if (returnTarget) {
                return target;
              }
            };
          };

          proto[ADD_EVENT_LISTENER] = makeAddListener(nativeAddEventListener, ADD_EVENT_LISTENER_SOURCE, customSchedule, customCancel, returnTarget);

          if (nativePrependEventListener) {
            proto[PREPEND_EVENT_LISTENER] = makeAddListener(nativePrependEventListener, PREPEND_EVENT_LISTENER_SOURCE, customSchedulePrepend, customCancel, returnTarget, true);
          }

          proto[REMOVE_EVENT_LISTENER] = function () {
            var target = this || _global;
            var eventName = arguments[0];

            if (patchOptions && patchOptions.transferEventName) {
              eventName = patchOptions.transferEventName(eventName);
            }

            var options = arguments[2];
            var capture = !options ? false : typeof options === 'boolean' ? true : options.capture;
            var delegate = arguments[1];

            if (!delegate) {
              return nativeRemoveEventListener.apply(this, arguments);
            }

            if (validateHandler && !validateHandler(nativeRemoveEventListener, delegate, target, arguments)) {
              return;
            }

            var symbolEventNames = zoneSymbolEventNames$1[eventName];
            var symbolEventName;

            if (symbolEventNames) {
              symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];
            }

            var existingTasks = symbolEventName && target[symbolEventName];

            if (existingTasks) {
              for (var i = 0; i < existingTasks.length; i++) {
                var existingTask = existingTasks[i];

                if (compare(existingTask, delegate)) {
                  existingTasks.splice(i, 1); // set isRemoved to data for faster invokeTask check

                  existingTask.isRemoved = true;

                  if (existingTasks.length === 0) {
                    // all tasks for the eventName + capture have gone,
                    // remove globalZoneAwareCallback and remove the task cache from target
                    existingTask.allRemoved = true;
                    target[symbolEventName] = null; // in the target, we have an event listener which is added by on_property
                    // such as target.onclick = function() {}, so we need to clear this internal
                    // property too if all delegates all removed

                    if (typeof eventName === 'string') {
                      var onPropertySymbol = ZONE_SYMBOL_PREFIX + 'ON_PROPERTY' + eventName;
                      target[onPropertySymbol] = null;
                    }
                  }

                  existingTask.zone.cancelTask(existingTask);

                  if (returnTarget) {
                    return target;
                  }

                  return;
                }
              }
            } // issue 930, didn't find the event name or callback
            // from zone kept existingTasks, the callback maybe
            // added outside of zone, we need to call native removeEventListener
            // to try to remove it.


            return nativeRemoveEventListener.apply(this, arguments);
          };

          proto[LISTENERS_EVENT_LISTENER] = function () {
            var target = this || _global;
            var eventName = arguments[0];

            if (patchOptions && patchOptions.transferEventName) {
              eventName = patchOptions.transferEventName(eventName);
            }

            var listeners = [];
            var tasks = findEventTasks(target, eventNameToString ? eventNameToString(eventName) : eventName);

            for (var i = 0; i < tasks.length; i++) {
              var task = tasks[i];
              var delegate = task.originalDelegate ? task.originalDelegate : task.callback;
              listeners.push(delegate);
            }

            return listeners;
          };

          proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER] = function () {
            var target = this || _global;
            var eventName = arguments[0];

            if (!eventName) {
              var keys = Object.keys(target);

              for (var i = 0; i < keys.length; i++) {
                var prop = keys[i];
                var match = EVENT_NAME_SYMBOL_REGX.exec(prop);
                var evtName = match && match[1]; // in nodejs EventEmitter, removeListener event is
                // used for monitoring the removeListener call,
                // so just keep removeListener eventListener until
                // all other eventListeners are removed

                if (evtName && evtName !== 'removeListener') {
                  this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, evtName);
                }
              } // remove removeListener listener finally


              this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, 'removeListener');
            } else {
              if (patchOptions && patchOptions.transferEventName) {
                eventName = patchOptions.transferEventName(eventName);
              }

              var symbolEventNames = zoneSymbolEventNames$1[eventName];

              if (symbolEventNames) {
                var symbolEventName = symbolEventNames[FALSE_STR];
                var symbolCaptureEventName = symbolEventNames[TRUE_STR];
                var tasks = target[symbolEventName];
                var captureTasks = target[symbolCaptureEventName];

                if (tasks) {
                  var removeTasks = tasks.slice();

                  for (var _i2 = 0; _i2 < removeTasks.length; _i2++) {
                    var task = removeTasks[_i2];
                    var delegate = task.originalDelegate ? task.originalDelegate : task.callback;
                    this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);
                  }
                }

                if (captureTasks) {
                  var _removeTasks = captureTasks.slice();

                  for (var _i3 = 0; _i3 < _removeTasks.length; _i3++) {
                    var _task = _removeTasks[_i3];

                    var _delegate2 = _task.originalDelegate ? _task.originalDelegate : _task.callback;

                    this[REMOVE_EVENT_LISTENER].call(this, eventName, _delegate2, _task.options);
                  }
                }
              }
            }

            if (returnTarget) {
              return this;
            }
          }; // for native toString patch


          attachOriginToPatched(proto[ADD_EVENT_LISTENER], nativeAddEventListener);
          attachOriginToPatched(proto[REMOVE_EVENT_LISTENER], nativeRemoveEventListener);

          if (nativeRemoveAllListeners) {
            attachOriginToPatched(proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER], nativeRemoveAllListeners);
          }

          if (nativeListeners) {
            attachOriginToPatched(proto[LISTENERS_EVENT_LISTENER], nativeListeners);
          }

          return true;
        }

        var results = [];

        for (var i = 0; i < apis.length; i++) {
          results[i] = patchEventTargetMethods(apis[i], patchOptions);
        }

        return results;
      }

      function findEventTasks(target, eventName) {
        if (!eventName) {
          var foundTasks = [];

          for (var prop in target) {
            var match = EVENT_NAME_SYMBOL_REGX.exec(prop);
            var evtName = match && match[1];

            if (evtName && (!eventName || evtName === eventName)) {
              var tasks = target[prop];

              if (tasks) {
                for (var i = 0; i < tasks.length; i++) {
                  foundTasks.push(tasks[i]);
                }
              }
            }
          }

          return foundTasks;
        }

        var symbolEventName = zoneSymbolEventNames$1[eventName];

        if (!symbolEventName) {
          prepareEventNames(eventName);
          symbolEventName = zoneSymbolEventNames$1[eventName];
        }

        var captureFalseTasks = target[symbolEventName[FALSE_STR]];
        var captureTrueTasks = target[symbolEventName[TRUE_STR]];

        if (!captureFalseTasks) {
          return captureTrueTasks ? captureTrueTasks.slice() : [];
        } else {
          return captureTrueTasks ? captureFalseTasks.concat(captureTrueTasks) : captureFalseTasks.slice();
        }
      }

      function patchEventPrototype(global, api) {
        var Event = global['Event'];

        if (Event && Event.prototype) {
          api.patchMethod(Event.prototype, 'stopImmediatePropagation', function (delegate) {
            return function (self, args) {
              self[IMMEDIATE_PROPAGATION_SYMBOL] = true; // we need to call the native stopImmediatePropagation
              // in case in some hybrid application, some part of
              // application will be controlled by zone, some are not

              delegate && delegate.apply(self, args);
            };
          });
        }
      }
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function patchCallbacks(api, target, targetName, method, callbacks) {
        var symbol = Zone.__symbol__(method);

        if (target[symbol]) {
          return;
        }

        var nativeDelegate = target[symbol] = target[method];

        target[method] = function (name, opts, options) {
          if (opts && opts.prototype) {
            callbacks.forEach(function (callback) {
              var source = "".concat(targetName, ".").concat(method, "::") + callback;
              var prototype = opts.prototype;

              if (prototype.hasOwnProperty(callback)) {
                var descriptor = api.ObjectGetOwnPropertyDescriptor(prototype, callback);

                if (descriptor && descriptor.value) {
                  descriptor.value = api.wrapWithCurrentZone(descriptor.value, source);

                  api._redefineProperty(opts.prototype, callback, descriptor);
                } else if (prototype[callback]) {
                  prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);
                }
              } else if (prototype[callback]) {
                prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);
              }
            });
          }

          return nativeDelegate.call(target, name, opts, options);
        };

        api.attachOriginToPatched(target[method], nativeDelegate);
      }
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var globalEventHandlersEventNames = ['abort', 'animationcancel', 'animationend', 'animationiteration', 'auxclick', 'beforeinput', 'blur', 'cancel', 'canplay', 'canplaythrough', 'change', 'compositionstart', 'compositionupdate', 'compositionend', 'cuechange', 'click', 'close', 'contextmenu', 'curechange', 'dblclick', 'drag', 'dragend', 'dragenter', 'dragexit', 'dragleave', 'dragover', 'drop', 'durationchange', 'emptied', 'ended', 'error', 'focus', 'focusin', 'focusout', 'gotpointercapture', 'input', 'invalid', 'keydown', 'keypress', 'keyup', 'load', 'loadstart', 'loadeddata', 'loadedmetadata', 'lostpointercapture', 'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'mousewheel', 'orientationchange', 'pause', 'play', 'playing', 'pointercancel', 'pointerdown', 'pointerenter', 'pointerleave', 'pointerlockchange', 'mozpointerlockchange', 'webkitpointerlockerchange', 'pointerlockerror', 'mozpointerlockerror', 'webkitpointerlockerror', 'pointermove', 'pointout', 'pointerover', 'pointerup', 'progress', 'ratechange', 'reset', 'resize', 'scroll', 'seeked', 'seeking', 'select', 'selectionchange', 'selectstart', 'show', 'sort', 'stalled', 'submit', 'suspend', 'timeupdate', 'volumechange', 'touchcancel', 'touchmove', 'touchstart', 'touchend', 'transitioncancel', 'transitionend', 'waiting', 'wheel'];
      var documentEventNames = ['afterscriptexecute', 'beforescriptexecute', 'DOMContentLoaded', 'freeze', 'fullscreenchange', 'mozfullscreenchange', 'webkitfullscreenchange', 'msfullscreenchange', 'fullscreenerror', 'mozfullscreenerror', 'webkitfullscreenerror', 'msfullscreenerror', 'readystatechange', 'visibilitychange', 'resume'];
      var windowEventNames = ['absolutedeviceorientation', 'afterinput', 'afterprint', 'appinstalled', 'beforeinstallprompt', 'beforeprint', 'beforeunload', 'devicelight', 'devicemotion', 'deviceorientation', 'deviceorientationabsolute', 'deviceproximity', 'hashchange', 'languagechange', 'message', 'mozbeforepaint', 'offline', 'online', 'paint', 'pageshow', 'pagehide', 'popstate', 'rejectionhandled', 'storage', 'unhandledrejection', 'unload', 'userproximity', 'vrdisplayconnected', 'vrdisplaydisconnected', 'vrdisplaypresentchange'];
      var htmlElementEventNames = ['beforecopy', 'beforecut', 'beforepaste', 'copy', 'cut', 'paste', 'dragstart', 'loadend', 'animationstart', 'search', 'transitionrun', 'transitionstart', 'webkitanimationend', 'webkitanimationiteration', 'webkitanimationstart', 'webkittransitionend'];
      var mediaElementEventNames = ['encrypted', 'waitingforkey', 'msneedkey', 'mozinterruptbegin', 'mozinterruptend'];
      var ieElementEventNames = ['activate', 'afterupdate', 'ariarequest', 'beforeactivate', 'beforedeactivate', 'beforeeditfocus', 'beforeupdate', 'cellchange', 'controlselect', 'dataavailable', 'datasetchanged', 'datasetcomplete', 'errorupdate', 'filterchange', 'layoutcomplete', 'losecapture', 'move', 'moveend', 'movestart', 'propertychange', 'resizeend', 'resizestart', 'rowenter', 'rowexit', 'rowsdelete', 'rowsinserted', 'command', 'compassneedscalibration', 'deactivate', 'help', 'mscontentzoom', 'msmanipulationstatechanged', 'msgesturechange', 'msgesturedoubletap', 'msgestureend', 'msgesturehold', 'msgesturestart', 'msgesturetap', 'msgotpointercapture', 'msinertiastart', 'mslostpointercapture', 'mspointercancel', 'mspointerdown', 'mspointerenter', 'mspointerhover', 'mspointerleave', 'mspointermove', 'mspointerout', 'mspointerover', 'mspointerup', 'pointerout', 'mssitemodejumplistitemremoved', 'msthumbnailclick', 'stop', 'storagecommit'];
      var webglEventNames = ['webglcontextrestored', 'webglcontextlost', 'webglcontextcreationerror'];
      var formEventNames = ['autocomplete', 'autocompleteerror'];
      var detailEventNames = ['toggle'];
      var frameEventNames = ['load'];
      var frameSetEventNames = ['blur', 'error', 'focus', 'load', 'resize', 'scroll', 'messageerror'];
      var marqueeEventNames = ['bounce', 'finish', 'start'];
      var XMLHttpRequestEventNames = ['loadstart', 'progress', 'abort', 'error', 'load', 'progress', 'timeout', 'loadend', 'readystatechange'];
      var IDBIndexEventNames = ['upgradeneeded', 'complete', 'abort', 'success', 'error', 'blocked', 'versionchange', 'close'];
      var websocketEventNames = ['close', 'error', 'open', 'message'];
      var workerEventNames = ['error', 'message'];
      var eventNames = globalEventHandlersEventNames.concat(webglEventNames, formEventNames, detailEventNames, documentEventNames, windowEventNames, htmlElementEventNames, ieElementEventNames);

      function filterProperties(target, onProperties, ignoreProperties) {
        if (!ignoreProperties || ignoreProperties.length === 0) {
          return onProperties;
        }

        var tip = ignoreProperties.filter(function (ip) {
          return ip.target === target;
        });

        if (!tip || tip.length === 0) {
          return onProperties;
        }

        var targetIgnoreProperties = tip[0].ignoreProperties;
        return onProperties.filter(function (op) {
          return targetIgnoreProperties.indexOf(op) === -1;
        });
      }

      function patchFilteredProperties(target, onProperties, ignoreProperties, prototype) {
        // check whether target is available, sometimes target will be undefined
        // because different browser or some 3rd party plugin.
        if (!target) {
          return;
        }

        var filteredProperties = filterProperties(target, onProperties, ignoreProperties);
        patchOnProperties(target, filteredProperties, prototype);
      }

      function propertyDescriptorPatch(api, _global) {
        if (isNode && !isMix) {
          return;
        }

        if (Zone[api.symbol('patchEvents')]) {
          // events are already been patched by legacy patch.
          return;
        }

        var supportsWebSocket = typeof WebSocket !== 'undefined';
        var ignoreProperties = _global['__Zone_ignore_on_properties']; // for browsers that we can patch the descriptor:  Chrome & Firefox

        if (isBrowser) {
          var _internalWindow = window;
          var ignoreErrorProperties = isIE ? [{
            target: _internalWindow,
            ignoreProperties: ['error']
          }] : []; // in IE/Edge, onProp not exist in window object, but in WindowPrototype
          // so we need to pass WindowPrototype to check onProp exist or not

          patchFilteredProperties(_internalWindow, eventNames.concat(['messageerror']), ignoreProperties ? ignoreProperties.concat(ignoreErrorProperties) : ignoreProperties, ObjectGetPrototypeOf(_internalWindow));
          patchFilteredProperties(Document.prototype, eventNames, ignoreProperties);

          if (typeof _internalWindow['SVGElement'] !== 'undefined') {
            patchFilteredProperties(_internalWindow['SVGElement'].prototype, eventNames, ignoreProperties);
          }

          patchFilteredProperties(Element.prototype, eventNames, ignoreProperties);
          patchFilteredProperties(HTMLElement.prototype, eventNames, ignoreProperties);
          patchFilteredProperties(HTMLMediaElement.prototype, mediaElementEventNames, ignoreProperties);
          patchFilteredProperties(HTMLFrameSetElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);
          patchFilteredProperties(HTMLBodyElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);
          patchFilteredProperties(HTMLFrameElement.prototype, frameEventNames, ignoreProperties);
          patchFilteredProperties(HTMLIFrameElement.prototype, frameEventNames, ignoreProperties);
          var HTMLMarqueeElement = _internalWindow['HTMLMarqueeElement'];

          if (HTMLMarqueeElement) {
            patchFilteredProperties(HTMLMarqueeElement.prototype, marqueeEventNames, ignoreProperties);
          }

          var Worker = _internalWindow['Worker'];

          if (Worker) {
            patchFilteredProperties(Worker.prototype, workerEventNames, ignoreProperties);
          }
        }

        var XMLHttpRequest = _global['XMLHttpRequest'];

        if (XMLHttpRequest) {
          // XMLHttpRequest is not available in ServiceWorker, so we need to check here
          patchFilteredProperties(XMLHttpRequest.prototype, XMLHttpRequestEventNames, ignoreProperties);
        }

        var XMLHttpRequestEventTarget = _global['XMLHttpRequestEventTarget'];

        if (XMLHttpRequestEventTarget) {
          patchFilteredProperties(XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype, XMLHttpRequestEventNames, ignoreProperties);
        }

        if (typeof IDBIndex !== 'undefined') {
          patchFilteredProperties(IDBIndex.prototype, IDBIndexEventNames, ignoreProperties);
          patchFilteredProperties(IDBRequest.prototype, IDBIndexEventNames, ignoreProperties);
          patchFilteredProperties(IDBOpenDBRequest.prototype, IDBIndexEventNames, ignoreProperties);
          patchFilteredProperties(IDBDatabase.prototype, IDBIndexEventNames, ignoreProperties);
          patchFilteredProperties(IDBTransaction.prototype, IDBIndexEventNames, ignoreProperties);
          patchFilteredProperties(IDBCursor.prototype, IDBIndexEventNames, ignoreProperties);
        }

        if (supportsWebSocket) {
          patchFilteredProperties(WebSocket.prototype, websocketEventNames, ignoreProperties);
        }
      }
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      Zone.__load_patch('util', function (global, Zone, api) {
        api.patchOnProperties = patchOnProperties;
        api.patchMethod = patchMethod;
        api.bindArguments = bindArguments;
        api.patchMacroTask = patchMacroTask; // In earlier version of zone.js (<0.9.0), we use env name `__zone_symbol__BLACK_LISTED_EVENTS` to
        // define which events will not be patched by `Zone.js`.
        // In newer version (>=0.9.0), we change the env name to `__zone_symbol__UNPATCHED_EVENTS` to keep
        // the name consistent with angular repo.
        // The  `__zone_symbol__BLACK_LISTED_EVENTS` is deprecated, but it is still be supported for
        // backwards compatibility.

        var SYMBOL_BLACK_LISTED_EVENTS = Zone.__symbol__('BLACK_LISTED_EVENTS');

        var SYMBOL_UNPATCHED_EVENTS = Zone.__symbol__('UNPATCHED_EVENTS');

        if (global[SYMBOL_UNPATCHED_EVENTS]) {
          global[SYMBOL_BLACK_LISTED_EVENTS] = global[SYMBOL_UNPATCHED_EVENTS];
        }

        if (global[SYMBOL_BLACK_LISTED_EVENTS]) {
          Zone[SYMBOL_BLACK_LISTED_EVENTS] = Zone[SYMBOL_UNPATCHED_EVENTS] = global[SYMBOL_BLACK_LISTED_EVENTS];
        }

        api.patchEventPrototype = patchEventPrototype;
        api.patchEventTarget = patchEventTarget;
        api.isIEOrEdge = isIEOrEdge;
        api.ObjectDefineProperty = ObjectDefineProperty;
        api.ObjectGetOwnPropertyDescriptor = ObjectGetOwnPropertyDescriptor;
        api.ObjectCreate = ObjectCreate;
        api.ArraySlice = ArraySlice;
        api.patchClass = patchClass;
        api.wrapWithCurrentZone = wrapWithCurrentZone;
        api.filterProperties = filterProperties;
        api.attachOriginToPatched = attachOriginToPatched;
        api._redefineProperty = Object.defineProperty;
        api.patchCallbacks = patchCallbacks;

        api.getGlobalObjects = function () {
          return {
            globalSources: globalSources,
            zoneSymbolEventNames: zoneSymbolEventNames$1,
            eventNames: eventNames,
            isBrowser: isBrowser,
            isMix: isMix,
            isNode: isNode,
            TRUE_STR: TRUE_STR,
            FALSE_STR: FALSE_STR,
            ZONE_SYMBOL_PREFIX: ZONE_SYMBOL_PREFIX,
            ADD_EVENT_LISTENER_STR: ADD_EVENT_LISTENER_STR,
            REMOVE_EVENT_LISTENER_STR: REMOVE_EVENT_LISTENER_STR
          };
        };
      });
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var taskSymbol = zoneSymbol('zoneTask');

      function patchTimer(window, setName, cancelName, nameSuffix) {
        var setNative = null;
        var clearNative = null;
        setName += nameSuffix;
        cancelName += nameSuffix;
        var tasksByHandleId = {};

        function scheduleTask(task) {
          var data = task.data;

          function timer() {
            try {
              task.invoke.apply(this, arguments);
            } finally {
              // issue-934, task will be cancelled
              // even it is a periodic task such as
              // setInterval
              if (!(task.data && task.data.isPeriodic)) {
                if (typeof data.handleId === 'number') {
                  // in non-nodejs env, we remove timerId
                  // from local cache
                  delete tasksByHandleId[data.handleId];
                } else if (data.handleId) {
                  // Node returns complex objects as handleIds
                  // we remove task reference from timer object
                  data.handleId[taskSymbol] = null;
                }
              }
            }
          }

          data.args[0] = timer;
          data.handleId = setNative.apply(window, data.args);
          return task;
        }

        function clearTask(task) {
          return clearNative(task.data.handleId);
        }

        setNative = patchMethod(window, setName, function (delegate) {
          return function (self, args) {
            if (typeof args[0] === 'function') {
              var _options = {
                isPeriodic: nameSuffix === 'Interval',
                delay: nameSuffix === 'Timeout' || nameSuffix === 'Interval' ? args[1] || 0 : undefined,
                args: args
              };
              var task = scheduleMacroTaskWithCurrentZone(setName, args[0], _options, scheduleTask, clearTask);

              if (!task) {
                return task;
              } // Node.js must additionally support the ref and unref functions.


              var handle = task.data.handleId;

              if (typeof handle === 'number') {
                // for non nodejs env, we save handleId: task
                // mapping in local cache for clearTimeout
                tasksByHandleId[handle] = task;
              } else if (handle) {
                // for nodejs env, we save task
                // reference in timerId Object for clearTimeout
                handle[taskSymbol] = task;
              } // check whether handle is null, because some polyfill or browser
              // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame


              if (handle && handle.ref && handle.unref && typeof handle.ref === 'function' && typeof handle.unref === 'function') {
                task.ref = handle.ref.bind(handle);
                task.unref = handle.unref.bind(handle);
              }

              if (typeof handle === 'number' || handle) {
                return handle;
              }

              return task;
            } else {
              // cause an error by calling it directly.
              return delegate.apply(window, args);
            }
          };
        });
        clearNative = patchMethod(window, cancelName, function (delegate) {
          return function (self, args) {
            var id = args[0];
            var task;

            if (typeof id === 'number') {
              // non nodejs env.
              task = tasksByHandleId[id];
            } else {
              // nodejs env.
              task = id && id[taskSymbol]; // other environments.

              if (!task) {
                task = id;
              }
            }

            if (task && typeof task.type === 'string') {
              if (task.state !== 'notScheduled' && (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {
                if (typeof id === 'number') {
                  delete tasksByHandleId[id];
                } else if (id) {
                  id[taskSymbol] = null;
                } // Do not cancel already canceled functions


                task.zone.cancelTask(task);
              }
            } else {
              // cause an error by calling it directly.
              delegate.apply(window, args);
            }
          };
        });
      }
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function patchCustomElements(_global, api) {
        var _api$getGlobalObjects = api.getGlobalObjects(),
            isBrowser = _api$getGlobalObjects.isBrowser,
            isMix = _api$getGlobalObjects.isMix;

        if (!isBrowser && !isMix || !_global['customElements'] || !('customElements' in _global)) {
          return;
        }

        var callbacks = ['connectedCallback', 'disconnectedCallback', 'adoptedCallback', 'attributeChangedCallback'];
        api.patchCallbacks(api, _global.customElements, 'customElements', 'define', callbacks);
      }
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function eventTargetPatch(_global, api) {
        if (Zone[api.symbol('patchEventTarget')]) {
          // EventTarget is already patched.
          return;
        }

        var _api$getGlobalObjects2 = api.getGlobalObjects(),
            eventNames = _api$getGlobalObjects2.eventNames,
            zoneSymbolEventNames = _api$getGlobalObjects2.zoneSymbolEventNames,
            TRUE_STR = _api$getGlobalObjects2.TRUE_STR,
            FALSE_STR = _api$getGlobalObjects2.FALSE_STR,
            ZONE_SYMBOL_PREFIX = _api$getGlobalObjects2.ZONE_SYMBOL_PREFIX; //  predefine all __zone_symbol__ + eventName + true/false string


        for (var i = 0; i < eventNames.length; i++) {
          var eventName = eventNames[i];
          var falseEventName = eventName + FALSE_STR;
          var trueEventName = eventName + TRUE_STR;
          var symbol = ZONE_SYMBOL_PREFIX + falseEventName;
          var symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;
          zoneSymbolEventNames[eventName] = {};
          zoneSymbolEventNames[eventName][FALSE_STR] = symbol;
          zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;
        }

        var EVENT_TARGET = _global['EventTarget'];

        if (!EVENT_TARGET || !EVENT_TARGET.prototype) {
          return;
        }

        api.patchEventTarget(_global, [EVENT_TARGET && EVENT_TARGET.prototype]);
        return true;
      }

      function patchEvent(global, api) {
        api.patchEventPrototype(global, api);
      }
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      Zone.__load_patch('legacy', function (global) {
        var legacyPatch = global[Zone.__symbol__('legacyPatch')];

        if (legacyPatch) {
          legacyPatch();
        }
      });

      Zone.__load_patch('timers', function (global) {
        var set = 'set';
        var clear = 'clear';
        patchTimer(global, set, clear, 'Timeout');
        patchTimer(global, set, clear, 'Interval');
        patchTimer(global, set, clear, 'Immediate');
      });

      Zone.__load_patch('requestAnimationFrame', function (global) {
        patchTimer(global, 'request', 'cancel', 'AnimationFrame');
        patchTimer(global, 'mozRequest', 'mozCancel', 'AnimationFrame');
        patchTimer(global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');
      });

      Zone.__load_patch('blocking', function (global, Zone) {
        var blockingMethods = ['alert', 'prompt', 'confirm'];

        for (var i = 0; i < blockingMethods.length; i++) {
          var name = blockingMethods[i];
          patchMethod(global, name, function (delegate, symbol, name) {
            return function (s, args) {
              return Zone.current.run(delegate, global, args, name);
            };
          });
        }
      });

      Zone.__load_patch('EventTarget', function (global, Zone, api) {
        patchEvent(global, api);
        eventTargetPatch(global, api); // patch XMLHttpRequestEventTarget's addEventListener/removeEventListener

        var XMLHttpRequestEventTarget = global['XMLHttpRequestEventTarget'];

        if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {
          api.patchEventTarget(global, [XMLHttpRequestEventTarget.prototype]);
        }

        patchClass('MutationObserver');
        patchClass('WebKitMutationObserver');
        patchClass('IntersectionObserver');
        patchClass('FileReader');
      });

      Zone.__load_patch('on_property', function (global, Zone, api) {
        propertyDescriptorPatch(api, global);
      });

      Zone.__load_patch('customElements', function (global, Zone, api) {
        patchCustomElements(global, api);
      });

      Zone.__load_patch('XHR', function (global, Zone) {
        // Treat XMLHttpRequest as a macrotask.
        patchXHR(global);
        var XHR_TASK = zoneSymbol('xhrTask');
        var XHR_SYNC = zoneSymbol('xhrSync');
        var XHR_LISTENER = zoneSymbol('xhrListener');
        var XHR_SCHEDULED = zoneSymbol('xhrScheduled');
        var XHR_URL = zoneSymbol('xhrURL');
        var XHR_ERROR_BEFORE_SCHEDULED = zoneSymbol('xhrErrorBeforeScheduled');

        function patchXHR(window) {
          var XMLHttpRequest = window['XMLHttpRequest'];

          if (!XMLHttpRequest) {
            // XMLHttpRequest is not available in service worker
            return;
          }

          var XMLHttpRequestPrototype = XMLHttpRequest.prototype;

          function findPendingTask(target) {
            return target[XHR_TASK];
          }

          var oriAddListener = XMLHttpRequestPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];
          var oriRemoveListener = XMLHttpRequestPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];

          if (!oriAddListener) {
            var XMLHttpRequestEventTarget = window['XMLHttpRequestEventTarget'];

            if (XMLHttpRequestEventTarget) {
              var XMLHttpRequestEventTargetPrototype = XMLHttpRequestEventTarget.prototype;
              oriAddListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];
              oriRemoveListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];
            }
          }

          var READY_STATE_CHANGE = 'readystatechange';
          var SCHEDULED = 'scheduled';

          function scheduleTask(task) {
            var data = task.data;
            var target = data.target;
            target[XHR_SCHEDULED] = false;
            target[XHR_ERROR_BEFORE_SCHEDULED] = false; // remove existing event listener

            var listener = target[XHR_LISTENER];

            if (!oriAddListener) {
              oriAddListener = target[ZONE_SYMBOL_ADD_EVENT_LISTENER];
              oriRemoveListener = target[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];
            }

            if (listener) {
              oriRemoveListener.call(target, READY_STATE_CHANGE, listener);
            }

            var newListener = target[XHR_LISTENER] = function () {
              if (target.readyState === target.DONE) {
                // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with
                // readyState=4 multiple times, so we need to check task state here
                if (!data.aborted && target[XHR_SCHEDULED] && task.state === SCHEDULED) {
                  // check whether the xhr has registered onload listener
                  // if that is the case, the task should invoke after all
                  // onload listeners finish.
                  var loadTasks = target[Zone.__symbol__('loadfalse')];

                  if (loadTasks && loadTasks.length > 0) {
                    var oriInvoke = task.invoke;

                    task.invoke = function () {
                      // need to load the tasks again, because in other
                      // load listener, they may remove themselves
                      var loadTasks = target[Zone.__symbol__('loadfalse')];

                      for (var i = 0; i < loadTasks.length; i++) {
                        if (loadTasks[i] === task) {
                          loadTasks.splice(i, 1);
                        }
                      }

                      if (!data.aborted && task.state === SCHEDULED) {
                        oriInvoke.call(task);
                      }
                    };

                    loadTasks.push(task);
                  } else {
                    task.invoke();
                  }
                } else if (!data.aborted && target[XHR_SCHEDULED] === false) {
                  // error occurs when xhr.send()
                  target[XHR_ERROR_BEFORE_SCHEDULED] = true;
                }
              }
            };

            oriAddListener.call(target, READY_STATE_CHANGE, newListener);
            var storedTask = target[XHR_TASK];

            if (!storedTask) {
              target[XHR_TASK] = task;
            }

            sendNative.apply(target, data.args);
            target[XHR_SCHEDULED] = true;
            return task;
          }

          function placeholderCallback() {}

          function clearTask(task) {
            var data = task.data; // Note - ideally, we would call data.target.removeEventListener here, but it's too late
            // to prevent it from firing. So instead, we store info for the event listener.

            data.aborted = true;
            return abortNative.apply(data.target, data.args);
          }

          var openNative = patchMethod(XMLHttpRequestPrototype, 'open', function () {
            return function (self, args) {
              self[XHR_SYNC] = args[2] == false;
              self[XHR_URL] = args[1];
              return openNative.apply(self, args);
            };
          });
          var XMLHTTPREQUEST_SOURCE = 'XMLHttpRequest.send';
          var fetchTaskAborting = zoneSymbol('fetchTaskAborting');
          var fetchTaskScheduling = zoneSymbol('fetchTaskScheduling');
          var sendNative = patchMethod(XMLHttpRequestPrototype, 'send', function () {
            return function (self, args) {
              if (Zone.current[fetchTaskScheduling] === true) {
                // a fetch is scheduling, so we are using xhr to polyfill fetch
                // and because we already schedule macroTask for fetch, we should
                // not schedule a macroTask for xhr again
                return sendNative.apply(self, args);
              }

              if (self[XHR_SYNC]) {
                // if the XHR is sync there is no task to schedule, just execute the code.
                return sendNative.apply(self, args);
              } else {
                var _options2 = {
                  target: self,
                  url: self[XHR_URL],
                  isPeriodic: false,
                  args: args,
                  aborted: false
                };
                var task = scheduleMacroTaskWithCurrentZone(XMLHTTPREQUEST_SOURCE, placeholderCallback, _options2, scheduleTask, clearTask);

                if (self && self[XHR_ERROR_BEFORE_SCHEDULED] === true && !_options2.aborted && task.state === SCHEDULED) {
                  // xhr request throw error when send
                  // we should invoke task instead of leaving a scheduled
                  // pending macroTask
                  task.invoke();
                }
              }
            };
          });
          var abortNative = patchMethod(XMLHttpRequestPrototype, 'abort', function () {
            return function (self, args) {
              var task = findPendingTask(self);

              if (task && typeof task.type == 'string') {
                // If the XHR has already completed, do nothing.
                // If the XHR has already been aborted, do nothing.
                // Fix #569, call abort multiple times before done will cause
                // macroTask task count be negative number
                if (task.cancelFn == null || task.data && task.data.aborted) {
                  return;
                }

                task.zone.cancelTask(task);
              } else if (Zone.current[fetchTaskAborting] === true) {
                // the abort is called from fetch polyfill, we need to call native abort of XHR.
                return abortNative.apply(self, args);
              } // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no
              // task
              // to cancel. Do nothing.

            };
          });
        }
      });

      Zone.__load_patch('geolocation', function (global) {
        /// GEO_LOCATION
        if (global['navigator'] && global['navigator'].geolocation) {
          patchPrototype(global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);
        }
      });

      Zone.__load_patch('PromiseRejectionEvent', function (global, Zone) {
        // handle unhandled promise rejection
        function findPromiseRejectionHandler(evtName) {
          return function (e) {
            var eventTasks = findEventTasks(global, evtName);
            eventTasks.forEach(function (eventTask) {
              // windows has added unhandledrejection event listener
              // trigger the event listener
              var PromiseRejectionEvent = global['PromiseRejectionEvent'];

              if (PromiseRejectionEvent) {
                var evt = new PromiseRejectionEvent(evtName, {
                  promise: e.promise,
                  reason: e.rejection
                });
                eventTask.invoke(evt);
              }
            });
          };
        }

        if (global['PromiseRejectionEvent']) {
          Zone[zoneSymbol('unhandledPromiseRejectionHandler')] = findPromiseRejectionHandler('unhandledrejection');
          Zone[zoneSymbol('rejectionHandledHandler')] = findPromiseRejectionHandler('rejectionhandled');
        }
      });
    });
    /***/

  },

  /***/
  "./node_modules/zone.js/dist/zone-legacy.js":
  /*!**************************************************!*\
    !*** ./node_modules/zone.js/dist/zone-legacy.js ***!
    \**************************************************/

  /*! no static exports found */

  /***/
  function node_modulesZoneJsDistZoneLegacyJs(module, exports, __webpack_require__) {
    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;
    /**
    * @license Angular v9.1.0-next.4+61.sha-e552591.with-local-changes
    * (c) 2010-2020 Google LLC. https://angular.io/
    * License: MIT
    */


    (function (factory) {
      true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
    })(function () {
      'use strict';
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /*
       * This is necessary for Chrome and Chrome mobile, to enable
       * things like redefining `createdCallback` on an element.
       */

      var zoneSymbol;

      var _defineProperty;

      var _getOwnPropertyDescriptor;

      var _create;

      var unconfigurablesKey;

      function propertyPatch() {
        zoneSymbol = Zone.__symbol__;
        _defineProperty = Object[zoneSymbol('defineProperty')] = Object.defineProperty;
        _getOwnPropertyDescriptor = Object[zoneSymbol('getOwnPropertyDescriptor')] = Object.getOwnPropertyDescriptor;
        _create = Object.create;
        unconfigurablesKey = zoneSymbol('unconfigurables');

        Object.defineProperty = function (obj, prop, desc) {
          if (isUnconfigurable(obj, prop)) {
            throw new TypeError('Cannot assign to read only property \'' + prop + '\' of ' + obj);
          }

          var originalConfigurableFlag = desc.configurable;

          if (prop !== 'prototype') {
            desc = rewriteDescriptor(obj, prop, desc);
          }

          return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
        };

        Object.defineProperties = function (obj, props) {
          Object.keys(props).forEach(function (prop) {
            Object.defineProperty(obj, prop, props[prop]);
          });
          return obj;
        };

        Object.create = function (obj, proto) {
          if (typeof proto === 'object' && !Object.isFrozen(proto)) {
            Object.keys(proto).forEach(function (prop) {
              proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
            });
          }

          return _create(obj, proto);
        };

        Object.getOwnPropertyDescriptor = function (obj, prop) {
          var desc = _getOwnPropertyDescriptor(obj, prop);

          if (desc && isUnconfigurable(obj, prop)) {
            desc.configurable = false;
          }

          return desc;
        };
      }

      function _redefineProperty(obj, prop, desc) {
        var originalConfigurableFlag = desc.configurable;
        desc = rewriteDescriptor(obj, prop, desc);
        return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
      }

      function isUnconfigurable(obj, prop) {
        return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
      }

      function rewriteDescriptor(obj, prop, desc) {
        // issue-927, if the desc is frozen, don't try to change the desc
        if (!Object.isFrozen(desc)) {
          desc.configurable = true;
        }

        if (!desc.configurable) {
          // issue-927, if the obj is frozen, don't try to set the desc to obj
          if (!obj[unconfigurablesKey] && !Object.isFrozen(obj)) {
            _defineProperty(obj, unconfigurablesKey, {
              writable: true,
              value: {}
            });
          }

          if (obj[unconfigurablesKey]) {
            obj[unconfigurablesKey][prop] = true;
          }
        }

        return desc;
      }

      function _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {
        try {
          return _defineProperty(obj, prop, desc);
        } catch (error) {
          if (desc.configurable) {
            // In case of errors, when the configurable flag was likely set by rewriteDescriptor(), let's
            // retry with the original flag value
            if (typeof originalConfigurableFlag == 'undefined') {
              delete desc.configurable;
            } else {
              desc.configurable = originalConfigurableFlag;
            }

            try {
              return _defineProperty(obj, prop, desc);
            } catch (error) {
              var descJson = null;

              try {
                descJson = JSON.stringify(desc);
              } catch (error) {
                descJson = desc.toString();
              }

              console.log("Attempting to configure '" + prop + "' with descriptor '" + descJson + "' on object '" + obj + "' and got error, giving up: " + error);
            }
          } else {
            throw error;
          }
        }
      }
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function eventTargetLegacyPatch(_global, api) {
        var _a = api.getGlobalObjects(),
            eventNames = _a.eventNames,
            globalSources = _a.globalSources,
            zoneSymbolEventNames = _a.zoneSymbolEventNames,
            TRUE_STR = _a.TRUE_STR,
            FALSE_STR = _a.FALSE_STR,
            ZONE_SYMBOL_PREFIX = _a.ZONE_SYMBOL_PREFIX;

        var WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';
        var NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex,WebSocket'.split(',');
        var EVENT_TARGET = 'EventTarget';
        var apis = [];
        var isWtf = _global['wtf'];
        var WTF_ISSUE_555_ARRAY = WTF_ISSUE_555.split(',');

        if (isWtf) {
          // Workaround for: https://github.com/google/tracing-framework/issues/555
          apis = WTF_ISSUE_555_ARRAY.map(function (v) {
            return 'HTML' + v + 'Element';
          }).concat(NO_EVENT_TARGET);
        } else if (_global[EVENT_TARGET]) {
          apis.push(EVENT_TARGET);
        } else {
          // Note: EventTarget is not available in all browsers,
          // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget
          apis = NO_EVENT_TARGET;
        }

        var isDisableIECheck = _global['__Zone_disable_IE_check'] || false;
        var isEnableCrossContextCheck = _global['__Zone_enable_cross_context_check'] || false;
        var ieOrEdge = api.isIEOrEdge();
        var ADD_EVENT_LISTENER_SOURCE = '.addEventListener:';
        var FUNCTION_WRAPPER = '[object FunctionWrapper]';
        var BROWSER_TOOLS = 'function __BROWSERTOOLS_CONSOLE_SAFEFUNC() { [native code] }';
        var pointerEventsMap = {
          'MSPointerCancel': 'pointercancel',
          'MSPointerDown': 'pointerdown',
          'MSPointerEnter': 'pointerenter',
          'MSPointerHover': 'pointerhover',
          'MSPointerLeave': 'pointerleave',
          'MSPointerMove': 'pointermove',
          'MSPointerOut': 'pointerout',
          'MSPointerOver': 'pointerover',
          'MSPointerUp': 'pointerup'
        }; //  predefine all __zone_symbol__ + eventName + true/false string

        for (var i = 0; i < eventNames.length; i++) {
          var eventName = eventNames[i];
          var falseEventName = eventName + FALSE_STR;
          var trueEventName = eventName + TRUE_STR;
          var symbol = ZONE_SYMBOL_PREFIX + falseEventName;
          var symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;
          zoneSymbolEventNames[eventName] = {};
          zoneSymbolEventNames[eventName][FALSE_STR] = symbol;
          zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;
        } //  predefine all task.source string


        for (var i = 0; i < WTF_ISSUE_555_ARRAY.length; i++) {
          var target = WTF_ISSUE_555_ARRAY[i];
          var targets = globalSources[target] = {};

          for (var j = 0; j < eventNames.length; j++) {
            var eventName = eventNames[j];
            targets[eventName] = target + ADD_EVENT_LISTENER_SOURCE + eventName;
          }
        }

        var checkIEAndCrossContext = function checkIEAndCrossContext(nativeDelegate, delegate, target, args) {
          if (!isDisableIECheck && ieOrEdge) {
            if (isEnableCrossContextCheck) {
              try {
                var testString = delegate.toString();

                if (testString === FUNCTION_WRAPPER || testString == BROWSER_TOOLS) {
                  nativeDelegate.apply(target, args);
                  return false;
                }
              } catch (error) {
                nativeDelegate.apply(target, args);
                return false;
              }
            } else {
              var testString = delegate.toString();

              if (testString === FUNCTION_WRAPPER || testString == BROWSER_TOOLS) {
                nativeDelegate.apply(target, args);
                return false;
              }
            }
          } else if (isEnableCrossContextCheck) {
            try {
              delegate.toString();
            } catch (error) {
              nativeDelegate.apply(target, args);
              return false;
            }
          }

          return true;
        };

        var apiTypes = [];

        for (var i = 0; i < apis.length; i++) {
          var type = _global[apis[i]];
          apiTypes.push(type && type.prototype);
        } // vh is validateHandler to check event handler
        // is valid or not(for security check)


        api.patchEventTarget(_global, apiTypes, {
          vh: checkIEAndCrossContext,
          transferEventName: function transferEventName(eventName) {
            var pointerEventName = pointerEventsMap[eventName];
            return pointerEventName || eventName;
          }
        });
        Zone[api.symbol('patchEventTarget')] = !!_global[EVENT_TARGET];
        return true;
      }
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // we have to patch the instance since the proto is non-configurable


      function apply(api, _global) {
        var _a = api.getGlobalObjects(),
            ADD_EVENT_LISTENER_STR = _a.ADD_EVENT_LISTENER_STR,
            REMOVE_EVENT_LISTENER_STR = _a.REMOVE_EVENT_LISTENER_STR;

        var WS = _global.WebSocket; // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener
        // On older Chrome, no need since EventTarget was already patched

        if (!_global.EventTarget) {
          api.patchEventTarget(_global, [WS.prototype]);
        }

        _global.WebSocket = function (x, y) {
          var socket = arguments.length > 1 ? new WS(x, y) : new WS(x);
          var proxySocket;
          var proxySocketProto; // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance

          var onmessageDesc = api.ObjectGetOwnPropertyDescriptor(socket, 'onmessage');

          if (onmessageDesc && onmessageDesc.configurable === false) {
            proxySocket = api.ObjectCreate(socket); // socket have own property descriptor 'onopen', 'onmessage', 'onclose', 'onerror'
            // but proxySocket not, so we will keep socket as prototype and pass it to
            // patchOnProperties method

            proxySocketProto = socket;
            [ADD_EVENT_LISTENER_STR, REMOVE_EVENT_LISTENER_STR, 'send', 'close'].forEach(function (propName) {
              proxySocket[propName] = function () {
                var args = api.ArraySlice.call(arguments);

                if (propName === ADD_EVENT_LISTENER_STR || propName === REMOVE_EVENT_LISTENER_STR) {
                  var eventName = args.length > 0 ? args[0] : undefined;

                  if (eventName) {
                    var propertySymbol = Zone.__symbol__('ON_PROPERTY' + eventName);

                    socket[propertySymbol] = proxySocket[propertySymbol];
                  }
                }

                return socket[propName].apply(socket, args);
              };
            });
          } else {
            // we can patch the real socket
            proxySocket = socket;
          }

          api.patchOnProperties(proxySocket, ['close', 'error', 'message', 'open'], proxySocketProto);
          return proxySocket;
        };

        var globalWebSocket = _global['WebSocket'];

        for (var prop in WS) {
          globalWebSocket[prop] = WS[prop];
        }
      }
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function propertyDescriptorLegacyPatch(api, _global) {
        var _a = api.getGlobalObjects(),
            isNode = _a.isNode,
            isMix = _a.isMix;

        if (isNode && !isMix) {
          return;
        }

        if (!canPatchViaPropertyDescriptor(api, _global)) {
          var supportsWebSocket = typeof WebSocket !== 'undefined'; // Safari, Android browsers (Jelly Bean)

          patchViaCapturingAllTheEvents(api);
          api.patchClass('XMLHttpRequest');

          if (supportsWebSocket) {
            apply(api, _global);
          }

          Zone[api.symbol('patchEvents')] = true;
        }
      }

      function canPatchViaPropertyDescriptor(api, _global) {
        var _a = api.getGlobalObjects(),
            isBrowser = _a.isBrowser,
            isMix = _a.isMix;

        if ((isBrowser || isMix) && !api.ObjectGetOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') && typeof Element !== 'undefined') {
          // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364
          // IDL interface attributes are not configurable
          var desc = api.ObjectGetOwnPropertyDescriptor(Element.prototype, 'onclick');
          if (desc && !desc.configurable) return false; // try to use onclick to detect whether we can patch via propertyDescriptor
          // because XMLHttpRequest is not available in service worker

          if (desc) {
            api.ObjectDefineProperty(Element.prototype, 'onclick', {
              enumerable: true,
              configurable: true,
              get: function get() {
                return true;
              }
            });
            var div = document.createElement('div');
            var result = !!div.onclick;
            api.ObjectDefineProperty(Element.prototype, 'onclick', desc);
            return result;
          }
        }

        var XMLHttpRequest = _global['XMLHttpRequest'];

        if (!XMLHttpRequest) {
          // XMLHttpRequest is not available in service worker
          return false;
        }

        var ON_READY_STATE_CHANGE = 'onreadystatechange';
        var XMLHttpRequestPrototype = XMLHttpRequest.prototype;
        var xhrDesc = api.ObjectGetOwnPropertyDescriptor(XMLHttpRequestPrototype, ON_READY_STATE_CHANGE); // add enumerable and configurable here because in opera
        // by default XMLHttpRequest.prototype.onreadystatechange is undefined
        // without adding enumerable and configurable will cause onreadystatechange
        // non-configurable
        // and if XMLHttpRequest.prototype.onreadystatechange is undefined,
        // we should set a real desc instead a fake one

        if (xhrDesc) {
          api.ObjectDefineProperty(XMLHttpRequestPrototype, ON_READY_STATE_CHANGE, {
            enumerable: true,
            configurable: true,
            get: function get() {
              return true;
            }
          });
          var req = new XMLHttpRequest();
          var result = !!req.onreadystatechange; // restore original desc

          api.ObjectDefineProperty(XMLHttpRequestPrototype, ON_READY_STATE_CHANGE, xhrDesc || {});
          return result;
        } else {
          var SYMBOL_FAKE_ONREADYSTATECHANGE_1 = api.symbol('fake');
          api.ObjectDefineProperty(XMLHttpRequestPrototype, ON_READY_STATE_CHANGE, {
            enumerable: true,
            configurable: true,
            get: function get() {
              return this[SYMBOL_FAKE_ONREADYSTATECHANGE_1];
            },
            set: function set(value) {
              this[SYMBOL_FAKE_ONREADYSTATECHANGE_1] = value;
            }
          });
          var req = new XMLHttpRequest();

          var detectFunc = function detectFunc() {};

          req.onreadystatechange = detectFunc;
          var result = req[SYMBOL_FAKE_ONREADYSTATECHANGE_1] === detectFunc;
          req.onreadystatechange = null;
          return result;
        }
      } // Whenever any eventListener fires, we check the eventListener target and all parents
      // for `onwhatever` properties and replace them with zone-bound functions
      // - Chrome (for now)


      function patchViaCapturingAllTheEvents(api) {
        var eventNames = api.getGlobalObjects().eventNames;
        var unboundKey = api.symbol('unbound');

        var _loop_1 = function _loop_1(i) {
          var property = eventNames[i];
          var onproperty = 'on' + property;
          self.addEventListener(property, function (event) {
            var elt = event.target,
                bound,
                source;

            if (elt) {
              source = elt.constructor['name'] + '.' + onproperty;
            } else {
              source = 'unknown.' + onproperty;
            }

            while (elt) {
              if (elt[onproperty] && !elt[onproperty][unboundKey]) {
                bound = api.wrapWithCurrentZone(elt[onproperty], source);
                bound[unboundKey] = elt[onproperty];
                elt[onproperty] = bound;
              }

              elt = elt.parentElement;
            }
          }, true);
        };

        for (var i = 0; i < eventNames.length; i++) {
          _loop_1(i);
        }
      }
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      function registerElementPatch(_global, api) {
        var _a = api.getGlobalObjects(),
            isBrowser = _a.isBrowser,
            isMix = _a.isMix;

        if (!isBrowser && !isMix || !('registerElement' in _global.document)) {
          return;
        }

        var callbacks = ['createdCallback', 'attachedCallback', 'detachedCallback', 'attributeChangedCallback'];
        api.patchCallbacks(api, document, 'Document', 'registerElement', callbacks);
      }
      /**
       * @license
       * Copyright Google Inc. All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      (function (_global) {
        var symbolPrefix = _global['__Zone_symbol_prefix'] || '__zone_symbol__';

        function __symbol__(name) {
          return symbolPrefix + name;
        }

        _global[__symbol__('legacyPatch')] = function () {
          var Zone = _global['Zone'];

          Zone.__load_patch('defineProperty', function (global, Zone, api) {
            api._redefineProperty = _redefineProperty;
            propertyPatch();
          });

          Zone.__load_patch('registerElement', function (global, Zone, api) {
            registerElementPatch(global, api);
          });

          Zone.__load_patch('EventTargetLegacy', function (global, Zone, api) {
            eventTargetLegacyPatch(global, api);
            propertyDescriptorLegacyPatch(api, global);
          });
        };
      })(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {});
    });
    /***/

  },

  /***/
  "./src/polyfills.ts":
  /*!**************************!*\
    !*** ./src/polyfills.ts ***!
    \**************************/

  /*! no exports provided */

  /***/
  function srcPolyfillsTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony import */


    var zone_js_dist_zone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! zone.js/dist/zone */
    "./node_modules/zone.js/dist/zone-evergreen.js");
    /* harmony import */


    var zone_js_dist_zone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(zone_js_dist_zone__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony import */


    var _webcomponents_custom_elements_custom_elements_min__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @webcomponents/custom-elements/custom-elements.min */
    "./node_modules/@webcomponents/custom-elements/custom-elements.min.js");
    /* harmony import */


    var _webcomponents_custom_elements_custom_elements_min__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_webcomponents_custom_elements_custom_elements_min__WEBPACK_IMPORTED_MODULE_1__);
    /**
     * This file includes polyfills needed by Angular and is loaded before the app.
     * You can add your own extra polyfills to this file.
     *
     * This file is divided into 2 sections:
     *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
     *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
     *      file.
     *
     * The current setup is for so-called "evergreen" browsers; the last versions of browsers that
     * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),
     * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.
     *
     * Learn more in https://angular.io/guide/browser-support
     */

    /***************************************************************************************************
     * BROWSER POLYFILLS
     */

    /** IE10 and IE11 requires the following for NgClass support on SVG elements */
    // import 'classlist.js';  // Run `npm install --save classlist.js`.

    /**
     * Web Animations `@angular/platform-browser/animations`
     * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.
     * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).
     */
    // import 'web-animations-js';  // Run `npm install --save web-animations-js`.

    /**
     * By default, zone.js will patch all possible macroTask and DomEvents
     * user can disable parts of macroTask/DomEvents patch by setting following flags
     * because those flags need to be set before `zone.js` being loaded, and webpack
     * will put import in the top of bundle, so user need to create a separate file
     * in this directory (for example: zone-flags.ts), and put the following flags
     * into that file, and then add the following code before importing zone.js.
     * import './zone-flags';
     *
     * The flags allowed in zone-flags.ts are listed here.
     *
     * The following flags will work for all browsers.
     *
     * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame
     * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick
     * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames
     *
     *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js
     *  with the following flag, it will bypass `zone.js` patch for IE/Edge
     *
     *  (window as any).__Zone_enable_cross_context_check = true;
     *
     */

    /***************************************************************************************************
     * Zone JS is required by default for Angular itself.
     */
    // Included with Angular CLI.
    // including for custom elements compatibility

    /***************************************************************************************************
     * APPLICATION IMPORTS
     */

    /***/

  },

  /***/
  1:
  /*!**************************************************************************************************************************************************************************************************!*\
    !*** multi ./node_modules/@angular-builders/custom-webpack/node_modules/@angular-devkit/build-angular/src/angular-cli-files/models/es5-polyfills.js zone.js/dist/zone-legacy ./src/polyfills.ts ***!
    \**************************************************************************************************************************************************************************************************/

  /*! no static exports found */

  /***/
  function _(module, exports, __webpack_require__) {
    __webpack_require__(
    /*! /var/www/html/scania-plugin/node_modules/@angular-builders/custom-webpack/node_modules/@angular-devkit/build-angular/src/angular-cli-files/models/es5-polyfills.js */
    "./node_modules/@angular-builders/custom-webpack/node_modules/@angular-devkit/build-angular/src/angular-cli-files/models/es5-polyfills.js");

    __webpack_require__(
    /*! zone.js/dist/zone-legacy */
    "./node_modules/zone.js/dist/zone-legacy.js");

    module.exports = __webpack_require__(
    /*! /var/www/html/scania-plugin/src/polyfills.ts */
    "./src/polyfills.ts");
    /***/
  }
}, [[1, "runtime"]]]);function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(window["wpJsonpScaniaBannerPluginWidget"] = window["wpJsonpScaniaBannerPluginWidget"] || []).push([["main"], {
  /***/
  "./$$_lazy_route_resource lazy recursive":
  /*!******************************************************!*\
    !*** ./$$_lazy_route_resource lazy namespace object ***!
    \******************************************************/

  /*! no static exports found */

  /***/
  function $$_lazy_route_resourceLazyRecursive(module, exports) {
    function webpackEmptyAsyncContext(req) {
      // Here Promise.resolve().then() is used instead of new Promise() to prevent
      // uncaught exception popping up in devtools
      return Promise.resolve().then(function () {
        var e = new Error("Cannot find module '" + req + "'");
        e.code = 'MODULE_NOT_FOUND';
        throw e;
      });
    }

    webpackEmptyAsyncContext.keys = function () {
      return [];
    };

    webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
    module.exports = webpackEmptyAsyncContext;
    webpackEmptyAsyncContext.id = "./$$_lazy_route_resource lazy recursive";
    /***/
  },

  /***/
  "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js ***!
    \**********************************************************************/

  /*! exports provided: APP_BASE_HREF, AsyncPipe, CommonModule, CurrencyPipe, DOCUMENT, DatePipe, DecimalPipe, FormStyle, FormatWidth, HashLocationStrategy, I18nPluralPipe, I18nSelectPipe, JsonPipe, KeyValuePipe, LOCATION_INITIALIZED, Location, LocationStrategy, LowerCasePipe, NgClass, NgComponentOutlet, NgForOf, NgForOfContext, NgIf, NgIfContext, NgLocaleLocalization, NgLocalization, NgPlural, NgPluralCase, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgTemplateOutlet, NumberFormatStyle, NumberSymbol, PathLocationStrategy, PercentPipe, PlatformLocation, Plural, SlicePipe, TitleCasePipe, TranslationWidth, UpperCasePipe, VERSION, ViewportScroller, WeekDay, formatCurrency, formatDate, formatNumber, formatPercent, getCurrencySymbol, getLocaleCurrencyCode, getLocaleCurrencyName, getLocaleCurrencySymbol, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleDayNames, getLocaleDayPeriods, getLocaleDirection, getLocaleEraNames, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocaleFirstDayOfWeek, getLocaleId, getLocaleMonthNames, getLocaleNumberFormat, getLocaleNumberSymbol, getLocalePluralCase, getLocaleTimeFormat, getLocaleWeekEndRange, getNumberOfCurrencyDigits, isPlatformBrowser, isPlatformServer, isPlatformWorkerApp, isPlatformWorkerUi, registerLocaleData, ɵBrowserPlatformLocation, ɵDomAdapter, ɵNullViewportScroller, ɵPLATFORM_BROWSER_ID, ɵPLATFORM_SERVER_ID, ɵPLATFORM_WORKER_APP_ID, ɵPLATFORM_WORKER_UI_ID, ɵangular_packages_common_common_a, ɵangular_packages_common_common_b, ɵangular_packages_common_common_c, ɵangular_packages_common_common_d, ɵangular_packages_common_common_e, ɵangular_packages_common_common_f, ɵgetDOM, ɵparseCookieValue, ɵsetRootDomAdapter */

  /***/
  function node_modulesAngularCommon__ivy_ngcc__Fesm2015CommonJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "APP_BASE_HREF", function () {
      return APP_BASE_HREF;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AsyncPipe", function () {
      return AsyncPipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CommonModule", function () {
      return CommonModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CurrencyPipe", function () {
      return CurrencyPipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DOCUMENT", function () {
      return DOCUMENT;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DatePipe", function () {
      return DatePipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DecimalPipe", function () {
      return DecimalPipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FormStyle", function () {
      return FormStyle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FormatWidth", function () {
      return FormatWidth;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "HashLocationStrategy", function () {
      return HashLocationStrategy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "I18nPluralPipe", function () {
      return I18nPluralPipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "I18nSelectPipe", function () {
      return I18nSelectPipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "JsonPipe", function () {
      return JsonPipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "KeyValuePipe", function () {
      return KeyValuePipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LOCATION_INITIALIZED", function () {
      return LOCATION_INITIALIZED;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Location", function () {
      return Location;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LocationStrategy", function () {
      return LocationStrategy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LowerCasePipe", function () {
      return LowerCasePipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgClass", function () {
      return NgClass;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgComponentOutlet", function () {
      return NgComponentOutlet;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgForOf", function () {
      return NgForOf;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgForOfContext", function () {
      return NgForOfContext;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgIf", function () {
      return NgIf;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgIfContext", function () {
      return NgIfContext;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgLocaleLocalization", function () {
      return NgLocaleLocalization;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgLocalization", function () {
      return NgLocalization;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgPlural", function () {
      return NgPlural;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgPluralCase", function () {
      return NgPluralCase;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgStyle", function () {
      return NgStyle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgSwitch", function () {
      return NgSwitch;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgSwitchCase", function () {
      return NgSwitchCase;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgSwitchDefault", function () {
      return NgSwitchDefault;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgTemplateOutlet", function () {
      return NgTemplateOutlet;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NumberFormatStyle", function () {
      return NumberFormatStyle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NumberSymbol", function () {
      return NumberSymbol;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PathLocationStrategy", function () {
      return PathLocationStrategy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PercentPipe", function () {
      return PercentPipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PlatformLocation", function () {
      return PlatformLocation;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Plural", function () {
      return Plural;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SlicePipe", function () {
      return SlicePipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TitleCasePipe", function () {
      return TitleCasePipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TranslationWidth", function () {
      return TranslationWidth;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "UpperCasePipe", function () {
      return UpperCasePipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "VERSION", function () {
      return VERSION;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ViewportScroller", function () {
      return ViewportScroller;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "WeekDay", function () {
      return WeekDay;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "formatCurrency", function () {
      return formatCurrency;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "formatDate", function () {
      return formatDate;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "formatNumber", function () {
      return formatNumber;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "formatPercent", function () {
      return formatPercent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getCurrencySymbol", function () {
      return getCurrencySymbol;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleCurrencyCode", function () {
      return getLocaleCurrencyCode;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleCurrencyName", function () {
      return getLocaleCurrencyName;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleCurrencySymbol", function () {
      return getLocaleCurrencySymbol;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleDateFormat", function () {
      return getLocaleDateFormat;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleDateTimeFormat", function () {
      return getLocaleDateTimeFormat;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleDayNames", function () {
      return getLocaleDayNames;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleDayPeriods", function () {
      return getLocaleDayPeriods;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleDirection", function () {
      return getLocaleDirection;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleEraNames", function () {
      return getLocaleEraNames;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleExtraDayPeriodRules", function () {
      return getLocaleExtraDayPeriodRules;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleExtraDayPeriods", function () {
      return getLocaleExtraDayPeriods;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleFirstDayOfWeek", function () {
      return getLocaleFirstDayOfWeek;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleId", function () {
      return getLocaleId;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleMonthNames", function () {
      return getLocaleMonthNames;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleNumberFormat", function () {
      return getLocaleNumberFormat;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleNumberSymbol", function () {
      return getLocaleNumberSymbol;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocalePluralCase", function () {
      return getLocalePluralCase;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleTimeFormat", function () {
      return getLocaleTimeFormat;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getLocaleWeekEndRange", function () {
      return getLocaleWeekEndRange;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getNumberOfCurrencyDigits", function () {
      return getNumberOfCurrencyDigits;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isPlatformBrowser", function () {
      return isPlatformBrowser;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isPlatformServer", function () {
      return isPlatformServer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isPlatformWorkerApp", function () {
      return isPlatformWorkerApp;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isPlatformWorkerUi", function () {
      return isPlatformWorkerUi;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "registerLocaleData", function () {
      return registerLocaleData;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵBrowserPlatformLocation", function () {
      return BrowserPlatformLocation;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵDomAdapter", function () {
      return DomAdapter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵNullViewportScroller", function () {
      return NullViewportScroller;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_BROWSER_ID", function () {
      return PLATFORM_BROWSER_ID;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_SERVER_ID", function () {
      return PLATFORM_SERVER_ID;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_WORKER_APP_ID", function () {
      return PLATFORM_WORKER_APP_ID;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_WORKER_UI_ID", function () {
      return PLATFORM_WORKER_UI_ID;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_a", function () {
      return useBrowserPlatformLocation;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_b", function () {
      return createBrowserPlatformLocation;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_c", function () {
      return createLocation;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_d", function () {
      return provideLocationStrategy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_e", function () {
      return COMMON_DIRECTIVES;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_f", function () {
      return COMMON_PIPES;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵgetDOM", function () {
      return getDOM;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵparseCookieValue", function () {
      return parseCookieValue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵsetRootDomAdapter", function () {
      return setRootDomAdapter;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /**
     * @license Angular v10.0.9
     * (c) 2010-2020 Google LLC. https://angular.io/
     * License: MIT
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var _DOM = null;

    function getDOM() {
      return _DOM;
    }

    function setDOM(adapter) {
      _DOM = adapter;
    }

    function setRootDomAdapter(adapter) {
      if (!_DOM) {
        _DOM = adapter;
      }
    }
    /* tslint:disable:requireParameterType */

    /**
     * Provides DOM operations in an environment-agnostic way.
     *
     * @security Tread carefully! Interacting with the DOM directly is dangerous and
     * can introduce XSS risks.
     */


    var DomAdapter = function DomAdapter() {
      _classCallCheck(this, DomAdapter);
    };
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * A DI Token representing the main rendering context. In a browser this is the DOM Document.
     *
     * Note: Document might not be available in the Application Context when Application and Rendering
     * Contexts are not the same (e.g. when running the application in a Web Worker).
     *
     * @publicApi
     */


    var DOCUMENT = /*@__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('DocumentToken');

    var PlatformLocation = /*@__PURE__*/function () {
      var PlatformLocation = function PlatformLocation() {
        _classCallCheck(this, PlatformLocation);
      };

      PlatformLocation.ɵfac = function PlatformLocation_Factory(t) {
        return new (t || PlatformLocation)();
      };

      PlatformLocation.ɵprov = /*@__PURE__*/Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: useBrowserPlatformLocation,
        token: PlatformLocation,
        providedIn: "platform"
      });
      return PlatformLocation;
    }();

    function useBrowserPlatformLocation() {
      return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BrowserPlatformLocation);
    }
    /**
     * @description
     * Indicates when a location is initialized.
     *
     * @publicApi
     */


    var LOCATION_INITIALIZED = /*@__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('Location Initialized');

    var BrowserPlatformLocation = /*@__PURE__*/function () {
      var BrowserPlatformLocation = /*#__PURE__*/function (_PlatformLocation) {
        _inherits(BrowserPlatformLocation, _PlatformLocation);

        var _super = _createSuper(BrowserPlatformLocation);

        function BrowserPlatformLocation(_doc) {
          var _this;

          _classCallCheck(this, BrowserPlatformLocation);

          _this = _super.call(this);
          _this._doc = _doc;

          _this._init();

          return _this;
        } // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it

        /** @internal */


        _createClass2(BrowserPlatformLocation, [{
          key: "_init",
          value: function _init() {
            this.location = getDOM().getLocation();
            this._history = getDOM().getHistory();
          }
        }, {
          key: "getBaseHrefFromDOM",
          value: function getBaseHrefFromDOM() {
            return getDOM().getBaseHref(this._doc);
          }
        }, {
          key: "onPopState",
          value: function onPopState(fn) {
            getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);
          }
        }, {
          key: "onHashChange",
          value: function onHashChange(fn) {
            getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);
          }
        }, {
          key: "pushState",
          value: function pushState(state, title, url) {
            if (supportsState()) {
              this._history.pushState(state, title, url);
            } else {
              this.location.hash = url;
            }
          }
        }, {
          key: "replaceState",
          value: function replaceState(state, title, url) {
            if (supportsState()) {
              this._history.replaceState(state, title, url);
            } else {
              this.location.hash = url;
            }
          }
        }, {
          key: "forward",
          value: function forward() {
            this._history.forward();
          }
        }, {
          key: "back",
          value: function back() {
            this._history.back();
          }
        }, {
          key: "getState",
          value: function getState() {
            return this._history.state;
          }
        }, {
          key: "href",
          get: function get() {
            return this.location.href;
          }
        }, {
          key: "protocol",
          get: function get() {
            return this.location.protocol;
          }
        }, {
          key: "hostname",
          get: function get() {
            return this.location.hostname;
          }
        }, {
          key: "port",
          get: function get() {
            return this.location.port;
          }
        }, {
          key: "pathname",
          get: function get() {
            return this.location.pathname;
          },
          set: function set(newPath) {
            this.location.pathname = newPath;
          }
        }, {
          key: "search",
          get: function get() {
            return this.location.search;
          }
        }, {
          key: "hash",
          get: function get() {
            return this.location.hash;
          }
        }]);

        return BrowserPlatformLocation;
      }(PlatformLocation);

      BrowserPlatformLocation.ɵfac = function BrowserPlatformLocation_Factory(t) {
        return new (t || BrowserPlatformLocation)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](DOCUMENT));
      };

      BrowserPlatformLocation.ɵprov = /*@__PURE__*/Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: createBrowserPlatformLocation,
        token: BrowserPlatformLocation,
        providedIn: "platform"
      });
      return BrowserPlatformLocation;
    }();

    function supportsState() {
      return !!window.history.pushState;
    }

    function createBrowserPlatformLocation() {
      return new BrowserPlatformLocation(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(DOCUMENT));
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Joins two parts of a URL with a slash if needed.
     *
     * @param start  URL string
     * @param end    URL string
     *
     *
     * @returns The joined URL string.
     */


    function joinWithSlash(start, end) {
      if (start.length == 0) {
        return end;
      }

      if (end.length == 0) {
        return start;
      }

      var slashes = 0;

      if (start.endsWith('/')) {
        slashes++;
      }

      if (end.startsWith('/')) {
        slashes++;
      }

      if (slashes == 2) {
        return start + end.substring(1);
      }

      if (slashes == 1) {
        return start + end;
      }

      return start + '/' + end;
    }
    /**
     * Removes a trailing slash from a URL string if needed.
     * Looks for the first occurrence of either `#`, `?`, or the end of the
     * line as `/` characters and removes the trailing slash if one exists.
     *
     * @param url URL string.
     *
     * @returns The URL string, modified if needed.
     */


    function stripTrailingSlash(url) {
      var match = url.match(/#|\?|$/);
      var pathEndIdx = match && match.index || url.length;
      var droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);
      return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);
    }
    /**
     * Normalizes URL parameters by prepending with `?` if needed.
     *
     * @param  params String of URL parameters.
     *
     * @returns The normalized URL parameters string.
     */


    function normalizeQueryParams(params) {
      return params && params[0] !== '?' ? '?' + params : params;
    }

    var LocationStrategy = /*@__PURE__*/function () {
      var LocationStrategy = function LocationStrategy() {
        _classCallCheck(this, LocationStrategy);
      };

      LocationStrategy.ɵfac = function LocationStrategy_Factory(t) {
        return new (t || LocationStrategy)();
      };

      LocationStrategy.ɵprov = /*@__PURE__*/Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: provideLocationStrategy,
        token: LocationStrategy,
        providedIn: "root"
      });
      return LocationStrategy;
    }();

    function provideLocationStrategy(platformLocation) {
      // See #23917
      var location = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(DOCUMENT).location;
      return new PathLocationStrategy(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(PlatformLocation), location && location.origin || '');
    }
    /**
     * A predefined [DI token](guide/glossary#di-token) for the base href
     * to be used with the `PathLocationStrategy`.
     * The base href is the URL prefix that should be preserved when generating
     * and recognizing URLs.
     *
     * @usageNotes
     *
     * The following example shows how to use this token to configure the root app injector
     * with a base href value, so that the DI framework can supply the dependency anywhere in the app.
     *
     * ```typescript
     * import {Component, NgModule} from '@angular/core';
     * import {APP_BASE_HREF} from '@angular/common';
     *
     * @NgModule({
     *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
     * })
     * class AppModule {}
     * ```
     *
     * @publicApi
     */


    var APP_BASE_HREF = /*@__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('appBaseHref');

    var PathLocationStrategy = /*@__PURE__*/function () {
      var PathLocationStrategy = /*#__PURE__*/function (_LocationStrategy) {
        _inherits(PathLocationStrategy, _LocationStrategy);

        var _super2 = _createSuper(PathLocationStrategy);

        function PathLocationStrategy(_platformLocation, href) {
          var _this2;

          _classCallCheck(this, PathLocationStrategy);

          _this2 = _super2.call(this);
          _this2._platformLocation = _platformLocation;

          if (href == null) {
            href = _this2._platformLocation.getBaseHrefFromDOM();
          }

          if (href == null) {
            throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
          }

          _this2._baseHref = href;
          return _this2;
        }

        _createClass2(PathLocationStrategy, [{
          key: "onPopState",
          value: function onPopState(fn) {
            this._platformLocation.onPopState(fn);

            this._platformLocation.onHashChange(fn);
          }
        }, {
          key: "getBaseHref",
          value: function getBaseHref() {
            return this._baseHref;
          }
        }, {
          key: "prepareExternalUrl",
          value: function prepareExternalUrl(internal) {
            return joinWithSlash(this._baseHref, internal);
          }
        }, {
          key: "path",
          value: function path() {
            var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var pathname = this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);
            var hash = this._platformLocation.hash;
            return hash && includeHash ? "".concat(pathname).concat(hash) : pathname;
          }
        }, {
          key: "pushState",
          value: function pushState(state, title, url, queryParams) {
            var externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));

            this._platformLocation.pushState(state, title, externalUrl);
          }
        }, {
          key: "replaceState",
          value: function replaceState(state, title, url, queryParams) {
            var externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));

            this._platformLocation.replaceState(state, title, externalUrl);
          }
        }, {
          key: "forward",
          value: function forward() {
            this._platformLocation.forward();
          }
        }, {
          key: "back",
          value: function back() {
            this._platformLocation.back();
          }
        }]);

        return PathLocationStrategy;
      }(LocationStrategy);

      PathLocationStrategy.ɵfac = function PathLocationStrategy_Factory(t) {
        return new (t || PathLocationStrategy)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](PlatformLocation), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](APP_BASE_HREF, 8));
      };

      PathLocationStrategy.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: PathLocationStrategy,
        factory: PathLocationStrategy.ɵfac
      });
      return PathLocationStrategy;
    }();

    var HashLocationStrategy = /*@__PURE__*/function () {
      var HashLocationStrategy = /*#__PURE__*/function (_LocationStrategy2) {
        _inherits(HashLocationStrategy, _LocationStrategy2);

        var _super3 = _createSuper(HashLocationStrategy);

        function HashLocationStrategy(_platformLocation, _baseHref) {
          var _this3;

          _classCallCheck(this, HashLocationStrategy);

          _this3 = _super3.call(this);
          _this3._platformLocation = _platformLocation;
          _this3._baseHref = '';

          if (_baseHref != null) {
            _this3._baseHref = _baseHref;
          }

          return _this3;
        }

        _createClass2(HashLocationStrategy, [{
          key: "onPopState",
          value: function onPopState(fn) {
            this._platformLocation.onPopState(fn);

            this._platformLocation.onHashChange(fn);
          }
        }, {
          key: "getBaseHref",
          value: function getBaseHref() {
            return this._baseHref;
          }
        }, {
          key: "path",
          value: function path() {
            var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            // the hash value is always prefixed with a `#`
            // and if it is empty then it will stay empty
            var path = this._platformLocation.hash;
            if (path == null) path = '#';
            return path.length > 0 ? path.substring(1) : path;
          }
        }, {
          key: "prepareExternalUrl",
          value: function prepareExternalUrl(internal) {
            var url = joinWithSlash(this._baseHref, internal);
            return url.length > 0 ? '#' + url : url;
          }
        }, {
          key: "pushState",
          value: function pushState(state, title, path, queryParams) {
            var url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));

            if (url.length == 0) {
              url = this._platformLocation.pathname;
            }

            this._platformLocation.pushState(state, title, url);
          }
        }, {
          key: "replaceState",
          value: function replaceState(state, title, path, queryParams) {
            var url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));

            if (url.length == 0) {
              url = this._platformLocation.pathname;
            }

            this._platformLocation.replaceState(state, title, url);
          }
        }, {
          key: "forward",
          value: function forward() {
            this._platformLocation.forward();
          }
        }, {
          key: "back",
          value: function back() {
            this._platformLocation.back();
          }
        }]);

        return HashLocationStrategy;
      }(LocationStrategy);

      HashLocationStrategy.ɵfac = function HashLocationStrategy_Factory(t) {
        return new (t || HashLocationStrategy)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](PlatformLocation), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](APP_BASE_HREF, 8));
      };

      HashLocationStrategy.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: HashLocationStrategy,
        factory: HashLocationStrategy.ɵfac
      });
      return HashLocationStrategy;
    }();

    var Location = /*@__PURE__*/function () {
      var Location = /*#__PURE__*/function () {
        function Location(platformStrategy, platformLocation) {
          var _this4 = this;

          _classCallCheck(this, Location);

          /** @internal */
          this._subject = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /** @internal */

          this._urlChangeListeners = [];
          this._platformStrategy = platformStrategy;

          var browserBaseHref = this._platformStrategy.getBaseHref();

          this._platformLocation = platformLocation;
          this._baseHref = stripTrailingSlash(_stripIndexHtml(browserBaseHref));

          this._platformStrategy.onPopState(function (ev) {
            _this4._subject.emit({
              'url': _this4.path(true),
              'pop': true,
              'state': ev.state,
              'type': ev.type
            });
          });
        }
        /**
         * Normalizes the URL path for this location.
         *
         * @param includeHash True to include an anchor fragment in the path.
         *
         * @returns The normalized URL path.
         */
        // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
        // removed.


        _createClass2(Location, [{
          key: "path",
          value: function path() {
            var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            return this.normalize(this._platformStrategy.path(includeHash));
          }
          /**
           * Reports the current state of the location history.
           * @returns The current value of the `history.state` object.
           */

        }, {
          key: "getState",
          value: function getState() {
            return this._platformLocation.getState();
          }
          /**
           * Normalizes the given path and compares to the current normalized path.
           *
           * @param path The given URL path.
           * @param query Query parameters.
           *
           * @returns True if the given URL path is equal to the current normalized path, false
           * otherwise.
           */

        }, {
          key: "isCurrentPathEqualTo",
          value: function isCurrentPathEqualTo(path) {
            var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            return this.path() == this.normalize(path + normalizeQueryParams(query));
          }
          /**
           * Normalizes a URL path by stripping any trailing slashes.
           *
           * @param url String representing a URL.
           *
           * @returns The normalized URL string.
           */

        }, {
          key: "normalize",
          value: function normalize(url) {
            return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
          }
          /**
           * Normalizes an external URL path.
           * If the given URL doesn't begin with a leading slash (`'/'`), adds one
           * before normalizing. Adds a hash if `HashLocationStrategy` is
           * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
           *
           * @param url String representing a URL.
           *
           * @returns  A normalized platform-specific URL.
           */

        }, {
          key: "prepareExternalUrl",
          value: function prepareExternalUrl(url) {
            if (url && url[0] !== '/') {
              url = '/' + url;
            }

            return this._platformStrategy.prepareExternalUrl(url);
          } // TODO: rename this method to pushState

          /**
           * Changes the browser's URL to a normalized version of a given URL, and pushes a
           * new item onto the platform's history.
           *
           * @param path  URL path to normalize.
           * @param query Query parameters.
           * @param state Location history state.
           *
           */

        }, {
          key: "go",
          value: function go(path) {
            var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            this._platformStrategy.pushState(state, '', path, query);

            this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
          }
          /**
           * Changes the browser's URL to a normalized version of the given URL, and replaces
           * the top item on the platform's history stack.
           *
           * @param path  URL path to normalize.
           * @param query Query parameters.
           * @param state Location history state.
           */

        }, {
          key: "replaceState",
          value: function replaceState(path) {
            var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            this._platformStrategy.replaceState(state, '', path, query);

            this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
          }
          /**
           * Navigates forward in the platform's history.
           */

        }, {
          key: "forward",
          value: function forward() {
            this._platformStrategy.forward();
          }
          /**
           * Navigates back in the platform's history.
           */

        }, {
          key: "back",
          value: function back() {
            this._platformStrategy.back();
          }
          /**
           * Registers a URL change listener. Use to catch updates performed by the Angular
           * framework that are not detectible through "popstate" or "hashchange" events.
           *
           * @param fn The change handler function, which take a URL and a location history state.
           */

        }, {
          key: "onUrlChange",
          value: function onUrlChange(fn) {
            var _this5 = this;

            this._urlChangeListeners.push(fn);

            if (!this._urlChangeSubscription) {
              this._urlChangeSubscription = this.subscribe(function (v) {
                _this5._notifyUrlChangeListeners(v.url, v.state);
              });
            }
          }
          /** @internal */

        }, {
          key: "_notifyUrlChangeListeners",
          value: function _notifyUrlChangeListeners() {
            var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
            var state = arguments.length > 1 ? arguments[1] : undefined;

            this._urlChangeListeners.forEach(function (fn) {
              return fn(url, state);
            });
          }
          /**
           * Subscribes to the platform's `popState` events.
           *
           * @param value Event that is triggered when the state history changes.
           * @param exception The exception to throw.
           *
           * @returns Subscribed events.
           */

        }, {
          key: "subscribe",
          value: function subscribe(onNext, onThrow, onReturn) {
            return this._subject.subscribe({
              next: onNext,
              error: onThrow,
              complete: onReturn
            });
          }
        }]);

        return Location;
      }();

      Location.ɵfac = function Location_Factory(t) {
        return new (t || Location)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](LocationStrategy), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](PlatformLocation));
      };
      /**
       * Normalizes URL parameters by prepending with `?` if needed.
       *
       * @param  params String of URL parameters.
       *
       * @returns The normalized URL parameters string.
       */


      Location.normalizeQueryParams = normalizeQueryParams;
      /**
       * Joins two parts of a URL with a slash if needed.
       *
       * @param start  URL string
       * @param end    URL string
       *
       *
       * @returns The joined URL string.
       */

      Location.joinWithSlash = joinWithSlash;
      /**
       * Removes a trailing slash from a URL string if needed.
       * Looks for the first occurrence of either `#`, `?`, or the end of the
       * line as `/` characters and removes the trailing slash if one exists.
       *
       * @param url URL string.
       *
       * @returns The URL string, modified if needed.
       */

      Location.stripTrailingSlash = stripTrailingSlash;
      Location.ɵprov = /*@__PURE__*/Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: createLocation,
        token: Location,
        providedIn: "root"
      });
      return Location;
    }();

    function createLocation() {
      return new Location(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(LocationStrategy), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(PlatformLocation));
    }

    function _stripBaseHref(baseHref, url) {
      return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
    }

    function _stripIndexHtml(url) {
      return url.replace(/\/index.html$/, '');
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /** @internal */


    var CURRENCIES_EN = {
      'ADP': [undefined, undefined, 0],
      'AFN': [undefined, undefined, 0],
      'ALL': [undefined, undefined, 0],
      'AMD': [undefined, undefined, 2],
      'AOA': [undefined, 'Kz'],
      'ARS': [undefined, '$'],
      'AUD': ['A$', '$'],
      'BAM': [undefined, 'KM'],
      'BBD': [undefined, '$'],
      'BDT': [undefined, '৳'],
      'BHD': [undefined, undefined, 3],
      'BIF': [undefined, undefined, 0],
      'BMD': [undefined, '$'],
      'BND': [undefined, '$'],
      'BOB': [undefined, 'Bs'],
      'BRL': ['R$'],
      'BSD': [undefined, '$'],
      'BWP': [undefined, 'P'],
      'BYN': [undefined, 'р.', 2],
      'BYR': [undefined, undefined, 0],
      'BZD': [undefined, '$'],
      'CAD': ['CA$', '$', 2],
      'CHF': [undefined, undefined, 2],
      'CLF': [undefined, undefined, 4],
      'CLP': [undefined, '$', 0],
      'CNY': ['CN¥', '¥'],
      'COP': [undefined, '$', 2],
      'CRC': [undefined, '₡', 2],
      'CUC': [undefined, '$'],
      'CUP': [undefined, '$'],
      'CZK': [undefined, 'Kč', 2],
      'DJF': [undefined, undefined, 0],
      'DKK': [undefined, 'kr', 2],
      'DOP': [undefined, '$'],
      'EGP': [undefined, 'E£'],
      'ESP': [undefined, '₧', 0],
      'EUR': ['€'],
      'FJD': [undefined, '$'],
      'FKP': [undefined, '£'],
      'GBP': ['£'],
      'GEL': [undefined, '₾'],
      'GIP': [undefined, '£'],
      'GNF': [undefined, 'FG', 0],
      'GTQ': [undefined, 'Q'],
      'GYD': [undefined, '$', 2],
      'HKD': ['HK$', '$'],
      'HNL': [undefined, 'L'],
      'HRK': [undefined, 'kn'],
      'HUF': [undefined, 'Ft', 2],
      'IDR': [undefined, 'Rp', 2],
      'ILS': ['₪'],
      'INR': ['₹'],
      'IQD': [undefined, undefined, 0],
      'IRR': [undefined, undefined, 0],
      'ISK': [undefined, 'kr', 0],
      'ITL': [undefined, undefined, 0],
      'JMD': [undefined, '$'],
      'JOD': [undefined, undefined, 3],
      'JPY': ['¥', undefined, 0],
      'KHR': [undefined, '៛'],
      'KMF': [undefined, 'CF', 0],
      'KPW': [undefined, '₩', 0],
      'KRW': ['₩', undefined, 0],
      'KWD': [undefined, undefined, 3],
      'KYD': [undefined, '$'],
      'KZT': [undefined, '₸'],
      'LAK': [undefined, '₭', 0],
      'LBP': [undefined, 'L£', 0],
      'LKR': [undefined, 'Rs'],
      'LRD': [undefined, '$'],
      'LTL': [undefined, 'Lt'],
      'LUF': [undefined, undefined, 0],
      'LVL': [undefined, 'Ls'],
      'LYD': [undefined, undefined, 3],
      'MGA': [undefined, 'Ar', 0],
      'MGF': [undefined, undefined, 0],
      'MMK': [undefined, 'K', 0],
      'MNT': [undefined, '₮', 2],
      'MRO': [undefined, undefined, 0],
      'MUR': [undefined, 'Rs', 2],
      'MXN': ['MX$', '$'],
      'MYR': [undefined, 'RM'],
      'NAD': [undefined, '$'],
      'NGN': [undefined, '₦'],
      'NIO': [undefined, 'C$'],
      'NOK': [undefined, 'kr', 2],
      'NPR': [undefined, 'Rs'],
      'NZD': ['NZ$', '$'],
      'OMR': [undefined, undefined, 3],
      'PHP': [undefined, '₱'],
      'PKR': [undefined, 'Rs', 2],
      'PLN': [undefined, 'zł'],
      'PYG': [undefined, '₲', 0],
      'RON': [undefined, 'lei'],
      'RSD': [undefined, undefined, 0],
      'RUB': [undefined, '₽'],
      'RUR': [undefined, 'р.'],
      'RWF': [undefined, 'RF', 0],
      'SBD': [undefined, '$'],
      'SEK': [undefined, 'kr', 2],
      'SGD': [undefined, '$'],
      'SHP': [undefined, '£'],
      'SLL': [undefined, undefined, 0],
      'SOS': [undefined, undefined, 0],
      'SRD': [undefined, '$'],
      'SSP': [undefined, '£'],
      'STD': [undefined, undefined, 0],
      'STN': [undefined, 'Db'],
      'SYP': [undefined, '£', 0],
      'THB': [undefined, '฿'],
      'TMM': [undefined, undefined, 0],
      'TND': [undefined, undefined, 3],
      'TOP': [undefined, 'T$'],
      'TRL': [undefined, undefined, 0],
      'TRY': [undefined, '₺'],
      'TTD': [undefined, '$'],
      'TWD': ['NT$', '$', 2],
      'TZS': [undefined, undefined, 2],
      'UAH': [undefined, '₴'],
      'UGX': [undefined, undefined, 0],
      'USD': ['$'],
      'UYI': [undefined, undefined, 0],
      'UYU': [undefined, '$'],
      'UYW': [undefined, undefined, 4],
      'UZS': [undefined, undefined, 2],
      'VEF': [undefined, 'Bs', 2],
      'VND': ['₫', undefined, 0],
      'VUV': [undefined, undefined, 0],
      'XAF': ['FCFA', undefined, 0],
      'XCD': ['EC$', '$'],
      'XOF': ['CFA', undefined, 0],
      'XPF': ['CFPF', undefined, 0],
      'XXX': ['¤'],
      'YER': [undefined, undefined, 0],
      'ZAR': [undefined, 'R'],
      'ZMK': [undefined, undefined, 0],
      'ZMW': [undefined, 'ZK'],
      'ZWD': [undefined, undefined, 0]
    };
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Format styles that can be used to represent numbers.
     * @see `getLocaleNumberFormat()`.
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */

    var NumberFormatStyle = /*@__PURE__*/function (NumberFormatStyle) {
      NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
      NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
      NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
      NumberFormatStyle[NumberFormatStyle["Scientific"] = 3] = "Scientific";
      return NumberFormatStyle;
    }({});
    /**
     * Plurality cases used for translating plurals to different languages.
     *
     * @see `NgPlural`
     * @see `NgPluralCase`
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    var Plural = /*@__PURE__*/function (Plural) {
      Plural[Plural["Zero"] = 0] = "Zero";
      Plural[Plural["One"] = 1] = "One";
      Plural[Plural["Two"] = 2] = "Two";
      Plural[Plural["Few"] = 3] = "Few";
      Plural[Plural["Many"] = 4] = "Many";
      Plural[Plural["Other"] = 5] = "Other";
      return Plural;
    }({});
    /**
     * Context-dependant translation forms for strings.
     * Typically the standalone version is for the nominative form of the word,
     * and the format version is used for the genitive case.
     * @see [CLDR website](http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles)
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    var FormStyle = /*@__PURE__*/function (FormStyle) {
      FormStyle[FormStyle["Format"] = 0] = "Format";
      FormStyle[FormStyle["Standalone"] = 1] = "Standalone";
      return FormStyle;
    }({});
    /**
     * String widths available for translations.
     * The specific character widths are locale-specific.
     * Examples are given for the word "Sunday" in English.
     *
     * @publicApi
     */


    var TranslationWidth = /*@__PURE__*/function (TranslationWidth) {
      /** 1 character for `en-US`. For example: 'S' */
      TranslationWidth[TranslationWidth["Narrow"] = 0] = "Narrow";
      /** 3 characters for `en-US`. For example: 'Sun' */

      TranslationWidth[TranslationWidth["Abbreviated"] = 1] = "Abbreviated";
      /** Full length for `en-US`. For example: "Sunday" */

      TranslationWidth[TranslationWidth["Wide"] = 2] = "Wide";
      /** 2 characters for `en-US`, For example: "Su" */

      TranslationWidth[TranslationWidth["Short"] = 3] = "Short";
      return TranslationWidth;
    }({});
    /**
     * String widths available for date-time formats.
     * The specific character widths are locale-specific.
     * Examples are given for `en-US`.
     *
     * @see `getLocaleDateFormat()`
     * @see `getLocaleTimeFormat()``
     * @see `getLocaleDateTimeFormat()`
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     * @publicApi
     */


    var FormatWidth = /*@__PURE__*/function (FormatWidth) {
      /**
       * For `en-US`, 'M/d/yy, h:mm a'`
       * (Example: `6/15/15, 9:03 AM`)
       */
      FormatWidth[FormatWidth["Short"] = 0] = "Short";
      /**
       * For `en-US`, `'MMM d, y, h:mm:ss a'`
       * (Example: `Jun 15, 2015, 9:03:01 AM`)
       */

      FormatWidth[FormatWidth["Medium"] = 1] = "Medium";
      /**
       * For `en-US`, `'MMMM d, y, h:mm:ss a z'`
       * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)
       */

      FormatWidth[FormatWidth["Long"] = 2] = "Long";
      /**
       * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`
       * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)
       */

      FormatWidth[FormatWidth["Full"] = 3] = "Full";
      return FormatWidth;
    }({});
    /**
     * Symbols that can be used to replace placeholders in number patterns.
     * Examples are based on `en-US` values.
     *
     * @see `getLocaleNumberSymbol()`
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    var NumberSymbol = /*@__PURE__*/function (NumberSymbol) {
      /**
       * Decimal separator.
       * For `en-US`, the dot character.
       * Example : 2,345`.`67
       */
      NumberSymbol[NumberSymbol["Decimal"] = 0] = "Decimal";
      /**
       * Grouping separator, typically for thousands.
       * For `en-US`, the comma character.
       * Example: 2`,`345.67
       */

      NumberSymbol[NumberSymbol["Group"] = 1] = "Group";
      /**
       * List-item separator.
       * Example: "one, two, and three"
       */

      NumberSymbol[NumberSymbol["List"] = 2] = "List";
      /**
       * Sign for percentage (out of 100).
       * Example: 23.4%
       */

      NumberSymbol[NumberSymbol["PercentSign"] = 3] = "PercentSign";
      /**
       * Sign for positive numbers.
       * Example: +23
       */

      NumberSymbol[NumberSymbol["PlusSign"] = 4] = "PlusSign";
      /**
       * Sign for negative numbers.
       * Example: -23
       */

      NumberSymbol[NumberSymbol["MinusSign"] = 5] = "MinusSign";
      /**
       * Computer notation for exponential value (n times a power of 10).
       * Example: 1.2E3
       */

      NumberSymbol[NumberSymbol["Exponential"] = 6] = "Exponential";
      /**
       * Human-readable format of exponential.
       * Example: 1.2x103
       */

      NumberSymbol[NumberSymbol["SuperscriptingExponent"] = 7] = "SuperscriptingExponent";
      /**
       * Sign for permille (out of 1000).
       * Example: 23.4‰
       */

      NumberSymbol[NumberSymbol["PerMille"] = 8] = "PerMille";
      /**
       * Infinity, can be used with plus and minus.
       * Example: ∞, +∞, -∞
       */

      NumberSymbol[NumberSymbol["Infinity"] = 9] = "Infinity";
      /**
       * Not a number.
       * Example: NaN
       */

      NumberSymbol[NumberSymbol["NaN"] = 10] = "NaN";
      /**
       * Symbol used between time units.
       * Example: 10:52
       */

      NumberSymbol[NumberSymbol["TimeSeparator"] = 11] = "TimeSeparator";
      /**
       * Decimal separator for currency values (fallback to `Decimal`).
       * Example: $2,345.67
       */

      NumberSymbol[NumberSymbol["CurrencyDecimal"] = 12] = "CurrencyDecimal";
      /**
       * Group separator for currency values (fallback to `Group`).
       * Example: $2,345.67
       */

      NumberSymbol[NumberSymbol["CurrencyGroup"] = 13] = "CurrencyGroup";
      return NumberSymbol;
    }({});
    /**
     * The value for each day of the week, based on the `en-US` locale
     *
     * @publicApi
     */


    var WeekDay = /*@__PURE__*/function (WeekDay) {
      WeekDay[WeekDay["Sunday"] = 0] = "Sunday";
      WeekDay[WeekDay["Monday"] = 1] = "Monday";
      WeekDay[WeekDay["Tuesday"] = 2] = "Tuesday";
      WeekDay[WeekDay["Wednesday"] = 3] = "Wednesday";
      WeekDay[WeekDay["Thursday"] = 4] = "Thursday";
      WeekDay[WeekDay["Friday"] = 5] = "Friday";
      WeekDay[WeekDay["Saturday"] = 6] = "Saturday";
      return WeekDay;
    }({});
    /**
     * Retrieves the locale ID from the currently loaded locale.
     * The loaded locale could be, for example, a global one rather than a regional one.
     * @param locale A locale code, such as `fr-FR`.
     * @returns The locale code. For example, `fr`.
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getLocaleId(locale) {
      return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale)[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].LocaleId];
    }
    /**
     * Retrieves day period strings for the given locale.
     *
     * @param locale A locale code for the locale format rules to use.
     * @param formStyle The required grammatical form.
     * @param width The required character width.
     * @returns An array of localized period strings. For example, `[AM, PM]` for `en-US`.
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getLocaleDayPeriods(locale, formStyle, width) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      var amPmData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DayPeriodsFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DayPeriodsStandalone]];
      var amPm = getLastDefinedValue(amPmData, formStyle);
      return getLastDefinedValue(amPm, width);
    }
    /**
     * Retrieves days of the week for the given locale, using the Gregorian calendar.
     *
     * @param locale A locale code for the locale format rules to use.
     * @param formStyle The required grammatical form.
     * @param width The required character width.
     * @returns An array of localized name strings.
     * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getLocaleDayNames(locale, formStyle, width) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      var daysData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DaysFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DaysStandalone]];
      var days = getLastDefinedValue(daysData, formStyle);
      return getLastDefinedValue(days, width);
    }
    /**
     * Retrieves months of the year for the given locale, using the Gregorian calendar.
     *
     * @param locale A locale code for the locale format rules to use.
     * @param formStyle The required grammatical form.
     * @param width The required character width.
     * @returns An array of localized name strings.
     * For example,  `[January, February, ...]` for `en-US`.
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getLocaleMonthNames(locale, formStyle, width) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      var monthsData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].MonthsFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].MonthsStandalone]];
      var months = getLastDefinedValue(monthsData, formStyle);
      return getLastDefinedValue(months, width);
    }
    /**
     * Retrieves Gregorian-calendar eras for the given locale.
     * @param locale A locale code for the locale format rules to use.
     * @param formStyle The required grammatical form.
     * @param width The required character width.
    
     * @returns An array of localized era strings.
     * For example, `[AD, BC]` for `en-US`.
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getLocaleEraNames(locale, width) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      var erasData = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].Eras];
      return getLastDefinedValue(erasData, width);
    }
    /**
     * Retrieves the first day of the week for the given locale.
     *
     * @param locale A locale code for the locale format rules to use.
     * @returns A day index number, using the 0-based week-day index for `en-US`
     * (Sunday = 0, Monday = 1, ...).
     * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getLocaleFirstDayOfWeek(locale) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].FirstDayOfWeek];
    }
    /**
     * Range of week days that are considered the week-end for the given locale.
     *
     * @param locale A locale code for the locale format rules to use.
     * @returns The range of day values, `[startDay, endDay]`.
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getLocaleWeekEndRange(locale) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].WeekendRange];
    }
    /**
     * Retrieves a localized date-value formating string.
     *
     * @param locale A locale code for the locale format rules to use.
     * @param width The format type.
     * @returns The localized formating string.
     * @see `FormatWidth`
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getLocaleDateFormat(locale, width) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      return getLastDefinedValue(data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DateFormat], width);
    }
    /**
     * Retrieves a localized time-value formatting string.
     *
     * @param locale A locale code for the locale format rules to use.
     * @param width The format type.
     * @returns The localized formatting string.
     * @see `FormatWidth`
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
    
     * @publicApi
     */


    function getLocaleTimeFormat(locale, width) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      return getLastDefinedValue(data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].TimeFormat], width);
    }
    /**
     * Retrieves a localized date-time formatting string.
     *
     * @param locale A locale code for the locale format rules to use.
     * @param width The format type.
     * @returns The localized formatting string.
     * @see `FormatWidth`
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getLocaleDateTimeFormat(locale, width) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      var dateTimeFormatData = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DateTimeFormat];
      return getLastDefinedValue(dateTimeFormatData, width);
    }
    /**
     * Retrieves a localized number symbol that can be used to replace placeholders in number formats.
     * @param locale The locale code.
     * @param symbol The symbol to localize.
     * @returns The character for the localized symbol.
     * @see `NumberSymbol`
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getLocaleNumberSymbol(locale, symbol) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      var res = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberSymbols][symbol];

      if (typeof res === 'undefined') {
        if (symbol === NumberSymbol.CurrencyDecimal) {
          return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberSymbols][NumberSymbol.Decimal];
        } else if (symbol === NumberSymbol.CurrencyGroup) {
          return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberSymbols][NumberSymbol.Group];
        }
      }

      return res;
    }
    /**
     * Retrieves a number format for a given locale.
     *
     * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`
     * when used to format the number 12345.678 could result in "12'345,678". That would happen if the
     * grouping separator for your language is an apostrophe, and the decimal separator is a comma.
     *
     * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders
     * that stand for the decimal separator, and so on, and are NOT real characters.
     * You must NOT "translate" the placeholders. For example, don't change `.` to `,` even though in
     * your language the decimal point is written with a comma. The symbols should be replaced by the
     * local equivalents, using the appropriate `NumberSymbol` for your language.
     *
     * Here are the special characters used in number patterns:
     *
     * | Symbol | Meaning |
     * |--------|---------|
     * | . | Replaced automatically by the character used for the decimal point. |
     * | , | Replaced by the "grouping" (thousands) separator. |
     * | 0 | Replaced by a digit (or zero if there aren't enough digits). |
     * | # | Replaced by a digit (or nothing if there aren't enough). |
     * | ¤ | Replaced by a currency symbol, such as $ or USD. |
     * | % | Marks a percent format. The % symbol may change position, but must be retained. |
     * | E | Marks a scientific format. The E symbol may change position, but must be retained. |
     * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |
     *
     * @param locale A locale code for the locale format rules to use.
     * @param type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)
     * @returns The localized format string.
     * @see `NumberFormatStyle`
     * @see [CLDR website](http://cldr.unicode.org/translation/number-patterns)
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getLocaleNumberFormat(locale, type) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberFormats][type];
    }
    /**
     * Retrieves the symbol used to represent the currency for the main country
     * corresponding to a given locale. For example, '$' for `en-US`.
     *
     * @param locale A locale code for the locale format rules to use.
     * @returns The localized symbol character,
     * or `null` if the main country cannot be determined.
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getLocaleCurrencySymbol(locale) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].CurrencySymbol] || null;
    }
    /**
     * Retrieves the name of the currency for the main country corresponding
     * to a given locale. For example, 'US Dollar' for `en-US`.
     * @param locale A locale code for the locale format rules to use.
     * @returns The currency name,
     * or `null` if the main country cannot be determined.
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getLocaleCurrencyName(locale) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].CurrencyName] || null;
    }
    /**
     * Retrieves the default currency code for the given locale.
     *
     * The default is defined as the first currency which is still in use.
     *
     * @param locale The code of the locale whose currency code we want.
     * @returns The code of the default currency for the given locale.
     *
     * @publicApi
     */


    function getLocaleCurrencyCode(locale) {
      return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵgetLocaleCurrencyCode"])(locale);
    }
    /**
     * Retrieves the currency values for a given locale.
     * @param locale A locale code for the locale format rules to use.
     * @returns The currency values.
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     */


    function getLocaleCurrencies(locale) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].Currencies];
    }
    /**
     * @alias core/ɵgetLocalePluralCase
     * @publicApi
     */


    var getLocalePluralCase = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵgetLocalePluralCase"];

    function checkFullData(data) {
      if (!data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData]) {
        throw new Error("Missing extra locale data for the locale \"".concat(data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].LocaleId], "\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more."));
      }
    }
    /**
     * Retrieves locale-specific rules used to determine which day period to use
     * when more than one period is defined for a locale.
     *
     * There is a rule for each defined day period. The
     * first rule is applied to the first day period and so on.
     * Fall back to AM/PM when no rules are available.
     *
     * A rule can specify a period as time range, or as a single time value.
     *
     * This functionality is only available when you have loaded the full locale data.
     * See the ["I18n guide"](guide/i18n#i18n-pipes).
     *
     * @param locale A locale code for the locale format rules to use.
     * @returns The rules for the locale, a single time value or array of *from-time, to-time*,
     * or null if no periods are available.
     *
     * @see `getLocaleExtraDayPeriods()`
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getLocaleExtraDayPeriodRules(locale) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      checkFullData(data);
      var rules = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData][2
      /* ExtraDayPeriodsRules */
      ] || [];
      return rules.map(function (rule) {
        if (typeof rule === 'string') {
          return extractTime(rule);
        }

        return [extractTime(rule[0]), extractTime(rule[1])];
      });
    }
    /**
     * Retrieves locale-specific day periods, which indicate roughly how a day is broken up
     * in different languages.
     * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.
     *
     * This functionality is only available when you have loaded the full locale data.
     * See the ["I18n guide"](guide/i18n#i18n-pipes).
     *
     * @param locale A locale code for the locale format rules to use.
     * @param formStyle The required grammatical form.
     * @param width The required character width.
     * @returns The translated day-period strings.
     * @see `getLocaleExtraDayPeriodRules()`
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getLocaleExtraDayPeriods(locale, formStyle, width) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      checkFullData(data);
      var dayPeriodsData = [data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData][0
      /* ExtraDayPeriodFormats */
      ], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData][1
      /* ExtraDayPeriodStandalone */
      ]];
      var dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];
      return getLastDefinedValue(dayPeriods, width) || [];
    }
    /**
     * Retrieves the writing direction of a specified locale
     * @param locale A locale code for the locale format rules to use.
     * @publicApi
     * @returns 'rtl' or 'ltr'
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     */


    function getLocaleDirection(locale) {
      var data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
      return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].Directionality];
    }
    /**
     * Retrieves the first value that is defined in an array, going backwards from an index position.
     *
     * To avoid repeating the same data (as when the "format" and "standalone" forms are the same)
     * add the first value to the locale data arrays, and add other values only if they are different.
     *
     * @param data The data array to retrieve from.
     * @param index A 0-based index into the array to start from.
     * @returns The value immediately before the given index position.
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getLastDefinedValue(data, index) {
      for (var i = index; i > -1; i--) {
        if (typeof data[i] !== 'undefined') {
          return data[i];
        }
      }

      throw new Error('Locale data API: locale data undefined');
    }
    /**
     * Extracts the hours and minutes from a string like "15:45"
     */


    function extractTime(time) {
      var _time$split = time.split(':'),
          _time$split2 = _slicedToArray(_time$split, 2),
          h = _time$split2[0],
          m = _time$split2[1];

      return {
        hours: +h,
        minutes: +m
      };
    }
    /**
     * Retrieves the currency symbol for a given currency code.
     *
     * For example, for the default `en-US` locale, the code `USD` can
     * be represented by the narrow symbol `$` or the wide symbol `US$`.
     *
     * @param code The currency code.
     * @param format The format, `wide` or `narrow`.
     * @param locale A locale code for the locale format rules to use.
     *
     * @returns The symbol, or the currency code if no symbol is available.
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function getCurrencySymbol(code, format) {
      var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';
      var currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];
      var symbolNarrow = currency[1
      /* SymbolNarrow */
      ];

      if (format === 'narrow' && typeof symbolNarrow === 'string') {
        return symbolNarrow;
      }

      return currency[0
      /* Symbol */
      ] || code;
    } // Most currencies have cents, that's why the default is 2


    var DEFAULT_NB_OF_CURRENCY_DIGITS = 2;
    /**
     * Reports the number of decimal digits for a given currency.
     * The value depends upon the presence of cents in that particular currency.
     *
     * @param code The currency code.
     * @returns The number of decimal digits, typically 0 or 2.
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */

    function getNumberOfCurrencyDigits(code) {
      var digits;
      var currency = CURRENCIES_EN[code];

      if (currency) {
        digits = currency[2
        /* NbOfDigits */
        ];
      }

      return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/; //    1        2       3         4          5          6          7          8  9     10      11

    var NAMED_FORMATS = {};
    var DATE_FORMATS_SPLIT = /((?:[^GyMLwWdEabBhHmsSzZO']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\s\S]*)/;

    var ZoneWidth = /*@__PURE__*/function (ZoneWidth) {
      ZoneWidth[ZoneWidth["Short"] = 0] = "Short";
      ZoneWidth[ZoneWidth["ShortGMT"] = 1] = "ShortGMT";
      ZoneWidth[ZoneWidth["Long"] = 2] = "Long";
      ZoneWidth[ZoneWidth["Extended"] = 3] = "Extended";
      return ZoneWidth;
    }({});

    var DateType = /*@__PURE__*/function (DateType) {
      DateType[DateType["FullYear"] = 0] = "FullYear";
      DateType[DateType["Month"] = 1] = "Month";
      DateType[DateType["Date"] = 2] = "Date";
      DateType[DateType["Hours"] = 3] = "Hours";
      DateType[DateType["Minutes"] = 4] = "Minutes";
      DateType[DateType["Seconds"] = 5] = "Seconds";
      DateType[DateType["FractionalSeconds"] = 6] = "FractionalSeconds";
      DateType[DateType["Day"] = 7] = "Day";
      return DateType;
    }({});

    var TranslationType = /*@__PURE__*/function (TranslationType) {
      TranslationType[TranslationType["DayPeriods"] = 0] = "DayPeriods";
      TranslationType[TranslationType["Days"] = 1] = "Days";
      TranslationType[TranslationType["Months"] = 2] = "Months";
      TranslationType[TranslationType["Eras"] = 3] = "Eras";
      return TranslationType;
    }({});
    /**
     * @ngModule CommonModule
     * @description
     *
     * Formats a date according to locale rules.
     *
     * @param value The date to format, as a Date, or a number (milliseconds since UTC epoch)
     * or an [ISO date-time string](https://www.w3.org/TR/NOTE-datetime).
     * @param format The date-time components to include. See `DatePipe` for details.
     * @param locale A locale code for the locale format rules to use.
     * @param timezone The time zone. A time zone offset from GMT (such as `'+0430'`),
     * or a standard UTC/GMT or continental US time zone abbreviation.
     * If not specified, uses host system settings.
     *
     * @returns The formatted date string.
     *
     * @see `DatePipe`
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function formatDate(value, format, locale, timezone) {
      var date = toDate(value);
      var namedFormat = getNamedFormat(locale, format);
      format = namedFormat || format;
      var parts = [];
      var match;

      while (format) {
        match = DATE_FORMATS_SPLIT.exec(format);

        if (match) {
          parts = parts.concat(match.slice(1));
          var part = parts.pop();

          if (!part) {
            break;
          }

          format = part;
        } else {
          parts.push(format);
          break;
        }
      }

      var dateTimezoneOffset = date.getTimezoneOffset();

      if (timezone) {
        dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
        date = convertTimezoneToLocal(date, timezone, true);
      }

      var text = '';
      parts.forEach(function (value) {
        var dateFormatter = getDateFormatter(value);
        text += dateFormatter ? dateFormatter(date, locale, dateTimezoneOffset) : value === '\'\'' ? '\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
      });
      return text;
    }

    function getNamedFormat(locale, format) {
      var localeId = getLocaleId(locale);
      NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};

      if (NAMED_FORMATS[localeId][format]) {
        return NAMED_FORMATS[localeId][format];
      }

      var formatValue = '';

      switch (format) {
        case 'shortDate':
          formatValue = getLocaleDateFormat(locale, FormatWidth.Short);
          break;

        case 'mediumDate':
          formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);
          break;

        case 'longDate':
          formatValue = getLocaleDateFormat(locale, FormatWidth.Long);
          break;

        case 'fullDate':
          formatValue = getLocaleDateFormat(locale, FormatWidth.Full);
          break;

        case 'shortTime':
          formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);
          break;

        case 'mediumTime':
          formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);
          break;

        case 'longTime':
          formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);
          break;

        case 'fullTime':
          formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);
          break;

        case 'short':
          var shortTime = getNamedFormat(locale, 'shortTime');
          var shortDate = getNamedFormat(locale, 'shortDate');
          formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);
          break;

        case 'medium':
          var mediumTime = getNamedFormat(locale, 'mediumTime');
          var mediumDate = getNamedFormat(locale, 'mediumDate');
          formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);
          break;

        case 'long':
          var longTime = getNamedFormat(locale, 'longTime');
          var longDate = getNamedFormat(locale, 'longDate');
          formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);
          break;

        case 'full':
          var fullTime = getNamedFormat(locale, 'fullTime');
          var fullDate = getNamedFormat(locale, 'fullDate');
          formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);
          break;
      }

      if (formatValue) {
        NAMED_FORMATS[localeId][format] = formatValue;
      }

      return formatValue;
    }

    function formatDateTime(str, opt_values) {
      if (opt_values) {
        str = str.replace(/\{([^}]+)}/g, function (match, key) {
          return opt_values != null && key in opt_values ? opt_values[key] : match;
        });
      }

      return str;
    }

    function padNumber(num, digits) {
      var minusSign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '-';
      var trim = arguments.length > 3 ? arguments[3] : undefined;
      var negWrap = arguments.length > 4 ? arguments[4] : undefined;
      var neg = '';

      if (num < 0 || negWrap && num <= 0) {
        if (negWrap) {
          num = -num + 1;
        } else {
          num = -num;
          neg = minusSign;
        }
      }

      var strNum = String(num);

      while (strNum.length < digits) {
        strNum = '0' + strNum;
      }

      if (trim) {
        strNum = strNum.substr(strNum.length - digits);
      }

      return neg + strNum;
    }

    function formatFractionalSeconds(milliseconds, digits) {
      var strMs = padNumber(milliseconds, 3);
      return strMs.substr(0, digits);
    }
    /**
     * Returns a date formatter that transforms a date into its locale digit representation
     */


    function dateGetter(name, size) {
      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var trim = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var negWrap = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      return function (date, locale) {
        var part = getDatePart(name, date);

        if (offset > 0 || part > -offset) {
          part += offset;
        }

        if (name === DateType.Hours) {
          if (part === 0 && offset === -12) {
            part = 12;
          }
        } else if (name === DateType.FractionalSeconds) {
          return formatFractionalSeconds(part, size);
        }

        var localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
        return padNumber(part, size, localeMinus, trim, negWrap);
      };
    }

    function getDatePart(part, date) {
      switch (part) {
        case DateType.FullYear:
          return date.getFullYear();

        case DateType.Month:
          return date.getMonth();

        case DateType.Date:
          return date.getDate();

        case DateType.Hours:
          return date.getHours();

        case DateType.Minutes:
          return date.getMinutes();

        case DateType.Seconds:
          return date.getSeconds();

        case DateType.FractionalSeconds:
          return date.getMilliseconds();

        case DateType.Day:
          return date.getDay();

        default:
          throw new Error("Unknown DateType value \"".concat(part, "\"."));
      }
    }
    /**
     * Returns a date formatter that transforms a date into its locale string representation
     */


    function dateStrGetter(name, width) {
      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : FormStyle.Format;
      var extended = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      return function (date, locale) {
        return getDateTranslation(date, locale, name, width, form, extended);
      };
    }
    /**
     * Returns the locale translation of a date for a given form, type and width
     */


    function getDateTranslation(date, locale, name, width, form, extended) {
      switch (name) {
        case TranslationType.Months:
          return getLocaleMonthNames(locale, form, width)[date.getMonth()];

        case TranslationType.Days:
          return getLocaleDayNames(locale, form, width)[date.getDay()];

        case TranslationType.DayPeriods:
          var currentHours = date.getHours();
          var currentMinutes = date.getMinutes();

          if (extended) {
            var rules = getLocaleExtraDayPeriodRules(locale);
            var dayPeriods = getLocaleExtraDayPeriods(locale, form, width);
            var index = rules.findIndex(function (rule) {
              if (Array.isArray(rule)) {
                // morning, afternoon, evening, night
                var _rule = _slicedToArray(rule, 2),
                    from = _rule[0],
                    to = _rule[1];

                var afterFrom = currentHours >= from.hours && currentMinutes >= from.minutes;
                var beforeTo = currentHours < to.hours || currentHours === to.hours && currentMinutes < to.minutes; // We must account for normal rules that span a period during the day (e.g. 6am-9am)
                // where `from` is less (earlier) than `to`. But also rules that span midnight (e.g.
                // 10pm - 5am) where `from` is greater (later!) than `to`.
                //
                // In the first case the current time must be BOTH after `from` AND before `to`
                // (e.g. 8am is after 6am AND before 10am).
                //
                // In the second case the current time must be EITHER after `from` OR before `to`
                // (e.g. 4am is before 5am but not after 10pm; and 11pm is not before 5am but it is
                // after 10pm).

                if (from.hours < to.hours) {
                  if (afterFrom && beforeTo) {
                    return true;
                  }
                } else if (afterFrom || beforeTo) {
                  return true;
                }
              } else {
                // noon or midnight
                if (rule.hours === currentHours && rule.minutes === currentMinutes) {
                  return true;
                }
              }

              return false;
            });

            if (index !== -1) {
              return dayPeriods[index];
            }
          } // if no rules for the day periods, we use am/pm by default


          return getLocaleDayPeriods(locale, form, width)[currentHours < 12 ? 0 : 1];

        case TranslationType.Eras:
          return getLocaleEraNames(locale, width)[date.getFullYear() <= 0 ? 0 : 1];

        default:
          // This default case is not needed by TypeScript compiler, as the switch is exhaustive.
          // However Closure Compiler does not understand that and reports an error in typed mode.
          // The `throw new Error` below works around the problem, and the unexpected: never variable
          // makes sure tsc still checks this code is unreachable.
          var unexpected = name;
          throw new Error("unexpected translation type ".concat(unexpected));
      }
    }
    /**
     * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or
     * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,
     * extended = +04:30)
     */


    function timeZoneGetter(width) {
      return function (date, locale, offset) {
        var zone = -1 * offset;
        var minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
        var hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);

        switch (width) {
          case ZoneWidth.Short:
            return (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + padNumber(Math.abs(zone % 60), 2, minusSign);

          case ZoneWidth.ShortGMT:
            return 'GMT' + (zone >= 0 ? '+' : '') + padNumber(hours, 1, minusSign);

          case ZoneWidth.Long:
            return 'GMT' + (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + ':' + padNumber(Math.abs(zone % 60), 2, minusSign);

          case ZoneWidth.Extended:
            if (offset === 0) {
              return 'Z';
            } else {
              return (zone >= 0 ? '+' : '') + padNumber(hours, 2, minusSign) + ':' + padNumber(Math.abs(zone % 60), 2, minusSign);
            }

          default:
            throw new Error("Unknown zone width \"".concat(width, "\""));
        }
      };
    }

    var JANUARY = 0;
    var THURSDAY = 4;

    function getFirstThursdayOfYear(year) {
      var firstDayOfYear = new Date(year, JANUARY, 1).getDay();
      return new Date(year, 0, 1 + (firstDayOfYear <= THURSDAY ? THURSDAY : THURSDAY + 7) - firstDayOfYear);
    }

    function getThursdayThisWeek(datetime) {
      return new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (THURSDAY - datetime.getDay()));
    }

    function weekGetter(size) {
      var monthBased = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return function (date, locale) {
        var result;

        if (monthBased) {
          var nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;
          var today = date.getDate();
          result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);
        } else {
          var firstThurs = getFirstThursdayOfYear(date.getFullYear());
          var thisThurs = getThursdayThisWeek(date);
          var diff = thisThurs.getTime() - firstThurs.getTime();
          result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week
        }

        return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
      };
    }

    var DATE_FORMATS = {}; // Based on CLDR formats:
    // See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
    // See also explanations: http://cldr.unicode.org/translation/date-time
    // TODO(ocombe): support all missing cldr formats: Y, U, Q, D, F, e, c, j, J, C, A, v, V, X, x

    function getDateFormatter(format) {
      if (DATE_FORMATS[format]) {
        return DATE_FORMATS[format];
      }

      var formatter;

      switch (format) {
        // Era name (AD/BC)
        case 'G':
        case 'GG':
        case 'GGG':
          formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);
          break;

        case 'GGGG':
          formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);
          break;

        case 'GGGGG':
          formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);
          break;
        // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)

        case 'y':
          formatter = dateGetter(DateType.FullYear, 1, 0, false, true);
          break;
        // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)

        case 'yy':
          formatter = dateGetter(DateType.FullYear, 2, 0, true, true);
          break;
        // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)

        case 'yyy':
          formatter = dateGetter(DateType.FullYear, 3, 0, false, true);
          break;
        // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)

        case 'yyyy':
          formatter = dateGetter(DateType.FullYear, 4, 0, false, true);
          break;
        // Month of the year (1-12), numeric

        case 'M':
        case 'L':
          formatter = dateGetter(DateType.Month, 1, 1);
          break;

        case 'MM':
        case 'LL':
          formatter = dateGetter(DateType.Month, 2, 1);
          break;
        // Month of the year (January, ...), string, format

        case 'MMM':
          formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);
          break;

        case 'MMMM':
          formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);
          break;

        case 'MMMMM':
          formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);
          break;
        // Month of the year (January, ...), string, standalone

        case 'LLL':
          formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);
          break;

        case 'LLLL':
          formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);
          break;

        case 'LLLLL':
          formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);
          break;
        // Week of the year (1, ... 52)

        case 'w':
          formatter = weekGetter(1);
          break;

        case 'ww':
          formatter = weekGetter(2);
          break;
        // Week of the month (1, ...)

        case 'W':
          formatter = weekGetter(1, true);
          break;
        // Day of the month (1-31)

        case 'd':
          formatter = dateGetter(DateType.Date, 1);
          break;

        case 'dd':
          formatter = dateGetter(DateType.Date, 2);
          break;
        // Day of the Week

        case 'E':
        case 'EE':
        case 'EEE':
          formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);
          break;

        case 'EEEE':
          formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);
          break;

        case 'EEEEE':
          formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);
          break;

        case 'EEEEEE':
          formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);
          break;
        // Generic period of the day (am-pm)

        case 'a':
        case 'aa':
        case 'aaa':
          formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);
          break;

        case 'aaaa':
          formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);
          break;

        case 'aaaaa':
          formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);
          break;
        // Extended period of the day (midnight, at night, ...), standalone

        case 'b':
        case 'bb':
        case 'bbb':
          formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);
          break;

        case 'bbbb':
          formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);
          break;

        case 'bbbbb':
          formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);
          break;
        // Extended period of the day (midnight, night, ...), standalone

        case 'B':
        case 'BB':
        case 'BBB':
          formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);
          break;

        case 'BBBB':
          formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);
          break;

        case 'BBBBB':
          formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);
          break;
        // Hour in AM/PM, (1-12)

        case 'h':
          formatter = dateGetter(DateType.Hours, 1, -12);
          break;

        case 'hh':
          formatter = dateGetter(DateType.Hours, 2, -12);
          break;
        // Hour of the day (0-23)

        case 'H':
          formatter = dateGetter(DateType.Hours, 1);
          break;
        // Hour in day, padded (00-23)

        case 'HH':
          formatter = dateGetter(DateType.Hours, 2);
          break;
        // Minute of the hour (0-59)

        case 'm':
          formatter = dateGetter(DateType.Minutes, 1);
          break;

        case 'mm':
          formatter = dateGetter(DateType.Minutes, 2);
          break;
        // Second of the minute (0-59)

        case 's':
          formatter = dateGetter(DateType.Seconds, 1);
          break;

        case 'ss':
          formatter = dateGetter(DateType.Seconds, 2);
          break;
        // Fractional second

        case 'S':
          formatter = dateGetter(DateType.FractionalSeconds, 1);
          break;

        case 'SS':
          formatter = dateGetter(DateType.FractionalSeconds, 2);
          break;

        case 'SSS':
          formatter = dateGetter(DateType.FractionalSeconds, 3);
          break;
        // Timezone ISO8601 short format (-0430)

        case 'Z':
        case 'ZZ':
        case 'ZZZ':
          formatter = timeZoneGetter(ZoneWidth.Short);
          break;
        // Timezone ISO8601 extended format (-04:30)

        case 'ZZZZZ':
          formatter = timeZoneGetter(ZoneWidth.Extended);
          break;
        // Timezone GMT short format (GMT+4)

        case 'O':
        case 'OO':
        case 'OOO': // Should be location, but fallback to format O instead because we don't have the data yet

        case 'z':
        case 'zz':
        case 'zzz':
          formatter = timeZoneGetter(ZoneWidth.ShortGMT);
          break;
        // Timezone GMT long format (GMT+0430)

        case 'OOOO':
        case 'ZZZZ': // Should be location, but fallback to format O instead because we don't have the data yet

        case 'zzzz':
          formatter = timeZoneGetter(ZoneWidth.Long);
          break;

        default:
          return null;
      }

      DATE_FORMATS[format] = formatter;
      return formatter;
    }

    function timezoneToOffset(timezone, fallback) {
      // Support: IE 9-11 only, Edge 13-15+
      // IE/Edge do not "understand" colon (`:`) in timezone
      timezone = timezone.replace(/:/g, '');
      var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
      return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
    }

    function addDateMinutes(date, minutes) {
      date = new Date(date.getTime());
      date.setMinutes(date.getMinutes() + minutes);
      return date;
    }

    function convertTimezoneToLocal(date, timezone, reverse) {
      var reverseValue = reverse ? -1 : 1;
      var dateTimezoneOffset = date.getTimezoneOffset();
      var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
      return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));
    }
    /**
     * Converts a value to date.
     *
     * Supported input formats:
     * - `Date`
     * - number: timestamp
     * - string: numeric (e.g. "1234"), ISO and date strings in a format supported by
     *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
     *   Note: ISO strings without time return a date without timeoffset.
     *
     * Throws if unable to convert to a date.
     */


    function toDate(value) {
      if (isDate(value)) {
        return value;
      }

      if (typeof value === 'number' && !isNaN(value)) {
        return new Date(value);
      }

      if (typeof value === 'string') {
        value = value.trim();
        var parsedNb = parseFloat(value); // any string that only contains numbers, like "1234" but not like "1234hello"

        if (!isNaN(value - parsedNb)) {
          return new Date(parsedNb);
        }

        if (/^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
          /* For ISO Strings without time the day, month and year must be extracted from the ISO String
          before Date creation to avoid time offset and errors in the new Date.
          If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
          date, some browsers (e.g. IE 9) will throw an invalid Date error.
          If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
          is applied.
          Note: ISO months are 0 for January, 1 for February, ... */
          var _value$split$map = value.split('-').map(function (val) {
            return +val;
          }),
              _value$split$map2 = _slicedToArray(_value$split$map, 3),
              y = _value$split$map2[0],
              m = _value$split$map2[1],
              d = _value$split$map2[2];

          return new Date(y, m - 1, d);
        }

        var match;

        if (match = value.match(ISO8601_DATE_REGEX)) {
          return isoStringToDate(match);
        }
      }

      var date = new Date(value);

      if (!isDate(date)) {
        throw new Error("Unable to convert \"".concat(value, "\" into a date"));
      }

      return date;
    }
    /**
     * Converts a date in ISO8601 to a Date.
     * Used instead of `Date.parse` because of browser discrepancies.
     */


    function isoStringToDate(match) {
      var date = new Date(0);
      var tzHour = 0;
      var tzMin = 0; // match[8] means that the string contains "Z" (UTC) or a timezone like "+01:00" or "+0100"

      var dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
      var timeSetter = match[8] ? date.setUTCHours : date.setHours; // if there is a timezone defined like "+01:00" or "+0100"

      if (match[9]) {
        tzHour = Number(match[9] + match[10]);
        tzMin = Number(match[9] + match[11]);
      }

      dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));
      var h = Number(match[4] || 0) - tzHour;
      var m = Number(match[5] || 0) - tzMin;
      var s = Number(match[6] || 0);
      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
      timeSetter.call(date, h, m, s, ms);
      return date;
    }

    function isDate(value) {
      return value instanceof Date && !isNaN(value.valueOf());
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
    var MAX_DIGITS = 22;
    var DECIMAL_SEP = '.';
    var ZERO_CHAR = '0';
    var PATTERN_SEP = ';';
    var GROUP_SEP = ',';
    var DIGIT_CHAR = '#';
    var CURRENCY_CHAR = '¤';
    var PERCENT_CHAR = '%';
    /**
     * Transforms a number to a locale string based on a style and a format.
     */

    function formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo) {
      var isPercent = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
      var formattedText = '';
      var isZero = false;

      if (!isFinite(value)) {
        formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);
      } else {
        var parsedNumber = parseNumber(value);

        if (isPercent) {
          parsedNumber = toPercent(parsedNumber);
        }

        var minInt = pattern.minInt;
        var minFraction = pattern.minFrac;
        var maxFraction = pattern.maxFrac;

        if (digitsInfo) {
          var parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);

          if (parts === null) {
            throw new Error("".concat(digitsInfo, " is not a valid digit info"));
          }

          var minIntPart = parts[1];
          var minFractionPart = parts[3];
          var maxFractionPart = parts[5];

          if (minIntPart != null) {
            minInt = parseIntAutoRadix(minIntPart);
          }

          if (minFractionPart != null) {
            minFraction = parseIntAutoRadix(minFractionPart);
          }

          if (maxFractionPart != null) {
            maxFraction = parseIntAutoRadix(maxFractionPart);
          } else if (minFractionPart != null && minFraction > maxFraction) {
            maxFraction = minFraction;
          }
        }

        roundNumber(parsedNumber, minFraction, maxFraction);
        var digits = parsedNumber.digits;
        var integerLen = parsedNumber.integerLen;
        var exponent = parsedNumber.exponent;
        var decimals = [];
        isZero = digits.every(function (d) {
          return !d;
        }); // pad zeros for small numbers

        for (; integerLen < minInt; integerLen++) {
          digits.unshift(0);
        } // pad zeros for small numbers


        for (; integerLen < 0; integerLen++) {
          digits.unshift(0);
        } // extract decimals digits


        if (integerLen > 0) {
          decimals = digits.splice(integerLen, digits.length);
        } else {
          decimals = digits;
          digits = [0];
        } // format the integer digits with grouping separators


        var groups = [];

        if (digits.length >= pattern.lgSize) {
          groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));
        }

        while (digits.length > pattern.gSize) {
          groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));
        }

        if (digits.length) {
          groups.unshift(digits.join(''));
        }

        formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol)); // append the decimal digits

        if (decimals.length) {
          formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');
        }

        if (exponent) {
          formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;
        }
      }

      if (value < 0 && !isZero) {
        formattedText = pattern.negPre + formattedText + pattern.negSuf;
      } else {
        formattedText = pattern.posPre + formattedText + pattern.posSuf;
      }

      return formattedText;
    }
    /**
     * @ngModule CommonModule
     * @description
     *
     * Formats a number as currency using locale rules.
     *
     * @param value The number to format.
     * @param locale A locale code for the locale format rules to use.
     * @param currency A string containing the currency symbol or its name,
     * such as "$" or "Canadian Dollar". Used in output string, but does not affect the operation
     * of the function.
     * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
     * currency code, such as `USD` for the US dollar and `EUR` for the euro.
     * Used to determine the number of digits in the decimal part.
     * @param digitInfo Decimal representation options, specified by a string in the following format:
     * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
     *
     * @returns The formatted currency value.
     *
     * @see `formatNumber()`
     * @see `DecimalPipe`
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function formatCurrency(value, locale, currency, currencyCode, digitsInfo) {
      var format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);
      var pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
      pattern.minFrac = getNumberOfCurrencyDigits(currencyCode);
      pattern.maxFrac = pattern.minFrac;
      var res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);
      return res.replace(CURRENCY_CHAR, currency) // if we have 2 time the currency character, the second one is ignored
      .replace(CURRENCY_CHAR, '') // If there is a spacing between currency character and the value and
      // the currency character is supressed by passing an empty string, the
      // spacing character would remain as part of the string. Then we
      // should remove it.
      .trim();
    }
    /**
     * @ngModule CommonModule
     * @description
     *
     * Formats a number as a percentage according to locale rules.
     *
     * @param value The number to format.
     * @param locale A locale code for the locale format rules to use.
     * @param digitInfo Decimal representation options, specified by a string in the following format:
     * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
     *
     * @returns The formatted percentage value.
     *
     * @see `formatNumber()`
     * @see `DecimalPipe`
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     * @publicApi
     *
     */


    function formatPercent(value, locale, digitsInfo) {
      var format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);
      var pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
      var res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);
      return res.replace(new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));
    }
    /**
     * @ngModule CommonModule
     * @description
     *
     * Formats a number as text, with group sizing, separator, and other
     * parameters based on the locale.
     *
     * @param value The number to format.
     * @param locale A locale code for the locale format rules to use.
     * @param digitInfo Decimal representation options, specified by a string in the following format:
     * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
     *
     * @returns The formatted text string.
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     *
     * @publicApi
     */


    function formatNumber(value, locale, digitsInfo) {
      var format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);
      var pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
      return formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);
    }

    function parseNumberFormat(format) {
      var minusSign = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';
      var p = {
        minInt: 1,
        minFrac: 0,
        maxFrac: 0,
        posPre: '',
        posSuf: '',
        negPre: '',
        negSuf: '',
        gSize: 0,
        lgSize: 0
      };
      var patternParts = format.split(PATTERN_SEP);
      var positive = patternParts[0];
      var negative = patternParts[1];
      var positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ? positive.split(DECIMAL_SEP) : [positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1), positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)],
          integer = positiveParts[0],
          fraction = positiveParts[1] || '';
      p.posPre = integer.substr(0, integer.indexOf(DIGIT_CHAR));

      for (var i = 0; i < fraction.length; i++) {
        var ch = fraction.charAt(i);

        if (ch === ZERO_CHAR) {
          p.minFrac = p.maxFrac = i + 1;
        } else if (ch === DIGIT_CHAR) {
          p.maxFrac = i + 1;
        } else {
          p.posSuf += ch;
        }
      }

      var groups = integer.split(GROUP_SEP);
      p.gSize = groups[1] ? groups[1].length : 0;
      p.lgSize = groups[2] || groups[1] ? (groups[2] || groups[1]).length : 0;

      if (negative) {
        var trunkLen = positive.length - p.posPre.length - p.posSuf.length,
            pos = negative.indexOf(DIGIT_CHAR);
        p.negPre = negative.substr(0, pos).replace(/'/g, '');
        p.negSuf = negative.substr(pos + trunkLen).replace(/'/g, '');
      } else {
        p.negPre = minusSign + p.posPre;
        p.negSuf = p.posSuf;
      }

      return p;
    } // Transforms a parsed number into a percentage by multiplying it by 100


    function toPercent(parsedNumber) {
      // if the number is 0, don't do anything
      if (parsedNumber.digits[0] === 0) {
        return parsedNumber;
      } // Getting the current number of decimals


      var fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;

      if (parsedNumber.exponent) {
        parsedNumber.exponent += 2;
      } else {
        if (fractionLen === 0) {
          parsedNumber.digits.push(0, 0);
        } else if (fractionLen === 1) {
          parsedNumber.digits.push(0);
        }

        parsedNumber.integerLen += 2;
      }

      return parsedNumber;
    }
    /**
     * Parses a number.
     * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/
     */


    function parseNumber(num) {
      var numStr = Math.abs(num) + '';
      var exponent = 0,
          digits,
          integerLen;
      var i, j, zeros; // Decimal point?

      if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {
        numStr = numStr.replace(DECIMAL_SEP, '');
      } // Exponential form?


      if ((i = numStr.search(/e/i)) > 0) {
        // Work out the exponent.
        if (integerLen < 0) integerLen = i;
        integerLen += +numStr.slice(i + 1);
        numStr = numStr.substring(0, i);
      } else if (integerLen < 0) {
        // There was no decimal point or exponent so it is an integer.
        integerLen = numStr.length;
      } // Count the number of leading zeros.


      for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {
        /* empty */
      }

      if (i === (zeros = numStr.length)) {
        // The digits are all zero.
        digits = [0];
        integerLen = 1;
      } else {
        // Count the number of trailing zeros
        zeros--;

        while (numStr.charAt(zeros) === ZERO_CHAR) {
          zeros--;
        } // Trailing zeros are insignificant so ignore them


        integerLen -= i;
        digits = []; // Convert string to array of digits without leading/trailing zeros.

        for (j = 0; i <= zeros; i++, j++) {
          digits[j] = Number(numStr.charAt(i));
        }
      } // If the number overflows the maximum allowed digits then use an exponent.


      if (integerLen > MAX_DIGITS) {
        digits = digits.splice(0, MAX_DIGITS - 1);
        exponent = integerLen - 1;
        integerLen = 1;
      }

      return {
        digits: digits,
        exponent: exponent,
        integerLen: integerLen
      };
    }
    /**
     * Round the parsed number to the specified number of decimal places
     * This function changes the parsedNumber in-place
     */


    function roundNumber(parsedNumber, minFrac, maxFrac) {
      if (minFrac > maxFrac) {
        throw new Error("The minimum number of digits after fraction (".concat(minFrac, ") is higher than the maximum (").concat(maxFrac, ")."));
      }

      var digits = parsedNumber.digits;
      var fractionLen = digits.length - parsedNumber.integerLen;
      var fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac); // The index of the digit to where rounding is to occur

      var roundAt = fractionSize + parsedNumber.integerLen;
      var digit = digits[roundAt];

      if (roundAt > 0) {
        // Drop fractional digits beyond `roundAt`
        digits.splice(Math.max(parsedNumber.integerLen, roundAt)); // Set non-fractional digits beyond `roundAt` to 0

        for (var j = roundAt; j < digits.length; j++) {
          digits[j] = 0;
        }
      } else {
        // We rounded to zero so reset the parsedNumber
        fractionLen = Math.max(0, fractionLen);
        parsedNumber.integerLen = 1;
        digits.length = Math.max(1, roundAt = fractionSize + 1);
        digits[0] = 0;

        for (var i = 1; i < roundAt; i++) {
          digits[i] = 0;
        }
      }

      if (digit >= 5) {
        if (roundAt - 1 < 0) {
          for (var k = 0; k > roundAt; k--) {
            digits.unshift(0);
            parsedNumber.integerLen++;
          }

          digits.unshift(1);
          parsedNumber.integerLen++;
        } else {
          digits[roundAt - 1]++;
        }
      } // Pad out with zeros to get the required fraction length


      for (; fractionLen < Math.max(0, fractionSize); fractionLen++) {
        digits.push(0);
      }

      var dropTrailingZeros = fractionSize !== 0; // Minimal length = nb of decimals required + current nb of integers
      // Any number besides that is optional and can be removed if it's a trailing 0

      var minLen = minFrac + parsedNumber.integerLen; // Do any carrying, e.g. a digit was rounded up to 10

      var carry = digits.reduceRight(function (carry, d, i, digits) {
        d = d + carry;
        digits[i] = d < 10 ? d : d - 10; // d % 10

        if (dropTrailingZeros) {
          // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)
          if (digits[i] === 0 && i >= minLen) {
            digits.pop();
          } else {
            dropTrailingZeros = false;
          }
        }

        return d >= 10 ? 1 : 0; // Math.floor(d / 10);
      }, 0);

      if (carry) {
        digits.unshift(carry);
        parsedNumber.integerLen++;
      }
    }

    function parseIntAutoRadix(text) {
      var result = parseInt(text);

      if (isNaN(result)) {
        throw new Error('Invalid integer literal when parsing ' + text);
      }

      return result;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @publicApi
     */


    var NgLocalization = function NgLocalization() {
      _classCallCheck(this, NgLocalization);
    };
    /**
     * Returns the plural category for a given value.
     * - "=value" when the case exists,
     * - the plural category otherwise
     */


    function getPluralCategory(value, cases, ngLocalization, locale) {
      var key = "=".concat(value);

      if (cases.indexOf(key) > -1) {
        return key;
      }

      key = ngLocalization.getPluralCategory(value, locale);

      if (cases.indexOf(key) > -1) {
        return key;
      }

      if (cases.indexOf('other') > -1) {
        return 'other';
      }

      throw new Error("No plural message found for value \"".concat(value, "\""));
    }

    var NgLocaleLocalization = /*@__PURE__*/function () {
      var NgLocaleLocalization = /*#__PURE__*/function (_NgLocalization) {
        _inherits(NgLocaleLocalization, _NgLocalization);

        var _super4 = _createSuper(NgLocaleLocalization);

        function NgLocaleLocalization(locale) {
          var _this6;

          _classCallCheck(this, NgLocaleLocalization);

          _this6 = _super4.call(this);
          _this6.locale = locale;
          return _this6;
        }

        _createClass2(NgLocaleLocalization, [{
          key: "getPluralCategory",
          value: function getPluralCategory(value, locale) {
            var plural = getLocalePluralCase(locale || this.locale)(value);

            switch (plural) {
              case Plural.Zero:
                return 'zero';

              case Plural.One:
                return 'one';

              case Plural.Two:
                return 'two';

              case Plural.Few:
                return 'few';

              case Plural.Many:
                return 'many';

              default:
                return 'other';
            }
          }
        }]);

        return NgLocaleLocalization;
      }(NgLocalization);

      NgLocaleLocalization.ɵfac = function NgLocaleLocalization_Factory(t) {
        return new (t || NgLocaleLocalization)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]));
      };

      NgLocaleLocalization.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
        token: NgLocaleLocalization,
        factory: NgLocaleLocalization.ɵfac
      });
      return NgLocaleLocalization;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Register global data to be used internally by Angular. See the
     * ["I18n guide"](guide/i18n#i18n-pipes) to know how to import additional locale data.
     *
     * The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1
     *
     * @publicApi
     */


    function registerLocaleData(data, localeId, extraData) {
      return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵregisterLocaleData"])(data, localeId, extraData);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function parseCookieValue(cookieStr, name) {
      name = encodeURIComponent(name);

      var _iterator = _createForOfIteratorHelper(cookieStr.split(';')),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var cookie = _step.value;
          var eqIndex = cookie.indexOf('=');

          var _ref2 = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)],
              _ref3 = _slicedToArray(_ref2, 2),
              cookieName = _ref3[0],
              cookieValue = _ref3[1];

          if (cookieName.trim() === name) {
            return decodeURIComponent(cookieValue);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return null;
    }

    var NgClass = /*@__PURE__*/function () {
      var NgClass = /*#__PURE__*/function () {
        function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
          _classCallCheck(this, NgClass);

          this._iterableDiffers = _iterableDiffers;
          this._keyValueDiffers = _keyValueDiffers;
          this._ngEl = _ngEl;
          this._renderer = _renderer;
          this._iterableDiffer = null;
          this._keyValueDiffer = null;
          this._initialClasses = [];
          this._rawClass = null;
        }

        _createClass2(NgClass, [{
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (this._iterableDiffer) {
              var iterableChanges = this._iterableDiffer.diff(this._rawClass);

              if (iterableChanges) {
                this._applyIterableChanges(iterableChanges);
              }
            } else if (this._keyValueDiffer) {
              var keyValueChanges = this._keyValueDiffer.diff(this._rawClass);

              if (keyValueChanges) {
                this._applyKeyValueChanges(keyValueChanges);
              }
            }
          }
        }, {
          key: "_applyKeyValueChanges",
          value: function _applyKeyValueChanges(changes) {
            var _this7 = this;

            changes.forEachAddedItem(function (record) {
              return _this7._toggleClass(record.key, record.currentValue);
            });
            changes.forEachChangedItem(function (record) {
              return _this7._toggleClass(record.key, record.currentValue);
            });
            changes.forEachRemovedItem(function (record) {
              if (record.previousValue) {
                _this7._toggleClass(record.key, false);
              }
            });
          }
        }, {
          key: "_applyIterableChanges",
          value: function _applyIterableChanges(changes) {
            var _this8 = this;

            changes.forEachAddedItem(function (record) {
              if (typeof record.item === 'string') {
                _this8._toggleClass(record.item, true);
              } else {
                throw new Error("NgClass can only toggle CSS classes expressed as strings, got ".concat(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵstringify"])(record.item)));
              }
            });
            changes.forEachRemovedItem(function (record) {
              return _this8._toggleClass(record.item, false);
            });
          }
          /**
           * Applies a collection of CSS classes to the DOM element.
           *
           * For argument of type Set and Array CSS class names contained in those collections are always
           * added.
           * For argument of type Map CSS class name in the map's key is toggled based on the value (added
           * for truthy and removed for falsy).
           */

        }, {
          key: "_applyClasses",
          value: function _applyClasses(rawClassVal) {
            var _this9 = this;

            if (rawClassVal) {
              if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                rawClassVal.forEach(function (klass) {
                  return _this9._toggleClass(klass, true);
                });
              } else {
                Object.keys(rawClassVal).forEach(function (klass) {
                  return _this9._toggleClass(klass, !!rawClassVal[klass]);
                });
              }
            }
          }
          /**
           * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup
           * purposes.
           */

        }, {
          key: "_removeClasses",
          value: function _removeClasses(rawClassVal) {
            var _this10 = this;

            if (rawClassVal) {
              if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                rawClassVal.forEach(function (klass) {
                  return _this10._toggleClass(klass, false);
                });
              } else {
                Object.keys(rawClassVal).forEach(function (klass) {
                  return _this10._toggleClass(klass, false);
                });
              }
            }
          }
        }, {
          key: "_toggleClass",
          value: function _toggleClass(klass, enabled) {
            var _this11 = this;

            klass = klass.trim();

            if (klass) {
              klass.split(/\s+/g).forEach(function (klass) {
                if (enabled) {
                  _this11._renderer.addClass(_this11._ngEl.nativeElement, klass);
                } else {
                  _this11._renderer.removeClass(_this11._ngEl.nativeElement, klass);
                }
              });
            }
          }
        }, {
          key: "klass",
          set: function set(value) {
            this._removeClasses(this._initialClasses);

            this._initialClasses = typeof value === 'string' ? value.split(/\s+/) : [];

            this._applyClasses(this._initialClasses);

            this._applyClasses(this._rawClass);
          }
        }, {
          key: "ngClass",
          set: function set(value) {
            this._removeClasses(this._rawClass);

            this._applyClasses(this._initialClasses);

            this._iterableDiffer = null;
            this._keyValueDiffer = null;
            this._rawClass = typeof value === 'string' ? value.split(/\s+/) : value;

            if (this._rawClass) {
              if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisListLikeIterable"])(this._rawClass)) {
                this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();
              } else {
                this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();
              }
            }
          }
        }]);

        return NgClass;
      }();

      NgClass.ɵfac = function NgClass_Factory(t) {
        return new (t || NgClass)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]));
      };

      NgClass.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgClass,
        selectors: [["", "ngClass", ""]],
        inputs: {
          klass: ["class", "klass"],
          ngClass: "ngClass"
        }
      });
      return NgClass;
    }();

    var NgComponentOutlet = /*@__PURE__*/function () {
      var NgComponentOutlet = /*#__PURE__*/function () {
        function NgComponentOutlet(_viewContainerRef) {
          _classCallCheck(this, NgComponentOutlet);

          this._viewContainerRef = _viewContainerRef;
          this._componentRef = null;
          this._moduleRef = null;
        }

        _createClass2(NgComponentOutlet, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            this._viewContainerRef.clear();

            this._componentRef = null;

            if (this.ngComponentOutlet) {
              var elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;

              if (changes['ngComponentOutletNgModuleFactory']) {
                if (this._moduleRef) this._moduleRef.destroy();

                if (this.ngComponentOutletNgModuleFactory) {
                  var parentModule = elInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModuleRef"]);
                  this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);
                } else {
                  this._moduleRef = null;
                }
              }

              var componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver : elInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]);
              var componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);
              this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this._moduleRef) this._moduleRef.destroy();
          }
        }]);

        return NgComponentOutlet;
      }();

      NgComponentOutlet.ɵfac = function NgComponentOutlet_Factory(t) {
        return new (t || NgComponentOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]));
      };

      NgComponentOutlet.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgComponentOutlet,
        selectors: [["", "ngComponentOutlet", ""]],
        inputs: {
          ngComponentOutlet: "ngComponentOutlet",
          ngComponentOutletInjector: "ngComponentOutletInjector",
          ngComponentOutletContent: "ngComponentOutletContent",
          ngComponentOutletNgModuleFactory: "ngComponentOutletNgModuleFactory"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });
      return NgComponentOutlet;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @publicApi
     */


    var NgForOfContext = /*#__PURE__*/function () {
      function NgForOfContext($implicit, ngForOf, index, count) {
        _classCallCheck(this, NgForOfContext);

        this.$implicit = $implicit;
        this.ngForOf = ngForOf;
        this.index = index;
        this.count = count;
      }

      _createClass2(NgForOfContext, [{
        key: "first",
        get: function get() {
          return this.index === 0;
        }
      }, {
        key: "last",
        get: function get() {
          return this.index === this.count - 1;
        }
      }, {
        key: "even",
        get: function get() {
          return this.index % 2 === 0;
        }
      }, {
        key: "odd",
        get: function get() {
          return !this.even;
        }
      }]);

      return NgForOfContext;
    }();

    var NgForOf = /*@__PURE__*/function () {
      var NgForOf = /*#__PURE__*/function () {
        function NgForOf(_viewContainer, _template, _differs) {
          _classCallCheck(this, NgForOf);

          this._viewContainer = _viewContainer;
          this._template = _template;
          this._differs = _differs;
          this._ngForOf = null;
          this._ngForOfDirty = true;
          this._differ = null;
        }
        /**
         * The value of the iterable expression, which can be used as a
         * [template input variable](guide/structural-directives#template-input-variable).
         */


        _createClass2(NgForOf, [{
          key: "ngDoCheck",

          /**
           * Applies the changes when needed.
           */
          value: function ngDoCheck() {
            if (this._ngForOfDirty) {
              this._ngForOfDirty = false; // React on ngForOf changes only once all inputs have been initialized

              var value = this._ngForOf;

              if (!this._differ && value) {
                try {
                  this._differ = this._differs.find(value).create(this.ngForTrackBy);
                } catch (_a) {
                  throw new Error("Cannot find a differ supporting object '".concat(value, "' of type '").concat(getTypeName(value), "'. NgFor only supports binding to Iterables such as Arrays."));
                }
              }
            }

            if (this._differ) {
              var changes = this._differ.diff(this._ngForOf);

              if (changes) this._applyChanges(changes);
            }
          }
        }, {
          key: "_applyChanges",
          value: function _applyChanges(changes) {
            var _this12 = this;

            var insertTuples = [];
            changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
              if (item.previousIndex == null) {
                // NgForOf is never "null" or "undefined" here because the differ detected
                // that a new item needs to be inserted from the iterable. This implies that
                // there is an iterable value for "_ngForOf".
                var view = _this12._viewContainer.createEmbeddedView(_this12._template, new NgForOfContext(null, _this12._ngForOf, -1, -1), currentIndex === null ? undefined : currentIndex);

                var tuple = new RecordViewTuple(item, view);
                insertTuples.push(tuple);
              } else if (currentIndex == null) {
                _this12._viewContainer.remove(adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex);
              } else if (adjustedPreviousIndex !== null) {
                var _view2 = _this12._viewContainer.get(adjustedPreviousIndex);

                _this12._viewContainer.move(_view2, currentIndex);

                var _tuple = new RecordViewTuple(item, _view2);

                insertTuples.push(_tuple);
              }
            });

            for (var i = 0; i < insertTuples.length; i++) {
              this._perViewChange(insertTuples[i].view, insertTuples[i].record);
            }

            for (var _i2 = 0, ilen = this._viewContainer.length; _i2 < ilen; _i2++) {
              var viewRef = this._viewContainer.get(_i2);

              viewRef.context.index = _i2;
              viewRef.context.count = ilen;
              viewRef.context.ngForOf = this._ngForOf;
            }

            changes.forEachIdentityChange(function (record) {
              var viewRef = _this12._viewContainer.get(record.currentIndex);

              viewRef.context.$implicit = record.item;
            });
          }
        }, {
          key: "_perViewChange",
          value: function _perViewChange(view, record) {
            view.context.$implicit = record.item;
          }
          /**
           * Asserts the correct type of the context for the template that `NgForOf` will render.
           *
           * The presence of this method is a signal to the Ivy template type-check compiler that the
           * `NgForOf` structural directive renders its template with a specific context type.
           */

        }, {
          key: "ngForOf",
          set: function set(ngForOf) {
            this._ngForOf = ngForOf;
            this._ngForOfDirty = true;
          }
          /**
           * A function that defines how to track changes for items in the iterable.
           *
           * When items are added, moved, or removed in the iterable,
           * the directive must re-render the appropriate DOM nodes.
           * To minimize churn in the DOM, only nodes that have changed
           * are re-rendered.
           *
           * By default, the change detector assumes that
           * the object instance identifies the node in the iterable.
           * When this function is supplied, the directive uses
           * the result of calling this function to identify the item node,
           * rather than the identity of the object itself.
           *
           * The function receives two inputs,
           * the iteration index and the node object ID.
           */

        }, {
          key: "ngForTrackBy",
          set: function set(fn) {
            if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["isDevMode"])() && fn != null && typeof fn !== 'function') {
              // TODO(vicb): use a log service once there is a public one available
              if (console && console.warn) {
                console.warn("trackBy must be a function, but received ".concat(JSON.stringify(fn), ". ") + "See https://angular.io/api/common/NgForOf#change-propagation for more information.");
              }
            }

            this._trackByFn = fn;
          },
          get: function get() {
            return this._trackByFn;
          }
          /**
           * A reference to the template that is stamped out for each item in the iterable.
           * @see [template reference variable](guide/template-reference-variables)
           */

        }, {
          key: "ngForTemplate",
          set: function set(value) {
            // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1
            // The current type is too restrictive; a template that just uses index, for example,
            // should be acceptable.
            if (value) {
              this._template = value;
            }
          }
        }], [{
          key: "ngTemplateContextGuard",
          value: function ngTemplateContextGuard(dir, ctx) {
            return true;
          }
        }]);

        return NgForOf;
      }();

      NgForOf.ɵfac = function NgForOf_Factory(t) {
        return new (t || NgForOf)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"]));
      };

      NgForOf.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgForOf,
        selectors: [["", "ngFor", "", "ngForOf", ""]],
        inputs: {
          ngForOf: "ngForOf",
          ngForTrackBy: "ngForTrackBy",
          ngForTemplate: "ngForTemplate"
        }
      });
      return NgForOf;
    }();

    var RecordViewTuple = function RecordViewTuple(record, view) {
      _classCallCheck(this, RecordViewTuple);

      this.record = record;
      this.view = view;
    };

    function getTypeName(type) {
      return type['name'] || typeof type;
    }

    var NgIf = /*@__PURE__*/function () {
      var NgIf = /*#__PURE__*/function () {
        function NgIf(_viewContainer, templateRef) {
          _classCallCheck(this, NgIf);

          this._viewContainer = _viewContainer;
          this._context = new NgIfContext();
          this._thenTemplateRef = null;
          this._elseTemplateRef = null;
          this._thenViewRef = null;
          this._elseViewRef = null;
          this._thenTemplateRef = templateRef;
        }
        /**
         * The Boolean expression to evaluate as the condition for showing a template.
         */


        _createClass2(NgIf, [{
          key: "_updateView",
          value: function _updateView() {
            if (this._context.$implicit) {
              if (!this._thenViewRef) {
                this._viewContainer.clear();

                this._elseViewRef = null;

                if (this._thenTemplateRef) {
                  this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
                }
              }
            } else {
              if (!this._elseViewRef) {
                this._viewContainer.clear();

                this._thenViewRef = null;

                if (this._elseTemplateRef) {
                  this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
                }
              }
            }
          }
          /**
           * Asserts the correct type of the context for the template that `NgIf` will render.
           *
           * The presence of this method is a signal to the Ivy template type-check compiler that the
           * `NgIf` structural directive renders its template with a specific context type.
           */

        }, {
          key: "ngIf",
          set: function set(condition) {
            this._context.$implicit = this._context.ngIf = condition;

            this._updateView();
          }
          /**
           * A template to show if the condition expression evaluates to true.
           */

        }, {
          key: "ngIfThen",
          set: function set(templateRef) {
            assertTemplate('ngIfThen', templateRef);
            this._thenTemplateRef = templateRef;
            this._thenViewRef = null; // clear previous view if any.

            this._updateView();
          }
          /**
           * A template to show if the condition expression evaluates to false.
           */

        }, {
          key: "ngIfElse",
          set: function set(templateRef) {
            assertTemplate('ngIfElse', templateRef);
            this._elseTemplateRef = templateRef;
            this._elseViewRef = null; // clear previous view if any.

            this._updateView();
          }
        }], [{
          key: "ngTemplateContextGuard",
          value: function ngTemplateContextGuard(dir, ctx) {
            return true;
          }
        }]);

        return NgIf;
      }();

      NgIf.ɵfac = function NgIf_Factory(t) {
        return new (t || NgIf)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]));
      };

      NgIf.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgIf,
        selectors: [["", "ngIf", ""]],
        inputs: {
          ngIf: "ngIf",
          ngIfThen: "ngIfThen",
          ngIfElse: "ngIfElse"
        }
      });
      return NgIf;
    }();
    /**
     * @publicApi
     */


    var NgIfContext = function NgIfContext() {
      _classCallCheck(this, NgIfContext);

      this.$implicit = null;
      this.ngIf = null;
    };

    function assertTemplate(property, templateRef) {
      var isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);

      if (!isTemplateRefOrNull) {
        throw new Error("".concat(property, " must be a TemplateRef, but received '").concat(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵstringify"])(templateRef), "'."));
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var SwitchView = /*#__PURE__*/function () {
      function SwitchView(_viewContainerRef, _templateRef) {
        _classCallCheck(this, SwitchView);

        this._viewContainerRef = _viewContainerRef;
        this._templateRef = _templateRef;
        this._created = false;
      }

      _createClass2(SwitchView, [{
        key: "create",
        value: function create() {
          this._created = true;

          this._viewContainerRef.createEmbeddedView(this._templateRef);
        }
      }, {
        key: "destroy",
        value: function destroy() {
          this._created = false;

          this._viewContainerRef.clear();
        }
      }, {
        key: "enforceState",
        value: function enforceState(created) {
          if (created && !this._created) {
            this.create();
          } else if (!created && this._created) {
            this.destroy();
          }
        }
      }]);

      return SwitchView;
    }();

    var NgSwitch = /*@__PURE__*/function () {
      var NgSwitch = /*#__PURE__*/function () {
        function NgSwitch() {
          _classCallCheck(this, NgSwitch);

          this._defaultUsed = false;
          this._caseCount = 0;
          this._lastCaseCheckIndex = 0;
          this._lastCasesMatched = false;
        }

        _createClass2(NgSwitch, [{
          key: "_addCase",

          /** @internal */
          value: function _addCase() {
            return this._caseCount++;
          }
          /** @internal */

        }, {
          key: "_addDefault",
          value: function _addDefault(view) {
            if (!this._defaultViews) {
              this._defaultViews = [];
            }

            this._defaultViews.push(view);
          }
          /** @internal */

        }, {
          key: "_matchCase",
          value: function _matchCase(value) {
            var matched = value == this._ngSwitch;
            this._lastCasesMatched = this._lastCasesMatched || matched;
            this._lastCaseCheckIndex++;

            if (this._lastCaseCheckIndex === this._caseCount) {
              this._updateDefaultCases(!this._lastCasesMatched);

              this._lastCaseCheckIndex = 0;
              this._lastCasesMatched = false;
            }

            return matched;
          }
        }, {
          key: "_updateDefaultCases",
          value: function _updateDefaultCases(useDefault) {
            if (this._defaultViews && useDefault !== this._defaultUsed) {
              this._defaultUsed = useDefault;

              for (var i = 0; i < this._defaultViews.length; i++) {
                var defaultView = this._defaultViews[i];
                defaultView.enforceState(useDefault);
              }
            }
          }
        }, {
          key: "ngSwitch",
          set: function set(newValue) {
            this._ngSwitch = newValue;

            if (this._caseCount === 0) {
              this._updateDefaultCases(true);
            }
          }
        }]);

        return NgSwitch;
      }();

      NgSwitch.ɵfac = function NgSwitch_Factory(t) {
        return new (t || NgSwitch)();
      };

      NgSwitch.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgSwitch,
        selectors: [["", "ngSwitch", ""]],
        inputs: {
          ngSwitch: "ngSwitch"
        }
      });
      return NgSwitch;
    }();

    var NgSwitchCase = /*@__PURE__*/function () {
      var NgSwitchCase = /*#__PURE__*/function () {
        function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
          _classCallCheck(this, NgSwitchCase);

          this.ngSwitch = ngSwitch;

          ngSwitch._addCase();

          this._view = new SwitchView(viewContainer, templateRef);
        }
        /**
         * Performs case matching. For internal use only.
         */


        _createClass2(NgSwitchCase, [{
          key: "ngDoCheck",
          value: function ngDoCheck() {
            this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
          }
        }]);

        return NgSwitchCase;
      }();

      NgSwitchCase.ɵfac = function NgSwitchCase_Factory(t) {
        return new (t || NgSwitchCase)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgSwitch, 1));
      };

      NgSwitchCase.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgSwitchCase,
        selectors: [["", "ngSwitchCase", ""]],
        inputs: {
          ngSwitchCase: "ngSwitchCase"
        }
      });
      return NgSwitchCase;
    }();

    var NgSwitchDefault = /*@__PURE__*/function () {
      var NgSwitchDefault = function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
        _classCallCheck(this, NgSwitchDefault);

        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
      };

      NgSwitchDefault.ɵfac = function NgSwitchDefault_Factory(t) {
        return new (t || NgSwitchDefault)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgSwitch, 1));
      };

      NgSwitchDefault.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgSwitchDefault,
        selectors: [["", "ngSwitchDefault", ""]]
      });
      return NgSwitchDefault;
    }();

    var NgPlural = /*@__PURE__*/function () {
      var NgPlural = /*#__PURE__*/function () {
        function NgPlural(_localization) {
          _classCallCheck(this, NgPlural);

          this._localization = _localization;
          this._caseViews = {};
        }

        _createClass2(NgPlural, [{
          key: "addCase",
          value: function addCase(value, switchView) {
            this._caseViews[value] = switchView;
          }
        }, {
          key: "_updateView",
          value: function _updateView() {
            this._clearViews();

            var cases = Object.keys(this._caseViews);
            var key = getPluralCategory(this._switchValue, cases, this._localization);

            this._activateView(this._caseViews[key]);
          }
        }, {
          key: "_clearViews",
          value: function _clearViews() {
            if (this._activeView) this._activeView.destroy();
          }
        }, {
          key: "_activateView",
          value: function _activateView(view) {
            if (view) {
              this._activeView = view;

              this._activeView.create();
            }
          }
        }, {
          key: "ngPlural",
          set: function set(value) {
            this._switchValue = value;

            this._updateView();
          }
        }]);

        return NgPlural;
      }();

      NgPlural.ɵfac = function NgPlural_Factory(t) {
        return new (t || NgPlural)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgLocalization));
      };

      NgPlural.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgPlural,
        selectors: [["", "ngPlural", ""]],
        inputs: {
          ngPlural: "ngPlural"
        }
      });
      return NgPlural;
    }();

    var NgPluralCase = /*@__PURE__*/function () {
      var NgPluralCase = function NgPluralCase(value, template, viewContainer, ngPlural) {
        _classCallCheck(this, NgPluralCase);

        this.value = value;
        var isANumber = !isNaN(Number(value));
        ngPlural.addCase(isANumber ? "=".concat(value) : value, new SwitchView(viewContainer, template));
      };

      NgPluralCase.ɵfac = function NgPluralCase_Factory(t) {
        return new (t || NgPluralCase)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinjectAttribute"]('ngPluralCase'), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgPlural, 1));
      };

      NgPluralCase.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgPluralCase,
        selectors: [["", "ngPluralCase", ""]]
      });
      return NgPluralCase;
    }();

    var NgStyle = /*@__PURE__*/function () {
      var NgStyle = /*#__PURE__*/function () {
        function NgStyle(_ngEl, _differs, _renderer) {
          _classCallCheck(this, NgStyle);

          this._ngEl = _ngEl;
          this._differs = _differs;
          this._renderer = _renderer;
          this._ngStyle = null;
          this._differ = null;
        }

        _createClass2(NgStyle, [{
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (this._differ) {
              var changes = this._differ.diff(this._ngStyle);

              if (changes) {
                this._applyChanges(changes);
              }
            }
          }
        }, {
          key: "_setStyle",
          value: function _setStyle(nameAndUnit, value) {
            var _nameAndUnit$split = nameAndUnit.split('.'),
                _nameAndUnit$split2 = _slicedToArray(_nameAndUnit$split, 2),
                name = _nameAndUnit$split2[0],
                unit = _nameAndUnit$split2[1];

            value = value != null && unit ? "".concat(value).concat(unit) : value;

            if (value != null) {
              this._renderer.setStyle(this._ngEl.nativeElement, name, value);
            } else {
              this._renderer.removeStyle(this._ngEl.nativeElement, name);
            }
          }
        }, {
          key: "_applyChanges",
          value: function _applyChanges(changes) {
            var _this13 = this;

            changes.forEachRemovedItem(function (record) {
              return _this13._setStyle(record.key, null);
            });
            changes.forEachAddedItem(function (record) {
              return _this13._setStyle(record.key, record.currentValue);
            });
            changes.forEachChangedItem(function (record) {
              return _this13._setStyle(record.key, record.currentValue);
            });
          }
        }, {
          key: "ngStyle",
          set: function set(values) {
            this._ngStyle = values;

            if (!this._differ && values) {
              this._differ = this._differs.find(values).create();
            }
          }
        }]);

        return NgStyle;
      }();

      NgStyle.ɵfac = function NgStyle_Factory(t) {
        return new (t || NgStyle)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]));
      };

      NgStyle.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgStyle,
        selectors: [["", "ngStyle", ""]],
        inputs: {
          ngStyle: "ngStyle"
        }
      });
      return NgStyle;
    }();

    var NgTemplateOutlet = /*@__PURE__*/function () {
      var NgTemplateOutlet = /*#__PURE__*/function () {
        function NgTemplateOutlet(_viewContainerRef) {
          _classCallCheck(this, NgTemplateOutlet);

          this._viewContainerRef = _viewContainerRef;
          this._viewRef = null;
          /**
           * A context object to attach to the {@link EmbeddedViewRef}. This should be an
           * object, the object's keys will be available for binding by the local template `let`
           * declarations.
           * Using the key `$implicit` in the context object will set its value as default.
           */

          this.ngTemplateOutletContext = null;
          /**
           * A string defining the template reference and optionally the context object for the template.
           */

          this.ngTemplateOutlet = null;
        }

        _createClass2(NgTemplateOutlet, [{
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            var recreateView = this._shouldRecreateView(changes);

            if (recreateView) {
              var viewContainerRef = this._viewContainerRef;

              if (this._viewRef) {
                viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));
              }

              this._viewRef = this.ngTemplateOutlet ? viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext) : null;
            } else if (this._viewRef && this.ngTemplateOutletContext) {
              this._updateExistingContext(this.ngTemplateOutletContext);
            }
          }
          /**
           * We need to re-create existing embedded view if:
           * - templateRef has changed
           * - context has changes
           *
           * We mark context object as changed when the corresponding object
           * shape changes (new properties are added or existing properties are removed).
           * In other words we consider context with the same properties as "the same" even
           * if object reference changes (see https://github.com/angular/angular/issues/13407).
           */

        }, {
          key: "_shouldRecreateView",
          value: function _shouldRecreateView(changes) {
            var ctxChange = changes['ngTemplateOutletContext'];
            return !!changes['ngTemplateOutlet'] || ctxChange && this._hasContextShapeChanged(ctxChange);
          }
        }, {
          key: "_hasContextShapeChanged",
          value: function _hasContextShapeChanged(ctxChange) {
            var prevCtxKeys = Object.keys(ctxChange.previousValue || {});
            var currCtxKeys = Object.keys(ctxChange.currentValue || {});

            if (prevCtxKeys.length === currCtxKeys.length) {
              var _iterator2 = _createForOfIteratorHelper(currCtxKeys),
                  _step2;

              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  var propName = _step2.value;

                  if (prevCtxKeys.indexOf(propName) === -1) {
                    return true;
                  }
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }

              return false;
            }

            return true;
          }
        }, {
          key: "_updateExistingContext",
          value: function _updateExistingContext(ctx) {
            for (var _i3 = 0, _Object$keys = Object.keys(ctx); _i3 < _Object$keys.length; _i3++) {
              var propName = _Object$keys[_i3];
              this._viewRef.context[propName] = this.ngTemplateOutletContext[propName];
            }
          }
        }]);

        return NgTemplateOutlet;
      }();

      NgTemplateOutlet.ɵfac = function NgTemplateOutlet_Factory(t) {
        return new (t || NgTemplateOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]));
      };

      NgTemplateOutlet.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: NgTemplateOutlet,
        selectors: [["", "ngTemplateOutlet", ""]],
        inputs: {
          ngTemplateOutletContext: "ngTemplateOutletContext",
          ngTemplateOutlet: "ngTemplateOutlet"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });
      return NgTemplateOutlet;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * A collection of Angular directives that are likely to be used in each and every Angular
     * application.
     */


    var COMMON_DIRECTIVES = [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase];
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    function invalidPipeArgumentError(type, value) {
      return Error("InvalidPipeArgument: '".concat(value, "' for pipe '").concat(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵstringify"])(type), "'"));
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var ObservableStrategy = /*#__PURE__*/function () {
      function ObservableStrategy() {
        _classCallCheck(this, ObservableStrategy);
      }

      _createClass2(ObservableStrategy, [{
        key: "createSubscription",
        value: function createSubscription(async, updateLatestValue) {
          return async.subscribe({
            next: updateLatestValue,
            error: function error(e) {
              throw e;
            }
          });
        }
      }, {
        key: "dispose",
        value: function dispose(subscription) {
          subscription.unsubscribe();
        }
      }, {
        key: "onDestroy",
        value: function onDestroy(subscription) {
          subscription.unsubscribe();
        }
      }]);

      return ObservableStrategy;
    }();

    var PromiseStrategy = /*#__PURE__*/function () {
      function PromiseStrategy() {
        _classCallCheck(this, PromiseStrategy);
      }

      _createClass2(PromiseStrategy, [{
        key: "createSubscription",
        value: function createSubscription(async, updateLatestValue) {
          return async.then(updateLatestValue, function (e) {
            throw e;
          });
        }
      }, {
        key: "dispose",
        value: function dispose(subscription) {}
      }, {
        key: "onDestroy",
        value: function onDestroy(subscription) {}
      }]);

      return PromiseStrategy;
    }();

    var _promiseStrategy = /*@__PURE__*/new PromiseStrategy();

    var _observableStrategy = /*@__PURE__*/new ObservableStrategy();

    var AsyncPipe = /*@__PURE__*/function () {
      var AsyncPipe = /*#__PURE__*/function () {
        function AsyncPipe(_ref) {
          _classCallCheck(this, AsyncPipe);

          this._ref = _ref;
          this._latestValue = null;
          this._subscription = null;
          this._obj = null;
          this._strategy = null;
        }

        _createClass2(AsyncPipe, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this._subscription) {
              this._dispose();
            }
          }
        }, {
          key: "transform",
          value: function transform(obj) {
            if (!this._obj) {
              if (obj) {
                this._subscribe(obj);
              }

              return this._latestValue;
            }

            if (obj !== this._obj) {
              this._dispose();

              return this.transform(obj);
            }

            return this._latestValue;
          }
        }, {
          key: "_subscribe",
          value: function _subscribe(obj) {
            var _this14 = this;

            this._obj = obj;
            this._strategy = this._selectStrategy(obj);
            this._subscription = this._strategy.createSubscription(obj, function (value) {
              return _this14._updateLatestValue(obj, value);
            });
          }
        }, {
          key: "_selectStrategy",
          value: function _selectStrategy(obj) {
            if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisPromise"])(obj)) {
              return _promiseStrategy;
            }

            if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisObservable"])(obj)) {
              return _observableStrategy;
            }

            throw invalidPipeArgumentError(AsyncPipe, obj);
          }
        }, {
          key: "_dispose",
          value: function _dispose() {
            this._strategy.dispose(this._subscription);

            this._latestValue = null;
            this._subscription = null;
            this._obj = null;
          }
        }, {
          key: "_updateLatestValue",
          value: function _updateLatestValue(async, value) {
            if (async === this._obj) {
              this._latestValue = value;

              this._ref.markForCheck();
            }
          }
        }]);

        return AsyncPipe;
      }();

      AsyncPipe.ɵfac = function AsyncPipe_Factory(t) {
        return new (t || AsyncPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinjectPipeChangeDetectorRef"]());
      };

      AsyncPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "async",
        type: AsyncPipe,
        pure: false
      });
      return AsyncPipe;
    }();

    var LowerCasePipe = /*@__PURE__*/function () {
      var LowerCasePipe = /*#__PURE__*/function () {
        function LowerCasePipe() {
          _classCallCheck(this, LowerCasePipe);
        }

        _createClass2(LowerCasePipe, [{
          key: "transform",

          /**
           * @param value The string to transform to lower case.
           */
          value: function transform(value) {
            if (!value) return value;

            if (typeof value !== 'string') {
              throw invalidPipeArgumentError(LowerCasePipe, value);
            }

            return value.toLowerCase();
          }
        }]);

        return LowerCasePipe;
      }();

      LowerCasePipe.ɵfac = function LowerCasePipe_Factory(t) {
        return new (t || LowerCasePipe)();
      };

      LowerCasePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "lowercase",
        type: LowerCasePipe,
        pure: true
      });
      return LowerCasePipe;
    }(); //
    // Regex below matches any Unicode word and compatible with ES5. In ES2018 the same result
    // can be achieved by using /\p{L}\S*/gu and also known as Unicode Property Escapes
    // (http://2ality.com/2017/07/regexp-unicode-property-escapes.html). Since there is no
    // transpilation of this functionality down to ES5 without external tool, the only solution is
    // to use already transpiled form. Example can be found here -
    // https://mothereff.in/regexpu#input=var+regex+%3D+/%5Cp%7BL%7D/u%3B&unicodePropertyEscape=1
    //


    var unicodeWordMatch = /(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D])\S*/g;

    var TitleCasePipe = /*@__PURE__*/function () {
      var TitleCasePipe = /*#__PURE__*/function () {
        function TitleCasePipe() {
          _classCallCheck(this, TitleCasePipe);
        }

        _createClass2(TitleCasePipe, [{
          key: "transform",

          /**
           * @param value The string to transform to title case.
           */
          value: function transform(value) {
            if (!value) return value;

            if (typeof value !== 'string') {
              throw invalidPipeArgumentError(TitleCasePipe, value);
            }

            return value.replace(unicodeWordMatch, function (txt) {
              return txt[0].toUpperCase() + txt.substr(1).toLowerCase();
            });
          }
        }]);

        return TitleCasePipe;
      }();

      TitleCasePipe.ɵfac = function TitleCasePipe_Factory(t) {
        return new (t || TitleCasePipe)();
      };

      TitleCasePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "titlecase",
        type: TitleCasePipe,
        pure: true
      });
      return TitleCasePipe;
    }();

    var UpperCasePipe = /*@__PURE__*/function () {
      var UpperCasePipe = /*#__PURE__*/function () {
        function UpperCasePipe() {
          _classCallCheck(this, UpperCasePipe);
        }

        _createClass2(UpperCasePipe, [{
          key: "transform",

          /**
           * @param value The string to transform to upper case.
           */
          value: function transform(value) {
            if (!value) return value;

            if (typeof value !== 'string') {
              throw invalidPipeArgumentError(UpperCasePipe, value);
            }

            return value.toUpperCase();
          }
        }]);

        return UpperCasePipe;
      }();

      UpperCasePipe.ɵfac = function UpperCasePipe_Factory(t) {
        return new (t || UpperCasePipe)();
      };

      UpperCasePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "uppercase",
        type: UpperCasePipe,
        pure: true
      });
      return UpperCasePipe;
    }();

    var DatePipe = /*@__PURE__*/function () {
      var DatePipe = /*#__PURE__*/function () {
        function DatePipe(locale) {
          _classCallCheck(this, DatePipe);

          this.locale = locale;
        }
        /**
         * @param value The date expression: a `Date` object,  a number
         * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).
         * @param format The date/time components to include, using predefined options or a
         * custom format string.
         * @param timezone A timezone offset (such as `'+0430'`), or a standard
         * UTC/GMT or continental US timezone abbreviation.
         * When not supplied, uses the end-user's local system timezone.
         * @param locale A locale code for the locale format rules to use.
         * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
         * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
         * @returns A date string in the desired format.
         */


        _createClass2(DatePipe, [{
          key: "transform",
          value: function transform(value) {
            var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'mediumDate';
            var timezone = arguments.length > 2 ? arguments[2] : undefined;
            var locale = arguments.length > 3 ? arguments[3] : undefined;
            if (value == null || value === '' || value !== value) return null;

            try {
              return formatDate(value, format, locale || this.locale, timezone);
            } catch (error) {
              throw invalidPipeArgumentError(DatePipe, error.message);
            }
          }
        }]);

        return DatePipe;
      }();

      DatePipe.ɵfac = function DatePipe_Factory(t) {
        return new (t || DatePipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]));
      };

      DatePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "date",
        type: DatePipe,
        pure: true
      });
      return DatePipe;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var _INTERPOLATION_REGEXP = /#/g;

    var I18nPluralPipe = /*@__PURE__*/function () {
      var I18nPluralPipe = /*#__PURE__*/function () {
        function I18nPluralPipe(_localization) {
          _classCallCheck(this, I18nPluralPipe);

          this._localization = _localization;
        }
        /**
         * @param value the number to be formatted
         * @param pluralMap an object that mimics the ICU format, see
         * http://userguide.icu-project.org/formatparse/messages.
         * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by
         * default).
         */


        _createClass2(I18nPluralPipe, [{
          key: "transform",
          value: function transform(value, pluralMap, locale) {
            if (value == null) return '';

            if (typeof pluralMap !== 'object' || pluralMap === null) {
              throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);
            }

            var key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);
            return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
          }
        }]);

        return I18nPluralPipe;
      }();

      I18nPluralPipe.ɵfac = function I18nPluralPipe_Factory(t) {
        return new (t || I18nPluralPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgLocalization));
      };

      I18nPluralPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "i18nPlural",
        type: I18nPluralPipe,
        pure: true
      });
      return I18nPluralPipe;
    }();

    var I18nSelectPipe = /*@__PURE__*/function () {
      var I18nSelectPipe = /*#__PURE__*/function () {
        function I18nSelectPipe() {
          _classCallCheck(this, I18nSelectPipe);
        }

        _createClass2(I18nSelectPipe, [{
          key: "transform",

          /**
           * @param value a string to be internationalized.
           * @param mapping an object that indicates the text that should be displayed
           * for different values of the provided `value`.
           */
          value: function transform(value, mapping) {
            if (value == null) return '';

            if (typeof mapping !== 'object' || typeof value !== 'string') {
              throw invalidPipeArgumentError(I18nSelectPipe, mapping);
            }

            if (mapping.hasOwnProperty(value)) {
              return mapping[value];
            }

            if (mapping.hasOwnProperty('other')) {
              return mapping['other'];
            }

            return '';
          }
        }]);

        return I18nSelectPipe;
      }();

      I18nSelectPipe.ɵfac = function I18nSelectPipe_Factory(t) {
        return new (t || I18nSelectPipe)();
      };

      I18nSelectPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "i18nSelect",
        type: I18nSelectPipe,
        pure: true
      });
      return I18nSelectPipe;
    }();

    var JsonPipe = /*@__PURE__*/function () {
      var JsonPipe = /*#__PURE__*/function () {
        function JsonPipe() {
          _classCallCheck(this, JsonPipe);
        }

        _createClass2(JsonPipe, [{
          key: "transform",

          /**
           * @param value A value of any type to convert into a JSON-format string.
           */
          value: function transform(value) {
            return JSON.stringify(value, null, 2);
          }
        }]);

        return JsonPipe;
      }();

      JsonPipe.ɵfac = function JsonPipe_Factory(t) {
        return new (t || JsonPipe)();
      };

      JsonPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "json",
        type: JsonPipe,
        pure: false
      });
      return JsonPipe;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function makeKeyValuePair(key, value) {
      return {
        key: key,
        value: value
      };
    }

    var KeyValuePipe = /*@__PURE__*/function () {
      var KeyValuePipe = /*#__PURE__*/function () {
        function KeyValuePipe(differs) {
          _classCallCheck(this, KeyValuePipe);

          this.differs = differs;
          this.keyValues = [];
        }

        _createClass2(KeyValuePipe, [{
          key: "transform",
          value: function transform(input) {
            var _this15 = this;

            var compareFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultComparator;

            if (!input || !(input instanceof Map) && typeof input !== 'object') {
              return null;
            }

            if (!this.differ) {
              // make a differ for whatever type we've been passed in
              this.differ = this.differs.find(input).create();
            }

            var differChanges = this.differ.diff(input);

            if (differChanges) {
              this.keyValues = [];
              differChanges.forEachItem(function (r) {
                _this15.keyValues.push(makeKeyValuePair(r.key, r.currentValue));
              });
              this.keyValues.sort(compareFn);
            }

            return this.keyValues;
          }
        }]);

        return KeyValuePipe;
      }();

      KeyValuePipe.ɵfac = function KeyValuePipe_Factory(t) {
        return new (t || KeyValuePipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]));
      };

      KeyValuePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "keyvalue",
        type: KeyValuePipe,
        pure: false
      });
      return KeyValuePipe;
    }();

    function defaultComparator(keyValueA, keyValueB) {
      var a = keyValueA.key;
      var b = keyValueB.key; // if same exit with 0;

      if (a === b) return 0; // make sure that undefined are at the end of the sort.

      if (a === undefined) return 1;
      if (b === undefined) return -1; // make sure that nulls are at the end of the sort.

      if (a === null) return 1;
      if (b === null) return -1;

      if (typeof a == 'string' && typeof b == 'string') {
        return a < b ? -1 : 1;
      }

      if (typeof a == 'number' && typeof b == 'number') {
        return a - b;
      }

      if (typeof a == 'boolean' && typeof b == 'boolean') {
        return a < b ? -1 : 1;
      } // `a` and `b` are of different types. Compare their string values.


      var aString = String(a);
      var bString = String(b);
      return aString == bString ? 0 : aString < bString ? -1 : 1;
    }

    var DecimalPipe = /*@__PURE__*/function () {
      var DecimalPipe = /*#__PURE__*/function () {
        function DecimalPipe(_locale) {
          _classCallCheck(this, DecimalPipe);

          this._locale = _locale;
        }
        /**
         * @param value The number to be formatted.
         * @param digitsInfo Decimal representation options, specified by a string
         * in the following format:<br>
         * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
         *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
         * Default is `1`.
         *   - `minFractionDigits`: The minimum number of digits after the decimal point.
         * Default is `0`.
         *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
         * Default is `3`.
         * @param locale A locale code for the locale format rules to use.
         * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
         * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
         */


        _createClass2(DecimalPipe, [{
          key: "transform",
          value: function transform(value, digitsInfo, locale) {
            if (isEmpty(value)) return null;
            locale = locale || this._locale;

            try {
              var num = strToNumber(value);
              return formatNumber(num, locale, digitsInfo);
            } catch (error) {
              throw invalidPipeArgumentError(DecimalPipe, error.message);
            }
          }
        }]);

        return DecimalPipe;
      }();

      DecimalPipe.ɵfac = function DecimalPipe_Factory(t) {
        return new (t || DecimalPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]));
      };

      DecimalPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "number",
        type: DecimalPipe,
        pure: true
      });
      return DecimalPipe;
    }();

    var PercentPipe = /*@__PURE__*/function () {
      var PercentPipe = /*#__PURE__*/function () {
        function PercentPipe(_locale) {
          _classCallCheck(this, PercentPipe);

          this._locale = _locale;
        }
        /**
         *
         * @param value The number to be formatted as a percentage.
         * @param digitsInfo Decimal representation options, specified by a string
         * in the following format:<br>
         * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
         *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
         * Default is `1`.
         *   - `minFractionDigits`: The minimum number of digits after the decimal point.
         * Default is `0`.
         *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
         * Default is `0`.
         * @param locale A locale code for the locale format rules to use.
         * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
         * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
         */


        _createClass2(PercentPipe, [{
          key: "transform",
          value: function transform(value, digitsInfo, locale) {
            if (isEmpty(value)) return null;
            locale = locale || this._locale;

            try {
              var num = strToNumber(value);
              return formatPercent(num, locale, digitsInfo);
            } catch (error) {
              throw invalidPipeArgumentError(PercentPipe, error.message);
            }
          }
        }]);

        return PercentPipe;
      }();

      PercentPipe.ɵfac = function PercentPipe_Factory(t) {
        return new (t || PercentPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]));
      };

      PercentPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "percent",
        type: PercentPipe,
        pure: true
      });
      return PercentPipe;
    }();

    var CurrencyPipe = /*@__PURE__*/function () {
      var CurrencyPipe = /*#__PURE__*/function () {
        function CurrencyPipe(_locale) {
          var _defaultCurrencyCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'USD';

          _classCallCheck(this, CurrencyPipe);

          this._locale = _locale;
          this._defaultCurrencyCode = _defaultCurrencyCode;
        }
        /**
         *
         * @param value The number to be formatted as currency.
         * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,
         * such as `USD` for the US dollar and `EUR` for the euro. The default currency code can be
         * configured using the `DEFAULT_CURRENCY_CODE` injection token.
         * @param display The format for the currency indicator. One of the following:
         *   - `code`: Show the code (such as `USD`).
         *   - `symbol`(default): Show the symbol (such as `$`).
         *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their
         * currency.
         * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the
         * locale has no narrow symbol, uses the standard symbol for the locale.
         *   - String: Use the given string value instead of a code or a symbol.
         * For example, an empty string will suppress the currency & symbol.
         *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.
         *
         * @param digitsInfo Decimal representation options, specified by a string
         * in the following format:<br>
         * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
         *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
         * Default is `1`.
         *   - `minFractionDigits`: The minimum number of digits after the decimal point.
         * Default is `2`.
         *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
         * Default is `2`.
         * If not provided, the number will be formatted with the proper amount of digits,
         * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.
         * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.
         * @param locale A locale code for the locale format rules to use.
         * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
         * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
         */


        _createClass2(CurrencyPipe, [{
          key: "transform",
          value: function transform(value, currencyCode) {
            var display = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'symbol';
            var digitsInfo = arguments.length > 3 ? arguments[3] : undefined;
            var locale = arguments.length > 4 ? arguments[4] : undefined;
            if (isEmpty(value)) return null;
            locale = locale || this._locale;

            if (typeof display === 'boolean') {
              if (console && console.warn) {
                console.warn("Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".");
              }

              display = display ? 'symbol' : 'code';
            }

            var currency = currencyCode || this._defaultCurrencyCode;

            if (display !== 'code') {
              if (display === 'symbol' || display === 'symbol-narrow') {
                currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);
              } else {
                currency = display;
              }
            }

            try {
              var num = strToNumber(value);
              return formatCurrency(num, locale, currency, currencyCode, digitsInfo);
            } catch (error) {
              throw invalidPipeArgumentError(CurrencyPipe, error.message);
            }
          }
        }]);

        return CurrencyPipe;
      }();

      CurrencyPipe.ɵfac = function CurrencyPipe_Factory(t) {
        return new (t || CurrencyPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_CURRENCY_CODE"]));
      };

      CurrencyPipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "currency",
        type: CurrencyPipe,
        pure: true
      });
      return CurrencyPipe;
    }();

    function isEmpty(value) {
      return value == null || value === '' || value !== value;
    }
    /**
     * Transforms a string into a number (if needed).
     */


    function strToNumber(value) {
      // Convert strings to numbers
      if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {
        return Number(value);
      }

      if (typeof value !== 'number') {
        throw new Error("".concat(value, " is not a number"));
      }

      return value;
    }

    var SlicePipe = /*@__PURE__*/function () {
      var SlicePipe = /*#__PURE__*/function () {
        function SlicePipe() {
          _classCallCheck(this, SlicePipe);
        }

        _createClass2(SlicePipe, [{
          key: "transform",
          value: function transform(value, start, end) {
            if (value == null) return value;

            if (!this.supports(value)) {
              throw invalidPipeArgumentError(SlicePipe, value);
            }

            return value.slice(start, end);
          }
        }, {
          key: "supports",
          value: function supports(obj) {
            return typeof obj === 'string' || Array.isArray(obj);
          }
        }]);

        return SlicePipe;
      }();

      SlicePipe.ɵfac = function SlicePipe_Factory(t) {
        return new (t || SlicePipe)();
      };

      SlicePipe.ɵpipe = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({
        name: "slice",
        type: SlicePipe,
        pure: false
      });
      return SlicePipe;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * A collection of Angular pipes that are likely to be used in each and every application.
     */


    var COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe];

    var CommonModule = /*@__PURE__*/function () {
      var CommonModule = function CommonModule() {
        _classCallCheck(this, CommonModule);
      };

      CommonModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: CommonModule
      });
      CommonModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function CommonModule_Factory(t) {
          return new (t || CommonModule)();
        },
        providers: [{
          provide: NgLocalization,
          useClass: NgLocaleLocalization
        }]
      });
      return CommonModule;
    }();
    /*@__PURE__*/


    (function () {
      (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](CommonModule, {
        declarations: [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe],
        exports: [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe]
      });
    })();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var PLATFORM_BROWSER_ID = 'browser';
    var PLATFORM_SERVER_ID = 'server';
    var PLATFORM_WORKER_APP_ID = 'browserWorkerApp';
    var PLATFORM_WORKER_UI_ID = 'browserWorkerUi';
    /**
     * Returns whether a platform id represents a browser platform.
     * @publicApi
     */

    function isPlatformBrowser(platformId) {
      return platformId === PLATFORM_BROWSER_ID;
    }
    /**
     * Returns whether a platform id represents a server platform.
     * @publicApi
     */


    function isPlatformServer(platformId) {
      return platformId === PLATFORM_SERVER_ID;
    }
    /**
     * Returns whether a platform id represents a web worker app platform.
     * @publicApi
     */


    function isPlatformWorkerApp(platformId) {
      return platformId === PLATFORM_WORKER_APP_ID;
    }
    /**
     * Returns whether a platform id represents a web worker UI platform.
     * @publicApi
     */


    function isPlatformWorkerUi(platformId) {
      return platformId === PLATFORM_WORKER_UI_ID;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @publicApi
     */


    var VERSION = /*@__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('10.0.9');

    var ViewportScroller = /*@__PURE__*/function () {
      var ViewportScroller = function ViewportScroller() {
        _classCallCheck(this, ViewportScroller);
      }; // De-sugared tree-shakable injection
      // See #23917

      /** @nocollapse */


      ViewportScroller.ɵprov = /*@__PURE__*/Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        token: ViewportScroller,
        providedIn: 'root',
        factory: function factory() {
          return new BrowserViewportScroller(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(DOCUMENT), window, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ErrorHandler"]));
        }
      });
      return ViewportScroller;
    }();
    /**
     * Manages the scroll position for a browser window.
     */


    var BrowserViewportScroller = /*#__PURE__*/function () {
      function BrowserViewportScroller(document, window, errorHandler) {
        _classCallCheck(this, BrowserViewportScroller);

        this.document = document;
        this.window = window;
        this.errorHandler = errorHandler;

        this.offset = function () {
          return [0, 0];
        };
      }
      /**
       * Configures the top offset used when scrolling to an anchor.
       * @param offset A position in screen coordinates (a tuple with x and y values)
       * or a function that returns the top offset position.
       *
       */


      _createClass2(BrowserViewportScroller, [{
        key: "setOffset",
        value: function setOffset(offset) {
          if (Array.isArray(offset)) {
            this.offset = function () {
              return offset;
            };
          } else {
            this.offset = offset;
          }
        }
        /**
         * Retrieves the current scroll position.
         * @returns The position in screen coordinates.
         */

      }, {
        key: "getScrollPosition",
        value: function getScrollPosition() {
          if (this.supportScrollRestoration()) {
            return [this.window.scrollX, this.window.scrollY];
          } else {
            return [0, 0];
          }
        }
        /**
         * Sets the scroll position.
         * @param position The new position in screen coordinates.
         */

      }, {
        key: "scrollToPosition",
        value: function scrollToPosition(position) {
          if (this.supportScrollRestoration()) {
            this.window.scrollTo(position[0], position[1]);
          }
        }
        /**
         * Scrolls to an anchor element.
         * @param anchor The ID of the anchor element.
         */

      }, {
        key: "scrollToAnchor",
        value: function scrollToAnchor(anchor) {
          if (this.supportScrollRestoration()) {
            var elSelected = this.document.getElementById(anchor) || this.document.getElementsByName(anchor)[0];

            if (elSelected) {
              this.scrollToElement(elSelected);
            }
          }
        }
        /**
         * Disables automatic scroll restoration provided by the browser.
         */

      }, {
        key: "setHistoryScrollRestoration",
        value: function setHistoryScrollRestoration(scrollRestoration) {
          if (this.supportScrollRestoration()) {
            var history = this.window.history;

            if (history && history.scrollRestoration) {
              history.scrollRestoration = scrollRestoration;
            }
          }
        }
      }, {
        key: "scrollToElement",
        value: function scrollToElement(el) {
          var rect = el.getBoundingClientRect();
          var left = rect.left + this.window.pageXOffset;
          var top = rect.top + this.window.pageYOffset;
          var offset = this.offset();
          this.window.scrollTo(left - offset[0], top - offset[1]);
        }
        /**
         * We only support scroll restoration when we can get a hold of window.
         * This means that we do not support this behavior when running in a web worker.
         *
         * Lifting this restriction right now would require more changes in the dom adapter.
         * Since webworkers aren't widely used, we will lift it once RouterScroller is
         * battle-tested.
         */

      }, {
        key: "supportScrollRestoration",
        value: function supportScrollRestoration() {
          try {
            if (!this.window || !this.window.scrollTo) {
              return false;
            } // The `scrollRestoration` property could be on the `history` instance or its prototype.


            var scrollRestorationDescriptor = getScrollRestorationProperty(this.window.history) || getScrollRestorationProperty(Object.getPrototypeOf(this.window.history)); // We can write to the `scrollRestoration` property if it is a writable data field or it has a
            // setter function.

            return !!scrollRestorationDescriptor && !!(scrollRestorationDescriptor.writable || scrollRestorationDescriptor.set);
          } catch (_a) {
            return false;
          }
        }
      }]);

      return BrowserViewportScroller;
    }();

    function getScrollRestorationProperty(obj) {
      return Object.getOwnPropertyDescriptor(obj, 'scrollRestoration');
    }
    /**
     * Provides an empty implementation of the viewport scroller. This will
     * live in @angular/common as it will be used by both platform-server and platform-webworker.
     */


    var NullViewportScroller = /*#__PURE__*/function () {
      function NullViewportScroller() {
        _classCallCheck(this, NullViewportScroller);
      }

      _createClass2(NullViewportScroller, [{
        key: "setOffset",

        /**
         * Empty implementation
         */
        value: function setOffset(offset) {}
        /**
         * Empty implementation
         */

      }, {
        key: "getScrollPosition",
        value: function getScrollPosition() {
          return [0, 0];
        }
        /**
         * Empty implementation
         */

      }, {
        key: "scrollToPosition",
        value: function scrollToPosition(position) {}
        /**
         * Empty implementation
         */

      }, {
        key: "scrollToAnchor",
        value: function scrollToAnchor(anchor) {}
        /**
         * Empty implementation
         */

      }, {
        key: "setHistoryScrollRestoration",
        value: function setHistoryScrollRestoration(scrollRestoration) {}
      }]);

      return NullViewportScroller;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // This file only reexports content of the `src` folder. Keep it that way.

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Generated bundle index. Do not edit.
     */
    //# sourceMappingURL=common.js.map

    /***/

  },

  /***/
  "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js":
  /*!******************************************************************!*\
    !*** ./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js ***!
    \******************************************************************/

  /*! exports provided: ANALYZE_FOR_ENTRY_COMPONENTS, APP_BOOTSTRAP_LISTENER, APP_ID, APP_INITIALIZER, ApplicationInitStatus, ApplicationModule, ApplicationRef, Attribute, COMPILER_OPTIONS, CUSTOM_ELEMENTS_SCHEMA, ChangeDetectionStrategy, ChangeDetectorRef, Compiler, CompilerFactory, Component, ComponentFactory, ComponentFactoryResolver, ComponentRef, ContentChild, ContentChildren, DEFAULT_CURRENCY_CODE, DebugElement, DebugEventListener, DebugNode, DefaultIterableDiffer, Directive, ElementRef, EmbeddedViewRef, ErrorHandler, EventEmitter, Host, HostBinding, HostListener, INJECTOR, Inject, InjectFlags, Injectable, InjectionToken, Injector, Input, IterableDiffers, KeyValueDiffers, LOCALE_ID, MissingTranslationStrategy, ModuleWithComponentFactories, NO_ERRORS_SCHEMA, NgModule, NgModuleFactory, NgModuleFactoryLoader, NgModuleRef, NgProbeToken, NgZone, Optional, Output, PACKAGE_ROOT_URL, PLATFORM_ID, PLATFORM_INITIALIZER, Pipe, PlatformRef, Query, QueryList, ReflectiveInjector, ReflectiveKey, Renderer2, RendererFactory2, RendererStyleFlags2, ResolvedReflectiveFactory, Sanitizer, SecurityContext, Self, SimpleChange, SkipSelf, SystemJsNgModuleLoader, SystemJsNgModuleLoaderConfig, TRANSLATIONS, TRANSLATIONS_FORMAT, TemplateRef, Testability, TestabilityRegistry, Type, VERSION, Version, ViewChild, ViewChildren, ViewContainerRef, ViewEncapsulation, ViewRef, WrappedValue, asNativeElements, assertPlatform, createPlatform, createPlatformFactory, defineInjectable, destroyPlatform, enableProdMode, forwardRef, getDebugNode, getModuleFactory, getPlatform, inject, isDevMode, platformCore, resolveForwardRef, setTestabilityGetter, ɵ0, ɵ1, ɵALLOW_MULTIPLE_PLATFORMS, ɵAPP_ID_RANDOM_PROVIDER, ɵChangeDetectorStatus, ɵCodegenComponentFactoryResolver, ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__, ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__, ɵCompiler_compileModuleAsync__POST_R3__, ɵCompiler_compileModuleSync__POST_R3__, ɵComponentFactory, ɵConsole, ɵDEFAULT_LOCALE_ID, ɵEMPTY_ARRAY, ɵEMPTY_MAP, ɵINJECTOR_IMPL__POST_R3__, ɵINJECTOR_SCOPE, ɵLifecycleHooksFeature, ɵLocaleDataIndex, ɵNG_COMP_DEF, ɵNG_DIR_DEF, ɵNG_ELEMENT_ID, ɵNG_INJ_DEF, ɵNG_MOD_DEF, ɵNG_PIPE_DEF, ɵNG_PROV_DEF, ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, ɵNO_CHANGE, ɵNgModuleFactory, ɵNoopNgZone, ɵReflectionCapabilities, ɵRender3ComponentFactory, ɵRender3ComponentRef, ɵRender3NgModuleRef, ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__, ɵSWITCH_COMPILE_COMPONENT__POST_R3__, ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__, ɵSWITCH_COMPILE_INJECTABLE__POST_R3__, ɵSWITCH_COMPILE_NGMODULE__POST_R3__, ɵSWITCH_COMPILE_PIPE__POST_R3__, ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__, ɵSWITCH_IVY_ENABLED__POST_R3__, ɵSWITCH_RENDERER2_FACTORY__POST_R3__, ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__, ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__, ɵ_sanitizeHtml, ɵ_sanitizeUrl, ɵallowSanitizationBypassAndThrow, ɵand, ɵangular_packages_core_core_a, ɵangular_packages_core_core_b, ɵangular_packages_core_core_ba, ɵangular_packages_core_core_bb, ɵangular_packages_core_core_bc, ɵangular_packages_core_core_bd, ɵangular_packages_core_core_be, ɵangular_packages_core_core_bg, ɵangular_packages_core_core_bh, ɵangular_packages_core_core_bi, ɵangular_packages_core_core_bj, ɵangular_packages_core_core_bk, ɵangular_packages_core_core_bl, ɵangular_packages_core_core_bm, ɵangular_packages_core_core_bn, ɵangular_packages_core_core_bo, ɵangular_packages_core_core_bq, ɵangular_packages_core_core_br, ɵangular_packages_core_core_c, ɵangular_packages_core_core_d, ɵangular_packages_core_core_e, ɵangular_packages_core_core_f, ɵangular_packages_core_core_g, ɵangular_packages_core_core_h, ɵangular_packages_core_core_i, ɵangular_packages_core_core_j, ɵangular_packages_core_core_k, ɵangular_packages_core_core_l, ɵangular_packages_core_core_m, ɵangular_packages_core_core_n, ɵangular_packages_core_core_o, ɵangular_packages_core_core_p, ɵangular_packages_core_core_q, ɵangular_packages_core_core_r, ɵangular_packages_core_core_s, ɵangular_packages_core_core_t, ɵangular_packages_core_core_u, ɵangular_packages_core_core_v, ɵangular_packages_core_core_w, ɵangular_packages_core_core_x, ɵangular_packages_core_core_y, ɵangular_packages_core_core_z, ɵbypassSanitizationTrustHtml, ɵbypassSanitizationTrustResourceUrl, ɵbypassSanitizationTrustScript, ɵbypassSanitizationTrustStyle, ɵbypassSanitizationTrustUrl, ɵccf, ɵclearOverrides, ɵclearResolutionOfComponentResourcesQueue, ɵcmf, ɵcompileComponent, ɵcompileDirective, ɵcompileNgModule, ɵcompileNgModuleDefs, ɵcompileNgModuleFactory__POST_R3__, ɵcompilePipe, ɵcreateInjector, ɵcrt, ɵdefaultIterableDiffers, ɵdefaultKeyValueDiffers, ɵdetectChanges, ɵdevModeEqual, ɵdid, ɵeld, ɵfindLocaleData, ɵflushModuleScopingQueueAsMuchAsPossible, ɵgetComponentViewDefinitionFactory, ɵgetDebugNodeR2, ɵgetDebugNode__POST_R3__, ɵgetDirectives, ɵgetHostElement, ɵgetInjectableDef, ɵgetLContext, ɵgetLocaleCurrencyCode, ɵgetLocalePluralCase, ɵgetModuleFactory__POST_R3__, ɵgetSanitizationBypassType, ɵglobal, ɵinitServicesIfNeeded, ɵinlineInterpolate, ɵinterpolate, ɵisBoundToModule__POST_R3__, ɵisDefaultChangeDetectionStrategy, ɵisListLikeIterable, ɵisObservable, ɵisPromise, ɵivyEnabled, ɵmakeDecorator, ɵmarkDirty, ɵmod, ɵmpd, ɵncd, ɵnoSideEffects, ɵnov, ɵoverrideComponentView, ɵoverrideProvider, ɵpad, ɵpatchComponentDefWithScope, ɵpid, ɵpod, ɵppd, ɵprd, ɵpublishDefaultGlobalUtils, ɵpublishGlobalUtil, ɵqud, ɵregisterLocaleData, ɵregisterModuleFactory, ɵregisterNgModuleType, ɵrenderComponent, ɵresetCompiledComponents, ɵresetJitOptions, ɵresolveComponentResources, ɵsetClassMetadata, ɵsetCurrentInjector, ɵsetDocument, ɵsetLocaleId, ɵstore, ɵstringify, ɵted, ɵtransitiveScopesFor, ɵunregisterLocaleData, ɵunv, ɵunwrapSafeValue, ɵvid, ɵwhenRendered, ɵɵCopyDefinitionFeature, ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature, ɵɵProvidersFeature, ɵɵadvance, ɵɵattribute, ɵɵattributeInterpolate1, ɵɵattributeInterpolate2, ɵɵattributeInterpolate3, ɵɵattributeInterpolate4, ɵɵattributeInterpolate5, ɵɵattributeInterpolate6, ɵɵattributeInterpolate7, ɵɵattributeInterpolate8, ɵɵattributeInterpolateV, ɵɵclassMap, ɵɵclassMapInterpolate1, ɵɵclassMapInterpolate2, ɵɵclassMapInterpolate3, ɵɵclassMapInterpolate4, ɵɵclassMapInterpolate5, ɵɵclassMapInterpolate6, ɵɵclassMapInterpolate7, ɵɵclassMapInterpolate8, ɵɵclassMapInterpolateV, ɵɵclassProp, ɵɵcontentQuery, ɵɵdefineComponent, ɵɵdefineDirective, ɵɵdefineInjectable, ɵɵdefineInjector, ɵɵdefineNgModule, ɵɵdefinePipe, ɵɵdirectiveInject, ɵɵdisableBindings, ɵɵelement, ɵɵelementContainer, ɵɵelementContainerEnd, ɵɵelementContainerStart, ɵɵelementEnd, ɵɵelementStart, ɵɵenableBindings, ɵɵgetCurrentView, ɵɵgetFactoryOf, ɵɵgetInheritedFactory, ɵɵhostProperty, ɵɵi18n, ɵɵi18nApply, ɵɵi18nAttributes, ɵɵi18nEnd, ɵɵi18nExp, ɵɵi18nPostprocess, ɵɵi18nStart, ɵɵinject, ɵɵinjectAttribute, ɵɵinjectPipeChangeDetectorRef, ɵɵinvalidFactory, ɵɵinvalidFactoryDep, ɵɵlistener, ɵɵloadQuery, ɵɵnamespaceHTML, ɵɵnamespaceMathML, ɵɵnamespaceSVG, ɵɵnextContext, ɵɵpipe, ɵɵpipeBind1, ɵɵpipeBind2, ɵɵpipeBind3, ɵɵpipeBind4, ɵɵpipeBindV, ɵɵprojection, ɵɵprojectionDef, ɵɵproperty, ɵɵpropertyInterpolate, ɵɵpropertyInterpolate1, ɵɵpropertyInterpolate2, ɵɵpropertyInterpolate3, ɵɵpropertyInterpolate4, ɵɵpropertyInterpolate5, ɵɵpropertyInterpolate6, ɵɵpropertyInterpolate7, ɵɵpropertyInterpolate8, ɵɵpropertyInterpolateV, ɵɵpureFunction0, ɵɵpureFunction1, ɵɵpureFunction2, ɵɵpureFunction3, ɵɵpureFunction4, ɵɵpureFunction5, ɵɵpureFunction6, ɵɵpureFunction7, ɵɵpureFunction8, ɵɵpureFunctionV, ɵɵqueryRefresh, ɵɵreference, ɵɵresolveBody, ɵɵresolveDocument, ɵɵresolveWindow, ɵɵrestoreView, ɵɵsanitizeHtml, ɵɵsanitizeResourceUrl, ɵɵsanitizeScript, ɵɵsanitizeStyle, ɵɵsanitizeUrl, ɵɵsanitizeUrlOrResourceUrl, ɵɵselect, ɵɵsetComponentScope, ɵɵsetNgModuleScope, ɵɵstaticContentQuery, ɵɵstaticViewQuery, ɵɵstyleMap, ɵɵstyleMapInterpolate1, ɵɵstyleMapInterpolate2, ɵɵstyleMapInterpolate3, ɵɵstyleMapInterpolate4, ɵɵstyleMapInterpolate5, ɵɵstyleMapInterpolate6, ɵɵstyleMapInterpolate7, ɵɵstyleMapInterpolate8, ɵɵstyleMapInterpolateV, ɵɵstyleProp, ɵɵstylePropInterpolate1, ɵɵstylePropInterpolate2, ɵɵstylePropInterpolate3, ɵɵstylePropInterpolate4, ɵɵstylePropInterpolate5, ɵɵstylePropInterpolate6, ɵɵstylePropInterpolate7, ɵɵstylePropInterpolate8, ɵɵstylePropInterpolateV, ɵɵsyntheticHostListener, ɵɵsyntheticHostProperty, ɵɵtemplate, ɵɵtemplateRefExtractor, ɵɵtext, ɵɵtextInterpolate, ɵɵtextInterpolate1, ɵɵtextInterpolate2, ɵɵtextInterpolate3, ɵɵtextInterpolate4, ɵɵtextInterpolate5, ɵɵtextInterpolate6, ɵɵtextInterpolate7, ɵɵtextInterpolate8, ɵɵtextInterpolateV, ɵɵviewQuery */

  /***/
  function node_modulesAngularCore__ivy_ngcc__Fesm2015CoreJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ANALYZE_FOR_ENTRY_COMPONENTS", function () {
      return ANALYZE_FOR_ENTRY_COMPONENTS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "APP_BOOTSTRAP_LISTENER", function () {
      return APP_BOOTSTRAP_LISTENER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "APP_ID", function () {
      return APP_ID;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "APP_INITIALIZER", function () {
      return APP_INITIALIZER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ApplicationInitStatus", function () {
      return ApplicationInitStatus;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ApplicationModule", function () {
      return ApplicationModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ApplicationRef", function () {
      return ApplicationRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Attribute", function () {
      return Attribute;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "COMPILER_OPTIONS", function () {
      return COMPILER_OPTIONS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CUSTOM_ELEMENTS_SCHEMA", function () {
      return CUSTOM_ELEMENTS_SCHEMA;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ChangeDetectionStrategy", function () {
      return ChangeDetectionStrategy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ChangeDetectorRef", function () {
      return ChangeDetectorRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Compiler", function () {
      return Compiler;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CompilerFactory", function () {
      return CompilerFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Component", function () {
      return Component;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ComponentFactory", function () {
      return ComponentFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ComponentFactoryResolver", function () {
      return ComponentFactoryResolver;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ComponentRef", function () {
      return ComponentRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ContentChild", function () {
      return ContentChild;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ContentChildren", function () {
      return ContentChildren;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DEFAULT_CURRENCY_CODE", function () {
      return DEFAULT_CURRENCY_CODE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DebugElement", function () {
      return DebugElement;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DebugEventListener", function () {
      return DebugEventListener;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DebugNode", function () {
      return DebugNode;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DefaultIterableDiffer", function () {
      return DefaultIterableDiffer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Directive", function () {
      return Directive;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ElementRef", function () {
      return ElementRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "EmbeddedViewRef", function () {
      return EmbeddedViewRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ErrorHandler", function () {
      return ErrorHandler;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "EventEmitter", function () {
      return EventEmitter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Host", function () {
      return Host;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "HostBinding", function () {
      return HostBinding;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "HostListener", function () {
      return HostListener;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "INJECTOR", function () {
      return INJECTOR;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Inject", function () {
      return Inject;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "InjectFlags", function () {
      return InjectFlags;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Injectable", function () {
      return Injectable;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "InjectionToken", function () {
      return InjectionToken;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Injector", function () {
      return Injector;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Input", function () {
      return Input;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "IterableDiffers", function () {
      return IterableDiffers;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "KeyValueDiffers", function () {
      return KeyValueDiffers;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LOCALE_ID", function () {
      return LOCALE_ID$1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MissingTranslationStrategy", function () {
      return MissingTranslationStrategy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ModuleWithComponentFactories", function () {
      return ModuleWithComponentFactories;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NO_ERRORS_SCHEMA", function () {
      return NO_ERRORS_SCHEMA;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgModule", function () {
      return NgModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgModuleFactory", function () {
      return NgModuleFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgModuleFactoryLoader", function () {
      return NgModuleFactoryLoader;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgModuleRef", function () {
      return NgModuleRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgProbeToken", function () {
      return NgProbeToken;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgZone", function () {
      return NgZone;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Optional", function () {
      return Optional;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Output", function () {
      return Output;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PACKAGE_ROOT_URL", function () {
      return PACKAGE_ROOT_URL;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PLATFORM_ID", function () {
      return PLATFORM_ID;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PLATFORM_INITIALIZER", function () {
      return PLATFORM_INITIALIZER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Pipe", function () {
      return Pipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "PlatformRef", function () {
      return PlatformRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Query", function () {
      return Query;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "QueryList", function () {
      return QueryList;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ReflectiveInjector", function () {
      return ReflectiveInjector;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ReflectiveKey", function () {
      return ReflectiveKey;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Renderer2", function () {
      return Renderer2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RendererFactory2", function () {
      return RendererFactory2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RendererStyleFlags2", function () {
      return RendererStyleFlags2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ResolvedReflectiveFactory", function () {
      return ResolvedReflectiveFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Sanitizer", function () {
      return Sanitizer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SecurityContext", function () {
      return SecurityContext;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Self", function () {
      return Self;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SimpleChange", function () {
      return SimpleChange;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SkipSelf", function () {
      return SkipSelf;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SystemJsNgModuleLoader", function () {
      return SystemJsNgModuleLoader;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SystemJsNgModuleLoaderConfig", function () {
      return SystemJsNgModuleLoaderConfig;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TRANSLATIONS", function () {
      return TRANSLATIONS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TRANSLATIONS_FORMAT", function () {
      return TRANSLATIONS_FORMAT;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TemplateRef", function () {
      return TemplateRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Testability", function () {
      return Testability;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TestabilityRegistry", function () {
      return TestabilityRegistry;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Type", function () {
      return Type;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "VERSION", function () {
      return VERSION;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Version", function () {
      return Version;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ViewChild", function () {
      return ViewChild;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ViewChildren", function () {
      return ViewChildren;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ViewContainerRef", function () {
      return ViewContainerRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ViewEncapsulation", function () {
      return ViewEncapsulation$1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ViewRef", function () {
      return ViewRef$1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "WrappedValue", function () {
      return WrappedValue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "asNativeElements", function () {
      return asNativeElements;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "assertPlatform", function () {
      return assertPlatform;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "createPlatform", function () {
      return createPlatform;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "createPlatformFactory", function () {
      return createPlatformFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "defineInjectable", function () {
      return defineInjectable;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "destroyPlatform", function () {
      return destroyPlatform;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "enableProdMode", function () {
      return enableProdMode;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "forwardRef", function () {
      return forwardRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getDebugNode", function () {
      return getDebugNode$1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getModuleFactory", function () {
      return getModuleFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getPlatform", function () {
      return getPlatform;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "inject", function () {
      return inject;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isDevMode", function () {
      return isDevMode;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "platformCore", function () {
      return platformCore;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "resolveForwardRef", function () {
      return resolveForwardRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "setTestabilityGetter", function () {
      return setTestabilityGetter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵ0", function () {
      return ɵ0;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵ1", function () {
      return ɵ1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵALLOW_MULTIPLE_PLATFORMS", function () {
      return ALLOW_MULTIPLE_PLATFORMS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵAPP_ID_RANDOM_PROVIDER", function () {
      return APP_ID_RANDOM_PROVIDER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵChangeDetectorStatus", function () {
      return ChangeDetectorStatus;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵCodegenComponentFactoryResolver", function () {
      return CodegenComponentFactoryResolver;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__", function () {
      return Compiler_compileModuleAndAllComponentsAsync__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__", function () {
      return Compiler_compileModuleAndAllComponentsSync__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵCompiler_compileModuleAsync__POST_R3__", function () {
      return Compiler_compileModuleAsync__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵCompiler_compileModuleSync__POST_R3__", function () {
      return Compiler_compileModuleSync__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵComponentFactory", function () {
      return ComponentFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵConsole", function () {
      return Console;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵDEFAULT_LOCALE_ID", function () {
      return DEFAULT_LOCALE_ID;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵEMPTY_ARRAY", function () {
      return EMPTY_ARRAY$4;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵEMPTY_MAP", function () {
      return EMPTY_MAP;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵINJECTOR_IMPL__POST_R3__", function () {
      return INJECTOR_IMPL__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵINJECTOR_SCOPE", function () {
      return INJECTOR_SCOPE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵLifecycleHooksFeature", function () {
      return LifecycleHooksFeature;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵLocaleDataIndex", function () {
      return LocaleDataIndex;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵNG_COMP_DEF", function () {
      return NG_COMP_DEF;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵNG_DIR_DEF", function () {
      return NG_DIR_DEF;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵNG_ELEMENT_ID", function () {
      return NG_ELEMENT_ID;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵNG_INJ_DEF", function () {
      return NG_INJ_DEF;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵNG_MOD_DEF", function () {
      return NG_MOD_DEF;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵNG_PIPE_DEF", function () {
      return NG_PIPE_DEF;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵNG_PROV_DEF", function () {
      return NG_PROV_DEF;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR", function () {
      return NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵNO_CHANGE", function () {
      return NO_CHANGE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵNgModuleFactory", function () {
      return NgModuleFactory$1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵNoopNgZone", function () {
      return NoopNgZone;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵReflectionCapabilities", function () {
      return ReflectionCapabilities;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵRender3ComponentFactory", function () {
      return ComponentFactory$1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵRender3ComponentRef", function () {
      return ComponentRef$1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵRender3NgModuleRef", function () {
      return NgModuleRef$1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__", function () {
      return SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵSWITCH_COMPILE_COMPONENT__POST_R3__", function () {
      return SWITCH_COMPILE_COMPONENT__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__", function () {
      return SWITCH_COMPILE_DIRECTIVE__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵSWITCH_COMPILE_INJECTABLE__POST_R3__", function () {
      return SWITCH_COMPILE_INJECTABLE__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵSWITCH_COMPILE_NGMODULE__POST_R3__", function () {
      return SWITCH_COMPILE_NGMODULE__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵSWITCH_COMPILE_PIPE__POST_R3__", function () {
      return SWITCH_COMPILE_PIPE__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__", function () {
      return SWITCH_ELEMENT_REF_FACTORY__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵSWITCH_IVY_ENABLED__POST_R3__", function () {
      return SWITCH_IVY_ENABLED__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵSWITCH_RENDERER2_FACTORY__POST_R3__", function () {
      return SWITCH_RENDERER2_FACTORY__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__", function () {
      return SWITCH_TEMPLATE_REF_FACTORY__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__", function () {
      return SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵ_sanitizeHtml", function () {
      return _sanitizeHtml;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵ_sanitizeUrl", function () {
      return _sanitizeUrl;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵallowSanitizationBypassAndThrow", function () {
      return allowSanitizationBypassAndThrow;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵand", function () {
      return anchorDef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_a", function () {
      return isForwardRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_b", function () {
      return injectInjectorOnly;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_ba", function () {
      return instructionState;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bb", function () {
      return getLView;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bc", function () {
      return getPreviousOrParentTNode;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bd", function () {
      return getBindingRoot;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_be", function () {
      return nextContextImpl;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bg", function () {
      return pureFunction1Internal;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bh", function () {
      return pureFunction2Internal;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bi", function () {
      return pureFunction3Internal;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bj", function () {
      return pureFunction4Internal;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bk", function () {
      return pureFunctionVInternal;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bl", function () {
      return getUrlSanitizer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bm", function () {
      return makeParamDecorator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bn", function () {
      return makePropDecorator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bo", function () {
      return getClosureSafeProperty;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bq", function () {
      return getRootContext;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_br", function () {
      return i18nPostprocess;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_c", function () {
      return NullInjector;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_d", function () {
      return ReflectiveInjector_;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_e", function () {
      return ReflectiveDependency;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_f", function () {
      return resolveReflectiveProviders;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_g", function () {
      return _appIdRandomProviderFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_h", function () {
      return createElementRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_i", function () {
      return createTemplateRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_j", function () {
      return getModuleFactory__PRE_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_k", function () {
      return DebugNode__PRE_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_l", function () {
      return DebugElement__PRE_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_m", function () {
      return getDebugNodeR2__PRE_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_n", function () {
      return DefaultIterableDifferFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_o", function () {
      return DefaultKeyValueDifferFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_p", function () {
      return _iterableDiffersFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_q", function () {
      return _keyValueDiffersFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_r", function () {
      return _localeFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_s", function () {
      return APPLICATION_MODULE_PROVIDERS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_t", function () {
      return zoneSchedulerFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_u", function () {
      return USD_CURRENCY_CODE;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_v", function () {
      return _def;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_w", function () {
      return DebugContext;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_x", function () {
      return NgOnChangesFeatureImpl;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_y", function () {
      return SCHEDULER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_z", function () {
      return injectAttributeImpl;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵbypassSanitizationTrustHtml", function () {
      return bypassSanitizationTrustHtml;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵbypassSanitizationTrustResourceUrl", function () {
      return bypassSanitizationTrustResourceUrl;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵbypassSanitizationTrustScript", function () {
      return bypassSanitizationTrustScript;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵbypassSanitizationTrustStyle", function () {
      return bypassSanitizationTrustStyle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵbypassSanitizationTrustUrl", function () {
      return bypassSanitizationTrustUrl;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵccf", function () {
      return createComponentFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵclearOverrides", function () {
      return clearOverrides;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵclearResolutionOfComponentResourcesQueue", function () {
      return clearResolutionOfComponentResourcesQueue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵcmf", function () {
      return createNgModuleFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵcompileComponent", function () {
      return compileComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵcompileDirective", function () {
      return compileDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵcompileNgModule", function () {
      return compileNgModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵcompileNgModuleDefs", function () {
      return compileNgModuleDefs;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵcompileNgModuleFactory__POST_R3__", function () {
      return compileNgModuleFactory__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵcompilePipe", function () {
      return compilePipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵcreateInjector", function () {
      return createInjector;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵcrt", function () {
      return createRendererType2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵdefaultIterableDiffers", function () {
      return defaultIterableDiffers;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵdefaultKeyValueDiffers", function () {
      return defaultKeyValueDiffers;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵdetectChanges", function () {
      return detectChanges;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵdevModeEqual", function () {
      return devModeEqual;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵdid", function () {
      return directiveDef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵeld", function () {
      return elementDef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵfindLocaleData", function () {
      return findLocaleData;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵflushModuleScopingQueueAsMuchAsPossible", function () {
      return flushModuleScopingQueueAsMuchAsPossible;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵgetComponentViewDefinitionFactory", function () {
      return getComponentViewDefinitionFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵgetDebugNodeR2", function () {
      return getDebugNodeR2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵgetDebugNode__POST_R3__", function () {
      return getDebugNode__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵgetDirectives", function () {
      return getDirectives;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵgetHostElement", function () {
      return getHostElement;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵgetInjectableDef", function () {
      return getInjectableDef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵgetLContext", function () {
      return getLContext;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵgetLocaleCurrencyCode", function () {
      return getLocaleCurrencyCode;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵgetLocalePluralCase", function () {
      return getLocalePluralCase;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵgetModuleFactory__POST_R3__", function () {
      return getModuleFactory__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵgetSanitizationBypassType", function () {
      return getSanitizationBypassType;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵglobal", function () {
      return _global;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵinitServicesIfNeeded", function () {
      return initServicesIfNeeded;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵinlineInterpolate", function () {
      return inlineInterpolate;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵinterpolate", function () {
      return interpolate;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵisBoundToModule__POST_R3__", function () {
      return isBoundToModule__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵisDefaultChangeDetectionStrategy", function () {
      return isDefaultChangeDetectionStrategy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵisListLikeIterable", function () {
      return isListLikeIterable;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵisObservable", function () {
      return isObservable;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵisPromise", function () {
      return isPromise;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵivyEnabled", function () {
      return ivyEnabled;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵmakeDecorator", function () {
      return makeDecorator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵmarkDirty", function () {
      return markDirty;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵmod", function () {
      return moduleDef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵmpd", function () {
      return moduleProvideDef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵncd", function () {
      return ngContentDef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵnoSideEffects", function () {
      return noSideEffects;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵnov", function () {
      return nodeValue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵoverrideComponentView", function () {
      return overrideComponentView;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵoverrideProvider", function () {
      return overrideProvider;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵpad", function () {
      return pureArrayDef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵpatchComponentDefWithScope", function () {
      return patchComponentDefWithScope;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵpid", function () {
      return pipeDef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵpod", function () {
      return pureObjectDef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵppd", function () {
      return purePipeDef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵprd", function () {
      return providerDef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵpublishDefaultGlobalUtils", function () {
      return publishDefaultGlobalUtils;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵpublishGlobalUtil", function () {
      return publishGlobalUtil;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵqud", function () {
      return queryDef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵregisterLocaleData", function () {
      return registerLocaleData;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵregisterModuleFactory", function () {
      return registerModuleFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵregisterNgModuleType", function () {
      return registerNgModuleType;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵrenderComponent", function () {
      return renderComponent$1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵresetCompiledComponents", function () {
      return resetCompiledComponents;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵresetJitOptions", function () {
      return resetJitOptions;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵresolveComponentResources", function () {
      return resolveComponentResources;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵsetClassMetadata", function () {
      return setClassMetadata;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵsetCurrentInjector", function () {
      return setCurrentInjector;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵsetDocument", function () {
      return setDocument;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵsetLocaleId", function () {
      return setLocaleId;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵstore", function () {
      return store;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵstringify", function () {
      return stringify;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵted", function () {
      return textDef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵtransitiveScopesFor", function () {
      return transitiveScopesFor;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵunregisterLocaleData", function () {
      return unregisterAllLocaleData;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵunv", function () {
      return unwrapValue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵunwrapSafeValue", function () {
      return unwrapSafeValue;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵvid", function () {
      return viewDef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵwhenRendered", function () {
      return whenRendered;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵCopyDefinitionFeature", function () {
      return ɵɵCopyDefinitionFeature;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵInheritDefinitionFeature", function () {
      return ɵɵInheritDefinitionFeature;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵNgOnChangesFeature", function () {
      return ɵɵNgOnChangesFeature;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵProvidersFeature", function () {
      return ɵɵProvidersFeature;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵadvance", function () {
      return ɵɵadvance;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵattribute", function () {
      return ɵɵattribute;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate1", function () {
      return ɵɵattributeInterpolate1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate2", function () {
      return ɵɵattributeInterpolate2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate3", function () {
      return ɵɵattributeInterpolate3;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate4", function () {
      return ɵɵattributeInterpolate4;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate5", function () {
      return ɵɵattributeInterpolate5;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate6", function () {
      return ɵɵattributeInterpolate6;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate7", function () {
      return ɵɵattributeInterpolate7;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate8", function () {
      return ɵɵattributeInterpolate8;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolateV", function () {
      return ɵɵattributeInterpolateV;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵclassMap", function () {
      return ɵɵclassMap;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate1", function () {
      return ɵɵclassMapInterpolate1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate2", function () {
      return ɵɵclassMapInterpolate2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate3", function () {
      return ɵɵclassMapInterpolate3;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate4", function () {
      return ɵɵclassMapInterpolate4;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate5", function () {
      return ɵɵclassMapInterpolate5;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate6", function () {
      return ɵɵclassMapInterpolate6;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate7", function () {
      return ɵɵclassMapInterpolate7;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate8", function () {
      return ɵɵclassMapInterpolate8;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolateV", function () {
      return ɵɵclassMapInterpolateV;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵclassProp", function () {
      return ɵɵclassProp;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵcontentQuery", function () {
      return ɵɵcontentQuery;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵdefineComponent", function () {
      return ɵɵdefineComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵdefineDirective", function () {
      return ɵɵdefineDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵdefineInjectable", function () {
      return ɵɵdefineInjectable;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵdefineInjector", function () {
      return ɵɵdefineInjector;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵdefineNgModule", function () {
      return ɵɵdefineNgModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵdefinePipe", function () {
      return ɵɵdefinePipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵdirectiveInject", function () {
      return ɵɵdirectiveInject;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵdisableBindings", function () {
      return ɵɵdisableBindings;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵelement", function () {
      return ɵɵelement;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵelementContainer", function () {
      return ɵɵelementContainer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵelementContainerEnd", function () {
      return ɵɵelementContainerEnd;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵelementContainerStart", function () {
      return ɵɵelementContainerStart;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵelementEnd", function () {
      return ɵɵelementEnd;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵelementStart", function () {
      return ɵɵelementStart;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵenableBindings", function () {
      return ɵɵenableBindings;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵgetCurrentView", function () {
      return ɵɵgetCurrentView;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵgetFactoryOf", function () {
      return ɵɵgetFactoryOf;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵgetInheritedFactory", function () {
      return ɵɵgetInheritedFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵhostProperty", function () {
      return ɵɵhostProperty;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵi18n", function () {
      return ɵɵi18n;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵi18nApply", function () {
      return ɵɵi18nApply;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵi18nAttributes", function () {
      return ɵɵi18nAttributes;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵi18nEnd", function () {
      return ɵɵi18nEnd;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵi18nExp", function () {
      return ɵɵi18nExp;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵi18nPostprocess", function () {
      return ɵɵi18nPostprocess;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵi18nStart", function () {
      return ɵɵi18nStart;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵinject", function () {
      return ɵɵinject;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵinjectAttribute", function () {
      return ɵɵinjectAttribute;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵinjectPipeChangeDetectorRef", function () {
      return ɵɵinjectPipeChangeDetectorRef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵinvalidFactory", function () {
      return ɵɵinvalidFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵinvalidFactoryDep", function () {
      return ɵɵinvalidFactoryDep;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵlistener", function () {
      return ɵɵlistener;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵloadQuery", function () {
      return ɵɵloadQuery;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵnamespaceHTML", function () {
      return ɵɵnamespaceHTML;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵnamespaceMathML", function () {
      return ɵɵnamespaceMathML;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵnamespaceSVG", function () {
      return ɵɵnamespaceSVG;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵnextContext", function () {
      return ɵɵnextContext;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpipe", function () {
      return ɵɵpipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpipeBind1", function () {
      return ɵɵpipeBind1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpipeBind2", function () {
      return ɵɵpipeBind2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpipeBind3", function () {
      return ɵɵpipeBind3;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpipeBind4", function () {
      return ɵɵpipeBind4;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpipeBindV", function () {
      return ɵɵpipeBindV;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵprojection", function () {
      return ɵɵprojection;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵprojectionDef", function () {
      return ɵɵprojectionDef;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵproperty", function () {
      return ɵɵproperty;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate", function () {
      return ɵɵpropertyInterpolate;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate1", function () {
      return ɵɵpropertyInterpolate1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate2", function () {
      return ɵɵpropertyInterpolate2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate3", function () {
      return ɵɵpropertyInterpolate3;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate4", function () {
      return ɵɵpropertyInterpolate4;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate5", function () {
      return ɵɵpropertyInterpolate5;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate6", function () {
      return ɵɵpropertyInterpolate6;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate7", function () {
      return ɵɵpropertyInterpolate7;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate8", function () {
      return ɵɵpropertyInterpolate8;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolateV", function () {
      return ɵɵpropertyInterpolateV;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction0", function () {
      return ɵɵpureFunction0;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction1", function () {
      return ɵɵpureFunction1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction2", function () {
      return ɵɵpureFunction2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction3", function () {
      return ɵɵpureFunction3;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction4", function () {
      return ɵɵpureFunction4;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction5", function () {
      return ɵɵpureFunction5;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction6", function () {
      return ɵɵpureFunction6;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction7", function () {
      return ɵɵpureFunction7;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction8", function () {
      return ɵɵpureFunction8;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵpureFunctionV", function () {
      return ɵɵpureFunctionV;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵqueryRefresh", function () {
      return ɵɵqueryRefresh;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵreference", function () {
      return ɵɵreference;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵresolveBody", function () {
      return ɵɵresolveBody;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵresolveDocument", function () {
      return ɵɵresolveDocument;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵresolveWindow", function () {
      return ɵɵresolveWindow;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵrestoreView", function () {
      return ɵɵrestoreView;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeHtml", function () {
      return ɵɵsanitizeHtml;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeResourceUrl", function () {
      return ɵɵsanitizeResourceUrl;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeScript", function () {
      return ɵɵsanitizeScript;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeStyle", function () {
      return ɵɵsanitizeStyle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeUrl", function () {
      return ɵɵsanitizeUrl;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeUrlOrResourceUrl", function () {
      return ɵɵsanitizeUrlOrResourceUrl;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵselect", function () {
      return ɵɵselect;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵsetComponentScope", function () {
      return ɵɵsetComponentScope;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵsetNgModuleScope", function () {
      return ɵɵsetNgModuleScope;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstaticContentQuery", function () {
      return ɵɵstaticContentQuery;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstaticViewQuery", function () {
      return ɵɵstaticViewQuery;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstyleMap", function () {
      return ɵɵstyleMap;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate1", function () {
      return ɵɵstyleMapInterpolate1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate2", function () {
      return ɵɵstyleMapInterpolate2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate3", function () {
      return ɵɵstyleMapInterpolate3;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate4", function () {
      return ɵɵstyleMapInterpolate4;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate5", function () {
      return ɵɵstyleMapInterpolate5;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate6", function () {
      return ɵɵstyleMapInterpolate6;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate7", function () {
      return ɵɵstyleMapInterpolate7;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate8", function () {
      return ɵɵstyleMapInterpolate8;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolateV", function () {
      return ɵɵstyleMapInterpolateV;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstyleProp", function () {
      return ɵɵstyleProp;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate1", function () {
      return ɵɵstylePropInterpolate1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate2", function () {
      return ɵɵstylePropInterpolate2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate3", function () {
      return ɵɵstylePropInterpolate3;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate4", function () {
      return ɵɵstylePropInterpolate4;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate5", function () {
      return ɵɵstylePropInterpolate5;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate6", function () {
      return ɵɵstylePropInterpolate6;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate7", function () {
      return ɵɵstylePropInterpolate7;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate8", function () {
      return ɵɵstylePropInterpolate8;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolateV", function () {
      return ɵɵstylePropInterpolateV;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵsyntheticHostListener", function () {
      return ɵɵsyntheticHostListener;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵsyntheticHostProperty", function () {
      return ɵɵsyntheticHostProperty;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵtemplate", function () {
      return ɵɵtemplate;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵtemplateRefExtractor", function () {
      return ɵɵtemplateRefExtractor;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵtext", function () {
      return ɵɵtext;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate", function () {
      return ɵɵtextInterpolate;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate1", function () {
      return ɵɵtextInterpolate1;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate2", function () {
      return ɵɵtextInterpolate2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate3", function () {
      return ɵɵtextInterpolate3;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate4", function () {
      return ɵɵtextInterpolate4;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate5", function () {
      return ɵɵtextInterpolate5;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate6", function () {
      return ɵɵtextInterpolate6;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate7", function () {
      return ɵɵtextInterpolate7;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate8", function () {
      return ɵɵtextInterpolate8;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolateV", function () {
      return ɵɵtextInterpolateV;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵɵviewQuery", function () {
      return ɵɵviewQuery;
    });
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /**
     * @license Angular v10.0.9
     * (c) 2010-2020 Google LLC. https://angular.io/
     * License: MIT
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Convince closure compiler that the wrapped function has no side-effects.
     *
     * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to
     * allow us to execute a function but have closure compiler mark the call as no-side-effects.
     * It is important that the return value for the `noSideEffects` function be assigned
     * to something which is retained otherwise the call to `noSideEffects` will be removed by closure
     * compiler.
     */


    function noSideEffects(fn) {
      return {
        toString: fn
      }.toString();
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var ANNOTATIONS = '__annotations__';
    var PARAMETERS = '__parameters__';
    var PROP_METADATA = '__prop__metadata__';
    /**
     * @suppress {globalThis}
     */

    function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {
      return noSideEffects(function () {
        var metaCtor = makeMetadataCtor(props);

        function DecoratorFactory() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          if (this instanceof DecoratorFactory) {
            metaCtor.call.apply(metaCtor, [this].concat(args));
            return this;
          }

          var annotationInstance = _construct(DecoratorFactory, args);

          return function TypeDecorator(cls) {
            if (typeFn) typeFn.apply(void 0, [cls].concat(args)); // Use of Object.defineProperty is important since it creates non-enumerable property which
            // prevents the property is copied during subclassing.

            var annotations = cls.hasOwnProperty(ANNOTATIONS) ? cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, {
              value: []
            })[ANNOTATIONS];
            annotations.push(annotationInstance);
            if (additionalProcessing) additionalProcessing(cls);
            return cls;
          };
        }

        if (parentClass) {
          DecoratorFactory.prototype = Object.create(parentClass.prototype);
        }

        DecoratorFactory.prototype.ngMetadataName = name;
        DecoratorFactory.annotationCls = DecoratorFactory;
        return DecoratorFactory;
      });
    }

    function makeMetadataCtor(props) {
      return function ctor() {
        if (props) {
          var values = props.apply(void 0, arguments);

          for (var propName in values) {
            this[propName] = values[propName];
          }
        }
      };
    }

    function makeParamDecorator(name, props, parentClass) {
      return noSideEffects(function () {
        var metaCtor = makeMetadataCtor(props);

        function ParamDecoratorFactory() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          if (this instanceof ParamDecoratorFactory) {
            metaCtor.apply(this, args);
            return this;
          }

          var annotationInstance = _construct(ParamDecoratorFactory, args);

          ParamDecorator.annotation = annotationInstance;
          return ParamDecorator;

          function ParamDecorator(cls, unusedKey, index) {
            // Use of Object.defineProperty is important since it creates non-enumerable property which
            // prevents the property is copied during subclassing.
            var parameters = cls.hasOwnProperty(PARAMETERS) ? cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, {
              value: []
            })[PARAMETERS]; // there might be gaps if some in between parameters do not have annotations.
            // we pad with nulls.

            while (parameters.length <= index) {
              parameters.push(null);
            }

            (parameters[index] = parameters[index] || []).push(annotationInstance);
            return cls;
          }
        }

        if (parentClass) {
          ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
        }

        ParamDecoratorFactory.prototype.ngMetadataName = name;
        ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
        return ParamDecoratorFactory;
      });
    }

    function makePropDecorator(name, props, parentClass, additionalProcessing) {
      return noSideEffects(function () {
        var metaCtor = makeMetadataCtor(props);

        function PropDecoratorFactory() {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          if (this instanceof PropDecoratorFactory) {
            metaCtor.apply(this, args);
            return this;
          }

          var decoratorInstance = _construct(PropDecoratorFactory, args);

          function PropDecorator(target, name) {
            var constructor = target.constructor; // Use of Object.defineProperty is important because it creates a non-enumerable property
            // which prevents the property from being copied during subclassing.

            var meta = constructor.hasOwnProperty(PROP_METADATA) ? constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, {
              value: {}
            })[PROP_METADATA];
            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
            meta[name].unshift(decoratorInstance);
            if (additionalProcessing) additionalProcessing.apply(void 0, [target, name].concat(args));
          }

          return PropDecorator;
        }

        if (parentClass) {
          PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
        }

        PropDecoratorFactory.prototype.ngMetadataName = name;
        PropDecoratorFactory.annotationCls = PropDecoratorFactory;
        return PropDecoratorFactory;
      });
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var ɵ0 = function ɵ0(token) {
      return {
        token: token
      };
    };
    /**
     * Inject decorator and metadata.
     *
     * @Annotation
     * @publicApi
     */


    var Inject = /*@__PURE__*/makeParamDecorator('Inject', ɵ0);
    /**
     * Optional decorator and metadata.
     *
     * @Annotation
     * @publicApi
     */

    var Optional = /*@__PURE__*/makeParamDecorator('Optional');
    /**
     * Self decorator and metadata.
     *
     * @Annotation
     * @publicApi
     */

    var Self = /*@__PURE__*/makeParamDecorator('Self');
    /**
     * `SkipSelf` decorator and metadata.
     *
     * @Annotation
     * @publicApi
     */

    var SkipSelf = /*@__PURE__*/makeParamDecorator('SkipSelf');
    /**
     * Host decorator and metadata.
     *
     * @Annotation
     * @publicApi
     */

    var Host = /*@__PURE__*/makeParamDecorator('Host');

    var ɵ1 = function ɵ1(attributeName) {
      return {
        attributeName: attributeName
      };
    };
    /**
     * Attribute decorator and metadata.
     *
     * @Annotation
     * @publicApi
     */


    var Attribute = /*@__PURE__*/makeParamDecorator('Attribute', ɵ1);
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Injection flags for DI.
     *
     * @publicApi
     */

    var InjectFlags = /*@__PURE__*/function (InjectFlags) {
      // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.

      /** Check self and check parent injector if needed */
      InjectFlags[InjectFlags["Default"] = 0] = "Default";
      /**
       * Specifies that an injector should retrieve a dependency from any injector until reaching the
       * host element of the current component. (Only used with Element Injector)
       */

      InjectFlags[InjectFlags["Host"] = 1] = "Host";
      /** Don't ascend to ancestors of the node requesting injection. */

      InjectFlags[InjectFlags["Self"] = 2] = "Self";
      /** Skip the node that is requesting injection. */

      InjectFlags[InjectFlags["SkipSelf"] = 4] = "SkipSelf";
      /** Inject `defaultValue` instead if token not found. */

      InjectFlags[InjectFlags["Optional"] = 8] = "Optional";
      return InjectFlags;
    }({});
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function getClosureSafeProperty(objWithPropertyToExtract) {
      for (var key in objWithPropertyToExtract) {
        if (objWithPropertyToExtract[key] === getClosureSafeProperty) {
          return key;
        }
      }

      throw Error('Could not find renamed property on target object.');
    }
    /**
     * Sets properties on a target object from a source object, but only if
     * the property doesn't already exist on the target object.
     * @param target The target to set properties on
     * @param source The source of the property keys and values to set
     */


    function fillProperties(target, source) {
      for (var key in source) {
        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {
          target[key] = source[key];
        }
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and
     * in which injectors (if any) it will be available.
     *
     * This should be assigned to a static `ɵprov` field on a type, which will then be an
     * `InjectableType`.
     *
     * Options:
     * * `providedIn` determines which injectors will include the injectable, by either associating it
     *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be
     *   provided in the `'root'` injector, which will be the application-level injector in most apps.
     * * `factory` gives the zero argument function which will create an instance of the injectable.
     *   The factory can call `inject` to access the `Injector` and request injection of dependencies.
     *
     * @codeGenApi
     * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.
     */


    function ɵɵdefineInjectable(opts) {
      return {
        token: opts.token,
        providedIn: opts.providedIn || null,
        factory: opts.factory,
        value: undefined
      };
    }
    /**
     * @deprecated in v8, delete after v10. This API should be used only be generated code, and that
     * code should now use ɵɵdefineInjectable instead.
     * @publicApi
     */


    var defineInjectable = ɵɵdefineInjectable;
    /**
     * Construct an `InjectorDef` which configures an injector.
     *
     * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an
     * `InjectorType`.
     *
     * Options:
     *
     * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to
     *   create the type must be provided. If that factory function needs to inject arguments, it can
     *   use the `inject` function.
     * * `providers`: an optional array of providers to add to the injector. Each provider must
     *   either have a factory or point to a type which has a `ɵprov` static property (the
     *   type must be an `InjectableType`).
     * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s
     *   whose providers will also be added to the injector. Locally provided types will override
     *   providers from imports.
     *
     * @codeGenApi
     */

    function ɵɵdefineInjector(options) {
      return {
        factory: options.factory,
        providers: options.providers || [],
        imports: options.imports || []
      };
    }
    /**
     * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading
     * inherited value.
     *
     * @param type A type which may have its own (non-inherited) `ɵprov`.
     */


    function getInjectableDef(type) {
      return getOwnDefinition(type, type[NG_PROV_DEF]) || getOwnDefinition(type, type[NG_INJECTABLE_DEF]);
    }
    /**
     * Return `def` only if it is defined directly on `type` and is not inherited from a base
     * class of `type`.
     *
     * The function `Object.hasOwnProperty` is not sufficient to distinguish this case because in older
     * browsers (e.g. IE10) static property inheritance is implemented by copying the properties.
     *
     * Instead, the definition's `token` is compared to the `type`, and if they don't match then the
     * property was not defined directly on the type itself, and was likely inherited. The definition
     * is only returned if the `type` matches the `def.token`.
     */


    function getOwnDefinition(type, def) {
      return def && def.token === type ? def : null;
    }
    /**
     * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.
     *
     * @param type A type which may have `ɵprov`, via inheritance.
     *
     * @deprecated Will be removed in a future version of Angular, where an error will occur in the
     *     scenario if we find the `ɵprov` on an ancestor only.
     */


    function getInheritedInjectableDef(type) {
      // See `jit/injectable.ts#compileInjectable` for context on NG_PROV_DEF_FALLBACK.
      var def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF] || type[NG_PROV_DEF_FALLBACK] && type[NG_PROV_DEF_FALLBACK]());

      if (def) {
        var _typeName = getTypeName(type); // TODO(FW-1307): Re-add ngDevMode when closure can handle it
        // ngDevMode &&


        console.warn("DEPRECATED: DI is instantiating a token \"".concat(_typeName, "\" that inherits its @Injectable decorator but does not provide one itself.\n") + "This will become an error in a future version of Angular. Please add @Injectable() to the \"".concat(_typeName, "\" class."));
        return def;
      } else {
        return null;
      }
    }
    /** Gets the name of a type, accounting for some cross-browser differences. */


    function getTypeName(type) {
      // `Function.prototype.name` behaves differently between IE and other browsers. In most browsers
      // it'll always return the name of the function itself, no matter how many other functions it
      // inherits from. On IE the function doesn't have its own `name` property, but it takes it from
      // the lowest level in the prototype chain. E.g. if we have `class Foo extends Parent` most
      // browsers will evaluate `Foo.name` to `Foo` while IE will return `Parent`. We work around
      // the issue by converting the function to a string and parsing its name out that way via a regex.
      if (type.hasOwnProperty('name')) {
        return type.name;
      }

      var match = ('' + type).match(/^function\s*([^\s(]+)/);
      return match === null ? '' : match[1];
    }
    /**
     * Read the injector def type in a way which is immune to accidentally reading inherited value.
     *
     * @param type type which may have an injector def (`ɵinj`)
     */


    function getInjectorDef(type) {
      return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ? type[NG_INJ_DEF] : null;
    }

    var NG_PROV_DEF = /*@__PURE__*/getClosureSafeProperty({
      ɵprov: getClosureSafeProperty
    });
    var NG_INJ_DEF = /*@__PURE__*/getClosureSafeProperty({
      ɵinj: getClosureSafeProperty
    }); // On IE10 properties defined via `defineProperty` won't be inherited by child classes,
    // which will break inheriting the injectable definition from a grandparent through an
    // undecorated parent class. We work around it by defining a fallback method which will be
    // used to retrieve the definition. This should only be a problem in JIT mode, because in
    // AOT TypeScript seems to have a workaround for static properties. When inheriting from an
    // undecorated parent is no longer supported in v10, this can safely be removed.

    var NG_PROV_DEF_FALLBACK = /*@__PURE__*/getClosureSafeProperty({
      ɵprovFallback: getClosureSafeProperty
    }); // We need to keep these around so we can read off old defs if new defs are unavailable

    var NG_INJECTABLE_DEF = /*@__PURE__*/getClosureSafeProperty({
      ngInjectableDef: getClosureSafeProperty
    });
    var NG_INJECTOR_DEF = /*@__PURE__*/getClosureSafeProperty({
      ngInjectorDef: getClosureSafeProperty
    });
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    function stringify(token) {
      if (typeof token === 'string') {
        return token;
      }

      if (Array.isArray(token)) {
        return '[' + token.map(stringify).join(', ') + ']';
      }

      if (token == null) {
        return '' + token;
      }

      if (token.overriddenName) {
        return "".concat(token.overriddenName);
      }

      if (token.name) {
        return "".concat(token.name);
      }

      var res = token.toString();

      if (res == null) {
        return '' + res;
      }

      var newLineIndex = res.indexOf('\n');
      return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
    }
    /**
     * Concatenates two strings with separator, allocating new strings only when necessary.
     *
     * @param before before string.
     * @param separator separator string.
     * @param after after string.
     * @returns concatenated string.
     */


    function concatStringsWithSpace(before, after) {
      return before == null || before === '' ? after === null ? '' : after : after == null || after === '' ? before : before + ' ' + after;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var __forward_ref__ = /*@__PURE__*/getClosureSafeProperty({
      __forward_ref__: getClosureSafeProperty
    });
    /**
     * Allows to refer to references which are not yet defined.
     *
     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
     * DI is declared, but not yet defined. It is also used when the `token` which we use when creating
     * a query is not yet defined.
     *
     * @usageNotes
     * ### Example
     * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
     * @publicApi
     */


    function forwardRef(forwardRefFn) {
      forwardRefFn.__forward_ref__ = forwardRef;

      forwardRefFn.toString = function () {
        return stringify(this());
      };

      return forwardRefFn;
    }
    /**
     * Lazily retrieves the reference value from a forwardRef.
     *
     * Acts as the identity function when given a non-forward-ref value.
     *
     * @usageNotes
     * ### Example
     *
     * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
     *
     * @see `forwardRef`
     * @publicApi
     */


    function resolveForwardRef(type) {
      return isForwardRef(type) ? type() : type;
    }
    /** Checks whether a function is wrapped by a `forwardRef`. */


    function isForwardRef(fn) {
      return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) && fn.__forward_ref__ === forwardRef;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var __globalThis = typeof globalThis !== 'undefined' && globalThis;

    var __window = typeof window !== 'undefined' && window;

    var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;

    var __global = typeof global !== 'undefined' && global; // Always use __globalThis if available, which is the spec-defined global variable across all
    // environments, then fallback to __global first, because in Node tests both __global and
    // __window may be defined and _global should be __global in that case.


    var _global = __globalThis || __global || __window || __self;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var R3ResolvedDependencyType = /*@__PURE__*/function (R3ResolvedDependencyType) {
      R3ResolvedDependencyType[R3ResolvedDependencyType["Token"] = 0] = "Token";
      R3ResolvedDependencyType[R3ResolvedDependencyType["Attribute"] = 1] = "Attribute";
      R3ResolvedDependencyType[R3ResolvedDependencyType["ChangeDetectorRef"] = 2] = "ChangeDetectorRef";
      R3ResolvedDependencyType[R3ResolvedDependencyType["Invalid"] = 3] = "Invalid";
      return R3ResolvedDependencyType;
    }({});

    var R3FactoryTarget = /*@__PURE__*/function (R3FactoryTarget) {
      R3FactoryTarget[R3FactoryTarget["Directive"] = 0] = "Directive";
      R3FactoryTarget[R3FactoryTarget["Component"] = 1] = "Component";
      R3FactoryTarget[R3FactoryTarget["Injectable"] = 2] = "Injectable";
      R3FactoryTarget[R3FactoryTarget["Pipe"] = 3] = "Pipe";
      R3FactoryTarget[R3FactoryTarget["NgModule"] = 4] = "NgModule";
      return R3FactoryTarget;
    }({});

    var ViewEncapsulation = /*@__PURE__*/function (ViewEncapsulation) {
      ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
      ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
      ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
      ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
      return ViewEncapsulation;
    }({});
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function getCompilerFacade() {
      var globalNg = _global['ng'];

      if (!globalNg || !globalNg.ɵcompilerFacade) {
        throw new Error("Angular JIT compilation failed: '@angular/compiler' not loaded!\n" + "  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\n" + "  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\n" + "  - Alternatively provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.");
      }

      return globalNg.ɵcompilerFacade;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var NG_COMP_DEF = /*@__PURE__*/getClosureSafeProperty({
      ɵcmp: getClosureSafeProperty
    });
    var NG_DIR_DEF = /*@__PURE__*/getClosureSafeProperty({
      ɵdir: getClosureSafeProperty
    });
    var NG_PIPE_DEF = /*@__PURE__*/getClosureSafeProperty({
      ɵpipe: getClosureSafeProperty
    });
    var NG_MOD_DEF = /*@__PURE__*/getClosureSafeProperty({
      ɵmod: getClosureSafeProperty
    });
    var NG_LOC_ID_DEF = /*@__PURE__*/getClosureSafeProperty({
      ɵloc: getClosureSafeProperty
    });
    var NG_FACTORY_DEF = /*@__PURE__*/getClosureSafeProperty({
      ɵfac: getClosureSafeProperty
    });
    /**
     * If a directive is diPublic, bloomAdd sets a property on the type with this constant as
     * the key and the directive's unique ID as the value. This allows us to map directives to their
     * bloom filter bit for DI.
     */
    // TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.

    var NG_ELEMENT_ID = /*@__PURE__*/getClosureSafeProperty({
      __NG_ELEMENT_ID__: getClosureSafeProperty
    });
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    function ngDevModeResetPerfCounters() {
      var locationString = typeof location !== 'undefined' ? location.toString() : '';
      var newCounters = {
        namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,
        firstCreatePass: 0,
        tNode: 0,
        tView: 0,
        rendererCreateTextNode: 0,
        rendererSetText: 0,
        rendererCreateElement: 0,
        rendererAddEventListener: 0,
        rendererSetAttribute: 0,
        rendererRemoveAttribute: 0,
        rendererSetProperty: 0,
        rendererSetClassName: 0,
        rendererAddClass: 0,
        rendererRemoveClass: 0,
        rendererSetStyle: 0,
        rendererRemoveStyle: 0,
        rendererDestroy: 0,
        rendererDestroyNode: 0,
        rendererMoveNode: 0,
        rendererRemoveNode: 0,
        rendererAppendChild: 0,
        rendererInsertBefore: 0,
        rendererCreateComment: 0
      }; // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.

      var allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;
      _global['ngDevMode'] = allowNgDevModeTrue && newCounters;
      return newCounters;
    }
    /**
     * This function checks to see if the `ngDevMode` has been set. If yes,
     * then we honor it, otherwise we default to dev mode with additional checks.
     *
     * The idea is that unless we are doing production build where we explicitly
     * set `ngDevMode == false` we should be helping the developer by providing
     * as much early warning and errors as possible.
     *
     * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions
     * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode
     * is defined for the entire instruction set.
     *
     * When checking `ngDevMode` on toplevel, always init it before referencing it
     * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can
     *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.
     *
     * Details on possible values for `ngDevMode` can be found on its docstring.
     *
     * NOTE:
     * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.
     */


    function initNgDevMode() {
      // The below checks are to ensure that calling `initNgDevMode` multiple times does not
      // reset the counters.
      // If the `ngDevMode` is not an object, then it means we have not created the perf counters
      // yet.
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        if (typeof ngDevMode !== 'object') {
          ngDevModeResetPerfCounters();
        }

        return !!ngDevMode;
      }

      return false;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Creates a token that can be used in a DI Provider.
     *
     * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
     * runtime representation) such as when injecting an interface, callable type, array or
     * parameterized type.
     *
     * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by
     * the `Injector`. This provides additional level of type safety.
     *
     * ```
     * interface MyInterface {...}
     * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
     * // myInterface is inferred to be MyInterface.
     * ```
     *
     * When creating an `InjectionToken`, you can optionally specify a factory function which returns
     * (possibly by creating) a default value of the parameterized type `T`. This sets up the
     * `InjectionToken` using this factory as a provider as if it was defined explicitly in the
     * application's root injector. If the factory function, which takes zero arguments, needs to inject
     * dependencies, it can do so using the `inject` function. See below for an example.
     *
     * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which
     * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As
     * mentioned above, `'root'` is the default value for `providedIn`.
     *
     * @usageNotes
     * ### Basic Example
     *
     * ### Plain InjectionToken
     *
     * {@example core/di/ts/injector_spec.ts region='InjectionToken'}
     *
     * ### Tree-shakable InjectionToken
     *
     * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}
     *
     *
     * @publicApi
     */


    var InjectionToken = /*#__PURE__*/function () {
      function InjectionToken(_desc, options) {
        _classCallCheck(this, InjectionToken);

        this._desc = _desc;
        /** @internal */

        this.ngMetadataName = 'InjectionToken';
        this.ɵprov = undefined;

        if (typeof options == 'number') {
          // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.
          // __NG_ELEMENT_ID__ is Used by Ivy to determine bloom filter id.
          // We are using it to assign `-1` which is used to identify `Injector`.
          this.__NG_ELEMENT_ID__ = options;
        } else if (options !== undefined) {
          this.ɵprov = ɵɵdefineInjectable({
            token: this,
            providedIn: options.providedIn || 'root',
            factory: options.factory
          });
        }
      }

      _createClass2(InjectionToken, [{
        key: "toString",
        value: function toString() {
          return "InjectionToken ".concat(this._desc);
        }
      }]);

      return InjectionToken;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.
     *
     * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a
     * project.
     *
     * @publicApi
     */


    var INJECTOR = /*@__PURE__*/new InjectionToken('INJECTOR', -1 // `-1` is used by Ivy DI system as special value to recognize it as `Injector`.
    );
    var _THROW_IF_NOT_FOUND = {};
    var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
    var NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';
    var NG_TOKEN_PATH = 'ngTokenPath';
    var NEW_LINE = /\n/gm;
    var NO_NEW_LINE = 'ɵ';
    var SOURCE = '__source';
    var ɵ0$1 = getClosureSafeProperty;
    var USE_VALUE = /*@__PURE__*/getClosureSafeProperty({
      provide: String,
      useValue: ɵ0$1
    });
    /**
     * Current injector value used by `inject`.
     * - `undefined`: it is an error to call `inject`
     * - `null`: `inject` can be called but there is no injector (limp-mode).
     * - Injector instance: Use the injector for resolution.
     */

    var _currentInjector = undefined;

    function setCurrentInjector(injector) {
      var former = _currentInjector;
      _currentInjector = injector;
      return former;
    }
    /**
     * Current implementation of inject.
     *
     * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed
     * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this
     * way for two reasons:
     *  1. `Injector` should not depend on ivy logic.
     *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.
     */


    var _injectImplementation;
    /**
     * Sets the current inject implementation.
     */


    function setInjectImplementation(impl) {
      var previous = _injectImplementation;
      _injectImplementation = impl;
      return previous;
    }

    function injectInjectorOnly(token) {
      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : InjectFlags.Default;

      if (_currentInjector === undefined) {
        throw new Error("inject() must be called from an injection context");
      } else if (_currentInjector === null) {
        return injectRootLimpMode(token, undefined, flags);
      } else {
        return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);
      }
    }

    function ɵɵinject(token) {
      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : InjectFlags.Default;
      return (_injectImplementation || injectInjectorOnly)(resolveForwardRef(token), flags);
    }
    /**
     * Throws an error indicating that a factory function could not be generated by the compiler for a
     * particular class.
     *
     * This instruction allows the actual error message to be optimized away when ngDevMode is turned
     * off, saving bytes of generated code while still providing a good experience in dev mode.
     *
     * The name of the class is not mentioned here, but will be in the generated factory function name
     * and thus in the stack trace.
     *
     * @codeGenApi
     */


    function ɵɵinvalidFactoryDep(index) {
      var msg = ngDevMode ? "This constructor is not compatible with Angular Dependency Injection because its dependency at index ".concat(index, " of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ").concat(index, " is correct and 2) the correct Angular decorators are defined for this class and its ancestors.") : 'invalid';
      throw new Error(msg);
    }
    /**
     * Injects a token from the currently active injector.
     *
     * Must be used in the context of a factory function such as one defined for an
     * `InjectionToken`. Throws an error if not called from such a context.
     *
     * Within such a factory function, using this function to request injection of a dependency
     * is faster and more type-safe than providing an additional array of dependencies
     * (as has been common with `useFactory` providers).
     *
     * @param token The injection token for the dependency to be injected.
     * @param flags Optional flags that control how injection is executed.
     * The flags correspond to injection strategies that can be specified with
     * parameter decorators `@Host`, `@Self`, `@SkipSef`, and `@Optional`.
     * @returns True if injection is successful, null otherwise.
     *
     * @usageNotes
     *
     * ### Example
     *
     * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}
     *
     * @publicApi
     */


    var inject = ɵɵinject;
    /**
     * Injects `root` tokens in limp mode.
     *
     * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to
     * `"root"`. This is known as the limp mode injection. In such case the value is stored in the
     * `InjectableDef`.
     */

    function injectRootLimpMode(token, notFoundValue, flags) {
      var injectableDef = getInjectableDef(token);

      if (injectableDef && injectableDef.providedIn == 'root') {
        return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() : injectableDef.value;
      }

      if (flags & InjectFlags.Optional) return null;
      if (notFoundValue !== undefined) return notFoundValue;
      throw new Error("Injector: NOT_FOUND [".concat(stringify(token), "]"));
    }

    function injectArgs(types) {
      var args = [];

      for (var i = 0; i < types.length; i++) {
        var arg = resolveForwardRef(types[i]);

        if (Array.isArray(arg)) {
          if (arg.length === 0) {
            throw new Error('Arguments array must have arguments.');
          }

          var type = undefined;
          var flags = InjectFlags.Default;

          for (var j = 0; j < arg.length; j++) {
            var meta = arg[j];

            if (meta instanceof Optional || meta.ngMetadataName === 'Optional' || meta === Optional) {
              flags |= InjectFlags.Optional;
            } else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf' || meta === SkipSelf) {
              flags |= InjectFlags.SkipSelf;
            } else if (meta instanceof Self || meta.ngMetadataName === 'Self' || meta === Self) {
              flags |= InjectFlags.Self;
            } else if (meta instanceof Inject || meta === Inject) {
              type = meta.token;
            } else {
              type = meta;
            }
          }

          args.push(ɵɵinject(type, flags));
        } else {
          args.push(ɵɵinject(arg));
        }
      }

      return args;
    }

    var NullInjector = /*#__PURE__*/function () {
      function NullInjector() {
        _classCallCheck(this, NullInjector);
      }

      _createClass2(NullInjector, [{
        key: "get",
        value: function get(token) {
          var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;

          if (notFoundValue === THROW_IF_NOT_FOUND) {
            // Intentionally left behind: With dev tools open the debugger will stop here. There is no
            // reason why correctly written application should cause this exception.
            // TODO(misko): uncomment the next line once `ngDevMode` works with closure.
            // if (ngDevMode) debugger;
            var error = new Error("NullInjectorError: No provider for ".concat(stringify(token), "!"));
            error.name = 'NullInjectorError';
            throw error;
          }

          return notFoundValue;
        }
      }]);

      return NullInjector;
    }();

    function catchInjectorError(e, token, injectorErrorName, source) {
      var tokenPath = e[NG_TEMP_TOKEN_PATH];

      if (token[SOURCE]) {
        tokenPath.unshift(token[SOURCE]);
      }

      e.message = formatError('\n' + e.message, tokenPath, injectorErrorName, source);
      e[NG_TOKEN_PATH] = tokenPath;
      e[NG_TEMP_TOKEN_PATH] = null;
      throw e;
    }

    function formatError(text, obj, injectorErrorName) {
      var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      text = text && text.charAt(0) === '\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;
      var context = stringify(obj);

      if (Array.isArray(obj)) {
        context = obj.map(stringify).join(' -> ');
      } else if (typeof obj === 'object') {
        var parts = [];

        for (var key in obj) {
          if (obj.hasOwnProperty(key)) {
            var value = obj[key];
            parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));
          }
        }

        context = "{".concat(parts.join(', '), "}");
      }

      return "".concat(injectorErrorName).concat(source ? '(' + source + ')' : '', "[").concat(context, "]: ").concat(text.replace(NEW_LINE, '\n  '));
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.
     *
     * This should be kept up to date with the public exports of @angular/core.
     */


    var angularCoreDiEnv = {
      'ɵɵdefineInjectable': ɵɵdefineInjectable,
      'ɵɵdefineInjector': ɵɵdefineInjector,
      'ɵɵinject': ɵɵinject,
      'ɵɵgetFactoryOf': getFactoryOf,
      'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep
    };

    function getFactoryOf(type) {
      var typeAny = type;

      if (isForwardRef(type)) {
        return function () {
          var factory = getFactoryOf(resolveForwardRef(typeAny));
          return factory ? factory() : null;
        };
      }

      var def = getInjectableDef(typeAny) || getInjectorDef(typeAny);

      if (!def || def.factory === undefined) {
        return null;
      }

      return def.factory;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Represents an instance of an `NgModule` created by an `NgModuleFactory`.
     * Provides access to the `NgModule` instance and related objects.
     *
     * @publicApi
     */


    var NgModuleRef = function NgModuleRef() {
      _classCallCheck(this, NgModuleRef);
    };
    /**
     * @publicApi
     */


    var NgModuleFactory = function NgModuleFactory() {
      _classCallCheck(this, NgModuleFactory);
    };
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function assertNumber(actual, msg) {
      if (!(typeof actual === 'number')) {
        throwError(msg, typeof actual, 'number', '===');
      }
    }

    function assertNumberInRange(actual, minInclusive, maxInclusive) {
      assertNumber(actual, 'Expected a number');
      assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');
      assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');
    }

    function assertString(actual, msg) {
      if (!(typeof actual === 'string')) {
        throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');
      }
    }

    function assertEqual(actual, expected, msg) {
      if (!(actual == expected)) {
        throwError(msg, actual, expected, '==');
      }
    }

    function assertNotEqual(actual, expected, msg) {
      if (!(actual != expected)) {
        throwError(msg, actual, expected, '!=');
      }
    }

    function assertSame(actual, expected, msg) {
      if (!(actual === expected)) {
        throwError(msg, actual, expected, '===');
      }
    }

    function assertNotSame(actual, expected, msg) {
      if (!(actual !== expected)) {
        throwError(msg, actual, expected, '!==');
      }
    }

    function assertLessThan(actual, expected, msg) {
      if (!(actual < expected)) {
        throwError(msg, actual, expected, '<');
      }
    }

    function assertLessThanOrEqual(actual, expected, msg) {
      if (!(actual <= expected)) {
        throwError(msg, actual, expected, '<=');
      }
    }

    function assertGreaterThan(actual, expected, msg) {
      if (!(actual > expected)) {
        throwError(msg, actual, expected, '>');
      }
    }

    function assertGreaterThanOrEqual(actual, expected, msg) {
      if (!(actual >= expected)) {
        throwError(msg, actual, expected, '>=');
      }
    }

    function assertNotDefined(actual, msg) {
      if (actual != null) {
        throwError(msg, actual, null, '==');
      }
    }

    function assertDefined(actual, msg) {
      if (actual == null) {
        throwError(msg, actual, null, '!=');
      }
    }

    function throwError(msg, actual, expected, comparison) {
      throw new Error("ASSERTION ERROR: ".concat(msg) + (comparison == null ? '' : " [Expected=> ".concat(expected, " ").concat(comparison, " ").concat(actual, " <=Actual]")));
    }

    function assertDomNode(node) {
      // If we're in a worker, `Node` will not be defined.
      assertEqual(typeof Node !== 'undefined' && node instanceof Node || typeof node === 'object' && node != null && node.constructor.name === 'WebWorkerRenderNode', true, "The provided value must be an instance of a DOM Node but got ".concat(stringify(node)));
    }

    function assertIndexInRange(arr, index) {
      var maxLen = arr ? arr.length : 0;
      assertLessThan(index, maxLen, "Index expected to be less than ".concat(maxLen, " but got ").concat(index));
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Equivalent to ES6 spread, add each item to an array.
     *
     * @param items The items to add
     * @param arr The array to which you want to add the items
     */


    function addAllToArray(items, arr) {
      for (var i = 0; i < items.length; i++) {
        arr.push(items[i]);
      }
    }
    /**
     * Flattens an array.
     */


    function flatten(list, dst) {
      if (dst === undefined) dst = list;

      for (var i = 0; i < list.length; i++) {
        var item = list[i];

        if (Array.isArray(item)) {
          // we need to inline it.
          if (dst === list) {
            // Our assumption that the list was already flat was wrong and
            // we need to clone flat since we need to write to it.
            dst = list.slice(0, i);
          }

          flatten(item, dst);
        } else if (dst !== list) {
          dst.push(item);
        }
      }

      return dst;
    }

    function deepForEach(input, fn) {
      input.forEach(function (value) {
        return Array.isArray(value) ? deepForEach(value, fn) : fn(value);
      });
    }

    function addToArray(arr, index, value) {
      // perf: array.push is faster than array.splice!
      if (index >= arr.length) {
        arr.push(value);
      } else {
        arr.splice(index, 0, value);
      }
    }

    function removeFromArray(arr, index) {
      // perf: array.pop is faster than array.splice!
      if (index >= arr.length - 1) {
        return arr.pop();
      } else {
        return arr.splice(index, 1)[0];
      }
    }

    function newArray(size, value) {
      var list = [];

      for (var i = 0; i < size; i++) {
        list.push(value);
      }

      return list;
    }
    /**
     * Remove item from array (Same as `Array.splice()` but faster.)
     *
     * `Array.splice()` is not as fast because it has to allocate an array for the elements which were
     * removed. This causes memory pressure and slows down code when most of the time we don't
     * care about the deleted items array.
     *
     * https://jsperf.com/fast-array-splice (About 20x faster)
     *
     * @param array Array to splice
     * @param index Index of element in array to remove.
     * @param count Number of items to remove.
     */


    function arraySplice(array, index, count) {
      var length = array.length - count;

      while (index < length) {
        array[index] = array[index + count];
        index++;
      }

      while (count--) {
        array.pop(); // shrink the array
      }
    }
    /**
     * Same as `Array.splice(index, 0, value)` but faster.
     *
     * `Array.splice()` is not fast because it has to allocate an array for the elements which were
     * removed. This causes memory pressure and slows down code when most of the time we don't
     * care about the deleted items array.
     *
     * @param array Array to splice.
     * @param index Index in array where the `value` should be added.
     * @param value Value to add to array.
     */


    function arrayInsert(array, index, value) {
      ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\'t insert past array end.');
      var end = array.length;

      while (end > index) {
        var previousEnd = end - 1;
        array[end] = array[previousEnd];
        end = previousEnd;
      }

      array[index] = value;
    }
    /**
     * Same as `Array.splice2(index, 0, value1, value2)` but faster.
     *
     * `Array.splice()` is not fast because it has to allocate an array for the elements which were
     * removed. This causes memory pressure and slows down code when most of the time we don't
     * care about the deleted items array.
     *
     * @param array Array to splice.
     * @param index Index in array where the `value` should be added.
     * @param value1 Value to add to array.
     * @param value2 Value to add to array.
     */


    function arrayInsert2(array, index, value1, value2) {
      ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\'t insert past array end.');
      var end = array.length;

      if (end == index) {
        // inserting at the end.
        array.push(value1, value2);
      } else if (end === 1) {
        // corner case when we have less items in array than we have items to insert.
        array.push(value2, array[0]);
        array[0] = value1;
      } else {
        end--;
        array.push(array[end - 1], array[end]);

        while (end > index) {
          var previousEnd = end - 2;
          array[end] = array[previousEnd];
          end--;
        }

        array[index] = value1;
        array[index + 1] = value2;
      }
    }
    /**
     * Insert a `value` into an `array` so that the array remains sorted.
     *
     * NOTE:
     * - Duplicates are not allowed, and are ignored.
     * - This uses binary search algorithm for fast inserts.
     *
     * @param array A sorted array to insert into.
     * @param value The value to insert.
     * @returns index of the inserted value.
     */


    function arrayInsertSorted(array, value) {
      var index = arrayIndexOfSorted(array, value);

      if (index < 0) {
        // if we did not find it insert it.
        index = ~index;
        arrayInsert(array, index, value);
      }

      return index;
    }
    /**
     * Remove `value` from a sorted `array`.
     *
     * NOTE:
     * - This uses binary search algorithm for fast removals.
     *
     * @param array A sorted array to remove from.
     * @param value The value to remove.
     * @returns index of the removed value.
     *   - positive index if value found and removed.
     *   - negative index if value not found. (`~index` to get the value where it should have been
     *     inserted)
     */


    function arrayRemoveSorted(array, value) {
      var index = arrayIndexOfSorted(array, value);

      if (index >= 0) {
        arraySplice(array, index, 1);
      }

      return index;
    }
    /**
     * Get an index of an `value` in a sorted `array`.
     *
     * NOTE:
     * - This uses binary search algorithm for fast removals.
     *
     * @param array A sorted array to binary search.
     * @param value The value to look for.
     * @returns index of the value.
     *   - positive index if value found.
     *   - negative index if value not found. (`~index` to get the value where it should have been
     *     located)
     */


    function arrayIndexOfSorted(array, value) {
      return _arrayIndexOfSorted(array, value, 0);
    }
    /**
     * Set a `value` for a `key`.
     *
     * @param keyValueArray to modify.
     * @param key The key to locate or create.
     * @param value The value to set for a `key`.
     * @returns index (always even) of where the value vas set.
     */


    function keyValueArraySet(keyValueArray, key, value) {
      var index = keyValueArrayIndexOf(keyValueArray, key);

      if (index >= 0) {
        // if we found it set it.
        keyValueArray[index | 1] = value;
      } else {
        index = ~index;
        arrayInsert2(keyValueArray, index, key, value);
      }

      return index;
    }
    /**
     * Retrieve a `value` for a `key` (on `undefined` if not found.)
     *
     * @param keyValueArray to search.
     * @param key The key to locate.
     * @return The `value` stored at the `key` location or `undefined if not found.
     */


    function keyValueArrayGet(keyValueArray, key) {
      var index = keyValueArrayIndexOf(keyValueArray, key);

      if (index >= 0) {
        // if we found it retrieve it.
        return keyValueArray[index | 1];
      }

      return undefined;
    }
    /**
     * Retrieve a `key` index value in the array or `-1` if not found.
     *
     * @param keyValueArray to search.
     * @param key The key to locate.
     * @returns index of where the key is (or should have been.)
     *   - positive (even) index if key found.
     *   - negative index if key not found. (`~index` (even) to get the index where it should have
     *     been inserted.)
     */


    function keyValueArrayIndexOf(keyValueArray, key) {
      return _arrayIndexOfSorted(keyValueArray, key, 1);
    }
    /**
     * Delete a `key` (and `value`) from the `KeyValueArray`.
     *
     * @param keyValueArray to modify.
     * @param key The key to locate or delete (if exist).
     * @returns index of where the key was (or should have been.)
     *   - positive (even) index if key found and deleted.
     *   - negative index if key not found. (`~index` (even) to get the index where it should have
     *     been.)
     */


    function keyValueArrayDelete(keyValueArray, key) {
      var index = keyValueArrayIndexOf(keyValueArray, key);

      if (index >= 0) {
        // if we found it remove it.
        arraySplice(keyValueArray, index, 2);
      }

      return index;
    }
    /**
     * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.
     *
     * NOTE:
     * - This uses binary search algorithm for fast removals.
     *
     * @param array A sorted array to binary search.
     * @param value The value to look for.
     * @param shift grouping shift.
     *   - `0` means look at every location
     *   - `1` means only look at every other (even) location (the odd locations are to be ignored as
     *         they are values.)
     * @returns index of the value.
     *   - positive index if value found.
     *   - negative index if value not found. (`~index` to get the value where it should have been
     * inserted)
     */


    function _arrayIndexOfSorted(array, value, shift) {
      ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');
      var start = 0;
      var end = array.length >> shift;

      while (end !== start) {
        var middle = start + (end - start >> 1); // find the middle.

        var current = array[middle << shift];

        if (value === current) {
          return middle << shift;
        } else if (current > value) {
          end = middle;
        } else {
          start = middle + 1; // We already searched middle so make it non-inclusive by adding 1
        }
      }

      return ~(end << shift);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * The strategy that the default change detector uses to detect changes.
     * When set, takes effect the next time change detection is triggered.
     *
     * @see {@link ChangeDetectorRef#usage-notes Change detection usage}
     *
     * @publicApi
     */


    var ChangeDetectionStrategy = /*@__PURE__*/function (ChangeDetectionStrategy) {
      /**
       * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated
       * until reactivated by setting the strategy to `Default` (`CheckAlways`).
       * Change detection can still be explicitly invoked.
       * This strategy applies to all child directives and cannot be overridden.
       */
      ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
      /**
       * Use the default `CheckAlways` strategy, in which change detection is automatic until
       * explicitly deactivated.
       */

      ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
      return ChangeDetectionStrategy;
    }({});
    /**
     * Defines the possible states of the default change detector.
     * @see `ChangeDetectorRef`
     */


    var ChangeDetectorStatus = /*@__PURE__*/function (ChangeDetectorStatus) {
      /**
       * A state in which, after calling `detectChanges()`, the change detector
       * state becomes `Checked`, and must be explicitly invoked or reactivated.
       */
      ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
      /**
       * A state in which change detection is skipped until the change detector mode
       * becomes `CheckOnce`.
       */

      ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
      /**
       * A state in which change detection continues automatically until explicitly
       * deactivated.
       */

      ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
      /**
       * A state in which a change detector sub tree is not a part of the main tree and
       * should be skipped.
       */

      ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
      /**
       * Indicates that the change detector encountered an error checking a binding
       * or calling a directive lifecycle method and is now in an inconsistent state. Change
       * detectors in this state do not detect changes.
       */

      ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
      /**
       * Indicates that the change detector has been destroyed.
       */

      ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
      return ChangeDetectorStatus;
    }({});
    /**
     * Reports whether a given strategy is currently the default for change detection.
     * @param changeDetectionStrategy The strategy to check.
     * @returns True if the given strategy is the current default, false otherwise.
     * @see `ChangeDetectorStatus`
     * @see `ChangeDetectorRef`
     */


    function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
      return changeDetectionStrategy == null || changeDetectionStrategy === ChangeDetectionStrategy.Default;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Defines template and style encapsulation options available for Component's {@link Component}.
     *
     * See {@link Component#encapsulation encapsulation}.
     *
     * @usageNotes
     * ### Example
     *
     * {@example core/ts/metadata/encapsulation.ts region='longform'}
     *
     * @publicApi
     */


    var ViewEncapsulation$1 = /*@__PURE__*/function (ViewEncapsulation) {
      /**
       * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
       * Element and pre-processing the style rules provided via {@link Component#styles styles} or
       * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all
       * selectors.
       *
       * This is the default option.
       */
      ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
      /**
       * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.
       * Use the native encapsulation mechanism of the renderer.
       *
       * For the DOM this means using the deprecated [Shadow DOM
       * v0](https://w3c.github.io/webcomponents/spec/shadow/) and
       * creating a ShadowRoot for Component's Host Element.
       */

      ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
      /**
       * Don't provide any template or style encapsulation.
       */

      ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
      /**
       * Use Shadow DOM to encapsulate styles.
       *
       * For the DOM this means using modern [Shadow
       * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
       * creating a ShadowRoot for Component's Host Element.
       */

      ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
      return ViewEncapsulation;
    }({});
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * This file contains reuseable "empty" symbols that can be used as default return values
     * in different parts of the rendering code. Because the same symbols are returned, this
     * allows for identity checks against these values to be consistently used by the framework
     * code.
     */


    var EMPTY_OBJ = {};
    var EMPTY_ARRAY = []; // freezing the values prevents any code from accidentally inserting new values in

    if ((typeof ngDevMode === 'undefined' || ngDevMode) && /*@__PURE__*/initNgDevMode()) {
      // These property accesses can be ignored because ngDevMode will be set to false
      // when optimizing code and the whole if statement will be dropped.
      // tslint:disable-next-line:no-toplevel-property-access

      /*@__PURE__*/
      Object.freeze(EMPTY_OBJ); // tslint:disable-next-line:no-toplevel-property-access

      /*@__PURE__*/

      Object.freeze(EMPTY_ARRAY);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var _renderCompCount = 0;
    /**
     * Create a component definition object.
     *
     *
     * # Example
     * ```
     * class MyDirective {
     *   // Generated by Angular Template Compiler
     *   // [Symbol] syntax will not be supported by TypeScript until v2.7
     *   static ɵcmp = defineComponent({
     *     ...
     *   });
     * }
     * ```
     * @codeGenApi
     */

    function ɵɵdefineComponent(componentDefinition) {
      return noSideEffects(function () {
        // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.
        // See the `initNgDevMode` docstring for more information.
        (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();
        var type = componentDefinition.type;
        var typePrototype = type.prototype;
        var declaredInputs = {};
        var def = {
          type: type,
          providersResolver: null,
          decls: componentDefinition.decls,
          vars: componentDefinition.vars,
          factory: null,
          template: componentDefinition.template || null,
          consts: componentDefinition.consts || null,
          ngContentSelectors: componentDefinition.ngContentSelectors,
          hostBindings: componentDefinition.hostBindings || null,
          hostVars: componentDefinition.hostVars || 0,
          hostAttrs: componentDefinition.hostAttrs || null,
          contentQueries: componentDefinition.contentQueries || null,
          declaredInputs: declaredInputs,
          inputs: null,
          outputs: null,
          exportAs: componentDefinition.exportAs || null,
          onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,
          directiveDefs: null,
          pipeDefs: null,
          selectors: componentDefinition.selectors || EMPTY_ARRAY,
          viewQuery: componentDefinition.viewQuery || null,
          features: componentDefinition.features || null,
          data: componentDefinition.data || {},
          // TODO(misko): convert ViewEncapsulation into const enum so that it can be used
          // directly in the next line. Also `None` should be 0 not 2.
          encapsulation: componentDefinition.encapsulation || ViewEncapsulation$1.Emulated,
          id: 'c',
          styles: componentDefinition.styles || EMPTY_ARRAY,
          _: null,
          setInput: null,
          schemas: componentDefinition.schemas || null,
          tView: null
        };
        var directiveTypes = componentDefinition.directives;
        var feature = componentDefinition.features;
        var pipeTypes = componentDefinition.pipes;
        def.id += _renderCompCount++;
        def.inputs = invertObject(componentDefinition.inputs, declaredInputs), def.outputs = invertObject(componentDefinition.outputs), feature && feature.forEach(function (fn) {
          return fn(def);
        });
        def.directiveDefs = directiveTypes ? function () {
          return (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes).map(extractDirectiveDef);
        } : null;
        def.pipeDefs = pipeTypes ? function () {
          return (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef);
        } : null;
        return def;
      });
    }
    /**
     * @codeGenApi
     */


    function ɵɵsetComponentScope(type, directives, pipes) {
      var def = type.ɵcmp;

      def.directiveDefs = function () {
        return directives.map(extractDirectiveDef);
      };

      def.pipeDefs = function () {
        return pipes.map(extractPipeDef);
      };
    }

    function extractDirectiveDef(type) {
      var def = getComponentDef(type) || getDirectiveDef(type);

      if (ngDevMode && !def) {
        throw new Error("'".concat(type.name, "' is neither 'ComponentType' or 'DirectiveType'."));
      }

      return def;
    }

    function extractPipeDef(type) {
      var def = getPipeDef(type);

      if (ngDevMode && !def) {
        throw new Error("'".concat(type.name, "' is not a 'PipeType'."));
      }

      return def;
    }

    var autoRegisterModuleById = {};
    /**
     * @codeGenApi
     */

    function ɵɵdefineNgModule(def) {
      var res = {
        type: def.type,
        bootstrap: def.bootstrap || EMPTY_ARRAY,
        declarations: def.declarations || EMPTY_ARRAY,
        imports: def.imports || EMPTY_ARRAY,
        exports: def.exports || EMPTY_ARRAY,
        transitiveCompileScopes: null,
        schemas: def.schemas || null,
        id: def.id || null
      };

      if (def.id != null) {
        noSideEffects(function () {
          autoRegisterModuleById[def.id] = def.type;
        });
      }

      return res;
    }
    /**
     * Adds the module metadata that is necessary to compute the module's transitive scope to an
     * existing module definition.
     *
     * Scope metadata of modules is not used in production builds, so calls to this function can be
     * marked pure to tree-shake it from the bundle, allowing for all referenced declarations
     * to become eligible for tree-shaking as well.
     *
     * @codeGenApi
     */


    function ɵɵsetNgModuleScope(type, scope) {
      return noSideEffects(function () {
        var ngModuleDef = getNgModuleDef(type, true);
        ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;
        ngModuleDef.imports = scope.imports || EMPTY_ARRAY;
        ngModuleDef.exports = scope.exports || EMPTY_ARRAY;
      });
    }
    /**
     * Inverts an inputs or outputs lookup such that the keys, which were the
     * minified keys, are part of the values, and the values are parsed so that
     * the publicName of the property is the new key
     *
     * e.g. for
     *
     * ```
     * class Comp {
     *   @Input()
     *   propName1: string;
     *
     *   @Input('publicName2')
     *   declaredPropName2: number;
     * }
     * ```
     *
     * will be serialized as
     *
     * ```
     * {
     *   propName1: 'propName1',
     *   declaredPropName2: ['publicName2', 'declaredPropName2'],
     * }
     * ```
     *
     * which is than translated by the minifier as:
     *
     * ```
     * {
     *   minifiedPropName1: 'propName1',
     *   minifiedPropName2: ['publicName2', 'declaredPropName2'],
     * }
     * ```
     *
     * becomes: (public name => minifiedName)
     *
     * ```
     * {
     *  'propName1': 'minifiedPropName1',
     *  'publicName2': 'minifiedPropName2',
     * }
     * ```
     *
     * Optionally the function can take `secondary` which will result in: (public name => declared name)
     *
     * ```
     * {
     *  'propName1': 'propName1',
     *  'publicName2': 'declaredPropName2',
     * }
     * ```
     *
    
     */


    function invertObject(obj, secondary) {
      if (obj == null) return EMPTY_OBJ;
      var newLookup = {};

      for (var minifiedKey in obj) {
        if (obj.hasOwnProperty(minifiedKey)) {
          var publicName = obj[minifiedKey];
          var declaredName = publicName;

          if (Array.isArray(publicName)) {
            declaredName = publicName[1];
            publicName = publicName[0];
          }

          newLookup[publicName] = minifiedKey;

          if (secondary) {
            secondary[publicName] = declaredName;
          }
        }
      }

      return newLookup;
    }
    /**
     * Create a directive definition object.
     *
     * # Example
     * ```ts
     * class MyDirective {
     *   // Generated by Angular Template Compiler
     *   // [Symbol] syntax will not be supported by TypeScript until v2.7
     *   static ɵdir = ɵɵdefineDirective({
     *     ...
     *   });
     * }
     * ```
     *
     * @codeGenApi
     */


    var ɵɵdefineDirective = ɵɵdefineComponent;
    /**
     * Create a pipe definition object.
     *
     * # Example
     * ```
     * class MyPipe implements PipeTransform {
     *   // Generated by Angular Template Compiler
     *   static ɵpipe = definePipe({
     *     ...
     *   });
     * }
     * ```
     * @param pipeDef Pipe definition generated by the compiler
     *
     * @codeGenApi
     */

    function ɵɵdefinePipe(pipeDef) {
      return {
        type: pipeDef.type,
        name: pipeDef.name,
        factory: null,
        pure: pipeDef.pure !== false,
        onDestroy: pipeDef.type.prototype.ngOnDestroy || null
      };
    }
    /**
     * The following getter methods retrieve the definition form the type. Currently the retrieval
     * honors inheritance, but in the future we may change the rule to require that definitions are
     * explicit. This would require some sort of migration strategy.
     */


    function getComponentDef(type) {
      return type[NG_COMP_DEF] || null;
    }

    function getDirectiveDef(type) {
      return type[NG_DIR_DEF] || null;
    }

    function getPipeDef(type) {
      return type[NG_PIPE_DEF] || null;
    }

    function getFactoryDef(type, throwNotFound) {
      var hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);

      if (!hasFactoryDef && throwNotFound === true && ngDevMode) {
        throw new Error("Type ".concat(stringify(type), " does not have '\u0275fac' property."));
      }

      return hasFactoryDef ? type[NG_FACTORY_DEF] : null;
    }

    function getNgModuleDef(type, throwNotFound) {
      var ngModuleDef = type[NG_MOD_DEF] || null;

      if (!ngModuleDef && throwNotFound === true) {
        throw new Error("Type ".concat(stringify(type), " does not have '\u0275mod' property."));
      }

      return ngModuleDef;
    }

    function getNgLocaleIdDef(type) {
      return type[NG_LOC_ID_DEF] || null;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // Below are constants for LView indices to help us look up LView members
    // without having to remember the specific indices.
    // Uglify will inline these when minifying so there shouldn't be a cost.


    var HOST = 0;
    var TVIEW = 1;
    var FLAGS = 2;
    var PARENT = 3;
    var NEXT = 4;
    var TRANSPLANTED_VIEWS_TO_REFRESH = 5;
    var T_HOST = 6;
    var CLEANUP = 7;
    var CONTEXT = 8;
    var INJECTOR$1 = 9;
    var RENDERER_FACTORY = 10;
    var RENDERER = 11;
    var SANITIZER = 12;
    var CHILD_HEAD = 13;
    var CHILD_TAIL = 14;
    var DECLARATION_VIEW = 15;
    var DECLARATION_COMPONENT_VIEW = 16;
    var DECLARATION_LCONTAINER = 17;
    var PREORDER_HOOK_FLAGS = 18;
    var QUERIES = 19;
    /** Size of LView's header. Necessary to adjust for it when setting slots.  */

    var HEADER_OFFSET = 20; // Note: This hack is necessary so we don't erroneously get a circular dependency
    // failure based on types.

    var unusedValueExportToPlacateAjd = 1;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Special location which allows easy identification of type. If we have an array which was
     * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is
     * `LContainer`.
     */

    var TYPE = 1;
    /**
     * Below are constants for LContainer indices to help us look up LContainer members
     * without having to remember the specific indices.
     * Uglify will inline these when minifying so there shouldn't be a cost.
     */

    /**
     * Flag to signify that this `LContainer` may have transplanted views which need to be change
     * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.
     *
     * This flag, once set, is never unset for the `LContainer`. This means that when unset we can skip
     * a lot of work in `refreshEmbeddedViews`. But when set we still need to verify
     * that the `MOVED_VIEWS` are transplanted and on-push.
     */

    var HAS_TRANSPLANTED_VIEWS = 2; // PARENT, NEXT, TRANSPLANTED_VIEWS_TO_REFRESH are indices 3, 4, and 5
    // As we already have these constants in LView, we don't need to re-create them.
    // T_HOST is index 6
    // We already have this constants in LView, we don't need to re-create it.

    var NATIVE = 7;
    var VIEW_REFS = 8;
    var MOVED_VIEWS = 9;
    /**
     * Size of LContainer's header. Represents the index after which all views in the
     * container will be inserted. We need to keep a record of current views so we know
     * which views are already in the DOM (and don't need to be re-added) and so we can
     * remove views from the DOM when they are no longer required.
     */

    var CONTAINER_HEADER_OFFSET = 10; // Note: This hack is necessary so we don't erroneously get a circular dependency
    // failure based on types.

    var unusedValueExportToPlacateAjd$1 = 1;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * True if `value` is `LView`.
     * @param value wrapped value of `RNode`, `LView`, `LContainer`
     */

    function isLView(value) {
      return Array.isArray(value) && typeof value[TYPE] === 'object';
    }
    /**
     * True if `value` is `LContainer`.
     * @param value wrapped value of `RNode`, `LView`, `LContainer`
     */


    function isLContainer(value) {
      return Array.isArray(value) && value[TYPE] === true;
    }

    function isContentQueryHost(tNode) {
      return (tNode.flags & 8
      /* hasContentQuery */
      ) !== 0;
    }

    function isComponentHost(tNode) {
      return (tNode.flags & 2
      /* isComponentHost */
      ) === 2
      /* isComponentHost */
      ;
    }

    function isDirectiveHost(tNode) {
      return (tNode.flags & 1
      /* isDirectiveHost */
      ) === 1
      /* isDirectiveHost */
      ;
    }

    function isComponentDef(def) {
      return def.template !== null;
    }

    function isRootView(target) {
      return (target[FLAGS] & 512
      /* IsRoot */
      ) !== 0;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // [Assert functions do not constraint type when they are guarded by a truthy
    // expression.](https://github.com/microsoft/TypeScript/issues/37295)


    function assertTNodeForLView(tNode, lView) {
      tNode.hasOwnProperty('tView_') && assertEqual(tNode.tView_, lView[TVIEW], 'This TNode does not belong to this LView.');
    }

    function assertComponentType(actual) {
      var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Type passed in is not ComponentType, it does not have \'ɵcmp\' property.';

      if (!getComponentDef(actual)) {
        throwError(msg);
      }
    }

    function assertNgModuleType(actual) {
      var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Type passed in is not NgModuleType, it does not have \'ɵmod\' property.';

      if (!getNgModuleDef(actual)) {
        throwError(msg);
      }
    }

    function assertPreviousIsParent(isParent) {
      assertEqual(isParent, true, 'previousOrParentTNode should be a parent');
    }

    function assertHasParent(tNode) {
      assertDefined(tNode, 'previousOrParentTNode should exist!');
      assertDefined(tNode.parent, 'previousOrParentTNode should have a parent');
    }

    function assertDataNext(lView, index, arr) {
      if (arr == null) arr = lView;
      assertEqual(arr.length, index, "index ".concat(index, " expected to be at the end of arr (length ").concat(arr.length, ")"));
    }

    function assertLContainer(value) {
      assertDefined(value, 'LContainer must be defined');
      assertEqual(isLContainer(value), true, 'Expecting LContainer');
    }

    function assertLViewOrUndefined(value) {
      value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');
    }

    function assertLView(value) {
      assertDefined(value, 'LView must be defined');
      assertEqual(isLView(value), true, 'Expecting LView');
    }

    function assertFirstCreatePass(tView, errMessage) {
      assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');
    }

    function assertFirstUpdatePass(tView, errMessage) {
      assertEqual(tView.firstUpdatePass, true, errMessage || 'Should only be called in first update pass.');
    }
    /**
     * This is a basic sanity check that an object is probably a directive def. DirectiveDef is
     * an interface, so we can't do a direct instanceof check.
     */


    function assertDirectiveDef(obj) {
      if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {
        throwError("Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.");
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Represents a basic change from a previous to a new value for a single
     * property on a directive instance. Passed as a value in a
     * {@link SimpleChanges} object to the `ngOnChanges` hook.
     *
     * @see `OnChanges`
     *
     * @publicApi
     */


    var SimpleChange = /*#__PURE__*/function () {
      function SimpleChange(previousValue, currentValue, firstChange) {
        _classCallCheck(this, SimpleChange);

        this.previousValue = previousValue;
        this.currentValue = currentValue;
        this.firstChange = firstChange;
      }
      /**
       * Check whether the new value is the first value assigned.
       */


      _createClass2(SimpleChange, [{
        key: "isFirstChange",
        value: function isFirstChange() {
          return this.firstChange;
        }
      }]);

      return SimpleChange;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * The NgOnChangesFeature decorates a component with support for the ngOnChanges
     * lifecycle hook, so it should be included in any component that implements
     * that hook.
     *
     * If the component or directive uses inheritance, the NgOnChangesFeature MUST
     * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise
     * inherited properties will not be propagated to the ngOnChanges lifecycle
     * hook.
     *
     * Example usage:
     *
     * ```
     * static ɵcmp = defineComponent({
     *   ...
     *   inputs: {name: 'publicName'},
     *   features: [NgOnChangesFeature]
     * });
     * ```
     *
     * @codeGenApi
     */


    function ɵɵNgOnChangesFeature() {
      return NgOnChangesFeatureImpl;
    }

    function NgOnChangesFeatureImpl(definition) {
      if (definition.type.prototype.ngOnChanges) {
        definition.setInput = ngOnChangesSetInput;
      }

      return rememberChangeHistoryAndInvokeOnChangesHook;
    } // This option ensures that the ngOnChanges lifecycle hook will be inherited
    // from superclasses (in InheritDefinitionFeature).

    /** @nocollapse */
    // tslint:disable-next-line:no-toplevel-property-access


    ɵɵNgOnChangesFeature.ngInherit = true;
    /**
     * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate
     * `ngOnChanges`.
     *
     * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are
     * found it invokes `ngOnChanges` on the component instance.
     *
     * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,
     *     it is guaranteed to be called with component instance.
     */

    function rememberChangeHistoryAndInvokeOnChangesHook() {
      var simpleChangesStore = getSimpleChangesStore(this);
      var current = simpleChangesStore === null || simpleChangesStore === void 0 ? void 0 : simpleChangesStore.current;

      if (current) {
        var previous = simpleChangesStore.previous;

        if (previous === EMPTY_OBJ) {
          simpleChangesStore.previous = current;
        } else {
          // New changes are copied to the previous store, so that we don't lose history for inputs
          // which were not changed this time
          for (var key in current) {
            previous[key] = current[key];
          }
        }

        simpleChangesStore.current = null;
        this.ngOnChanges(current);
      }
    }

    function ngOnChangesSetInput(instance, value, publicName, privateName) {
      var simpleChangesStore = getSimpleChangesStore(instance) || setSimpleChangesStore(instance, {
        previous: EMPTY_OBJ,
        current: null
      });
      var current = simpleChangesStore.current || (simpleChangesStore.current = {});
      var previous = simpleChangesStore.previous;
      var declaredName = this.declaredInputs[publicName];
      var previousChange = previous[declaredName];
      current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);
      instance[privateName] = value;
    }

    var SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';

    function getSimpleChangesStore(instance) {
      return instance[SIMPLE_CHANGES_STORE] || null;
    }

    function setSimpleChangesStore(instance, store) {
      return instance[SIMPLE_CHANGES_STORE] = store;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var MATH_ML_NAMESPACE = 'http://www.w3.org/1998/MathML/';
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * This property will be monkey-patched on elements, components and directives
     */

    var MONKEY_PATCH_KEY_NAME = '__ngContext__';
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Most of the use of `document` in Angular is from within the DI system so it is possible to simply
     * inject the `DOCUMENT` token and are done.
     *
     * Ivy is special because it does not rely upon the DI and must get hold of the document some other
     * way.
     *
     * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.
     * Wherever ivy needs the global document, it calls `getDocument()` instead.
     *
     * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to
     * tell ivy what the global `document` is.
     *
     * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)
     * by calling `setDocument()` when providing the `DOCUMENT` token.
     */

    var DOCUMENT = undefined;
    /**
     * Tell ivy what the `document` is for this platform.
     *
     * It is only necessary to call this if the current platform is not a browser.
     *
     * @param document The object representing the global `document` in this environment.
     */

    function setDocument(document) {
      DOCUMENT = document;
    }
    /**
     * Access the object that represents the `document` for this platform.
     *
     * Ivy calls this whenever it needs to access the `document` object.
     * For example to create the renderer or to do sanitization.
     */


    function getDocument() {
      if (DOCUMENT !== undefined) {
        return DOCUMENT;
      } else if (typeof document !== 'undefined') {
        return document;
      } // No "document" can be found. This should only happen if we are running ivy outside Angular and
      // the current platform is not a browser. Since this is not a supported scenario at the moment
      // this should not happen in Angular apps.
      // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a
      // public API. Meanwhile we just return `undefined` and let the application fail.


      return undefined;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // TODO: cleanup once the code is merged in angular/angular


    var RendererStyleFlags3 = /*@__PURE__*/function (RendererStyleFlags3) {
      RendererStyleFlags3[RendererStyleFlags3["Important"] = 1] = "Important";
      RendererStyleFlags3[RendererStyleFlags3["DashCase"] = 2] = "DashCase";
      return RendererStyleFlags3;
    }({});
    /** Returns whether the `renderer` is a `ProceduralRenderer3` */


    function isProceduralRenderer(renderer) {
      return !!renderer.listen;
    }

    var ɵ0$2 = function ɵ0$2(hostElement, rendererType) {
      return getDocument();
    };

    var domRendererFactory3 = {
      createRenderer: ɵ0$2
    }; // Note: This hack is necessary so we don't erroneously get a circular dependency
    // failure based on types.

    var unusedValueExportToPlacateAjd$2 = 1;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)
     * in same location in `LView`. This is because we don't want to pre-allocate space for it
     * because the storage is sparse. This file contains utilities for dealing with such data types.
     *
     * How do we know what is stored at a given location in `LView`.
     * - `Array.isArray(value) === false` => `RNode` (The normal storage value)
     * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.
     *   - `typeof value[TYPE] === 'object'` => `LView`
     *      - This happens when we have a component at a given location
     *   - `typeof value[TYPE] === true` => `LContainer`
     *      - This happens when we have `LContainer` binding at a given location.
     *
     *
     * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.
     */

    /**
     * Returns `RNode`.
     * @param value wrapped value of `RNode`, `LView`, `LContainer`
     */

    function unwrapRNode(value) {
      while (Array.isArray(value)) {
        value = value[HOST];
      }

      return value;
    }
    /**
     * Returns `LView` or `null` if not found.
     * @param value wrapped value of `RNode`, `LView`, `LContainer`
     */


    function unwrapLView(value) {
      while (Array.isArray(value)) {
        // This check is same as `isLView()` but we don't call at as we don't want to call
        // `Array.isArray()` twice and give JITer more work for inlining.
        if (typeof value[TYPE] === 'object') return value;
        value = value[HOST];
      }

      return null;
    }
    /**
     * Returns `LContainer` or `null` if not found.
     * @param value wrapped value of `RNode`, `LView`, `LContainer`
     */


    function unwrapLContainer(value) {
      while (Array.isArray(value)) {
        // This check is same as `isLContainer()` but we don't call at as we don't want to call
        // `Array.isArray()` twice and give JITer more work for inlining.
        if (value[TYPE] === true) return value;
        value = value[HOST];
      }

      return null;
    }
    /**
     * Retrieves an element value from the provided `viewData`, by unwrapping
     * from any containers, component views, or style contexts.
     */


    function getNativeByIndex(index, lView) {
      return unwrapRNode(lView[index + HEADER_OFFSET]);
    }
    /**
     * Retrieve an `RNode` for a given `TNode` and `LView`.
     *
     * This function guarantees in dev mode to retrieve a non-null `RNode`.
     *
     * @param tNode
     * @param lView
     */


    function getNativeByTNode(tNode, lView) {
      ngDevMode && assertTNodeForLView(tNode, lView);
      ngDevMode && assertIndexInRange(lView, tNode.index);
      var node = unwrapRNode(lView[tNode.index]);
      ngDevMode && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);
      return node;
    }
    /**
     * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.
     *
     * Some `TNode`s don't have associated `RNode`s. For example `Projection`
     *
     * @param tNode
     * @param lView
     */


    function getNativeByTNodeOrNull(tNode, lView) {
      var index = tNode.index;

      if (index !== -1) {
        ngDevMode && assertTNodeForLView(tNode, lView);
        var node = unwrapRNode(lView[index]);
        ngDevMode && node !== null && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);
        return node;
      }

      return null;
    }

    function getTNode(tView, index) {
      ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');
      ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');
      return tView.data[index + HEADER_OFFSET];
    }
    /** Retrieves a value from any `LView` or `TData`. */


    function load(view, index) {
      ngDevMode && assertIndexInRange(view, index + HEADER_OFFSET);
      return view[index + HEADER_OFFSET];
    }

    function getComponentLViewByIndex(nodeIndex, hostView) {
      // Could be an LView or an LContainer. If LContainer, unwrap to find LView.
      ngDevMode && assertIndexInRange(hostView, nodeIndex);
      var slotValue = hostView[nodeIndex];
      var lView = isLView(slotValue) ? slotValue : slotValue[HOST];
      return lView;
    }
    /**
     * Returns the monkey-patch value data present on the target (which could be
     * a component, directive or a DOM node).
     */


    function readPatchedData(target) {
      ngDevMode && assertDefined(target, 'Target expected');
      return target[MONKEY_PATCH_KEY_NAME] || null;
    }

    function readPatchedLView(target) {
      var value = readPatchedData(target);

      if (value) {
        return Array.isArray(value) ? value : value.lView;
      }

      return null;
    }
    /** Checks whether a given view is in creation mode */


    function isCreationMode(view) {
      return (view[FLAGS] & 4
      /* CreationMode */
      ) === 4
      /* CreationMode */
      ;
    }
    /**
     * Returns a boolean for whether the view is attached to the change detection tree.
     *
     * Note: This determines whether a view should be checked, not whether it's inserted
     * into a container. For that, you'll want `viewAttachedToContainer` below.
     */


    function viewAttachedToChangeDetector(view) {
      return (view[FLAGS] & 128
      /* Attached */
      ) === 128
      /* Attached */
      ;
    }
    /** Returns a boolean for whether the view is attached to a container. */


    function viewAttachedToContainer(view) {
      return isLContainer(view[PARENT]);
    }
    /** Returns a constant from `TConstants` instance. */


    function getConstant(consts, index) {
      return consts === null || index == null ? null : consts[index];
    }
    /**
     * Resets the pre-order hook flags of the view.
     * @param lView the LView on which the flags are reset
     */


    function resetPreOrderHookFlags(lView) {
      lView[PREORDER_HOOK_FLAGS] = 0;
    }
    /**
     * Updates the `TRANSPLANTED_VIEWS_TO_REFRESH` counter on the `LContainer` as well as the parents
     * whose
     *  1. counter goes from 0 to 1, indicating that there is a new child that has a view to refresh
     *  or
     *  2. counter goes from 1 to 0, indicating there are no more descendant views to refresh
     */


    function updateTransplantedViewCount(lContainer, amount) {
      lContainer[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;
      var viewOrContainer = lContainer;
      var parent = lContainer[PARENT];

      while (parent !== null && (amount === 1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 1 || amount === -1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 0)) {
        parent[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;
        viewOrContainer = parent;
        parent = parent[PARENT];
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var instructionState = {
      lFrame: /*@__PURE__*/createLFrame(null),
      bindingsEnabled: true,
      checkNoChangesMode: false
    };

    function getElementDepthCount() {
      return instructionState.lFrame.elementDepthCount;
    }

    function increaseElementDepthCount() {
      instructionState.lFrame.elementDepthCount++;
    }

    function decreaseElementDepthCount() {
      instructionState.lFrame.elementDepthCount--;
    }

    function getBindingsEnabled() {
      return instructionState.bindingsEnabled;
    }
    /**
     * Enables directive matching on elements.
     *
     *  * Example:
     * ```
     * <my-comp my-directive>
     *   Should match component / directive.
     * </my-comp>
     * <div ngNonBindable>
     *   <!-- ɵɵdisableBindings() -->
     *   <my-comp my-directive>
     *     Should not match component / directive because we are in ngNonBindable.
     *   </my-comp>
     *   <!-- ɵɵenableBindings() -->
     * </div>
     * ```
     *
     * @codeGenApi
     */


    function ɵɵenableBindings() {
      instructionState.bindingsEnabled = true;
    }
    /**
     * Disables directive matching on element.
     *
     *  * Example:
     * ```
     * <my-comp my-directive>
     *   Should match component / directive.
     * </my-comp>
     * <div ngNonBindable>
     *   <!-- ɵɵdisableBindings() -->
     *   <my-comp my-directive>
     *     Should not match component / directive because we are in ngNonBindable.
     *   </my-comp>
     *   <!-- ɵɵenableBindings() -->
     * </div>
     * ```
     *
     * @codeGenApi
     */


    function ɵɵdisableBindings() {
      instructionState.bindingsEnabled = false;
    }
    /**
     * Return the current `LView`.
     */


    function getLView() {
      return instructionState.lFrame.lView;
    }
    /**
     * Return the current `TView`.
     */


    function getTView() {
      return instructionState.lFrame.tView;
    }
    /**
     * Restores `contextViewData` to the given OpaqueViewState instance.
     *
     * Used in conjunction with the getCurrentView() instruction to save a snapshot
     * of the current view and restore it when listeners are invoked. This allows
     * walking the declaration view tree in listeners to get vars from parent views.
     *
     * @param viewToRestore The OpaqueViewState instance to restore.
     *
     * @codeGenApi
     */


    function ɵɵrestoreView(viewToRestore) {
      instructionState.lFrame.contextLView = viewToRestore;
    }

    function getPreviousOrParentTNode() {
      return instructionState.lFrame.previousOrParentTNode;
    }

    function setPreviousOrParentTNode(tNode, isParent) {
      instructionState.lFrame.previousOrParentTNode = tNode;
      instructionState.lFrame.isParent = isParent;
    }

    function getIsParent() {
      return instructionState.lFrame.isParent;
    }

    function setIsNotParent() {
      instructionState.lFrame.isParent = false;
    }

    function setIsParent() {
      instructionState.lFrame.isParent = true;
    }

    function getContextLView() {
      return instructionState.lFrame.contextLView;
    }

    function getCheckNoChangesMode() {
      // TODO(misko): remove this from the LView since it is ngDevMode=true mode only.
      return instructionState.checkNoChangesMode;
    }

    function setCheckNoChangesMode(mode) {
      instructionState.checkNoChangesMode = mode;
    } // top level variables should not be exported for performance reasons (PERF_NOTES.md)


    function getBindingRoot() {
      var lFrame = instructionState.lFrame;
      var index = lFrame.bindingRootIndex;

      if (index === -1) {
        index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;
      }

      return index;
    }

    function getBindingIndex() {
      return instructionState.lFrame.bindingIndex;
    }

    function setBindingIndex(value) {
      return instructionState.lFrame.bindingIndex = value;
    }

    function nextBindingIndex() {
      return instructionState.lFrame.bindingIndex++;
    }

    function incrementBindingIndex(count) {
      var lFrame = instructionState.lFrame;
      var index = lFrame.bindingIndex;
      lFrame.bindingIndex = lFrame.bindingIndex + count;
      return index;
    }
    /**
     * Set a new binding root index so that host template functions can execute.
     *
     * Bindings inside the host template are 0 index. But because we don't know ahead of time
     * how many host bindings we have we can't pre-compute them. For this reason they are all
     * 0 index and we just shift the root so that they match next available location in the LView.
     *
     * @param bindingRootIndex Root index for `hostBindings`
     * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive
     *        whose `hostBindings` are being processed.
     */


    function setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {
      var lFrame = instructionState.lFrame;
      lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;
      setCurrentDirectiveIndex(currentDirectiveIndex);
    }
    /**
     * When host binding is executing this points to the directive index.
     * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`
     * `LView[getCurrentDirectiveIndex()]` is directive instance.
     */


    function getCurrentDirectiveIndex() {
      return instructionState.lFrame.currentDirectiveIndex;
    }
    /**
     * Sets an index of a directive whose `hostBindings` are being processed.
     *
     * @param currentDirectiveIndex `TData` index where current directive instance can be found.
     */


    function setCurrentDirectiveIndex(currentDirectiveIndex) {
      instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;
    }
    /**
     * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being
     * executed.
     *
     * @param tData Current `TData` where the `DirectiveDef` will be looked up at.
     */


    function getCurrentDirectiveDef(tData) {
      var currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;
      return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];
    }

    function getCurrentQueryIndex() {
      return instructionState.lFrame.currentQueryIndex;
    }

    function setCurrentQueryIndex(value) {
      instructionState.lFrame.currentQueryIndex = value;
    }
    /**
     * This is a light weight version of the `enterView` which is needed by the DI system.
     * @param newView
     * @param tNode
     */


    function enterDI(newView, tNode) {
      ngDevMode && assertLViewOrUndefined(newView);
      var newLFrame = allocLFrame();
      instructionState.lFrame = newLFrame;
      newLFrame.previousOrParentTNode = tNode;
      newLFrame.lView = newView;
    }
    /**
     * Swap the current lView with a new lView.
     *
     * For performance reasons we store the lView in the top level of the module.
     * This way we minimize the number of properties to read. Whenever a new view
     * is entered we have to store the lView for later, and when the view is
     * exited the state has to be restored
     *
     * @param newView New lView to become active
     * @param tNode Element to which the View is a child of
     * @returns the previously active lView;
     */


    function enterView(newView, tNode) {
      ngDevMode && assertLViewOrUndefined(newView);
      var newLFrame = allocLFrame();

      if (ngDevMode) {
        assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');
        assertEqual(newLFrame.lView, null, 'Expected clean LFrame');
        assertEqual(newLFrame.tView, null, 'Expected clean LFrame');
        assertEqual(newLFrame.selectedIndex, 0, 'Expected clean LFrame');
        assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');
        assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');
        assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');
        assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');
        assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');
      }

      var tView = newView[TVIEW];
      instructionState.lFrame = newLFrame;
      newLFrame.previousOrParentTNode = tNode;
      newLFrame.lView = newView;
      newLFrame.tView = tView;
      newLFrame.contextLView = newView;
      newLFrame.bindingIndex = tView.bindingStartIndex;
    }
    /**
     * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.
     */


    function allocLFrame() {
      var currentLFrame = instructionState.lFrame;
      var childLFrame = currentLFrame === null ? null : currentLFrame.child;
      var newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;
      return newLFrame;
    }

    function createLFrame(parent) {
      var lFrame = {
        previousOrParentTNode: null,
        isParent: true,
        lView: null,
        tView: null,
        selectedIndex: 0,
        contextLView: null,
        elementDepthCount: 0,
        currentNamespace: null,
        currentDirectiveIndex: -1,
        bindingRootIndex: -1,
        bindingIndex: -1,
        currentQueryIndex: 0,
        parent: parent,
        child: null
      };
      parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.

      return lFrame;
    }
    /**
     * A lightweight version of leave which is used with DI.
     *
     * This function only resets `previousOrParentTNode` and `LView` as those are the only properties
     * used with DI (`enterDI()`).
     *
     * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where
     * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.
     */


    function leaveViewLight() {
      var oldLFrame = instructionState.lFrame;
      instructionState.lFrame = oldLFrame.parent;
      oldLFrame.previousOrParentTNode = null;
      oldLFrame.lView = null;
      return oldLFrame;
    }
    /**
     * This is a lightweight version of the `leaveView` which is needed by the DI system.
     *
     * NOTE: this function is an alias so that we can change the type of the function to have `void`
     * return type.
     */


    var leaveDI = leaveViewLight;
    /**
     * Leave the current `LView`
     *
     * This pops the `LFrame` with the associated `LView` from the stack.
     *
     * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is
     * because for performance reasons we don't release `LFrame` but rather keep it for next use.
     */

    function leaveView() {
      var oldLFrame = leaveViewLight();
      oldLFrame.isParent = true;
      oldLFrame.tView = null;
      oldLFrame.selectedIndex = 0;
      oldLFrame.contextLView = null;
      oldLFrame.elementDepthCount = 0;
      oldLFrame.currentDirectiveIndex = -1;
      oldLFrame.currentNamespace = null;
      oldLFrame.bindingRootIndex = -1;
      oldLFrame.bindingIndex = -1;
      oldLFrame.currentQueryIndex = 0;
    }

    function nextContextImpl(level) {
      var contextLView = instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView);
      return contextLView[CONTEXT];
    }

    function walkUpViews(nestingLevel, currentView) {
      while (nestingLevel > 0) {
        ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');
        currentView = currentView[DECLARATION_VIEW];
        nestingLevel--;
      }

      return currentView;
    }
    /**
     * Gets the currently selected element index.
     *
     * Used with {@link property} instruction (and more in the future) to identify the index in the
     * current `LView` to act on.
     */


    function getSelectedIndex() {
      return instructionState.lFrame.selectedIndex;
    }
    /**
     * Sets the most recent index passed to {@link select}
     *
     * Used with {@link property} instruction (and more in the future) to identify the index in the
     * current `LView` to act on.
     *
     * (Note that if an "exit function" was set earlier (via `setElementExitFn()`) then that will be
     * run if and when the provided `index` value is different from the current selected index value.)
     */


    function setSelectedIndex(index) {
      instructionState.lFrame.selectedIndex = index;
    }
    /**
     * Gets the `tNode` that represents currently selected element.
     */


    function getSelectedTNode() {
      var lFrame = instructionState.lFrame;
      return getTNode(lFrame.tView, lFrame.selectedIndex);
    }
    /**
     * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.
     *
     * @codeGenApi
     */


    function ɵɵnamespaceSVG() {
      instructionState.lFrame.currentNamespace = SVG_NAMESPACE;
    }
    /**
     * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.
     *
     * @codeGenApi
     */


    function ɵɵnamespaceMathML() {
      instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;
    }
    /**
     * Sets the namespace used to create elements to `null`, which forces element creation to use
     * `createElement` rather than `createElementNS`.
     *
     * @codeGenApi
     */


    function ɵɵnamespaceHTML() {
      namespaceHTMLInternal();
    }
    /**
     * Sets the namespace used to create elements to `null`, which forces element creation to use
     * `createElement` rather than `createElementNS`.
     */


    function namespaceHTMLInternal() {
      instructionState.lFrame.currentNamespace = null;
    }

    function getNamespace() {
      return instructionState.lFrame.currentNamespace;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.
     *
     * Must be run *only* on the first template pass.
     *
     * Sets up the pre-order hooks on the provided `tView`,
     * see {@link HookData} for details about the data structure.
     *
     * @param directiveIndex The index of the directive in LView
     * @param directiveDef The definition containing the hooks to setup in tView
     * @param tView The current TView
     */


    function registerPreOrderHooks(directiveIndex, directiveDef, tView) {
      ngDevMode && assertFirstCreatePass(tView);
      var _directiveDef$type$pr = directiveDef.type.prototype,
          ngOnChanges = _directiveDef$type$pr.ngOnChanges,
          ngOnInit = _directiveDef$type$pr.ngOnInit,
          ngDoCheck = _directiveDef$type$pr.ngDoCheck;

      if (ngOnChanges) {
        var wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);
        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, wrappedOnChanges);
        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, wrappedOnChanges);
      }

      if (ngOnInit) {
        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(0 - directiveIndex, ngOnInit);
      }

      if (ngDoCheck) {
        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, ngDoCheck);
        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, ngDoCheck);
      }
    }
    /**
     *
     * Loops through the directives on the provided `tNode` and queues hooks to be
     * run that are not initialization hooks.
     *
     * Should be executed during `elementEnd()` and similar to
     * preserve hook execution order. Content, view, and destroy hooks for projected
     * components and directives must be called *before* their hosts.
     *
     * Sets up the content, view, and destroy hooks on the provided `tView`,
     * see {@link HookData} for details about the data structure.
     *
     * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up
     * separately at `elementStart`.
     *
     * @param tView The current TView
     * @param tNode The TNode whose directives are to be searched for hooks to queue
     */


    function registerPostOrderHooks(tView, tNode) {
      ngDevMode && assertFirstCreatePass(tView); // It's necessary to loop through the directives at elementEnd() (rather than processing in
      // directiveCreate) so we can preserve the current hook order. Content, view, and destroy
      // hooks for projected components and directives must be called *before* their hosts.

      for (var i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {
        var _directiveDef = tView.data[i];
        var lifecycleHooks = _directiveDef.type.prototype;
        var ngAfterContentInit = lifecycleHooks.ngAfterContentInit,
            ngAfterContentChecked = lifecycleHooks.ngAfterContentChecked,
            ngAfterViewInit = lifecycleHooks.ngAfterViewInit,
            ngAfterViewChecked = lifecycleHooks.ngAfterViewChecked,
            ngOnDestroy = lifecycleHooks.ngOnDestroy;

        if (ngAfterContentInit) {
          (tView.contentHooks || (tView.contentHooks = [])).push(-i, ngAfterContentInit);
        }

        if (ngAfterContentChecked) {
          (tView.contentHooks || (tView.contentHooks = [])).push(i, ngAfterContentChecked);
          (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, ngAfterContentChecked);
        }

        if (ngAfterViewInit) {
          (tView.viewHooks || (tView.viewHooks = [])).push(-i, ngAfterViewInit);
        }

        if (ngAfterViewChecked) {
          (tView.viewHooks || (tView.viewHooks = [])).push(i, ngAfterViewChecked);
          (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, ngAfterViewChecked);
        }

        if (ngOnDestroy != null) {
          (tView.destroyHooks || (tView.destroyHooks = [])).push(i, ngOnDestroy);
        }
      }
    }
    /**
     * Executing hooks requires complex logic as we need to deal with 2 constraints.
     *
     * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only
     * once, across many change detection cycles. This must be true even if some hooks throw, or if
     * some recursively trigger a change detection cycle.
     * To solve that, it is required to track the state of the execution of these init hooks.
     * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},
     * and the index within that phase. They can be seen as a cursor in the following structure:
     * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]
     * They are are stored as flags in LView[FLAGS].
     *
     * 2. Pre-order hooks can be executed in batches, because of the select instruction.
     * To be able to pause and resume their execution, we also need some state about the hook's array
     * that is being processed:
     * - the index of the next hook to be executed
     * - the number of init hooks already found in the processed part of the  array
     * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].
     */

    /**
     * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were
     * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read
     * / write of the init-hooks related flags.
     * @param lView The LView where hooks are defined
     * @param hooks Hooks to be run
     * @param nodeIndex 3 cases depending on the value:
     * - undefined: all hooks from the array should be executed (post-order case)
     * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
     * flushing the remaining hooks)
     * - number: execute hooks only from the saved index until that node index exclusive (pre-order
     * case, when executing select(number))
     */


    function executeCheckHooks(lView, hooks, nodeIndex) {
      callHooks(lView, hooks, 3
      /* InitPhaseCompleted */
      , nodeIndex);
    }
    /**
     * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,
     * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.
     * @param lView The LView where hooks are defined
     * @param hooks Hooks to be run
     * @param initPhase A phase for which hooks should be run
     * @param nodeIndex 3 cases depending on the value:
     * - undefined: all hooks from the array should be executed (post-order case)
     * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
     * flushing the remaining hooks)
     * - number: execute hooks only from the saved index until that node index exclusive (pre-order
     * case, when executing select(number))
     */


    function executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {
      ngDevMode && assertNotEqual(initPhase, 3
      /* InitPhaseCompleted */
      , 'Init pre-order hooks should not be called more than once');

      if ((lView[FLAGS] & 3
      /* InitPhaseStateMask */
      ) === initPhase) {
        callHooks(lView, hooks, initPhase, nodeIndex);
      }
    }

    function incrementInitPhaseFlags(lView, initPhase) {
      ngDevMode && assertNotEqual(initPhase, 3
      /* InitPhaseCompleted */
      , 'Init hooks phase should not be incremented after all init hooks have been run.');
      var flags = lView[FLAGS];

      if ((flags & 3
      /* InitPhaseStateMask */
      ) === initPhase) {
        flags &= 2047
        /* IndexWithinInitPhaseReset */
        ;
        flags += 1
        /* InitPhaseStateIncrementer */
        ;
        lView[FLAGS] = flags;
      }
    }
    /**
     * Calls lifecycle hooks with their contexts, skipping init hooks if it's not
     * the first LView pass
     *
     * @param currentView The current view
     * @param arr The array in which the hooks are found
     * @param initPhaseState the current state of the init phase
     * @param currentNodeIndex 3 cases depending on the value:
     * - undefined: all hooks from the array should be executed (post-order case)
     * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
     * flushing the remaining hooks)
     * - number: execute hooks only from the saved index until that node index exclusive (pre-order
     * case, when executing select(number))
     */


    function callHooks(currentView, arr, initPhase, currentNodeIndex) {
      ngDevMode && assertEqual(getCheckNoChangesMode(), false, 'Hooks should never be run in the check no changes mode.');
      var startIndex = currentNodeIndex !== undefined ? currentView[PREORDER_HOOK_FLAGS] & 65535
      /* IndexOfTheNextPreOrderHookMaskMask */
      : 0;
      var nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;
      var lastNodeIndexFound = 0;

      for (var i = startIndex; i < arr.length; i++) {
        var hook = arr[i + 1];

        if (typeof hook === 'number') {
          lastNodeIndexFound = arr[i];

          if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {
            break;
          }
        } else {
          var isInitHook = arr[i] < 0;
          if (isInitHook) currentView[PREORDER_HOOK_FLAGS] += 65536
          /* NumberOfInitHooksCalledIncrementer */
          ;

          if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {
            callHook(currentView, initPhase, arr, i);
            currentView[PREORDER_HOOK_FLAGS] = (currentView[PREORDER_HOOK_FLAGS] & 4294901760
            /* NumberOfInitHooksCalledMask */
            ) + i + 2;
          }

          i++;
        }
      }
    }
    /**
     * Execute one hook against the current `LView`.
     *
     * @param currentView The current view
     * @param initPhaseState the current state of the init phase
     * @param arr The array in which the hooks are found
     * @param i The current index within the hook data array
     */


    function callHook(currentView, initPhase, arr, i) {
      var isInitHook = arr[i] < 0;
      var hook = arr[i + 1];
      var directiveIndex = isInitHook ? -arr[i] : arr[i];
      var directive = currentView[directiveIndex];

      if (isInitHook) {
        var indexWithintInitPhase = currentView[FLAGS] >> 11
        /* IndexWithinInitPhaseShift */
        ; // The init phase state must be always checked here as it may have been recursively
        // updated

        if (indexWithintInitPhase < currentView[PREORDER_HOOK_FLAGS] >> 16
        /* NumberOfInitHooksCalledShift */
        && (currentView[FLAGS] & 3
        /* InitPhaseStateMask */
        ) === initPhase) {
          currentView[FLAGS] += 2048
          /* IndexWithinInitPhaseIncrementer */
          ;
          hook.call(directive);
        }
      } else {
        hook.call(directive);
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var TNODE = 8;
    var PARENT_INJECTOR = 8;
    var INJECTOR_BLOOM_PARENT_SIZE = 9;
    var NO_PARENT_INJECTOR = -1;
    /**
     * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in
     * `TView.data`. This allows us to store information about the current node's tokens (which
     * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be
     * shared, so they live in `LView`).
     *
     * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter
     * determines whether a directive is available on the associated node or not. This prevents us
     * from searching the directives array at this level unless it's probable the directive is in it.
     *
     * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.
     *
     * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed
     * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`
     * will differ based on where it is flattened into the main array, so it's not possible to know
     * the indices ahead of time and save their types here. The interfaces are still included here
     * for documentation purposes.
     *
     * export interface LInjector extends Array<any> {
     *
     *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)
     *    [0]: number;
     *
     *    // Cumulative bloom for directive IDs 32-63
     *    [1]: number;
     *
     *    // Cumulative bloom for directive IDs 64-95
     *    [2]: number;
     *
     *    // Cumulative bloom for directive IDs 96-127
     *    [3]: number;
     *
     *    // Cumulative bloom for directive IDs 128-159
     *    [4]: number;
     *
     *    // Cumulative bloom for directive IDs 160 - 191
     *    [5]: number;
     *
     *    // Cumulative bloom for directive IDs 192 - 223
     *    [6]: number;
     *
     *    // Cumulative bloom for directive IDs 224 - 255
     *    [7]: number;
     *
     *    // We need to store a reference to the injector's parent so DI can keep looking up
     *    // the injector tree until it finds the dependency it's looking for.
     *    [PARENT_INJECTOR]: number;
     * }
     *
     * export interface TInjector extends Array<any> {
     *
     *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)
     *    [0]: number;
     *
     *    // Shared node bloom for directive IDs 32-63
     *    [1]: number;
     *
     *    // Shared node bloom for directive IDs 64-95
     *    [2]: number;
     *
     *    // Shared node bloom for directive IDs 96-127
     *    [3]: number;
     *
     *    // Shared node bloom for directive IDs 128-159
     *    [4]: number;
     *
     *    // Shared node bloom for directive IDs 160 - 191
     *    [5]: number;
     *
     *    // Shared node bloom for directive IDs 192 - 223
     *    [6]: number;
     *
     *    // Shared node bloom for directive IDs 224 - 255
     *    [7]: number;
     *
     *    // Necessary to find directive indices for a particular node.
     *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;
     *  }
     */

    /**
     * Factory for creating instances of injectors in the NodeInjector.
     *
     * This factory is complicated by the fact that it can resolve `multi` factories as well.
     *
     * NOTE: Some of the fields are optional which means that this class has two hidden classes.
     * - One without `multi` support (most common)
     * - One with `multi` values, (rare).
     *
     * Since VMs can cache up to 4 inline hidden classes this is OK.
     *
     * - Single factory: Only `resolving` and `factory` is defined.
     * - `providers` factory: `componentProviders` is a number and `index = -1`.
     * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.
     */

    var NodeInjectorFactory = function NodeInjectorFactory(
    /**
     * Factory to invoke in order to create a new instance.
     */
    factory,
    /**
     * Set to `true` if the token is declared in `viewProviders` (or if it is component).
     */
    isViewProvider, injectImplementation) {
      _classCallCheck(this, NodeInjectorFactory);

      this.factory = factory;
      /**
       * Marker set to true during factory invocation to see if we get into recursive loop.
       * Recursive loop causes an error to be displayed.
       */

      this.resolving = false;
      this.canSeeViewProviders = isViewProvider;
      this.injectImpl = injectImplementation;
    };

    function isFactory(obj) {
      return obj instanceof NodeInjectorFactory;
    } // Note: This hack is necessary so we don't erroneously get a circular dependency
    // failure based on types.


    var unusedValueExportToPlacateAjd$3 = 1;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    function assertNodeType(tNode, type) {
      assertDefined(tNode, 'should be called with a TNode');
      assertEqual(tNode.type, type, "should be a ".concat(typeName(type)));
    }

    function assertNodeOfPossibleTypes(tNode, types, message) {
      assertDefined(tNode, 'should be called with a TNode');
      var found = types.some(function (type) {
        return tNode.type === type;
      });
      assertEqual(found, true, message !== null && message !== void 0 ? message : "Should be one of ".concat(types.map(typeName).join(', '), " but got ").concat(typeName(tNode.type)));
    }

    function assertNodeNotOfTypes(tNode, types, message) {
      assertDefined(tNode, 'should be called with a TNode');
      var found = types.some(function (type) {
        return tNode.type === type;
      });
      assertEqual(found, false, message !== null && message !== void 0 ? message : "Should not be one of ".concat(types.map(typeName).join(', '), " but got ").concat(typeName(tNode.type)));
    }

    function typeName(type) {
      if (type == 1
      /* Projection */
      ) return 'Projection';
      if (type == 0
      /* Container */
      ) return 'Container';
      if (type == 5
      /* IcuContainer */
      ) return 'IcuContainer';
      if (type == 2
      /* View */
      ) return 'View';
      if (type == 3
      /* Element */
      ) return 'Element';
      if (type == 4
      /* ElementContainer */
      ) return 'ElementContainer';
      return '<unknown>';
    }
    /**
     * Assigns all attribute values to the provided element via the inferred renderer.
     *
     * This function accepts two forms of attribute entries:
     *
     * default: (key, value):
     *  attrs = [key1, value1, key2, value2]
     *
     * namespaced: (NAMESPACE_MARKER, uri, name, value)
     *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]
     *
     * The `attrs` array can contain a mix of both the default and namespaced entries.
     * The "default" values are set without a marker, but if the function comes across
     * a marker value then it will attempt to set a namespaced value. If the marker is
     * not of a namespaced value then the function will quit and return the index value
     * where it stopped during the iteration of the attrs array.
     *
     * See [AttributeMarker] to understand what the namespace marker value is.
     *
     * Note that this instruction does not support assigning style and class values to
     * an element. See `elementStart` and `elementHostAttrs` to learn how styling values
     * are applied to an element.
     * @param renderer The renderer to be used
     * @param native The element that the attributes will be assigned to
     * @param attrs The attribute array of values that will be assigned to the element
     * @returns the index value that was last accessed in the attributes array
     */


    function setUpAttributes(renderer, _native, attrs) {
      var isProc = isProceduralRenderer(renderer);
      var i = 0;

      while (i < attrs.length) {
        var value = attrs[i];

        if (typeof value === 'number') {
          // only namespaces are supported. Other value types (such as style/class
          // entries) are not supported in this function.
          if (value !== 0
          /* NamespaceURI */
          ) {
              break;
            } // we just landed on the marker value ... therefore
          // we should skip to the next entry


          i++;
          var namespaceURI = attrs[i++];
          var attrName = attrs[i++];
          var attrVal = attrs[i++];
          ngDevMode && ngDevMode.rendererSetAttribute++;
          isProc ? renderer.setAttribute(_native, attrName, attrVal, namespaceURI) : _native.setAttributeNS(namespaceURI, attrName, attrVal);
        } else {
          // attrName is string;
          var _attrName = value;
          var _attrVal = attrs[++i]; // Standard attributes

          ngDevMode && ngDevMode.rendererSetAttribute++;

          if (isAnimationProp(_attrName)) {
            if (isProc) {
              renderer.setProperty(_native, _attrName, _attrVal);
            }
          } else {
            isProc ? renderer.setAttribute(_native, _attrName, _attrVal) : _native.setAttribute(_attrName, _attrVal);
          }

          i++;
        }
      } // another piece of code may iterate over the same attributes array. Therefore
      // it may be helpful to return the exact spot where the attributes array exited
      // whether by running into an unsupported marker or if all the static values were
      // iterated over.


      return i;
    }
    /**
     * Test whether the given value is a marker that indicates that the following
     * attribute values in a `TAttributes` array are only the names of attributes,
     * and not name-value pairs.
     * @param marker The attribute marker to test.
     * @returns true if the marker is a "name-only" marker (e.g. `Bindings`, `Template` or `I18n`).
     */


    function isNameOnlyAttributeMarker(marker) {
      return marker === 3
      /* Bindings */
      || marker === 4
      /* Template */
      || marker === 6
      /* I18n */
      ;
    }

    function isAnimationProp(name) {
      // Perf note: accessing charCodeAt to check for the first character of a string is faster as
      // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that
      // charCodeAt doesn't allocate memory to return a substring.
      return name.charCodeAt(0) === 64
      /* AT_SIGN */
      ;
    }
    /**
     * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.
     *
     * This merge function keeps the order of attrs same.
     *
     * @param dst Location of where the merged `TAttributes` should end up.
     * @param src `TAttributes` which should be appended to `dst`
     */


    function mergeHostAttrs(dst, src) {
      if (src === null || src.length === 0) {// do nothing
      } else if (dst === null || dst.length === 0) {
        // We have source, but dst is empty, just make a copy.
        dst = src.slice();
      } else {
        var srcMarker = -1
        /* ImplicitAttributes */
        ;

        for (var i = 0; i < src.length; i++) {
          var item = src[i];

          if (typeof item === 'number') {
            srcMarker = item;
          } else {
            if (srcMarker === 0
            /* NamespaceURI */
            ) {// Case where we need to consume `key1`, `key2`, `value` items.
              } else if (srcMarker === -1
            /* ImplicitAttributes */
            || srcMarker === 2
            /* Styles */
            ) {
                // Case where we have to consume `key1` and `value` only.
                mergeHostAttribute(dst, srcMarker, item, null, src[++i]);
              } else {
              // Case where we have to consume `key1` only.
              mergeHostAttribute(dst, srcMarker, item, null, null);
            }
          }
        }
      }

      return dst;
    }
    /**
     * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.
     *
     * @param dst `TAttributes` to append to.
     * @param marker Region where the `key`/`value` should be added.
     * @param key1 Key to add to `TAttributes`
     * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)
     * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.
     */


    function mergeHostAttribute(dst, marker, key1, key2, value) {
      var i = 0; // Assume that new markers will be inserted at the end.

      var markerInsertPosition = dst.length; // scan until correct type.

      if (marker === -1
      /* ImplicitAttributes */
      ) {
          markerInsertPosition = -1;
        } else {
        while (i < dst.length) {
          var dstValue = dst[i++];

          if (typeof dstValue === 'number') {
            if (dstValue === marker) {
              markerInsertPosition = -1;
              break;
            } else if (dstValue > marker) {
              // We need to save this as we want the markers to be inserted in specific order.
              markerInsertPosition = i - 1;
              break;
            }
          }
        }
      } // search until you find place of insertion


      while (i < dst.length) {
        var item = dst[i];

        if (typeof item === 'number') {
          // since `i` started as the index after the marker, we did not find it if we are at the next
          // marker
          break;
        } else if (item === key1) {
          // We already have same token
          if (key2 === null) {
            if (value !== null) {
              dst[i + 1] = value;
            }

            return;
          } else if (key2 === dst[i + 1]) {
            dst[i + 2] = value;
            return;
          }
        } // Increment counter.


        i++;
        if (key2 !== null) i++;
        if (value !== null) i++;
      } // insert at location.


      if (markerInsertPosition !== -1) {
        dst.splice(markerInsertPosition, 0, marker);
        i = markerInsertPosition + 1;
      }

      dst.splice(i++, 0, key1);

      if (key2 !== null) {
        dst.splice(i++, 0, key2);
      }

      if (value !== null) {
        dst.splice(i++, 0, value);
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /// Parent Injector Utils ///////////////////////////////////////////////////////////////


    function hasParentInjector(parentLocation) {
      return parentLocation !== NO_PARENT_INJECTOR;
    }

    function getParentInjectorIndex(parentLocation) {
      return parentLocation & 32767
      /* InjectorIndexMask */
      ;
    }

    function getParentInjectorViewOffset(parentLocation) {
      return parentLocation >> 16
      /* ViewOffsetShift */
      ;
    }
    /**
     * Unwraps a parent injector location number to find the view offset from the current injector,
     * then walks up the declaration view tree until the view is found that contains the parent
     * injector.
     *
     * @param location The location of the parent injector, which contains the view offset
     * @param startView The LView instance from which to start walking up the view tree
     * @returns The LView instance that contains the parent injector
     */


    function getParentInjectorView(location, startView) {
      var viewOffset = getParentInjectorViewOffset(location);
      var parentView = startView; // For most cases, the parent injector can be found on the host node (e.g. for component
      // or container), but we must keep the loop here to support the rarer case of deeply nested
      // <ng-template> tags or inline views, where the parent injector might live many views
      // above the child injector.

      while (viewOffset > 0) {
        parentView = parentView[DECLARATION_VIEW];
        viewOffset--;
      }

      return parentView;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Used for stringify render output in Ivy.
     * Important! This function is very performance-sensitive and we should
     * be extra careful not to introduce megamorphic reads in it.
     */


    function renderStringify(value) {
      if (typeof value === 'string') return value;
      if (value == null) return '';
      return '' + value;
    }
    /**
     * Used to stringify a value so that it can be displayed in an error message.
     * Important! This function contains a megamorphic read and should only be
     * used for error messages.
     */


    function stringifyForError(value) {
      if (typeof value === 'function') return value.name || value.toString();

      if (typeof value === 'object' && value != null && typeof value.type === 'function') {
        return value.type.name || value.type.toString();
      }

      return renderStringify(value);
    }

    var ɵ0$3 = function ɵ0$3() {
      return (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only
      setTimeout // everything else
      ).bind(_global);
    };

    var defaultScheduler = /*@__PURE__*/ɵ0$3();
    /**
     *
     * @codeGenApi
     */

    function ɵɵresolveWindow(element) {
      return {
        name: 'window',
        target: element.ownerDocument.defaultView
      };
    }
    /**
     *
     * @codeGenApi
     */


    function ɵɵresolveDocument(element) {
      return {
        name: 'document',
        target: element.ownerDocument
      };
    }
    /**
     *
     * @codeGenApi
     */


    function ɵɵresolveBody(element) {
      return {
        name: 'body',
        target: element.ownerDocument.body
      };
    }
    /**
     * The special delimiter we use to separate property names, prefixes, and suffixes
     * in property binding metadata. See storeBindingMetadata().
     *
     * We intentionally use the Unicode "REPLACEMENT CHARACTER" (U+FFFD) as a delimiter
     * because it is a very uncommon character that is unlikely to be part of a user's
     * property names or interpolation strings. If it is in fact used in a property
     * binding, DebugElement.properties will not return the correct value for that
     * binding. However, there should be no runtime effect for real applications.
     *
     * This character is typically rendered as a question mark inside of a diamond.
     * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)
     *
     */


    var INTERPOLATION_DELIMITER = "\uFFFD";
    /**
     * Unwrap a value which might be behind a closure (for forward declaration reasons).
     */

    function maybeUnwrapFn(value) {
      if (value instanceof Function) {
        return value();
      } else {
        return value;
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Defines if the call to `inject` should include `viewProviders` in its resolution.
     *
     * This is set to true when we try to instantiate a component. This value is reset in
     * `getNodeInjectable` to a value which matches the declaration location of the token about to be
     * instantiated. This is done so that if we are injecting a token which was declared outside of
     * `viewProviders` we don't accidentally pull `viewProviders` in.
     *
     * Example:
     *
     * ```
     * @Injectable()
     * class MyService {
     *   constructor(public value: String) {}
     * }
     *
     * @Component({
     *   providers: [
     *     MyService,
     *     {provide: String, value: 'providers' }
     *   ]
     *   viewProviders: [
     *     {provide: String, value: 'viewProviders'}
     *   ]
     * })
     * class MyComponent {
     *   constructor(myService: MyService, value: String) {
     *     // We expect that Component can see into `viewProviders`.
     *     expect(value).toEqual('viewProviders');
     *     // `MyService` was not declared in `viewProviders` hence it can't see it.
     *     expect(myService.value).toEqual('providers');
     *   }
     * }
     *
     * ```
     */


    var includeViewProviders = true;

    function setIncludeViewProviders(v) {
      var oldValue = includeViewProviders;
      includeViewProviders = v;
      return oldValue;
    }
    /**
     * The number of slots in each bloom filter (used by DI). The larger this number, the fewer
     * directives that will share slots, and thus, the fewer false positives when checking for
     * the existence of a directive.
     */


    var BLOOM_SIZE = 256;
    var BLOOM_MASK = BLOOM_SIZE - 1;
    /** Counter used to generate unique IDs for directives. */

    var nextNgElementId = 0;
    /**
     * Registers this directive as present in its node's injector by flipping the directive's
     * corresponding bit in the injector's bloom filter.
     *
     * @param injectorIndex The index of the node injector where this token should be registered
     * @param tView The TView for the injector's bloom filters
     * @param type The directive token to register
     */

    function bloomAdd(injectorIndex, tView, type) {
      ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');
      var id;

      if (typeof type === 'string') {
        id = type.charCodeAt(0) || 0;
      } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {
        id = type[NG_ELEMENT_ID];
      } // Set a unique ID on the directive type, so if something tries to inject the directive,
      // we can easily retrieve the ID and hash it into the bloom bit that should be checked.


      if (id == null) {
        id = type[NG_ELEMENT_ID] = nextNgElementId++;
      } // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),
      // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.


      var bloomBit = id & BLOOM_MASK; // Create a mask that targets the specific bit associated with the directive.
      // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
      // to bit positions 0 - 31 in a 32 bit integer.

      var mask = 1 << bloomBit; // Use the raw bloomBit number to determine which bloom filter bucket we should check
      // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc

      var b7 = bloomBit & 0x80;
      var b6 = bloomBit & 0x40;
      var b5 = bloomBit & 0x20;
      var tData = tView.data;

      if (b7) {
        b6 ? b5 ? tData[injectorIndex + 7] |= mask : tData[injectorIndex + 6] |= mask : b5 ? tData[injectorIndex + 5] |= mask : tData[injectorIndex + 4] |= mask;
      } else {
        b6 ? b5 ? tData[injectorIndex + 3] |= mask : tData[injectorIndex + 2] |= mask : b5 ? tData[injectorIndex + 1] |= mask : tData[injectorIndex] |= mask;
      }
    }
    /**
     * Creates (or gets an existing) injector for a given element or container.
     *
     * @param tNode for which an injector should be retrieved / created.
     * @param hostView View where the node is stored
     * @returns Node injector
     */


    function getOrCreateNodeInjectorForNode(tNode, hostView) {
      var existingInjectorIndex = getInjectorIndex(tNode, hostView);

      if (existingInjectorIndex !== -1) {
        return existingInjectorIndex;
      }

      var tView = hostView[TVIEW];

      if (tView.firstCreatePass) {
        tNode.injectorIndex = hostView.length;
        insertBloom(tView.data, tNode); // foundation for node bloom

        insertBloom(hostView, null); // foundation for cumulative bloom

        insertBloom(tView.blueprint, null);
      }

      var parentLoc = getParentInjectorLocation(tNode, hostView);
      var injectorIndex = tNode.injectorIndex; // If a parent injector can't be found, its location is set to -1.
      // In that case, we don't need to set up a cumulative bloom

      if (hasParentInjector(parentLoc)) {
        var parentIndex = getParentInjectorIndex(parentLoc);
        var parentLView = getParentInjectorView(parentLoc, hostView);
        var parentData = parentLView[TVIEW].data; // Creates a cumulative bloom filter that merges the parent's bloom filter
        // and its own cumulative bloom (which contains tokens for all ancestors)

        for (var i = 0; i < 8; i++) {
          hostView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];
        }
      }

      hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;
      return injectorIndex;
    }

    function insertBloom(arr, footer) {
      arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);
    }

    function getInjectorIndex(tNode, hostView) {
      if (tNode.injectorIndex === -1 || // If the injector index is the same as its parent's injector index, then the index has been
      // copied down from the parent node. No injector has been created yet on this node.
      tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex || // After the first template pass, the injector index might exist but the parent values
      // might not have been calculated yet for this instance
      hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {
        return -1;
      } else {
        return tNode.injectorIndex;
      }
    }
    /**
     * Finds the index of the parent injector, with a view offset if applicable. Used to set the
     * parent injector initially.
     *
     * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`
     */


    function getParentInjectorLocation(tNode, view) {
      if (tNode.parent && tNode.parent.injectorIndex !== -1) {
        return tNode.parent.injectorIndex; // ViewOffset is 0
      } // For most cases, the parent injector index can be found on the host node (e.g. for component
      // or container), so this loop will be skipped, but we must keep the loop here to support
      // the rarer case of deeply nested <ng-template> tags or inline views.


      var hostTNode = view[T_HOST];
      var viewOffset = 1;

      while (hostTNode && hostTNode.injectorIndex === -1) {
        view = view[DECLARATION_VIEW];
        hostTNode = view ? view[T_HOST] : null;
        viewOffset++;
      }

      return hostTNode ? hostTNode.injectorIndex | viewOffset << 16
      /* ViewOffsetShift */
      : -1;
    }
    /**
     * Makes a type or an injection token public to the DI system by adding it to an
     * injector's bloom filter.
     *
     * @param di The node injector in which a directive will be added
     * @param token The type or the injection token to be made public
     */


    function diPublicInInjector(injectorIndex, tView, token) {
      bloomAdd(injectorIndex, tView, token);
    }
    /**
     * Inject static attribute value into directive constructor.
     *
     * This method is used with `factory` functions which are generated as part of
     * `defineDirective` or `defineComponent`. The method retrieves the static value
     * of an attribute. (Dynamic attributes are not supported since they are not resolved
     *  at the time of injection and can change over time.)
     *
     * # Example
     * Given:
     * ```
     * @Component(...)
     * class MyComponent {
     *   constructor(@Attribute('title') title: string) { ... }
     * }
     * ```
     * When instantiated with
     * ```
     * <my-component title="Hello"></my-component>
     * ```
     *
     * Then factory method generated is:
     * ```
     * MyComponent.ɵcmp = defineComponent({
     *   factory: () => new MyComponent(injectAttribute('title'))
     *   ...
     * })
     * ```
     *
     * @publicApi
     */


    function injectAttributeImpl(tNode, attrNameToInject) {
      ngDevMode && assertNodeOfPossibleTypes(tNode, [0
      /* Container */
      , 3
      /* Element */
      , 4
      /* ElementContainer */
      ]);
      ngDevMode && assertDefined(tNode, 'expecting tNode');

      if (attrNameToInject === 'class') {
        return tNode.classes;
      }

      if (attrNameToInject === 'style') {
        return tNode.styles;
      }

      var attrs = tNode.attrs;

      if (attrs) {
        var attrsLength = attrs.length;
        var i = 0;

        while (i < attrsLength) {
          var value = attrs[i]; // If we hit a `Bindings` or `Template` marker then we are done.

          if (isNameOnlyAttributeMarker(value)) break; // Skip namespaced attributes

          if (value === 0
          /* NamespaceURI */
          ) {
              // we skip the next two values
              // as namespaced attributes looks like
              // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',
              // 'existValue', ...]
              i = i + 2;
            } else if (typeof value === 'number') {
            // Skip to the first value of the marked attribute.
            i++;

            while (i < attrsLength && typeof attrs[i] === 'string') {
              i++;
            }
          } else if (value === attrNameToInject) {
            return attrs[i + 1];
          } else {
            i = i + 2;
          }
        }
      }

      return null;
    }
    /**
     * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.
     *
     * Look for the injector providing the token by walking up the node injector tree and then
     * the module injector tree.
     *
     * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom
     * filter. Negative values are reserved for special objects.
     *   - `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)
     *
     * @param tNode The Node where the search for the injector should start
     * @param lView The `LView` that contains the `tNode`
     * @param token The token to look for
     * @param flags Injection flags
     * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`
     * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided
     */


    function getOrCreateInjectable(tNode, lView, token) {
      var flags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : InjectFlags.Default;
      var notFoundValue = arguments.length > 4 ? arguments[4] : undefined;

      if (tNode !== null) {
        var bloomHash = bloomHashBitOrFactory(token); // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef
        // so just call the factory function to create it.

        if (typeof bloomHash === 'function') {
          enterDI(lView, tNode);

          try {
            var value = bloomHash();

            if (value == null && !(flags & InjectFlags.Optional)) {
              throw new Error("No provider for ".concat(stringifyForError(token), "!"));
            } else {
              return value;
            }
          } finally {
            leaveDI();
          }
        } else if (typeof bloomHash == 'number') {
          if (bloomHash === -1) {
            // `-1` is a special value used to identify `Injector` types.
            return new NodeInjector(tNode, lView);
          } // If the token has a bloom hash, then it is a token which could be in NodeInjector.
          // A reference to the previous injector TView that was found while climbing the element
          // injector tree. This is used to know if viewProviders can be accessed on the current
          // injector.


          var previousTView = null;
          var injectorIndex = getInjectorIndex(tNode, lView);
          var parentLocation = NO_PARENT_INJECTOR;
          var hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null; // If we should skip this injector, or if there is no injector on this node, start by
          // searching
          // the parent injector.

          if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {
            parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[injectorIndex + PARENT_INJECTOR];

            if (!shouldSearchParent(flags, false)) {
              injectorIndex = -1;
            } else {
              previousTView = lView[TVIEW];
              injectorIndex = getParentInjectorIndex(parentLocation);
              lView = getParentInjectorView(parentLocation, lView);
            }
          } // Traverse up the injector tree until we find a potential match or until we know there
          // *isn't* a match.


          while (injectorIndex !== -1) {
            parentLocation = lView[injectorIndex + PARENT_INJECTOR]; // Check the current injector. If it matches, see if it contains token.

            var tView = lView[TVIEW];

            if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {
              // At this point, we have an injector which *may* contain the token, so we step through
              // the providers and directives associated with the injector's corresponding node to get
              // the instance.
              var instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);

              if (instance !== NOT_FOUND) {
                return instance;
              }
            }

            if (shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + TNODE] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {
              // The def wasn't found anywhere on this node, so it was a false positive.
              // Traverse up the tree and continue searching.
              previousTView = tView;
              injectorIndex = getParentInjectorIndex(parentLocation);
              lView = getParentInjectorView(parentLocation, lView);
            } else {
              // If we should not search parent OR If the ancestor bloom filter value does not have the
              // bit corresponding to the directive we can give up on traversing up to find the specific
              // injector.
              injectorIndex = -1;
            }
          }
        }
      }

      if (flags & InjectFlags.Optional && notFoundValue === undefined) {
        // This must be set or the NullInjector will throw for optional deps
        notFoundValue = null;
      }

      if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {
        var moduleInjector = lView[INJECTOR$1]; // switch to `injectInjectorOnly` implementation for module injector, since module injector
        // should not have access to Component/Directive DI scope (that may happen through
        // `directiveInject` implementation)

        var previousInjectImplementation = setInjectImplementation(undefined);

        try {
          if (moduleInjector) {
            return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);
          } else {
            return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);
          }
        } finally {
          setInjectImplementation(previousInjectImplementation);
        }
      }

      if (flags & InjectFlags.Optional) {
        return notFoundValue;
      } else {
        throw new Error("NodeInjector: NOT_FOUND [".concat(stringifyForError(token), "]"));
      }
    }

    var NOT_FOUND = {};

    function searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {
      var currentTView = lView[TVIEW];
      var tNode = currentTView.data[injectorIndex + TNODE]; // First, we need to determine if view providers can be accessed by the starting element.
      // There are two possibities

      var canAccessViewProviders = previousTView == null ? // 1) This is the first invocation `previousTView == null` which means that we are at the
      // `TNode` of where injector is starting to look. In such a case the only time we are allowed
      // to look into the ViewProviders is if:
      // - we are on a component
      // - AND the injector set `includeViewProviders` to true (implying that the token can see
      // ViewProviders because it is the Component or a Service which itself was declared in
      // ViewProviders)
      isComponentHost(tNode) && includeViewProviders : // 2) `previousTView != null` which means that we are now walking across the parent nodes.
      // In such a case we are only allowed to look into the ViewProviders if:
      // - We just crossed from child View to Parent View `previousTView != currentTView`
      // - AND the parent TNode is an Element.
      // This means that we just came from the Component's View and therefore are allowed to see
      // into the ViewProviders.
      previousTView != currentTView && tNode.type === 3
      /* Element */
      ; // This special case happens when there is a @host on the inject and when we are searching
      // on the host element node.

      var isHostSpecialCase = flags & InjectFlags.Host && hostTElementNode === tNode;
      var injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);

      if (injectableIdx !== null) {
        return getNodeInjectable(lView, currentTView, injectableIdx, tNode);
      } else {
        return NOT_FOUND;
      }
    }
    /**
     * Searches for the given token among the node's directives and providers.
     *
     * @param tNode TNode on which directives are present.
     * @param tView The tView we are currently processing
     * @param token Provider token or type of a directive to look for.
     * @param canAccessViewProviders Whether view providers should be considered.
     * @param isHostSpecialCase Whether the host special case applies.
     * @returns Index of a found directive or provider, or null when none found.
     */


    function locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {
      var nodeProviderIndexes = tNode.providerIndexes;
      var tInjectables = tView.data;
      var injectablesStart = nodeProviderIndexes & 1048575
      /* ProvidersStartIndexMask */
      ;
      var directivesStart = tNode.directiveStart;
      var directiveEnd = tNode.directiveEnd;
      var cptViewProvidersCount = nodeProviderIndexes >> 20
      /* CptViewProvidersCountShift */
      ;
      var startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount; // When the host special case applies, only the viewProviders and the component are visible

      var endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;

      for (var i = startingIndex; i < endIndex; i++) {
        var providerTokenOrDef = tInjectables[i];

        if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && providerTokenOrDef.type === token) {
          return i;
        }
      }

      if (isHostSpecialCase) {
        var dirDef = tInjectables[directivesStart];

        if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {
          return directivesStart;
        }
      }

      return null;
    }
    /**
     * Retrieve or instantiate the injectable from the `LView` at particular `index`.
     *
     * This function checks to see if the value has already been instantiated and if so returns the
     * cached `injectable`. Otherwise if it detects that the value is still a factory it
     * instantiates the `injectable` and caches the value.
     */


    function getNodeInjectable(lView, tView, index, tNode) {
      var value = lView[index];
      var tData = tView.data;

      if (isFactory(value)) {
        var factory = value;

        if (factory.resolving) {
          throw new Error("Circular dep for ".concat(stringifyForError(tData[index])));
        }

        var previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);
        factory.resolving = true;
        var previousInjectImplementation;

        if (factory.injectImpl) {
          previousInjectImplementation = setInjectImplementation(factory.injectImpl);
        }

        enterDI(lView, tNode);

        try {
          value = lView[index] = factory.factory(undefined, tData, lView, tNode); // This code path is hit for both directives and providers.
          // For perf reasons, we want to avoid searching for hooks on providers.
          // It does no harm to try (the hooks just won't exist), but the extra
          // checks are unnecessary and this is a hot path. So we check to see
          // if the index of the dependency is in the directive range for this
          // tNode. If it's not, we know it's a provider and skip hook registration.

          if (tView.firstCreatePass && index >= tNode.directiveStart) {
            ngDevMode && assertDirectiveDef(tData[index]);
            registerPreOrderHooks(index, tData[index], tView);
          }
        } finally {
          if (factory.injectImpl) setInjectImplementation(previousInjectImplementation);
          setIncludeViewProviders(previousIncludeViewProviders);
          factory.resolving = false;
          leaveDI();
        }
      }

      return value;
    }
    /**
     * Returns the bit in an injector's bloom filter that should be used to determine whether or not
     * the directive might be provided by the injector.
     *
     * When a directive is public, it is added to the bloom filter and given a unique ID that can be
     * retrieved on the Type. When the directive isn't public or the token is not a directive `null`
     * is returned as the node injector can not possibly provide that token.
     *
     * @param token the injection token
     * @returns the matching bit to check in the bloom filter or `null` if the token is not known.
     *   When the returned value is negative then it represents special values such as `Injector`.
     */


    function bloomHashBitOrFactory(token) {
      ngDevMode && assertDefined(token, 'token must be defined');

      if (typeof token === 'string') {
        return token.charCodeAt(0) || 0;
      }

      var tokenId = // First check with `hasOwnProperty` so we don't get an inherited ID.
      token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : undefined; // Negative token IDs are used for special objects such as `Injector`

      return typeof tokenId === 'number' && tokenId > 0 ? tokenId & BLOOM_MASK : tokenId;
    }

    function bloomHasToken(bloomHash, injectorIndex, injectorView) {
      // Create a mask that targets the specific bit associated with the directive we're looking for.
      // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
      // to bit positions 0 - 31 in a 32 bit integer.
      var mask = 1 << bloomHash;
      var b7 = bloomHash & 0x80;
      var b6 = bloomHash & 0x40;
      var b5 = bloomHash & 0x20; // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:
      // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.
      // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.

      var value;

      if (b7) {
        value = b6 ? b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6] : b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4];
      } else {
        value = b6 ? b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2] : b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex];
      } // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,
      // this injector is a potential match.


      return !!(value & mask);
    }
    /** Returns true if flags prevent parent injector from being searched for tokens */


    function shouldSearchParent(flags, isFirstHostTNode) {
      return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);
    }

    var NodeInjector = /*#__PURE__*/function () {
      function NodeInjector(_tNode, _lView) {
        _classCallCheck(this, NodeInjector);

        this._tNode = _tNode;
        this._lView = _lView;
      }

      _createClass2(NodeInjector, [{
        key: "get",
        value: function get(token, notFoundValue) {
          return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);
        }
      }]);

      return NodeInjector;
    }();
    /**
     * @codeGenApi
     */


    function ɵɵgetFactoryOf(type) {
      var typeAny = type;

      if (isForwardRef(type)) {
        return function () {
          var factory = ɵɵgetFactoryOf(resolveForwardRef(typeAny));
          return factory ? factory() : null;
        };
      }

      var factory = getFactoryDef(typeAny);

      if (factory === null) {
        var injectorDef = getInjectorDef(typeAny);
        factory = injectorDef && injectorDef.factory;
      }

      return factory || null;
    }
    /**
     * @codeGenApi
     */


    function ɵɵgetInheritedFactory(type) {
      return noSideEffects(function () {
        var ownConstructor = type.prototype.constructor;
        var ownFactory = ownConstructor[NG_FACTORY_DEF] || ɵɵgetFactoryOf(ownConstructor);
        var objectPrototype = Object.prototype;
        var parent = Object.getPrototypeOf(type.prototype).constructor; // Go up the prototype until we hit `Object`.

        while (parent && parent !== objectPrototype) {
          var factory = parent[NG_FACTORY_DEF] || ɵɵgetFactoryOf(parent); // If we hit something that has a factory and the factory isn't the same as the type,
          // we've found the inherited factory. Note the check that the factory isn't the type's
          // own factory is redundant in most cases, but if the user has custom decorators on the
          // class, this lookup will start one level down in the prototype chain, causing us to
          // find the own factory first and potentially triggering an infinite loop downstream.

          if (factory && factory !== ownFactory) {
            return factory;
          }

          parent = Object.getPrototypeOf(parent);
        } // There is no factory defined. Either this was improper usage of inheritance
        // (no Angular decorator on the superclass) or there is no constructor at all
        // in the inheritance chain. Since the two cases cannot be distinguished, the
        // latter has to be assumed.


        return function (t) {
          return new t();
        };
      });
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var ERROR_TYPE = 'ngType';
    var ERROR_DEBUG_CONTEXT = 'ngDebugContext';
    var ERROR_ORIGINAL_ERROR = 'ngOriginalError';
    var ERROR_LOGGER = 'ngErrorLogger';

    function wrappedError(message, originalError) {
      var msg = "".concat(message, " caused by: ").concat(originalError instanceof Error ? originalError.message : originalError);
      var error = Error(msg);
      error[ERROR_ORIGINAL_ERROR] = originalError;
      return error;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function getType(error) {
      return error[ERROR_TYPE];
    }

    function getDebugContext(error) {
      return error[ERROR_DEBUG_CONTEXT];
    }

    function getOriginalError(error) {
      return error[ERROR_ORIGINAL_ERROR];
    }

    function getErrorLogger(error) {
      return error[ERROR_LOGGER] || defaultErrorLogger;
    }

    function defaultErrorLogger(console) {
      for (var _len4 = arguments.length, values = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        values[_key4 - 1] = arguments[_key4];
      }

      console.error.apply(console, values);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Provides a hook for centralized exception handling.
     *
     * The default implementation of `ErrorHandler` prints error messages to the `console`. To
     * intercept error handling, write a custom exception handler that replaces this default as
     * appropriate for your app.
     *
     * @usageNotes
     * ### Example
     *
     * ```
     * class MyErrorHandler implements ErrorHandler {
     *   handleError(error) {
     *     // do something with the exception
     *   }
     * }
     *
     * @NgModule({
     *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
     * })
     * class MyModule {}
     * ```
     *
     * @publicApi
     */


    var ErrorHandler = /*#__PURE__*/function () {
      function ErrorHandler() {
        _classCallCheck(this, ErrorHandler);

        /**
         * @internal
         */
        this._console = console;
      }

      _createClass2(ErrorHandler, [{
        key: "handleError",
        value: function handleError(error) {
          var originalError = this._findOriginalError(error);

          var context = this._findContext(error); // Note: Browser consoles show the place from where console.error was called.
          // We can use this to give users additional information about the error.


          var errorLogger = getErrorLogger(error);
          errorLogger(this._console, "ERROR", error);

          if (originalError) {
            errorLogger(this._console, "ORIGINAL ERROR", originalError);
          }

          if (context) {
            errorLogger(this._console, 'ERROR CONTEXT', context);
          }
        }
        /** @internal */

      }, {
        key: "_findContext",
        value: function _findContext(error) {
          if (error) {
            return getDebugContext(error) ? getDebugContext(error) : this._findContext(getOriginalError(error));
          }

          return null;
        }
        /** @internal */

      }, {
        key: "_findOriginalError",
        value: function _findOriginalError(error) {
          var e = getOriginalError(error);

          while (e && getOriginalError(e)) {
            e = getOriginalError(e);
          }

          return e;
        }
      }]);

      return ErrorHandler;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Defines a schema that allows an NgModule to contain the following:
     * - Non-Angular elements named with dash case (`-`).
     * - Element properties named with dash case (`-`).
     * Dash case is the naming convention for custom elements.
     *
     * @publicApi
     */


    var CUSTOM_ELEMENTS_SCHEMA = {
      name: 'custom-elements'
    };
    /**
     * Defines a schema that allows any property on any element.
     *
     * @publicApi
     */

    var NO_ERRORS_SCHEMA = {
      name: 'no-errors-schema'
    };
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    var SafeValueImpl = /*#__PURE__*/function () {
      function SafeValueImpl(changingThisBreaksApplicationSecurity) {
        _classCallCheck(this, SafeValueImpl);

        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
      }

      _createClass2(SafeValueImpl, [{
        key: "toString",
        value: function toString() {
          return "SafeValue must use [property]=binding: ".concat(this.changingThisBreaksApplicationSecurity) + " (see http://g.co/ng/security#xss)";
        }
      }]);

      return SafeValueImpl;
    }();

    var SafeHtmlImpl = /*#__PURE__*/function (_SafeValueImpl) {
      _inherits(SafeHtmlImpl, _SafeValueImpl);

      var _super5 = _createSuper(SafeHtmlImpl);

      function SafeHtmlImpl() {
        _classCallCheck(this, SafeHtmlImpl);

        return _super5.apply(this, arguments);
      }

      _createClass2(SafeHtmlImpl, [{
        key: "getTypeName",
        value: function getTypeName() {
          return "HTML"
          /* Html */
          ;
        }
      }]);

      return SafeHtmlImpl;
    }(SafeValueImpl);

    var SafeStyleImpl = /*#__PURE__*/function (_SafeValueImpl2) {
      _inherits(SafeStyleImpl, _SafeValueImpl2);

      var _super6 = _createSuper(SafeStyleImpl);

      function SafeStyleImpl() {
        _classCallCheck(this, SafeStyleImpl);

        return _super6.apply(this, arguments);
      }

      _createClass2(SafeStyleImpl, [{
        key: "getTypeName",
        value: function getTypeName() {
          return "Style"
          /* Style */
          ;
        }
      }]);

      return SafeStyleImpl;
    }(SafeValueImpl);

    var SafeScriptImpl = /*#__PURE__*/function (_SafeValueImpl3) {
      _inherits(SafeScriptImpl, _SafeValueImpl3);

      var _super7 = _createSuper(SafeScriptImpl);

      function SafeScriptImpl() {
        _classCallCheck(this, SafeScriptImpl);

        return _super7.apply(this, arguments);
      }

      _createClass2(SafeScriptImpl, [{
        key: "getTypeName",
        value: function getTypeName() {
          return "Script"
          /* Script */
          ;
        }
      }]);

      return SafeScriptImpl;
    }(SafeValueImpl);

    var SafeUrlImpl = /*#__PURE__*/function (_SafeValueImpl4) {
      _inherits(SafeUrlImpl, _SafeValueImpl4);

      var _super8 = _createSuper(SafeUrlImpl);

      function SafeUrlImpl() {
        _classCallCheck(this, SafeUrlImpl);

        return _super8.apply(this, arguments);
      }

      _createClass2(SafeUrlImpl, [{
        key: "getTypeName",
        value: function getTypeName() {
          return "URL"
          /* Url */
          ;
        }
      }]);

      return SafeUrlImpl;
    }(SafeValueImpl);

    var SafeResourceUrlImpl = /*#__PURE__*/function (_SafeValueImpl5) {
      _inherits(SafeResourceUrlImpl, _SafeValueImpl5);

      var _super9 = _createSuper(SafeResourceUrlImpl);

      function SafeResourceUrlImpl() {
        _classCallCheck(this, SafeResourceUrlImpl);

        return _super9.apply(this, arguments);
      }

      _createClass2(SafeResourceUrlImpl, [{
        key: "getTypeName",
        value: function getTypeName() {
          return "ResourceURL"
          /* ResourceUrl */
          ;
        }
      }]);

      return SafeResourceUrlImpl;
    }(SafeValueImpl);

    function unwrapSafeValue(value) {
      return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity : value;
    }

    function allowSanitizationBypassAndThrow(value, type) {
      var actualType = getSanitizationBypassType(value);

      if (actualType != null && actualType !== type) {
        // Allow ResourceURLs in URL contexts, they are strictly more trusted.
        if (actualType === "ResourceURL"
        /* ResourceUrl */
        && type === "URL"
        /* Url */
        ) return true;
        throw new Error("Required a safe ".concat(type, ", got a ").concat(actualType, " (see http://g.co/ng/security#xss)"));
      }

      return actualType === type;
    }

    function getSanitizationBypassType(value) {
      return value instanceof SafeValueImpl && value.getTypeName() || null;
    }
    /**
     * Mark `html` string as trusted.
     *
     * This function wraps the trusted string in `String` and brands it in a way which makes it
     * recognizable to {@link htmlSanitizer} to be trusted implicitly.
     *
     * @param trustedHtml `html` string which needs to be implicitly trusted.
     * @returns a `html` which has been branded to be implicitly trusted.
     */


    function bypassSanitizationTrustHtml(trustedHtml) {
      return new SafeHtmlImpl(trustedHtml);
    }
    /**
     * Mark `style` string as trusted.
     *
     * This function wraps the trusted string in `String` and brands it in a way which makes it
     * recognizable to {@link styleSanitizer} to be trusted implicitly.
     *
     * @param trustedStyle `style` string which needs to be implicitly trusted.
     * @returns a `style` hich has been branded to be implicitly trusted.
     */


    function bypassSanitizationTrustStyle(trustedStyle) {
      return new SafeStyleImpl(trustedStyle);
    }
    /**
     * Mark `script` string as trusted.
     *
     * This function wraps the trusted string in `String` and brands it in a way which makes it
     * recognizable to {@link scriptSanitizer} to be trusted implicitly.
     *
     * @param trustedScript `script` string which needs to be implicitly trusted.
     * @returns a `script` which has been branded to be implicitly trusted.
     */


    function bypassSanitizationTrustScript(trustedScript) {
      return new SafeScriptImpl(trustedScript);
    }
    /**
     * Mark `url` string as trusted.
     *
     * This function wraps the trusted string in `String` and brands it in a way which makes it
     * recognizable to {@link urlSanitizer} to be trusted implicitly.
     *
     * @param trustedUrl `url` string which needs to be implicitly trusted.
     * @returns a `url`  which has been branded to be implicitly trusted.
     */


    function bypassSanitizationTrustUrl(trustedUrl) {
      return new SafeUrlImpl(trustedUrl);
    }
    /**
     * Mark `url` string as trusted.
     *
     * This function wraps the trusted string in `String` and brands it in a way which makes it
     * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.
     *
     * @param trustedResourceUrl `url` string which needs to be implicitly trusted.
     * @returns a `url` which has been branded to be implicitly trusted.
     */


    function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {
      return new SafeResourceUrlImpl(trustedResourceUrl);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.
     *
     * For more information on how to run and debug tests with either Ivy or View Engine (legacy),
     * please see [BAZEL.md](./docs/BAZEL.md).
     */


    var _devMode = true;
    var _runModeLocked = false;
    /**
     * Returns whether Angular is in development mode. After called once,
     * the value is locked and won't change any more.
     *
     * By default, this is true, unless a user calls `enableProdMode` before calling this.
     *
     * @publicApi
     */

    function isDevMode() {
      _runModeLocked = true;
      return _devMode;
    }
    /**
     * Disable Angular's development mode, which turns off assertions and other
     * checks within the framework.
     *
     * One important assertion this disables verifies that a change detection pass
     * does not result in additional changes to any bindings (also known as
     * unidirectional data flow).
     *
     * @publicApi
     */


    function enableProdMode() {
      if (_runModeLocked) {
        throw new Error('Cannot enable prod mode after platform setup.');
      }

      _devMode = false;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML
     * that needs sanitizing.
     * Depending upon browser support we use one of two strategies for doing this.
     * Default: DOMParser strategy
     * Fallback: InertDocument strategy
     */


    function getInertBodyHelper(defaultDoc) {
      return isDOMParserAvailable() ? new DOMParserHelper() : new InertDocumentHelper(defaultDoc);
    }
    /**
     * Uses DOMParser to create and fill an inert body element.
     * This is the default strategy used in browsers that support it.
     */


    var DOMParserHelper = /*#__PURE__*/function () {
      function DOMParserHelper() {
        _classCallCheck(this, DOMParserHelper);
      }

      _createClass2(DOMParserHelper, [{
        key: "getInertBodyElement",
        value: function getInertBodyElement(html) {
          // We add these extra elements to ensure that the rest of the content is parsed as expected
          // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the
          // `<head>` tag.
          html = '<body><remove></remove>' + html + '</body>';

          try {
            var body = new window.DOMParser().parseFromString(html, 'text/html').body;
            body.removeChild(body.firstChild);
            return body;
          } catch (_a) {
            return null;
          }
        }
      }]);

      return DOMParserHelper;
    }();
    /**
     * Use an HTML5 `template` element, if supported, or an inert body element created via
     * `createHtmlDocument` to create and fill an inert DOM element.
     * This is the fallback strategy if the browser does not support DOMParser.
     */


    var InertDocumentHelper = /*#__PURE__*/function () {
      function InertDocumentHelper(defaultDoc) {
        _classCallCheck(this, InertDocumentHelper);

        this.defaultDoc = defaultDoc;
        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');

        if (this.inertDocument.body == null) {
          // usually there should be only one body element in the document, but IE doesn't have any, so
          // we need to create one.
          var inertHtml = this.inertDocument.createElement('html');
          this.inertDocument.appendChild(inertHtml);
          var inertBodyElement = this.inertDocument.createElement('body');
          inertHtml.appendChild(inertBodyElement);
        }
      }

      _createClass2(InertDocumentHelper, [{
        key: "getInertBodyElement",
        value: function getInertBodyElement(html) {
          // Prefer using <template> element if supported.
          var templateEl = this.inertDocument.createElement('template');

          if ('content' in templateEl) {
            templateEl.innerHTML = html;
            return templateEl;
          } // Note that previously we used to do something like `this.inertDocument.body.innerHTML = html`
          // and we returned the inert `body` node. This was changed, because IE seems to treat setting
          // `innerHTML` on an inserted element differently, compared to one that hasn't been inserted
          // yet. In particular, IE appears to split some of the text into multiple text nodes rather
          // than keeping them in a single one which ends up messing with Ivy's i18n parsing further
          // down the line. This has been worked around by creating a new inert `body` and using it as
          // the root node in which we insert the HTML.


          var inertBody = this.inertDocument.createElement('body');
          inertBody.innerHTML = html; // Support: IE 9-11 only
          // strip custom-namespaced attributes on IE<=11

          if (this.defaultDoc.documentMode) {
            this.stripCustomNsAttrs(inertBody);
          }

          return inertBody;
        }
        /**
         * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
         * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.
         * 'ns1:xlink:foo').
         *
         * This is undesirable since we don't want to allow any of these custom attributes. This method
         * strips them all.
         */

      }, {
        key: "stripCustomNsAttrs",
        value: function stripCustomNsAttrs(el) {
          var elAttrs = el.attributes; // loop backwards so that we can support removals.

          for (var i = elAttrs.length - 1; 0 < i; i--) {
            var attrib = elAttrs.item(i);
            var attrName = attrib.name;

            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
              el.removeAttribute(attrName);
            }
          }

          var childNode = el.firstChild;

          while (childNode) {
            if (childNode.nodeType === Node.ELEMENT_NODE) this.stripCustomNsAttrs(childNode);
            childNode = childNode.nextSibling;
          }
        }
      }]);

      return InertDocumentHelper;
    }();
    /**
     * We need to determine whether the DOMParser exists in the global context and
     * supports parsing HTML; HTML parsing support is not as wide as other formats, see
     * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.
     *
     * @suppress {uselessCode}
     */


    function isDOMParserAvailable() {
      try {
        return !!new window.DOMParser().parseFromString('', 'text/html');
      } catch (_a) {
        return false;
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * A pattern that recognizes a commonly useful subset of URLs that are safe.
     *
     * This regular expression matches a subset of URLs that will not cause script
     * execution if used in URL context within a HTML document. Specifically, this
     * regular expression matches if (comment from here on and regex copied from
     * Soy's EscapingConventions):
     * (1) Either an allowed protocol (http, https, mailto or ftp).
     * (2) or no protocol.  A protocol must be followed by a colon. The below
     *     allows that by allowing colons only after one of the characters [/?#].
     *     A colon after a hash (#) must be in the fragment.
     *     Otherwise, a colon after a (?) must be in a query.
     *     Otherwise, a colon after a single solidus (/) must be in a path.
     *     Otherwise, a colon after a double solidus (//) must be in the authority
     *     (before port).
     *
     * The pattern disallows &, used in HTML entity declarations before
     * one of the characters in [/?#]. This disallows HTML entities used in the
     * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
     * It also disallows HTML entities in the first path part of a relative path,
     * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
     * that. More importantly, it disallows masking of a colon,
     * e.g. "javascript&#58;...".
     *
     * This regular expression was taken from the Closure sanitization library.
     */


    var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
    /* A pattern that matches safe srcset values */

    var SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;
    /** A pattern that matches safe data URLs. Only matches image, video and audio types. */

    var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;

    function _sanitizeUrl(url) {
      url = String(url);
      if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;

      if (isDevMode()) {
        console.warn("WARNING: sanitizing unsafe URL value ".concat(url, " (see http://g.co/ng/security#xss)"));
      }

      return 'unsafe:' + url;
    }

    function sanitizeSrcset(srcset) {
      srcset = String(srcset);
      return srcset.split(',').map(function (srcset) {
        return _sanitizeUrl(srcset.trim());
      }).join(', ');
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function tagSet(tags) {
      var res = {};

      var _iterator3 = _createForOfIteratorHelper(tags.split(',')),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var t = _step3.value;
          res[t] = true;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return res;
    }

    function merge() {
      var res = {};

      for (var _len5 = arguments.length, sets = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        sets[_key5] = arguments[_key5];
      }

      for (var _i4 = 0, _sets = sets; _i4 < _sets.length; _i4++) {
        var s = _sets[_i4];

        for (var v in s) {
          if (s.hasOwnProperty(v)) res[v] = true;
        }
      }

      return res;
    } // Good source of info about elements and attributes
    // http://dev.w3.org/html5/spec/Overview.html#semantics
    // http://simon.html5.org/html-elements
    // Safe Void Elements - HTML5
    // http://dev.w3.org/html5/spec/Overview.html#void-elements


    var VOID_ELEMENTS = /*@__PURE__*/tagSet('area,br,col,hr,img,wbr'); // Elements that you can, intentionally, leave open (and which close themselves)
    // http://dev.w3.org/html5/spec/Overview.html#optional-tags

    var OPTIONAL_END_TAG_BLOCK_ELEMENTS = /*@__PURE__*/tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
    var OPTIONAL_END_TAG_INLINE_ELEMENTS = /*@__PURE__*/tagSet('rp,rt');
    var OPTIONAL_END_TAG_ELEMENTS = /*@__PURE__*/merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS); // Safe Block Elements - HTML5

    var BLOCK_ELEMENTS = /*@__PURE__*/merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, /*@__PURE__*/tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul')); // Inline Elements - HTML5

    var INLINE_ELEMENTS = /*@__PURE__*/merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, /*@__PURE__*/tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
    var VALID_ELEMENTS = /*@__PURE__*/merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS); // Attributes that have href and hence need to be sanitized

    var URI_ATTRS = /*@__PURE__*/tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href'); // Attributes that have special href set hence need to be sanitized

    var SRCSET_ATTRS = /*@__PURE__*/tagSet('srcset');
    var HTML_ATTRS = /*@__PURE__*/tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width'); // Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)

    var ARIA_ATTRS = /*@__PURE__*/tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' + 'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' + 'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' + 'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' + 'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' + 'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' + 'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext'); // NB: This currently consciously doesn't support SVG. SVG sanitization has had several security
    // issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
    // innerHTML is required, SVG attributes should be added here.
    // NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
    // can be sanitized, but they increase security surface area without a legitimate use case, so they
    // are left out here.

    var VALID_ATTRS = /*@__PURE__*/merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS, ARIA_ATTRS); // Elements whose content should not be traversed/preserved, if the elements themselves are invalid.
    //
    // Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)
    // `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we
    // don't want to preserve the content, if the elements themselves are going to be removed.

    var SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = /*@__PURE__*/tagSet('script,style,template');
    /**
     * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
     * attributes.
     */

    var SanitizingHtmlSerializer = /*#__PURE__*/function () {
      function SanitizingHtmlSerializer() {
        _classCallCheck(this, SanitizingHtmlSerializer);

        // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just
        // because characters were re-encoded.
        this.sanitizedSomething = false;
        this.buf = [];
      }

      _createClass2(SanitizingHtmlSerializer, [{
        key: "sanitizeChildren",
        value: function sanitizeChildren(el) {
          // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
          // However this code never accesses properties off of `document` before deleting its contents
          // again, so it shouldn't be vulnerable to DOM clobbering.
          var current = el.firstChild;
          var traverseContent = true;

          while (current) {
            if (current.nodeType === Node.ELEMENT_NODE) {
              traverseContent = this.startElement(current);
            } else if (current.nodeType === Node.TEXT_NODE) {
              this.chars(current.nodeValue);
            } else {
              // Strip non-element, non-text nodes.
              this.sanitizedSomething = true;
            }

            if (traverseContent && current.firstChild) {
              current = current.firstChild;
              continue;
            }

            while (current) {
              // Leaving the element. Walk up and to the right, closing tags as we go.
              if (current.nodeType === Node.ELEMENT_NODE) {
                this.endElement(current);
              }

              var next = this.checkClobberedElement(current, current.nextSibling);

              if (next) {
                current = next;
                break;
              }

              current = this.checkClobberedElement(current, current.parentNode);
            }
          }

          return this.buf.join('');
        }
        /**
         * Sanitizes an opening element tag (if valid) and returns whether the element's contents should
         * be traversed. Element content must always be traversed (even if the element itself is not
         * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.
         *
         * @param element The element to sanitize.
         * @return True if the element's contents should be traversed.
         */

      }, {
        key: "startElement",
        value: function startElement(element) {
          var tagName = element.nodeName.toLowerCase();

          if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
            this.sanitizedSomething = true;
            return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);
          }

          this.buf.push('<');
          this.buf.push(tagName);
          var elAttrs = element.attributes;

          for (var i = 0; i < elAttrs.length; i++) {
            var elAttr = elAttrs.item(i);
            var attrName = elAttr.name;
            var lower = attrName.toLowerCase();

            if (!VALID_ATTRS.hasOwnProperty(lower)) {
              this.sanitizedSomething = true;
              continue;
            }

            var value = elAttr.value; // TODO(martinprobst): Special case image URIs for data:image/...

            if (URI_ATTRS[lower]) value = _sanitizeUrl(value);
            if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);
            this.buf.push(' ', attrName, '="', encodeEntities(value), '"');
          }

          this.buf.push('>');
          return true;
        }
      }, {
        key: "endElement",
        value: function endElement(current) {
          var tagName = current.nodeName.toLowerCase();

          if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
            this.buf.push('</');
            this.buf.push(tagName);
            this.buf.push('>');
          }
        }
      }, {
        key: "chars",
        value: function chars(_chars) {
          this.buf.push(encodeEntities(_chars));
        }
      }, {
        key: "checkClobberedElement",
        value: function checkClobberedElement(node, nextNode) {
          if (nextNode && (node.compareDocumentPosition(nextNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {
            throw new Error("Failed to sanitize html because the element is clobbered: ".concat(node.outerHTML));
          }

          return nextNode;
        }
      }]);

      return SanitizingHtmlSerializer;
    }(); // Regular Expressions for parsing tags and attributes


    var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g; // ! to ~ is the ASCII range.

    var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
    /**
     * Escapes all potentially dangerous characters, so that the
     * resulting string can be safely inserted into attribute or
     * element text.
     * @param value
     */

    function encodeEntities(value) {
      return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (match) {
        var hi = match.charCodeAt(0);
        var low = match.charCodeAt(1);
        return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';
      }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {
        return '&#' + match.charCodeAt(0) + ';';
      }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }

    var inertBodyHelper;
    /**
     * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
     * the DOM in a browser environment.
     */

    function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {
      var inertBodyElement = null;

      try {
        inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc); // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).

        var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml); // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.

        var mXSSAttempts = 5;
        var parsedHtml = unsafeHtml;

        do {
          if (mXSSAttempts === 0) {
            throw new Error('Failed to sanitize html because the input is unstable');
          }

          mXSSAttempts--;
          unsafeHtml = parsedHtml;
          parsedHtml = inertBodyElement.innerHTML;
          inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
        } while (unsafeHtml !== parsedHtml);

        var sanitizer = new SanitizingHtmlSerializer();
        var safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);

        if (isDevMode() && sanitizer.sanitizedSomething) {
          console.warn('WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss');
        }

        return safeHtml;
      } finally {
        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
        if (inertBodyElement) {
          var parent = getTemplateContent(inertBodyElement) || inertBodyElement;

          while (parent.firstChild) {
            parent.removeChild(parent.firstChild);
          }
        }
      }
    }

    function getTemplateContent(el) {
      return 'content' in el
      /** Microsoft/TypeScript#21517 */
      && isTemplateElement(el) ? el.content : null;
    }

    function isTemplateElement(el) {
      return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property
     * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly
     * handled.
     *
     * See DomSanitizer for more details on security in Angular applications.
     *
     * @publicApi
     */


    var SecurityContext = /*@__PURE__*/function (SecurityContext) {
      SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
      SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
      SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
      SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
      SecurityContext[SecurityContext["URL"] = 4] = "URL";
      SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
      return SecurityContext;
    }({});
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing
     * dangerous content.
     *
     * This method parses the `html` and locates potentially dangerous content (such as urls and
     * javascript) and removes it.
     *
     * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.
     *
     * @param unsafeHtml untrusted `html`, typically from the user.
     * @returns `html` string which is safe to display to user, because all of the dangerous javascript
     * and urls have been removed.
     *
     * @codeGenApi
     */


    function ɵɵsanitizeHtml(unsafeHtml) {
      var sanitizer = getSanitizer();

      if (sanitizer) {
        return sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '';
      }

      if (allowSanitizationBypassAndThrow(unsafeHtml, "HTML"
      /* Html */
      )) {
        return unwrapSafeValue(unsafeHtml);
      }

      return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));
    }
    /**
     * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing
     * dangerous content.
     *
     * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.
     *
     * @param unsafeStyle untrusted `style`, typically from the user.
     * @returns `style` string which is safe to bind to the `style` properties.
     *
     * @codeGenApi
     */


    function ɵɵsanitizeStyle(unsafeStyle) {
      var sanitizer = getSanitizer();

      if (sanitizer) {
        return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';
      }

      if (allowSanitizationBypassAndThrow(unsafeStyle, "Style"
      /* Style */
      )) {
        return unwrapSafeValue(unsafeStyle);
      }

      return renderStringify(unsafeStyle);
    }
    /**
     * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing
     * dangerous
     * content.
     *
     * This method parses the `url` and locates potentially dangerous content (such as javascript) and
     * removes it.
     *
     * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.
     *
     * @param unsafeUrl untrusted `url`, typically from the user.
     * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because
     * all of the dangerous javascript has been removed.
     *
     * @codeGenApi
     */


    function ɵɵsanitizeUrl(unsafeUrl) {
      var sanitizer = getSanitizer();

      if (sanitizer) {
        return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';
      }

      if (allowSanitizationBypassAndThrow(unsafeUrl, "URL"
      /* Url */
      )) {
        return unwrapSafeValue(unsafeUrl);
      }

      return _sanitizeUrl(renderStringify(unsafeUrl));
    }
    /**
     * A `url` sanitizer which only lets trusted `url`s through.
     *
     * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.
     *
     * @param unsafeResourceUrl untrusted `url`, typically from the user.
     * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because
     * only trusted `url`s have been allowed to pass.
     *
     * @codeGenApi
     */


    function ɵɵsanitizeResourceUrl(unsafeResourceUrl) {
      var sanitizer = getSanitizer();

      if (sanitizer) {
        return sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';
      }

      if (allowSanitizationBypassAndThrow(unsafeResourceUrl, "ResourceURL"
      /* ResourceUrl */
      )) {
        return unwrapSafeValue(unsafeResourceUrl);
      }

      throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
    }
    /**
     * A `script` sanitizer which only lets trusted javascript through.
     *
     * This passes only `script`s marked trusted by calling {@link
     * bypassSanitizationTrustScript}.
     *
     * @param unsafeScript untrusted `script`, typically from the user.
     * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,
     * because only trusted `scripts` have been allowed to pass.
     *
     * @codeGenApi
     */


    function ɵɵsanitizeScript(unsafeScript) {
      var sanitizer = getSanitizer();

      if (sanitizer) {
        return sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '';
      }

      if (allowSanitizationBypassAndThrow(unsafeScript, "Script"
      /* Script */
      )) {
        return unwrapSafeValue(unsafeScript);
      }

      throw new Error('unsafe value used in a script context');
    }
    /**
     * Detects which sanitizer to use for URL property, based on tag name and prop name.
     *
     * The rules are based on the RESOURCE_URL context config from
     * `packages/compiler/src/schema/dom_security_schema.ts`.
     * If tag and prop names don't match Resource URL schema, use URL sanitizer.
     */


    function getUrlSanitizer(tag, prop) {
      if (prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' || tag === 'script') || prop === 'href' && (tag === 'base' || tag === 'link')) {
        return ɵɵsanitizeResourceUrl;
      }

      return ɵɵsanitizeUrl;
    }
    /**
     * Sanitizes URL, selecting sanitizer function based on tag and property names.
     *
     * This function is used in case we can't define security context at compile time, when only prop
     * name is available. This happens when we generate host bindings for Directives/Components. The
     * host element is unknown at compile time, so we defer calculation of specific sanitizer to
     * runtime.
     *
     * @param unsafeUrl untrusted `url`, typically from the user.
     * @param tag target element tag name.
     * @param prop name of the property that contains the value.
     * @returns `url` string which is safe to bind.
     *
     * @codeGenApi
     */


    function ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {
      return getUrlSanitizer(tag, prop)(unsafeUrl);
    }

    function validateAgainstEventProperties(name) {
      if (name.toLowerCase().startsWith('on')) {
        var msg = "Binding to event property '".concat(name, "' is disallowed for security reasons, ") + "please use (".concat(name.slice(2), ")=...") + "\nIf '".concat(name, "' is a directive input, make sure the directive is imported by the") + " current module.";
        throw new Error(msg);
      }
    }

    function validateAgainstEventAttributes(name) {
      if (name.toLowerCase().startsWith('on')) {
        var msg = "Binding to event attribute '".concat(name, "' is disallowed for security reasons, ") + "please use (".concat(name.slice(2), ")=...");
        throw new Error(msg);
      }
    }

    function getSanitizer() {
      var lView = getLView();
      return lView && lView[SANITIZER];
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * THIS FILE CONTAINS CODE WHICH SHOULD BE TREE SHAKEN AND NEVER CALLED FROM PRODUCTION CODE!!!
     */

    /**
     * Creates an `Array` construction with a given name. This is useful when
     * looking for memory consumption to see what time of array it is.
     *
     *
     * @param name Name to give to the constructor
     * @returns A subclass of `Array` if possible. This can only be done in
     *          environments which support `class` construct.
     */


    function createNamedArrayType(name) {
      // This should never be called in prod mode, so let's verify that is the case.
      if (ngDevMode) {
        try {
          // We need to do it this way so that TypeScript does not down-level the below code.
          var FunctionConstructor = createNamedArrayType.constructor;
          return new FunctionConstructor('Array', "return class ".concat(name, " extends Array{}"))(Array);
        } catch (e) {
          // If it does not work just give up and fall back to regular Array.
          return Array;
        }
      } else {
        throw new Error('Looks like we are in \'prod mode\', but we are creating a named Array type, which is wrong! Check your code');
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function normalizeDebugBindingName(name) {
      // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
      name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
      return "ng-reflect-".concat(name);
    }

    var CAMEL_CASE_REGEXP = /([A-Z])/g;

    function camelCaseToDashCase(input) {
      return input.replace(CAMEL_CASE_REGEXP, function () {
        for (var _len6 = arguments.length, m = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          m[_key6] = arguments[_key6];
        }

        return '-' + m[1].toLowerCase();
      });
    }

    function normalizeDebugBindingValue(value) {
      try {
        // Limit the size of the value as otherwise the DOM just gets polluted.
        return value != null ? value.toString().slice(0, 30) : value;
      } catch (e) {
        return '[ERROR] Exception while trying to serialize the value';
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Returns the matching `LContext` data for a given DOM node, directive or component instance.
     *
     * This function will examine the provided DOM element, component, or directive instance\'s
     * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched
     * value will be that of the newly created `LContext`.
     *
     * If the monkey-patched value is the `LView` instance then the context value for that
     * target will be created and the monkey-patch reference will be updated. Therefore when this
     * function is called it may mutate the provided element\'s, component\'s or any of the associated
     * directive\'s monkey-patch values.
     *
     * If the monkey-patch value is not detected then the code will walk up the DOM until an element
     * is found which contains a monkey-patch reference. When that occurs then the provided element
     * will be updated with a new context (which is then returned). If the monkey-patch value is not
     * detected for a component/directive instance then it will throw an error (all components and
     * directives should be automatically monkey-patched by ivy).
     *
     * @param target Component, Directive or DOM Node.
     */


    function getLContext(target) {
      var mpValue = readPatchedData(target);

      if (mpValue) {
        // only when it's an array is it considered an LView instance
        // ... otherwise it's an already constructed LContext instance
        if (Array.isArray(mpValue)) {
          var lView = mpValue;
          var nodeIndex;
          var component = undefined;
          var directives = undefined;

          if (isComponentInstance(target)) {
            nodeIndex = findViaComponent(lView, target);

            if (nodeIndex == -1) {
              throw new Error('The provided component was not found in the application');
            }

            component = target;
          } else if (isDirectiveInstance(target)) {
            nodeIndex = findViaDirective(lView, target);

            if (nodeIndex == -1) {
              throw new Error('The provided directive was not found in the application');
            }

            directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);
          } else {
            nodeIndex = findViaNativeElement(lView, target);

            if (nodeIndex == -1) {
              return null;
            }
          } // the goal is not to fill the entire context full of data because the lookups
          // are expensive. Instead, only the target data (the element, component, container, ICU
          // expression or directive details) are filled into the context. If called multiple times
          // with different target values then the missing target data will be filled in.


          var _native2 = unwrapRNode(lView[nodeIndex]);

          var existingCtx = readPatchedData(_native2);
          var context = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, _native2); // only when the component has been discovered then update the monkey-patch

          if (component && context.component === undefined) {
            context.component = component;
            attachPatchData(context.component, context);
          } // only when the directives have been discovered then update the monkey-patch


          if (directives && context.directives === undefined) {
            context.directives = directives;

            for (var i = 0; i < directives.length; i++) {
              attachPatchData(directives[i], context);
            }
          }

          attachPatchData(context["native"], context);
          mpValue = context;
        }
      } else {
        var rElement = target;
        ngDevMode && assertDomNode(rElement); // if the context is not found then we need to traverse upwards up the DOM
        // to find the nearest element that has already been monkey patched with data

        var parent = rElement;

        while (parent = parent.parentNode) {
          var parentContext = readPatchedData(parent);

          if (parentContext) {
            var _lView2 = void 0;

            if (Array.isArray(parentContext)) {
              _lView2 = parentContext;
            } else {
              _lView2 = parentContext.lView;
            } // the edge of the app was also reached here through another means
            // (maybe because the DOM was changed manually).


            if (!_lView2) {
              return null;
            }

            var index = findViaNativeElement(_lView2, rElement);

            if (index >= 0) {
              var _native3 = unwrapRNode(_lView2[index]);

              var _context = createLContext(_lView2, index, _native3);

              attachPatchData(_native3, _context);
              mpValue = _context;
              break;
            }
          }
        }
      }

      return mpValue || null;
    }
    /**
     * Creates an empty instance of a `LContext` context
     */


    function createLContext(lView, nodeIndex, _native4) {
      return {
        lView: lView,
        nodeIndex: nodeIndex,
        "native": _native4,
        component: undefined,
        directives: undefined,
        localRefs: undefined
      };
    }
    /**
     * Takes a component instance and returns the view for that component.
     *
     * @param componentInstance
     * @returns The component's view
     */


    function getComponentViewByInstance(componentInstance) {
      var lView = readPatchedData(componentInstance);
      var view;

      if (Array.isArray(lView)) {
        var nodeIndex = findViaComponent(lView, componentInstance);
        view = getComponentLViewByIndex(nodeIndex, lView);
        var context = createLContext(lView, nodeIndex, view[HOST]);
        context.component = componentInstance;
        attachPatchData(componentInstance, context);
        attachPatchData(context["native"], context);
      } else {
        var _context2 = lView;
        view = getComponentLViewByIndex(_context2.nodeIndex, _context2.lView);
      }

      return view;
    }
    /**
     * Assigns the given data to the given target (which could be a component,
     * directive or DOM node instance) using monkey-patching.
     */


    function attachPatchData(target, data) {
      target[MONKEY_PATCH_KEY_NAME] = data;
    }

    function isComponentInstance(instance) {
      return instance && instance.constructor && instance.constructor.ɵcmp;
    }

    function isDirectiveInstance(instance) {
      return instance && instance.constructor && instance.constructor.ɵdir;
    }
    /**
     * Locates the element within the given LView and returns the matching index
     */


    function findViaNativeElement(lView, target) {
      var tNode = lView[TVIEW].firstChild;

      while (tNode) {
        var _native5 = getNativeByTNodeOrNull(tNode, lView);

        if (_native5 === target) {
          return tNode.index;
        }

        tNode = traverseNextElement(tNode);
      }

      return -1;
    }
    /**
     * Locates the next tNode (child, sibling or parent).
     */


    function traverseNextElement(tNode) {
      if (tNode.child) {
        return tNode.child;
      } else if (tNode.next) {
        return tNode.next;
      } else {
        // Let's take the following template: <div><span>text</span></div><component/>
        // After checking the text node, we need to find the next parent that has a "next" TNode,
        // in this case the parent `div`, so that we can find the component.
        while (tNode.parent && !tNode.parent.next) {
          tNode = tNode.parent;
        }

        return tNode.parent && tNode.parent.next;
      }
    }
    /**
     * Locates the component within the given LView and returns the matching index
     */


    function findViaComponent(lView, componentInstance) {
      var componentIndices = lView[TVIEW].components;

      if (componentIndices) {
        for (var i = 0; i < componentIndices.length; i++) {
          var elementComponentIndex = componentIndices[i];
          var componentView = getComponentLViewByIndex(elementComponentIndex, lView);

          if (componentView[CONTEXT] === componentInstance) {
            return elementComponentIndex;
          }
        }
      } else {
        var rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);
        var rootComponent = rootComponentView[CONTEXT];

        if (rootComponent === componentInstance) {
          // we are dealing with the root element here therefore we know that the
          // element is the very first element after the HEADER data in the lView
          return HEADER_OFFSET;
        }
      }

      return -1;
    }
    /**
     * Locates the directive within the given LView and returns the matching index
     */


    function findViaDirective(lView, directiveInstance) {
      // if a directive is monkey patched then it will (by default)
      // have a reference to the LView of the current view. The
      // element bound to the directive being search lives somewhere
      // in the view data. We loop through the nodes and check their
      // list of directives for the instance.
      var tNode = lView[TVIEW].firstChild;

      while (tNode) {
        var directiveIndexStart = tNode.directiveStart;
        var directiveIndexEnd = tNode.directiveEnd;

        for (var i = directiveIndexStart; i < directiveIndexEnd; i++) {
          if (lView[i] === directiveInstance) {
            return tNode.index;
          }
        }

        tNode = traverseNextElement(tNode);
      }

      return -1;
    }
    /**
     * Returns a list of directives extracted from the given view based on the
     * provided list of directive index values.
     *
     * @param nodeIndex The node index
     * @param lView The target view data
     * @param includeComponents Whether or not to include components in returned directives
     */


    function getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {
      var tNode = lView[TVIEW].data[nodeIndex];
      var directiveStartIndex = tNode.directiveStart;
      if (directiveStartIndex == 0) return EMPTY_ARRAY;
      var directiveEndIndex = tNode.directiveEnd;
      if (!includeComponents && tNode.flags & 2
      /* isComponentHost */
      ) directiveStartIndex++;
      return lView.slice(directiveStartIndex, directiveEndIndex);
    }

    function getComponentAtNodeIndex(nodeIndex, lView) {
      var tNode = lView[TVIEW].data[nodeIndex];
      var directiveStartIndex = tNode.directiveStart;
      return tNode.flags & 2
      /* isComponentHost */
      ? lView[directiveStartIndex] : null;
    }
    /**
     * Returns a map of local references (local reference name => element or directive instance) that
     * exist on a given element.
     */


    function discoverLocalRefs(lView, nodeIndex) {
      var tNode = lView[TVIEW].data[nodeIndex];

      if (tNode && tNode.localNames) {
        var result = {};
        var localIndex = tNode.index + 1;

        for (var i = 0; i < tNode.localNames.length; i += 2) {
          result[tNode.localNames[i]] = lView[localIndex];
          localIndex++;
        }

        return result;
      }

      return null;
    }
    /** Called when directives inject each other (creating a circular dependency) */


    function throwCyclicDependencyError(token) {
      throw new Error("Cannot instantiate cyclic dependency! ".concat(token));
    }
    /** Called when there are multiple component selectors that match a given node */


    function throwMultipleComponentError(tNode) {
      throw new Error("Multiple components match node with tagname ".concat(tNode.tagName));
    }

    function throwMixedMultiProviderError() {
      throw new Error("Cannot mix multi providers and regular providers");
    }

    function throwInvalidProviderError(ngModuleType, providers, provider) {
      var ngModuleDetail = '';

      if (ngModuleType && providers) {
        var providerDetail = providers.map(function (v) {
          return v == provider ? '?' + provider + '?' : '...';
        });
        ngModuleDetail = " - only instances of Provider and Type are allowed, got: [".concat(providerDetail.join(', '), "]");
      }

      throw new Error("Invalid provider for the NgModule '".concat(stringify(ngModuleType), "'") + ngModuleDetail);
    }
    /** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */


    function throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName) {
      var field = propName ? " for '".concat(propName, "'") : '';
      var msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value".concat(field, ": '").concat(oldValue, "'. Current value: '").concat(currValue, "'.");

      if (creationMode) {
        msg += " It seems like the view has been created after its parent and its children have been dirty checked." + " Has it been created in a change detection hook?";
      } // TODO: include debug context, see `viewDebugError` function in
      // `packages/core/src/view/errors.ts` for reference.


      throw new Error(msg);
    }

    function constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {
      var _meta$split = meta.split(INTERPOLATION_DELIMITER),
          _meta$split2 = _toArray(_meta$split),
          propName = _meta$split2[0],
          prefix = _meta$split2[1],
          chunks = _meta$split2.slice(2);

      var oldValue = prefix,
          newValue = prefix;

      for (var i = 0; i < chunks.length; i++) {
        var slotIdx = rootIndex + i;
        oldValue += "".concat(lView[slotIdx]).concat(chunks[i]);
        newValue += "".concat(slotIdx === expressionIndex ? changedValue : lView[slotIdx]).concat(chunks[i]);
      }

      return {
        propName: propName,
        oldValue: oldValue,
        newValue: newValue
      };
    }
    /**
     * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:
     * - property name (for property bindings or interpolations)
     * - old and new values, enriched using information from metadata
     *
     * More information on the metadata storage format can be found in `storePropertyBindingMetadata`
     * function description.
     */


    function getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {
      var tData = lView[TVIEW].data;
      var metadata = tData[bindingIndex];

      if (typeof metadata === 'string') {
        // metadata for property interpolation
        if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {
          return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);
        } // metadata for property binding


        return {
          propName: metadata,
          oldValue: oldValue,
          newValue: newValue
        };
      } // metadata is not available for this expression, check if this expression is a part of the
      // property interpolation by going from the current binding index left and look for a string that
      // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:
      // [..., 'id�Prefix � and � suffix', null, null, null, ...]


      if (metadata === null) {
        var idx = bindingIndex - 1;

        while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {
          idx--;
        }

        var meta = tData[idx];

        if (typeof meta === 'string') {
          var matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g')); // first interpolation delimiter separates property name from interpolation parts (in case of
          // property interpolations), so we subtract one from total number of found delimiters

          if (matches && matches.length - 1 > bindingIndex - idx) {
            return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);
          }
        }
      }

      return {
        propName: undefined,
        oldValue: oldValue,
        newValue: newValue
      };
    }
    /**
     * Converts `TNodeType` into human readable text.
     * Make sure this matches with `TNodeType`
     */


    var TNodeTypeAsString = ['Container', 'Projection', 'View', 'Element', 'ElementContainer', 'IcuContainer' // 5
    ]; // Note: This hack is necessary so we don't erroneously get a circular dependency
    // failure based on types.

    var unusedValueExportToPlacateAjd$4 = 1;
    /**
     * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.
     *
     * ```
     * <div my-dir [class]="exp"></div>
     * ```
     * and
     * ```
     * @Directive({
     * })
     * class MyDirective {
     *   @Input()
     *   class: string;
     * }
     * ```
     *
     * In the above case it is necessary to write the reconciled styling information into the
     * directive's input.
     *
     * @param tNode
     */

    function hasClassInput(tNode) {
      return (tNode.flags & 16
      /* hasClassInput */
      ) !== 0;
    }
    /**
     * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.
     *
     * ```
     * <div my-dir [style]="exp"></div>
     * ```
     * and
     * ```
     * @Directive({
     * })
     * class MyDirective {
     *   @Input()
     *   class: string;
     * }
     * ```
     *
     * In the above case it is necessary to write the reconciled styling information into the
     * directive's input.
     *
     * @param tNode
     */


    function hasStyleInput(tNode) {
      return (tNode.flags & 32
      /* hasStyleInput */
      ) !== 0;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // Note: This hack is necessary so we don't erroneously get a circular dependency
    // failure based on types.


    var unusedValueExportToPlacateAjd$5 = 1;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Returns an index of `classToSearch` in `className` taking token boundaries into account.
     *
     * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)
     *
     * @param className A string containing classes (whitespace separated)
     * @param classToSearch A class name to locate
     * @param startingIndex Starting location of search
     * @returns an index of the located class (or -1 if not found)
     */

    function classIndexOf(className, classToSearch, startingIndex) {
      ngDevMode && assertNotEqual(classToSearch, '', 'can not look for "" string.');
      var end = className.length;

      while (true) {
        var foundIndex = className.indexOf(classToSearch, startingIndex);
        if (foundIndex === -1) return foundIndex;

        if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32
        /* SPACE */
        ) {
            // Ensure that it has leading whitespace
            var length = classToSearch.length;

            if (foundIndex + length === end || className.charCodeAt(foundIndex + length) <= 32
            /* SPACE */
            ) {
                // Ensure that it has trailing whitespace
                return foundIndex;
              }
          } // False positive, keep searching from where we left off.


        startingIndex = foundIndex + 1;
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var unusedValueToPlacateAjd = unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$5;
    var NG_TEMPLATE_SELECTOR = 'ng-template';
    /**
     * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)
     *
     * @param attrs `TAttributes` to search through.
     * @param cssClassToMatch class to match (lowercase)
     * @param isProjectionMode Whether or not class matching should look into the attribute `class` in
     *    addition to the `AttributeMarker.Classes`.
     */

    function isCssClassMatching(attrs, cssClassToMatch, isProjectionMode) {
      // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.
      // It is strange to me that sometimes the class information comes in form of `class` attribute
      // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine
      // if that is the right behavior.
      ngDevMode && assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');
      var i = 0;

      while (i < attrs.length) {
        var item = attrs[i++];

        if (isProjectionMode && item === 'class') {
          item = attrs[i];

          if (classIndexOf(item.toLowerCase(), cssClassToMatch, 0) !== -1) {
            return true;
          }
        } else if (item === 1
        /* Classes */
        ) {
            // We found the classes section. Start searching for the class.
            while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {
              // while we have strings
              if (item.toLowerCase() === cssClassToMatch) return true;
            }

            return false;
          }
      }

      return false;
    }
    /**
     * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).
     *
     * @param tNode current TNode
     */


    function isInlineTemplate(tNode) {
      return tNode.type === 0
      /* Container */
      && tNode.tagName !== NG_TEMPLATE_SELECTOR;
    }
    /**
     * Function that checks whether a given tNode matches tag-based selector and has a valid type.
     *
     * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular
     * directive matching mode:
     * - in the "directive matching" mode we do _not_ take TContainer's tagName into account if it is
     * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a
     * tag name was extracted from * syntax so we would match the same directive twice);
     * - in the "projection" mode, we use a tag name potentially extracted from the * syntax processing
     * (applicable to TNodeType.Container only).
     */


    function hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {
      var tagNameToCompare = tNode.type === 0
      /* Container */
      && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.tagName;
      return currentSelector === tagNameToCompare;
    }
    /**
     * A utility function to match an Ivy node static data against a simple CSS selector
     *
     * @param node static data of the node to match
     * @param selector The selector to try matching against the node.
     * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing
     * directive matching.
     * @returns true if node matches the selector.
     */


    function isNodeMatchingSelector(tNode, selector, isProjectionMode) {
      ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');
      var mode = 4
      /* ELEMENT */
      ;
      var nodeAttrs = tNode.attrs || []; // Find the index of first attribute that has no value, only a name.

      var nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs); // When processing ":not" selectors, we skip to the next ":not" if the
      // current one doesn't match

      var skipToNextSelector = false;

      for (var i = 0; i < selector.length; i++) {
        var current = selector[i];

        if (typeof current === 'number') {
          // If we finish processing a :not selector and it hasn't failed, return false
          if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {
            return false;
          } // If we are skipping to the next :not() and this mode flag is positive,
          // it's a part of the current :not() selector, and we should keep skipping


          if (skipToNextSelector && isPositive(current)) continue;
          skipToNextSelector = false;
          mode = current | mode & 1
          /* NOT */
          ;
          continue;
        }

        if (skipToNextSelector) continue;

        if (mode & 4
        /* ELEMENT */
        ) {
            mode = 2
            /* ATTRIBUTE */
            | mode & 1
            /* NOT */
            ;

            if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === '' && selector.length === 1) {
              if (isPositive(mode)) return false;
              skipToNextSelector = true;
            }
          } else {
          var selectorAttrValue = mode & 8
          /* CLASS */
          ? current : selector[++i]; // special case for matching against classes when a tNode has been instantiated with
          // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])

          if (mode & 8
          /* CLASS */
          && tNode.attrs !== null) {
            if (!isCssClassMatching(tNode.attrs, selectorAttrValue, isProjectionMode)) {
              if (isPositive(mode)) return false;
              skipToNextSelector = true;
            }

            continue;
          }

          var attrName = mode & 8
          /* CLASS */
          ? 'class' : current;
          var attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);

          if (attrIndexInNode === -1) {
            if (isPositive(mode)) return false;
            skipToNextSelector = true;
            continue;
          }

          if (selectorAttrValue !== '') {
            var nodeAttrValue = void 0;

            if (attrIndexInNode > nameOnlyMarkerIdx) {
              nodeAttrValue = '';
            } else {
              ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0
              /* NamespaceURI */
              , 'We do not match directives on namespaced attributes'); // we lowercase the attribute value to be able to match
              // selectors without case-sensitivity
              // (selectors are already in lowercase when generated)

              nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();
            }

            var compareAgainstClassName = mode & 8
            /* CLASS */
            ? nodeAttrValue : null;

            if (compareAgainstClassName && classIndexOf(compareAgainstClassName, selectorAttrValue, 0) !== -1 || mode & 2
            /* ATTRIBUTE */
            && selectorAttrValue !== nodeAttrValue) {
              if (isPositive(mode)) return false;
              skipToNextSelector = true;
            }
          }
        }
      }

      return isPositive(mode) || skipToNextSelector;
    }

    function isPositive(mode) {
      return (mode & 1
      /* NOT */
      ) === 0;
    }
    /**
     * Examines the attribute's definition array for a node to find the index of the
     * attribute that matches the given `name`.
     *
     * NOTE: This will not match namespaced attributes.
     *
     * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.
     * The following table summarizes which types of attributes we attempt to match:
     *
     * ===========================================================================================================
     * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n
     * Attributes
     * ===========================================================================================================
     * Inline + Projection     | YES               | YES                 | NO                  | YES
     * -----------------------------------------------------------------------------------------------------------
     * Inline + Directive      | NO                | NO                  | YES                 | NO
     * -----------------------------------------------------------------------------------------------------------
     * Non-inline + Projection | YES               | YES                 | NO                  | YES
     * -----------------------------------------------------------------------------------------------------------
     * Non-inline + Directive  | YES               | YES                 | NO                  | YES
     * ===========================================================================================================
     *
     * @param name the name of the attribute to find
     * @param attrs the attribute array to examine
     * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)
     * rather than a manually expanded template node (e.g `<ng-template>`).
     * @param isProjectionMode true if we are matching against content projection otherwise we are
     * matching against directives.
     */


    function findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {
      if (attrs === null) return -1;
      var i = 0;

      if (isProjectionMode || !isInlineTemplate) {
        var bindingsMode = false;

        while (i < attrs.length) {
          var maybeAttrName = attrs[i];

          if (maybeAttrName === name) {
            return i;
          } else if (maybeAttrName === 3
          /* Bindings */
          || maybeAttrName === 6
          /* I18n */
          ) {
              bindingsMode = true;
            } else if (maybeAttrName === 1
          /* Classes */
          || maybeAttrName === 2
          /* Styles */
          ) {
              var value = attrs[++i]; // We should skip classes here because we have a separate mechanism for
              // matching classes in projection mode.

              while (typeof value === 'string') {
                value = attrs[++i];
              }

              continue;
            } else if (maybeAttrName === 4
          /* Template */
          ) {
              // We do not care about Template attributes in this scenario.
              break;
            } else if (maybeAttrName === 0
          /* NamespaceURI */
          ) {
              // Skip the whole namespaced attribute and value. This is by design.
              i += 4;
              continue;
            } // In binding mode there are only names, rather than name-value pairs.


          i += bindingsMode ? 1 : 2;
        } // We did not match the attribute


        return -1;
      } else {
        return matchTemplateAttribute(attrs, name);
      }
    }

    function isNodeMatchingSelectorList(tNode, selector) {
      var isProjectionMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      for (var i = 0; i < selector.length; i++) {
        if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {
          return true;
        }
      }

      return false;
    }

    function getProjectAsAttrValue(tNode) {
      var nodeAttrs = tNode.attrs;

      if (nodeAttrs != null) {
        var ngProjectAsAttrIdx = nodeAttrs.indexOf(5
        /* ProjectAs */
        ); // only check for ngProjectAs in attribute names, don't accidentally match attribute's value
        // (attribute names are stored at even indexes)

        if ((ngProjectAsAttrIdx & 1) === 0) {
          return nodeAttrs[ngProjectAsAttrIdx + 1];
        }
      }

      return null;
    }

    function getNameOnlyMarkerIndex(nodeAttrs) {
      for (var i = 0; i < nodeAttrs.length; i++) {
        var nodeAttr = nodeAttrs[i];

        if (isNameOnlyAttributeMarker(nodeAttr)) {
          return i;
        }
      }

      return nodeAttrs.length;
    }

    function matchTemplateAttribute(attrs, name) {
      var i = attrs.indexOf(4
      /* Template */
      );

      if (i > -1) {
        i++;

        while (i < attrs.length) {
          var attr = attrs[i]; // Return in case we checked all template attrs and are switching to the next section in the
          // attrs array (that starts with a number that represents an attribute marker).

          if (typeof attr === 'number') return -1;
          if (attr === name) return i;
          i++;
        }
      }

      return -1;
    }
    /**
     * Checks whether a selector is inside a CssSelectorList
     * @param selector Selector to be checked.
     * @param list List in which to look for the selector.
     */


    function isSelectorInSelectorList(selector, list) {
      selectorListLoop: for (var i = 0; i < list.length; i++) {
        var currentSelectorInList = list[i];

        if (selector.length !== currentSelectorInList.length) {
          continue;
        }

        for (var j = 0; j < selector.length; j++) {
          if (selector[j] !== currentSelectorInList[j]) {
            continue selectorListLoop;
          }
        }

        return true;
      }

      return false;
    }

    function maybeWrapInNotSelector(isNegativeMode, chunk) {
      return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;
    }

    function stringifyCSSSelector(selector) {
      var result = selector[0];
      var i = 1;
      var mode = 2
      /* ATTRIBUTE */
      ;
      var currentChunk = '';
      var isNegativeMode = false;

      while (i < selector.length) {
        var valueOrMarker = selector[i];

        if (typeof valueOrMarker === 'string') {
          if (mode & 2
          /* ATTRIBUTE */
          ) {
              var attrValue = selector[++i];
              currentChunk += '[' + valueOrMarker + (attrValue.length > 0 ? '="' + attrValue + '"' : '') + ']';
            } else if (mode & 8
          /* CLASS */
          ) {
              currentChunk += '.' + valueOrMarker;
            } else if (mode & 4
          /* ELEMENT */
          ) {
              currentChunk += ' ' + valueOrMarker;
            }
        } else {
          //
          // Append current chunk to the final result in case we come across SelectorFlag, which
          // indicates that the previous section of a selector is over. We need to accumulate content
          // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.
          // ```
          //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']
          // ```
          // should be transformed to `.classA :not(.classB .classC)`.
          //
          // Note: for negative selector part, we accumulate content between flags until we find the
          // next negative flag. This is needed to support a case where `:not()` rule contains more than
          // one chunk, e.g. the following selector:
          // ```
          //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']
          // ```
          // should be stringified to `:not(p.foo) :not(.bar)`
          //
          if (currentChunk !== '' && !isPositive(valueOrMarker)) {
            result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
            currentChunk = '';
          }

          mode = valueOrMarker; // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative
          // mode is maintained for remaining chunks of a selector.

          isNegativeMode = isNegativeMode || !isPositive(mode);
        }

        i++;
      }

      if (currentChunk !== '') {
        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
      }

      return result;
    }
    /**
     * Generates string representation of CSS selector in parsed form.
     *
     * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing
     * additional parsing at runtime (for example, for directive matching). However in some cases (for
     * example, while bootstrapping a component), a string version of the selector is required to query
     * for the host element on the page. This function takes the parsed form of a selector and returns
     * its string representation.
     *
     * @param selectorList selector in parsed form
     * @returns string representation of a given selector
     */


    function stringifyCSSSelectorList(selectorList) {
      return selectorList.map(stringifyCSSSelector).join(',');
    }
    /**
     * Extracts attributes and classes information from a given CSS selector.
     *
     * This function is used while creating a component dynamically. In this case, the host element
     * (that is created dynamically) should contain attributes and classes specified in component's CSS
     * selector.
     *
     * @param selector CSS selector in parsed form (in a form of array)
     * @returns object with `attrs` and `classes` fields that contain extracted information
     */


    function extractAttrsAndClassesFromSelector(selector) {
      var attrs = [];
      var classes = [];
      var i = 1;
      var mode = 2
      /* ATTRIBUTE */
      ;

      while (i < selector.length) {
        var valueOrMarker = selector[i];

        if (typeof valueOrMarker === 'string') {
          if (mode === 2
          /* ATTRIBUTE */
          ) {
              if (valueOrMarker !== '') {
                attrs.push(valueOrMarker, selector[++i]);
              }
            } else if (mode === 8
          /* CLASS */
          ) {
              classes.push(valueOrMarker);
            }
        } else {
          // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative
          // mode is maintained for remaining chunks of a selector. Since attributes and classes are
          // extracted only for "positive" part of the selector, we can stop here.
          if (!isPositive(mode)) break;
          mode = valueOrMarker;
        }

        i++;
      }

      return {
        attrs: attrs,
        classes: classes
      };
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /** A special value which designates that a value has not changed. */


    var NO_CHANGE = typeof ngDevMode === 'undefined' || ngDevMode ? {
      __brand__: 'NO_CHANGE'
    } : {};
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of
     * that LContainer, which is an LView
     * @param lView the lView whose parent to get
     */

    function getLViewParent(lView) {
      ngDevMode && assertLView(lView);
      var parent = lView[PARENT];
      return isLContainer(parent) ? parent[PARENT] : parent;
    }
    /**
     * Retrieve the root view from any component or `LView` by walking the parent `LView` until
     * reaching the root `LView`.
     *
     * @param componentOrLView any component or `LView`
     */


    function getRootView(componentOrLView) {
      ngDevMode && assertDefined(componentOrLView, 'component');
      var lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);

      while (lView && !(lView[FLAGS] & 512
      /* IsRoot */
      )) {
        lView = getLViewParent(lView);
      }

      ngDevMode && assertLView(lView);
      return lView;
    }
    /**
     * Returns the `RootContext` instance that is associated with
     * the application where the target is situated. It does this by walking the parent views until it
     * gets to the root view, then getting the context off of that.
     *
     * @param viewOrComponent the `LView` or component to get the root context for.
     */


    function getRootContext(viewOrComponent) {
      var rootView = getRootView(viewOrComponent);
      ngDevMode && assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');
      return rootView[CONTEXT];
    }
    /**
     * Gets the first `LContainer` in the LView or `null` if none exists.
     */


    function getFirstLContainer(lView) {
      return getNearestLContainer(lView[CHILD_HEAD]);
    }
    /**
     * Gets the next `LContainer` that is a sibling of the given container.
     */


    function getNextLContainer(container) {
      return getNearestLContainer(container[NEXT]);
    }

    function getNearestLContainer(viewOrContainer) {
      while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {
        viewOrContainer = viewOrContainer[NEXT];
      }

      return viewOrContainer;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Advances to an element for later binding instructions.
     *
     * Used in conjunction with instructions like {@link property} to act on elements with specified
     * indices, for example those created with {@link element} or {@link elementStart}.
     *
     * ```ts
     * (rf: RenderFlags, ctx: any) => {
     *   if (rf & 1) {
     *     text(0, 'Hello');
     *     text(1, 'Goodbye')
     *     element(2, 'div');
     *   }
     *   if (rf & 2) {
     *     advance(2); // Advance twice to the <div>.
     *     property('title', 'test');
     *   }
     *  }
     * ```
     * @param delta Number of elements to advance forwards by.
     *
     * @codeGenApi
     */


    function ɵɵadvance(delta) {
      ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');
      selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, getCheckNoChangesMode());
    }
    /**
     * Selects an element for later binding instructions.
     * @deprecated No longer being generated, but still used in unit tests.
     * @codeGenApi
     */


    function ɵɵselect(index) {
      // TODO(misko): Remove this function as it is no longer being used.
      selectIndexInternal(getTView(), getLView(), index, getCheckNoChangesMode());
    }

    function selectIndexInternal(tView, lView, index, checkNoChangesMode) {
      ngDevMode && assertGreaterThan(index, -1, 'Invalid index');
      ngDevMode && assertIndexInRange(lView, index + HEADER_OFFSET); // Flush the initial hooks for elements in the view that have been added up to this point.
      // PERF WARNING: do NOT extract this to a separate function without running benchmarks

      if (!checkNoChangesMode) {
        var hooksInitPhaseCompleted = (lView[FLAGS] & 3
        /* InitPhaseStateMask */
        ) === 3
        /* InitPhaseCompleted */
        ;

        if (hooksInitPhaseCompleted) {
          var preOrderCheckHooks = tView.preOrderCheckHooks;

          if (preOrderCheckHooks !== null) {
            executeCheckHooks(lView, preOrderCheckHooks, index);
          }
        } else {
          var preOrderHooks = tView.preOrderHooks;

          if (preOrderHooks !== null) {
            executeInitAndCheckHooks(lView, preOrderHooks, 0
            /* OnInitHooksToBeRun */
            , index);
          }
        }
      } // We must set the selected index *after* running the hooks, because hooks may have side-effects
      // that cause other template functions to run, thus updating the selected index, which is global
      // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index
      // will be altered by the time we leave the `ɵɵadvance` instruction.


      setSelectedIndex(index);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function toTStylingRange(prev, next) {
      ngDevMode && assertNumberInRange(prev, 0, 32767
      /* UNSIGNED_MASK */
      );
      ngDevMode && assertNumberInRange(next, 0, 32767
      /* UNSIGNED_MASK */
      );
      return prev << 17
      /* PREV_SHIFT */
      | next << 2
      /* NEXT_SHIFT */
      ;
    }

    function getTStylingRangePrev(tStylingRange) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      return tStylingRange >> 17
      /* PREV_SHIFT */
      & 32767
      /* UNSIGNED_MASK */
      ;
    }

    function getTStylingRangePrevDuplicate(tStylingRange) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      return (tStylingRange & 2
      /* PREV_DUPLICATE */
      ) == 2
      /* PREV_DUPLICATE */
      ;
    }

    function setTStylingRangePrev(tStylingRange, previous) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      ngDevMode && assertNumberInRange(previous, 0, 32767
      /* UNSIGNED_MASK */
      );
      return tStylingRange & ~4294836224
      /* PREV_MASK */
      | previous << 17
      /* PREV_SHIFT */
      ;
    }

    function setTStylingRangePrevDuplicate(tStylingRange) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      return tStylingRange | 2
      /* PREV_DUPLICATE */
      ;
    }

    function getTStylingRangeNext(tStylingRange) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      return (tStylingRange & 131068
      /* NEXT_MASK */
      ) >> 2
      /* NEXT_SHIFT */
      ;
    }

    function setTStylingRangeNext(tStylingRange, next) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      ngDevMode && assertNumberInRange(next, 0, 32767
      /* UNSIGNED_MASK */
      );
      return tStylingRange & ~131068
      /* NEXT_MASK */
      | //
      next << 2
      /* NEXT_SHIFT */
      ;
    }

    function getTStylingRangeNextDuplicate(tStylingRange) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      return (tStylingRange & 1
      /* NEXT_DUPLICATE */
      ) === 1
      /* NEXT_DUPLICATE */
      ;
    }

    function setTStylingRangeNextDuplicate(tStylingRange) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      return tStylingRange | 1
      /* NEXT_DUPLICATE */
      ;
    }

    function getTStylingRangeTail(tStylingRange) {
      ngDevMode && assertNumber(tStylingRange, 'expected number');
      var next = getTStylingRangeNext(tStylingRange);
      return next === 0 ? getTStylingRangePrev(tStylingRange) : next;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Patch a `debug` property on top of the existing object.
     *
     * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`
     *
     * @param obj Object to patch
     * @param debug Value to patch
     */


    function attachDebugObject(obj, debug) {
      if (ngDevMode) {
        Object.defineProperty(obj, 'debug', {
          value: debug,
          enumerable: false
        });
      } else {
        throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');
      }
    }
    /**
     * Patch a `debug` property getter on top of the existing object.
     *
     * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`
     *
     * @param obj Object to patch
     * @param debugGetter Getter returning a value to patch
     */


    function attachDebugGetter(obj, debugGetter) {
      if (ngDevMode) {
        Object.defineProperty(obj, 'debug', {
          get: debugGetter,
          enumerable: false
        });
      } else {
        throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var NG_DEV_MODE = (typeof ngDevMode === 'undefined' || !!ngDevMode) && /*@__PURE__*/initNgDevMode();
    /*
     * This file contains conditionally attached classes which provide human readable (debug) level
     * information for `LView`, `LContainer` and other internal data structures. These data structures
     * are stored internally as array which makes it very difficult during debugging to reason about the
     * current state of the system.
     *
     * Patching the array with extra property does change the array's hidden class' but it does not
     * change the cost of access, therefore this patching should not have significant if any impact in
     * `ngDevMode` mode. (see: https://jsperf.com/array-vs-monkey-patch-array)
     *
     * So instead of seeing:
     * ```
     * Array(30) [Object, 659, null, …]
     * ```
     *
     * You get to see:
     * ```
     * LViewDebug {
     *   views: [...],
     *   flags: {attached: true, ...}
     *   nodes: [
     *     {html: '<div id="123">', ..., nodes: [
     *       {html: '<span>', ..., nodes: null}
     *     ]}
     *   ]
     * }
     * ```
     */

    var LVIEW_COMPONENT_CACHE;
    var LVIEW_EMBEDDED_CACHE;
    var LVIEW_ROOT;
    /**
     * This function clones a blueprint and creates LView.
     *
     * Simple slice will keep the same type, and we need it to be LView
     */

    function cloneToLViewFromTViewBlueprint(tView) {
      var debugTView = tView;
      var lView = getLViewToClone(debugTView.type, tView.template && tView.template.name);
      return lView.concat(tView.blueprint);
    }

    function getLViewToClone(type, name) {
      switch (type) {
        case 0
        /* Root */
        :
          if (LVIEW_ROOT === undefined) LVIEW_ROOT = new (createNamedArrayType('LRootView'))();
          return LVIEW_ROOT;

        case 1
        /* Component */
        :
          if (LVIEW_COMPONENT_CACHE === undefined) LVIEW_COMPONENT_CACHE = new Map();
          var componentArray = LVIEW_COMPONENT_CACHE.get(name);

          if (componentArray === undefined) {
            componentArray = new (createNamedArrayType('LComponentView' + nameSuffix(name)))();
            LVIEW_COMPONENT_CACHE.set(name, componentArray);
          }

          return componentArray;

        case 2
        /* Embedded */
        :
          if (LVIEW_EMBEDDED_CACHE === undefined) LVIEW_EMBEDDED_CACHE = new Map();
          var embeddedArray = LVIEW_EMBEDDED_CACHE.get(name);

          if (embeddedArray === undefined) {
            embeddedArray = new (createNamedArrayType('LEmbeddedView' + nameSuffix(name)))();
            LVIEW_EMBEDDED_CACHE.set(name, embeddedArray);
          }

          return embeddedArray;
      }

      throw new Error('unreachable code');
    }

    function nameSuffix(text) {
      if (text == null) return '';
      var index = text.lastIndexOf('_Template');
      return '_' + (index === -1 ? text : text.substr(0, index));
    }
    /**
     * This class is a debug version of Object literal so that we can have constructor name show up
     * in
     * debug tools in ngDevMode.
     */


    var TViewConstructor = /*#__PURE__*/function () {
      function TView(type, //
      id, //
      blueprint, //
      template, //
      queries, //
      viewQuery, //
      node, //
      data, //
      bindingStartIndex, //
      expandoStartIndex, //
      expandoInstructions, //
      firstCreatePass, //
      firstUpdatePass, //
      staticViewQueries, //
      staticContentQueries, //
      preOrderHooks, //
      preOrderCheckHooks, //
      contentHooks, //
      contentCheckHooks, //
      viewHooks, //
      viewCheckHooks, //
      destroyHooks, //
      cleanup, //
      contentQueries, //
      components, //
      directiveRegistry, //
      pipeRegistry, //
      firstChild, //
      schemas, //
      consts, //
      incompleteFirstPass, //
      _decls, //
      _vars) {
        _classCallCheck(this, TView);

        this.type = type;
        this.id = id;
        this.blueprint = blueprint;
        this.template = template;
        this.queries = queries;
        this.viewQuery = viewQuery;
        this.node = node;
        this.data = data;
        this.bindingStartIndex = bindingStartIndex;
        this.expandoStartIndex = expandoStartIndex;
        this.expandoInstructions = expandoInstructions;
        this.firstCreatePass = firstCreatePass;
        this.firstUpdatePass = firstUpdatePass;
        this.staticViewQueries = staticViewQueries;
        this.staticContentQueries = staticContentQueries;
        this.preOrderHooks = preOrderHooks;
        this.preOrderCheckHooks = preOrderCheckHooks;
        this.contentHooks = contentHooks;
        this.contentCheckHooks = contentCheckHooks;
        this.viewHooks = viewHooks;
        this.viewCheckHooks = viewCheckHooks;
        this.destroyHooks = destroyHooks;
        this.cleanup = cleanup;
        this.contentQueries = contentQueries;
        this.components = components;
        this.directiveRegistry = directiveRegistry;
        this.pipeRegistry = pipeRegistry;
        this.firstChild = firstChild;
        this.schemas = schemas;
        this.consts = consts;
        this.incompleteFirstPass = incompleteFirstPass;
        this._decls = _decls;
        this._vars = _vars;
      }

      _createClass2(TView, [{
        key: "template_",
        get: function get() {
          var buf = [];
          processTNodeChildren(this.firstChild, buf);
          return buf.join('');
        }
      }]);

      return TView;
    }();

    var TNode = /*#__PURE__*/function () {
      function TNode(tView_, //
      type, //
      index, //
      injectorIndex, //
      directiveStart, //
      directiveEnd, //
      directiveStylingLast, //
      propertyBindings, //
      flags, //
      providerIndexes, //
      tagName, //
      attrs, //
      mergedAttrs, //
      localNames, //
      initialInputs, //
      inputs, //
      outputs, //
      tViews, //
      next, //
      projectionNext, //
      child, //
      parent, //
      projection, //
      styles, //
      stylesWithoutHost, //
      residualStyles, //
      classes, //
      classesWithoutHost, //
      residualClasses, //
      classBindings, //
      styleBindings) {
        _classCallCheck(this, TNode);

        this.tView_ = tView_;
        this.type = type;
        this.index = index;
        this.injectorIndex = injectorIndex;
        this.directiveStart = directiveStart;
        this.directiveEnd = directiveEnd;
        this.directiveStylingLast = directiveStylingLast;
        this.propertyBindings = propertyBindings;
        this.flags = flags;
        this.providerIndexes = providerIndexes;
        this.tagName = tagName;
        this.attrs = attrs;
        this.mergedAttrs = mergedAttrs;
        this.localNames = localNames;
        this.initialInputs = initialInputs;
        this.inputs = inputs;
        this.outputs = outputs;
        this.tViews = tViews;
        this.next = next;
        this.projectionNext = projectionNext;
        this.child = child;
        this.parent = parent;
        this.projection = projection;
        this.styles = styles;
        this.stylesWithoutHost = stylesWithoutHost;
        this.residualStyles = residualStyles;
        this.classes = classes;
        this.classesWithoutHost = classesWithoutHost;
        this.residualClasses = residualClasses;
        this.classBindings = classBindings;
        this.styleBindings = styleBindings;
      }

      _createClass2(TNode, [{
        key: "type_",
        get: function get() {
          switch (this.type) {
            case 0
            /* Container */
            :
              return 'TNodeType.Container';

            case 3
            /* Element */
            :
              return 'TNodeType.Element';

            case 4
            /* ElementContainer */
            :
              return 'TNodeType.ElementContainer';

            case 5
            /* IcuContainer */
            :
              return 'TNodeType.IcuContainer';

            case 1
            /* Projection */
            :
              return 'TNodeType.Projection';

            case 2
            /* View */
            :
              return 'TNodeType.View';

            default:
              return 'TNodeType.???';
          }
        }
      }, {
        key: "flags_",
        get: function get() {
          var flags = [];
          if (this.flags & 16
          /* hasClassInput */
          ) flags.push('TNodeFlags.hasClassInput');
          if (this.flags & 8
          /* hasContentQuery */
          ) flags.push('TNodeFlags.hasContentQuery');
          if (this.flags & 32
          /* hasStyleInput */
          ) flags.push('TNodeFlags.hasStyleInput');
          if (this.flags & 128
          /* hasHostBindings */
          ) flags.push('TNodeFlags.hasHostBindings');
          if (this.flags & 2
          /* isComponentHost */
          ) flags.push('TNodeFlags.isComponentHost');
          if (this.flags & 1
          /* isDirectiveHost */
          ) flags.push('TNodeFlags.isDirectiveHost');
          if (this.flags & 64
          /* isDetached */
          ) flags.push('TNodeFlags.isDetached');
          if (this.flags & 4
          /* isProjected */
          ) flags.push('TNodeFlags.isProjected');
          return flags.join('|');
        }
      }, {
        key: "template_",
        get: function get() {
          var buf = [];
          buf.push('<', this.tagName || this.type_);

          if (this.attrs) {
            for (var i = 0; i < this.attrs.length;) {
              var attrName = this.attrs[i++];

              if (typeof attrName == 'number') {
                break;
              }

              var attrValue = this.attrs[i++];
              buf.push(' ', attrName, '="', attrValue, '"');
            }
          }

          buf.push('>');
          processTNodeChildren(this.child, buf);
          buf.push('</', this.tagName || this.type_, '>');
          return buf.join('');
        }
      }, {
        key: "styleBindings_",
        get: function get() {
          return toDebugStyleBinding(this, false);
        }
      }, {
        key: "classBindings_",
        get: function get() {
          return toDebugStyleBinding(this, true);
        }
      }]);

      return TNode;
    }();

    var TNodeDebug = TNode;

    function toDebugStyleBinding(tNode, isClassBased) {
      var tData = tNode.tView_.data;
      var bindings = [];
      var range = isClassBased ? tNode.classBindings : tNode.styleBindings;
      var prev = getTStylingRangePrev(range);
      var next = getTStylingRangeNext(range);
      var isTemplate = next !== 0;
      var cursor = isTemplate ? next : prev;

      while (cursor !== 0) {
        var itemKey = tData[cursor];
        var itemRange = tData[cursor + 1];
        bindings.unshift({
          key: itemKey,
          index: cursor,
          isTemplate: isTemplate,
          prevDuplicate: getTStylingRangePrevDuplicate(itemRange),
          nextDuplicate: getTStylingRangeNextDuplicate(itemRange),
          nextIndex: getTStylingRangeNext(itemRange),
          prevIndex: getTStylingRangePrev(itemRange)
        });
        if (cursor === prev) isTemplate = false;
        cursor = getTStylingRangePrev(itemRange);
      }

      bindings.push((isClassBased ? tNode.residualClasses : tNode.residualStyles) || null);
      return bindings;
    }

    function processTNodeChildren(tNode, buf) {
      while (tNode) {
        buf.push(tNode.template_);
        tNode = tNode.next;
      }
    }

    var TViewData = NG_DEV_MODE && /*@__PURE__*/createNamedArrayType('TViewData') || null;
    var TVIEWDATA_EMPTY; // can't initialize here or it will not be tree shaken, because
    // `LView` constructor could have side-effects.

    /**
     * This function clones a blueprint and creates TData.
     *
     * Simple slice will keep the same type, and we need it to be TData
     */

    function cloneToTViewData(list) {
      if (TVIEWDATA_EMPTY === undefined) TVIEWDATA_EMPTY = new TViewData();
      return TVIEWDATA_EMPTY.concat(list);
    }

    var LViewBlueprint = NG_DEV_MODE && /*@__PURE__*/createNamedArrayType('LViewBlueprint') || null;
    var MatchesArray = NG_DEV_MODE && /*@__PURE__*/createNamedArrayType('MatchesArray') || null;
    var TViewComponents = NG_DEV_MODE && /*@__PURE__*/createNamedArrayType('TViewComponents') || null;
    var TNodeLocalNames = NG_DEV_MODE && /*@__PURE__*/createNamedArrayType('TNodeLocalNames') || null;
    var TNodeInitialInputs = NG_DEV_MODE && /*@__PURE__*/createNamedArrayType('TNodeInitialInputs') || null;
    var TNodeInitialData = NG_DEV_MODE && /*@__PURE__*/createNamedArrayType('TNodeInitialData') || null;
    var LCleanup = NG_DEV_MODE && /*@__PURE__*/createNamedArrayType('LCleanup') || null;
    var TCleanup = NG_DEV_MODE && /*@__PURE__*/createNamedArrayType('TCleanup') || null;

    function attachLViewDebug(lView) {
      attachDebugObject(lView, new LViewDebug(lView));
    }

    function attachLContainerDebug(lContainer) {
      attachDebugObject(lContainer, new LContainerDebug(lContainer));
    }

    function toDebug(obj) {
      if (obj) {
        var debug = obj.debug;
        assertDefined(debug, 'Object does not have a debug representation.');
        return debug;
      } else {
        return obj;
      }
    }
    /**
     * Use this method to unwrap a native element in `LView` and convert it into HTML for easier
     * reading.
     *
     * @param value possibly wrapped native DOM node.
     * @param includeChildren If `true` then the serialized HTML form will include child elements
     * (same
     * as `outerHTML`). If `false` then the serialized HTML form will only contain the element
     * itself
     * (will not serialize child elements).
     */


    function toHtml(value) {
      var includeChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var node = unwrapRNode(value);

      if (node) {
        switch (node.nodeType) {
          case Node.TEXT_NODE:
            return node.textContent;

          case Node.COMMENT_NODE:
            return "<!--".concat(node.textContent, "-->");

          case Node.ELEMENT_NODE:
            var outerHTML = node.outerHTML;

            if (includeChildren) {
              return outerHTML;
            } else {
              var innerHTML = '>' + node.innerHTML + '<';
              return outerHTML.split(innerHTML)[0] + '>';
            }

        }
      }

      return null;
    }

    var LViewDebug = /*#__PURE__*/function () {
      function LViewDebug(_raw_lView) {
        _classCallCheck(this, LViewDebug);

        this._raw_lView = _raw_lView;
      }
      /**
       * Flags associated with the `LView` unpacked into a more readable state.
       */


      _createClass2(LViewDebug, [{
        key: "flags",
        get: function get() {
          var flags = this._raw_lView[FLAGS];
          return {
            __raw__flags__: flags,
            initPhaseState: flags & 3
            /* InitPhaseStateMask */
            ,
            creationMode: !!(flags & 4
            /* CreationMode */
            ),
            firstViewPass: !!(flags & 8
            /* FirstLViewPass */
            ),
            checkAlways: !!(flags & 16
            /* CheckAlways */
            ),
            dirty: !!(flags & 64
            /* Dirty */
            ),
            attached: !!(flags & 128
            /* Attached */
            ),
            destroyed: !!(flags & 256
            /* Destroyed */
            ),
            isRoot: !!(flags & 512
            /* IsRoot */
            ),
            indexWithinInitPhase: flags >> 11
            /* IndexWithinInitPhaseShift */

          };
        }
      }, {
        key: "parent",
        get: function get() {
          return toDebug(this._raw_lView[PARENT]);
        }
      }, {
        key: "hostHTML",
        get: function get() {
          return toHtml(this._raw_lView[HOST], true);
        }
      }, {
        key: "html",
        get: function get() {
          return (this.nodes || []).map(function (node) {
            return toHtml(node["native"], true);
          }).join('');
        }
      }, {
        key: "context",
        get: function get() {
          return this._raw_lView[CONTEXT];
        }
        /**
         * The tree of nodes associated with the current `LView`. The nodes have been normalized into
         * a tree structure with relevant details pulled out for readability.
         */

      }, {
        key: "nodes",
        get: function get() {
          var lView = this._raw_lView;
          var tNode = lView[TVIEW].firstChild;
          return toDebugNodes(tNode, lView);
        }
      }, {
        key: "tView",
        get: function get() {
          return this._raw_lView[TVIEW];
        }
      }, {
        key: "cleanup",
        get: function get() {
          return this._raw_lView[CLEANUP];
        }
      }, {
        key: "injector",
        get: function get() {
          return this._raw_lView[INJECTOR$1];
        }
      }, {
        key: "rendererFactory",
        get: function get() {
          return this._raw_lView[RENDERER_FACTORY];
        }
      }, {
        key: "renderer",
        get: function get() {
          return this._raw_lView[RENDERER];
        }
      }, {
        key: "sanitizer",
        get: function get() {
          return this._raw_lView[SANITIZER];
        }
      }, {
        key: "childHead",
        get: function get() {
          return toDebug(this._raw_lView[CHILD_HEAD]);
        }
      }, {
        key: "next",
        get: function get() {
          return toDebug(this._raw_lView[NEXT]);
        }
      }, {
        key: "childTail",
        get: function get() {
          return toDebug(this._raw_lView[CHILD_TAIL]);
        }
      }, {
        key: "declarationView",
        get: function get() {
          return toDebug(this._raw_lView[DECLARATION_VIEW]);
        }
      }, {
        key: "queries",
        get: function get() {
          return this._raw_lView[QUERIES];
        }
      }, {
        key: "tHost",
        get: function get() {
          return this._raw_lView[T_HOST];
        }
      }, {
        key: "decls",
        get: function get() {
          var tView = this.tView;
          var start = HEADER_OFFSET;
          return toLViewRange(this.tView, this._raw_lView, start, start + tView._decls);
        }
      }, {
        key: "vars",
        get: function get() {
          var tView = this.tView;
          var start = HEADER_OFFSET + tView._decls;
          return toLViewRange(this.tView, this._raw_lView, start, start + tView._vars);
        }
      }, {
        key: "i18n",
        get: function get() {
          var tView = this.tView;
          var start = HEADER_OFFSET + tView._decls + tView._vars;
          return toLViewRange(this.tView, this._raw_lView, start, this.tView.expandoStartIndex);
        }
      }, {
        key: "expando",
        get: function get() {
          var tView = this.tView;
          return toLViewRange(this.tView, this._raw_lView, this.tView.expandoStartIndex, this._raw_lView.length);
        }
        /**
         * Normalized view of child views (and containers) attached at this location.
         */

      }, {
        key: "childViews",
        get: function get() {
          var childViews = [];
          var child = this.childHead;

          while (child) {
            childViews.push(child);
            child = child.next;
          }

          return childViews;
        }
      }]);

      return LViewDebug;
    }();

    function toLViewRange(tView, lView, start, end) {
      var content = [];

      for (var index = start; index < end; index++) {
        content.push({
          index: index,
          t: tView.data[index],
          l: lView[index]
        });
      }

      return {
        start: start,
        end: end,
        length: end - start,
        content: content
      };
    }
    /**
     * Turns a flat list of nodes into a tree by walking the associated `TNode` tree.
     *
     * @param tNode
     * @param lView
     */


    function toDebugNodes(tNode, lView) {
      if (tNode) {
        var debugNodes = [];
        var tNodeCursor = tNode;

        while (tNodeCursor) {
          debugNodes.push(buildDebugNode(tNodeCursor, lView, tNodeCursor.index));
          tNodeCursor = tNodeCursor.next;
        }

        return debugNodes;
      } else {
        return [];
      }
    }

    function buildDebugNode(tNode, lView, nodeIndex) {
      var rawValue = lView[nodeIndex];

      var _native6 = unwrapRNode(rawValue);

      return {
        html: toHtml(_native6),
        type: TNodeTypeAsString[tNode.type],
        "native": _native6,
        children: toDebugNodes(tNode.child, lView)
      };
    }

    var LContainerDebug = /*#__PURE__*/function () {
      function LContainerDebug(_raw_lContainer) {
        _classCallCheck(this, LContainerDebug);

        this._raw_lContainer = _raw_lContainer;
      }

      _createClass2(LContainerDebug, [{
        key: "hasTransplantedViews",
        get: function get() {
          return this._raw_lContainer[HAS_TRANSPLANTED_VIEWS];
        }
      }, {
        key: "views",
        get: function get() {
          return this._raw_lContainer.slice(CONTAINER_HEADER_OFFSET).map(toDebug);
        }
      }, {
        key: "parent",
        get: function get() {
          return toDebug(this._raw_lContainer[PARENT]);
        }
      }, {
        key: "movedViews",
        get: function get() {
          return this._raw_lContainer[MOVED_VIEWS];
        }
      }, {
        key: "host",
        get: function get() {
          return this._raw_lContainer[HOST];
        }
      }, {
        key: "native",
        get: function get() {
          return this._raw_lContainer[NATIVE];
        }
      }, {
        key: "next",
        get: function get() {
          return toDebug(this._raw_lContainer[NEXT]);
        }
      }]);

      return LContainerDebug;
    }();
    /**
     * Return an `LView` value if found.
     *
     * @param value `LView` if any
     */


    function readLViewValue(value) {
      while (Array.isArray(value)) {
        // This check is not quite right, as it does not take into account `StylingContext`
        // This is why it is in debug, not in util.ts
        if (value.length >= HEADER_OFFSET - 1) return value;
        value = value[HOST];
      }

      return null;
    }

    var ɵ0$4 = function ɵ0$4() {
      return Promise.resolve(null);
    };
    /**
     * A permanent marker promise which signifies that the current CD tree is
     * clean.
     */


    var _CLEAN_PROMISE = /*@__PURE__*/ɵ0$4();
    /**
     * Process the `TView.expandoInstructions`. (Execute the `hostBindings`.)
     *
     * @param tView `TView` containing the `expandoInstructions`
     * @param lView `LView` associated with the `TView`
     */


    function setHostBindingsByExecutingExpandoInstructions(tView, lView) {
      ngDevMode && assertSame(tView, lView[TVIEW], '`LView` is not associated with the `TView`!');

      try {
        var expandoInstructions = tView.expandoInstructions;

        if (expandoInstructions !== null) {
          var bindingRootIndex = tView.expandoStartIndex;
          var currentDirectiveIndex = -1;
          var currentElementIndex = -1; // TODO(misko): PERF It is possible to get here with `TView.expandoInstructions` containing no
          // functions to execute. This is wasteful as there is no work to be done, but we still need
          // to iterate over the instructions.
          // In example of this is in this test: `host_binding_spec.ts`
          // `fit('should not cause problems if detectChanges is called when a property updates', ...`
          // In the above test we get here with expando [0, 0, 1] which requires a lot of processing but
          // there is no function to execute.

          for (var i = 0; i < expandoInstructions.length; i++) {
            var instruction = expandoInstructions[i];

            if (typeof instruction === 'number') {
              if (instruction <= 0) {
                // Negative numbers mean that we are starting new EXPANDO block and need to update
                // the current element and directive index.
                // Important: In JS `-x` and `0-x` is not the same! If `x===0` then `-x` will produce
                // `-0` which requires non standard math arithmetic and it can prevent VM optimizations.
                // `0-0` will always produce `0` and will not cause a potential deoptimization in VM.
                // TODO(misko): PERF This should be refactored to use `~instruction` as that does not
                // suffer from `-0` and it is faster/more compact.
                currentElementIndex = 0 - instruction;
                setSelectedIndex(currentElementIndex); // Injector block and providers are taken into account.

                var providerCount = expandoInstructions[++i];
                bindingRootIndex += INJECTOR_BLOOM_PARENT_SIZE + providerCount;
                currentDirectiveIndex = bindingRootIndex;
              } else {
                // This is either the injector size (so the binding root can skip over directives
                // and get to the first set of host bindings on this node) or the host var count
                // (to get to the next set of host bindings on this node).
                bindingRootIndex += instruction;
              }
            } else {
              // If it's not a number, it's a host binding function that needs to be executed.
              if (instruction !== null) {
                ngDevMode && assertLessThan(currentDirectiveIndex, 1048576
                /* CptViewProvidersCountShifter */
                , 'Reached the max number of host bindings');
                setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex);
                var hostCtx = lView[currentDirectiveIndex];
                instruction(2
                /* Update */
                , hostCtx);
              } // TODO(misko): PERF Relying on incrementing the `currentDirectiveIndex` here is
              // sub-optimal. The implications are that if we have a lot of directives but none of them
              // have host bindings we nevertheless need to iterate over the expando instructions to
              // update the counter. It would be much better if we could encode the
              // `currentDirectiveIndex` into the `expandoInstruction` array so that we only need to
              // iterate over those directives which actually have `hostBindings`.


              currentDirectiveIndex++;
            }
          }
        }
      } finally {
        setSelectedIndex(-1);
      }
    }
    /** Refreshes all content queries declared by directives in a given view */


    function refreshContentQueries(tView, lView) {
      var contentQueries = tView.contentQueries;

      if (contentQueries !== null) {
        for (var i = 0; i < contentQueries.length; i += 2) {
          var queryStartIdx = contentQueries[i];
          var directiveDefIdx = contentQueries[i + 1];

          if (directiveDefIdx !== -1) {
            var _directiveDef2 = tView.data[directiveDefIdx];
            ngDevMode && assertDefined(_directiveDef2.contentQueries, 'contentQueries function should be defined');
            setCurrentQueryIndex(queryStartIdx);

            _directiveDef2.contentQueries(2
            /* Update */
            , lView[directiveDefIdx], directiveDefIdx);
          }
        }
      }
    }
    /** Refreshes child components in the current view (update mode). */


    function refreshChildComponents(hostLView, components) {
      for (var i = 0; i < components.length; i++) {
        refreshComponent(hostLView, components[i]);
      }
    }
    /** Renders child components in the current view (creation mode). */


    function renderChildComponents(hostLView, components) {
      for (var i = 0; i < components.length; i++) {
        renderComponent(hostLView, components[i]);
      }
    }
    /**
     * Creates a native element from a tag name, using a renderer.
     * @param name the tag name
     * @param renderer A renderer to use
     * @returns the element created
     */


    function elementCreate(name, renderer, namespace) {
      if (isProceduralRenderer(renderer)) {
        return renderer.createElement(name, namespace);
      } else {
        return namespace === null ? renderer.createElement(name) : renderer.createElementNS(namespace, name);
      }
    }

    function createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector) {
      var lView = ngDevMode ? cloneToLViewFromTViewBlueprint(tView) : tView.blueprint.slice();
      lView[HOST] = host;
      lView[FLAGS] = flags | 4
      /* CreationMode */
      | 128
      /* Attached */
      | 8
      /* FirstLViewPass */
      ;
      resetPreOrderHookFlags(lView);
      lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;
      lView[CONTEXT] = context;
      lView[RENDERER_FACTORY] = rendererFactory || parentLView && parentLView[RENDERER_FACTORY];
      ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');
      lView[RENDERER] = renderer || parentLView && parentLView[RENDERER];
      ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');
      lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;
      lView[INJECTOR$1] = injector || parentLView && parentLView[INJECTOR$1] || null;
      lView[T_HOST] = tHostNode;
      ngDevMode && assertEqual(tView.type == 2
      /* Embedded */
      ? parentLView !== null : true, true, 'Embedded views must have parentLView');
      lView[DECLARATION_COMPONENT_VIEW] = tView.type == 2
      /* Embedded */
      ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;
      ngDevMode && attachLViewDebug(lView);
      return lView;
    }

    function getOrCreateTNode(tView, tHostNode, index, type, name, attrs) {
      // Keep this function short, so that the VM will inline it.
      var adjustedIndex = index + HEADER_OFFSET;
      var tNode = tView.data[adjustedIndex] || createTNodeAtIndex(tView, tHostNode, adjustedIndex, type, name, attrs);
      setPreviousOrParentTNode(tNode, true);
      return tNode;
    }

    function createTNodeAtIndex(tView, tHostNode, adjustedIndex, type, name, attrs) {
      var previousOrParentTNode = getPreviousOrParentTNode();
      var isParent = getIsParent();
      var parent = isParent ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent; // Parents cannot cross component boundaries because components will be used in multiple places,
      // so it's only set if the view is the same.

      var parentInSameView = parent && parent !== tHostNode;
      var tParentNode = parentInSameView ? parent : null;
      var tNode = tView.data[adjustedIndex] = createTNode(tView, tParentNode, type, adjustedIndex, name, attrs); // Assign a pointer to the first child node of a given view. The first node is not always the one
      // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has
      // the index 1 or more, so we can't just check node index.

      if (tView.firstChild === null) {
        tView.firstChild = tNode;
      }

      if (previousOrParentTNode) {
        if (isParent && previousOrParentTNode.child == null && (tNode.parent !== null || previousOrParentTNode.type === 2
        /* View */
        )) {
          // We are in the same view, which means we are adding content node to the parent view.
          previousOrParentTNode.child = tNode;
        } else if (!isParent) {
          previousOrParentTNode.next = tNode;
        }
      }

      return tNode;
    }

    function assignTViewNodeToLView(tView, tParentNode, index, lView) {
      // View nodes are not stored in data because they can be added / removed at runtime (which
      // would cause indices to change). Their TNodes are instead stored in tView.node.
      var tNode = tView.node;

      if (tNode == null) {
        ngDevMode && tParentNode && assertNodeOfPossibleTypes(tParentNode, [3
        /* Element */
        , 0
        /* Container */
        ]);
        tView.node = tNode = createTNode(tView, tParentNode, //
        2
        /* View */
        , index, null, null);
      }

      lView[T_HOST] = tNode;
    }
    /**
     * When elements are created dynamically after a view blueprint is created (e.g. through
     * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future
     * template passes.
     *
     * @param tView `TView` associated with `LView`
     * @param view The `LView` containing the blueprint to adjust
     * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0
     */


    function allocExpando(tView, lView, numSlotsToAlloc) {
      ngDevMode && assertGreaterThan(numSlotsToAlloc, 0, 'The number of slots to alloc should be greater than 0');

      if (numSlotsToAlloc > 0) {
        if (tView.firstCreatePass) {
          for (var i = 0; i < numSlotsToAlloc; i++) {
            tView.blueprint.push(null);
            tView.data.push(null);
            lView.push(null);
          } // We should only increment the expando start index if there aren't already directives
          // and injectors saved in the "expando" section


          if (!tView.expandoInstructions) {
            tView.expandoStartIndex += numSlotsToAlloc;
          } else {
            // Since we're adding the dynamic nodes into the expando section, we need to let the host
            // bindings know that they should skip x slots
            tView.expandoInstructions.push(numSlotsToAlloc);
          }
        }
      }
    } //////////////////////////
    //// Render
    //////////////////////////

    /**
     * Processes a view in the creation mode. This includes a number of steps in a specific order:
     * - creating view query functions (if any);
     * - executing a template function in the creation mode;
     * - updating static queries (if any);
     * - creating child components defined in a given view.
     */


    function renderView(tView, lView, context) {
      ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');
      enterView(lView, lView[T_HOST]);

      try {
        var viewQuery = tView.viewQuery;

        if (viewQuery !== null) {
          executeViewQueryFn(1
          /* Create */
          , viewQuery, context);
        } // Execute a template associated with this view, if it exists. A template function might not be
        // defined for the root component views.


        var templateFn = tView.template;

        if (templateFn !== null) {
          executeTemplate(tView, lView, templateFn, 1
          /* Create */
          , context);
        } // This needs to be set before children are processed to support recursive components.
        // This must be set to false immediately after the first creation run because in an
        // ngFor loop, all the views will be created together before update mode runs and turns
        // off firstCreatePass. If we don't set it here, instances will perform directive
        // matching, etc again and again.


        if (tView.firstCreatePass) {
          tView.firstCreatePass = false;
        } // We resolve content queries specifically marked as `static` in creation mode. Dynamic
        // content queries are resolved during change detection (i.e. update mode), after embedded
        // views are refreshed (see block above).


        if (tView.staticContentQueries) {
          refreshContentQueries(tView, lView);
        } // We must materialize query results before child components are processed
        // in case a child component has projected a container. The LContainer needs
        // to exist so the embedded views are properly attached by the container.


        if (tView.staticViewQueries) {
          executeViewQueryFn(2
          /* Update */
          , tView.viewQuery, context);
        } // Render child component views.


        var components = tView.components;

        if (components !== null) {
          renderChildComponents(lView, components);
        }
      } catch (error) {
        // If we didn't manage to get past the first template pass due to
        // an error, mark the view as corrupted so we can try to recover.
        if (tView.firstCreatePass) {
          tView.incompleteFirstPass = true;
        }

        throw error;
      } finally {
        lView[FLAGS] &= ~4
        /* CreationMode */
        ;
        leaveView();
      }
    }
    /**
     * Processes a view in update mode. This includes a number of steps in a specific order:
     * - executing a template function in update mode;
     * - executing hooks;
     * - refreshing queries;
     * - setting host bindings;
     * - refreshing child (embedded and component) views.
     */


    function refreshView(tView, lView, templateFn, context) {
      ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');
      var flags = lView[FLAGS];
      if ((flags & 256
      /* Destroyed */
      ) === 256
      /* Destroyed */
      ) return;
      enterView(lView, lView[T_HOST]);
      var checkNoChangesMode = getCheckNoChangesMode();

      try {
        resetPreOrderHookFlags(lView);
        setBindingIndex(tView.bindingStartIndex);

        if (templateFn !== null) {
          executeTemplate(tView, lView, templateFn, 2
          /* Update */
          , context);
        }

        var hooksInitPhaseCompleted = (flags & 3
        /* InitPhaseStateMask */
        ) === 3
        /* InitPhaseCompleted */
        ; // execute pre-order hooks (OnInit, OnChanges, DoCheck)
        // PERF WARNING: do NOT extract this to a separate function without running benchmarks

        if (!checkNoChangesMode) {
          if (hooksInitPhaseCompleted) {
            var preOrderCheckHooks = tView.preOrderCheckHooks;

            if (preOrderCheckHooks !== null) {
              executeCheckHooks(lView, preOrderCheckHooks, null);
            }
          } else {
            var preOrderHooks = tView.preOrderHooks;

            if (preOrderHooks !== null) {
              executeInitAndCheckHooks(lView, preOrderHooks, 0
              /* OnInitHooksToBeRun */
              , null);
            }

            incrementInitPhaseFlags(lView, 0
            /* OnInitHooksToBeRun */
            );
          }
        } // First mark transplanted views that are declared in this lView as needing a refresh at their
        // insertion points. This is needed to avoid the situation where the template is defined in this
        // `LView` but its declaration appears after the insertion component.


        markTransplantedViewsForRefresh(lView);
        refreshEmbeddedViews(lView); // Content query results must be refreshed before content hooks are called.

        if (tView.contentQueries !== null) {
          refreshContentQueries(tView, lView);
        } // execute content hooks (AfterContentInit, AfterContentChecked)
        // PERF WARNING: do NOT extract this to a separate function without running benchmarks


        if (!checkNoChangesMode) {
          if (hooksInitPhaseCompleted) {
            var contentCheckHooks = tView.contentCheckHooks;

            if (contentCheckHooks !== null) {
              executeCheckHooks(lView, contentCheckHooks);
            }
          } else {
            var contentHooks = tView.contentHooks;

            if (contentHooks !== null) {
              executeInitAndCheckHooks(lView, contentHooks, 1
              /* AfterContentInitHooksToBeRun */
              );
            }

            incrementInitPhaseFlags(lView, 1
            /* AfterContentInitHooksToBeRun */
            );
          }
        }

        setHostBindingsByExecutingExpandoInstructions(tView, lView); // Refresh child component views.

        var components = tView.components;

        if (components !== null) {
          refreshChildComponents(lView, components);
        } // View queries must execute after refreshing child components because a template in this view
        // could be inserted in a child component. If the view query executes before child component
        // refresh, the template might not yet be inserted.


        var viewQuery = tView.viewQuery;

        if (viewQuery !== null) {
          executeViewQueryFn(2
          /* Update */
          , viewQuery, context);
        } // execute view hooks (AfterViewInit, AfterViewChecked)
        // PERF WARNING: do NOT extract this to a separate function without running benchmarks


        if (!checkNoChangesMode) {
          if (hooksInitPhaseCompleted) {
            var viewCheckHooks = tView.viewCheckHooks;

            if (viewCheckHooks !== null) {
              executeCheckHooks(lView, viewCheckHooks);
            }
          } else {
            var viewHooks = tView.viewHooks;

            if (viewHooks !== null) {
              executeInitAndCheckHooks(lView, viewHooks, 2
              /* AfterViewInitHooksToBeRun */
              );
            }

            incrementInitPhaseFlags(lView, 2
            /* AfterViewInitHooksToBeRun */
            );
          }
        }

        if (tView.firstUpdatePass === true) {
          // We need to make sure that we only flip the flag on successful `refreshView` only
          // Don't do this in `finally` block.
          // If we did this in `finally` block then an exception could block the execution of styling
          // instructions which in turn would be unable to insert themselves into the styling linked
          // list. The result of this would be that if the exception would not be throw on subsequent CD
          // the styling would be unable to process it data and reflect to the DOM.
          tView.firstUpdatePass = false;
        } // Do not reset the dirty state when running in check no changes mode. We don't want components
        // to behave differently depending on whether check no changes is enabled or not. For example:
        // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to
        // refresh a `NgClass` binding should work. If we would reset the dirty state in the check
        // no changes cycle, the component would be not be dirty for the next update pass. This would
        // be different in production mode where the component dirty state is not reset.


        if (!checkNoChangesMode) {
          lView[FLAGS] &= ~(64
          /* Dirty */
          | 8
          /* FirstLViewPass */
          );
        }

        if (lView[FLAGS] & 1024
        /* RefreshTransplantedView */
        ) {
            lView[FLAGS] &= ~1024
            /* RefreshTransplantedView */
            ;
            updateTransplantedViewCount(lView[PARENT], -1);
          }
      } finally {
        leaveView();
      }
    }

    function renderComponentOrTemplate(tView, lView, templateFn, context) {
      var rendererFactory = lView[RENDERER_FACTORY];
      var normalExecutionPath = !getCheckNoChangesMode();
      var creationModeIsActive = isCreationMode(lView);

      try {
        if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {
          rendererFactory.begin();
        }

        if (creationModeIsActive) {
          renderView(tView, lView, context);
        }

        refreshView(tView, lView, templateFn, context);
      } finally {
        if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {
          rendererFactory.end();
        }
      }
    }

    function executeTemplate(tView, lView, templateFn, rf, context) {
      var prevSelectedIndex = getSelectedIndex();

      try {
        setSelectedIndex(-1);

        if (rf & 2
        /* Update */
        && lView.length > HEADER_OFFSET) {
          // When we're updating, inherently select 0 so we don't
          // have to generate that instruction for most update blocks.
          selectIndexInternal(tView, lView, 0, getCheckNoChangesMode());
        }

        templateFn(rf, context);
      } finally {
        setSelectedIndex(prevSelectedIndex);
      }
    } //////////////////////////
    //// Element
    //////////////////////////


    function executeContentQueries(tView, tNode, lView) {
      if (isContentQueryHost(tNode)) {
        var start = tNode.directiveStart;
        var end = tNode.directiveEnd;

        for (var directiveIndex = start; directiveIndex < end; directiveIndex++) {
          var def = tView.data[directiveIndex];

          if (def.contentQueries) {
            def.contentQueries(1
            /* Create */
            , lView[directiveIndex], directiveIndex);
          }
        }
      }
    }
    /**
     * Creates directive instances.
     */


    function createDirectivesInstances(tView, lView, tNode) {
      if (!getBindingsEnabled()) return;
      instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));

      if ((tNode.flags & 128
      /* hasHostBindings */
      ) === 128
      /* hasHostBindings */
      ) {
          invokeDirectivesHostBindings(tView, lView, tNode);
        }
    }
    /**
     * Takes a list of local names and indices and pushes the resolved local variable values
     * to LView in the same order as they are loaded in the template with load().
     */


    function saveResolvedLocalsInData(viewData, tNode) {
      var localRefExtractor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getNativeByTNode;
      var localNames = tNode.localNames;

      if (localNames !== null) {
        var localIndex = tNode.index + 1;

        for (var i = 0; i < localNames.length; i += 2) {
          var index = localNames[i + 1];
          var value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];
          viewData[localIndex++] = value;
        }
      }
    }
    /**
     * Gets TView from a template function or creates a new TView
     * if it doesn't already exist.
     *
     * @param def ComponentDef
     * @returns TView
     */


    function getOrCreateTComponentView(def) {
      var tView = def.tView; // Create a TView if there isn't one, or recreate it if the first create pass didn't
      // complete successfuly since we can't know for sure whether it's in a usable shape.

      if (tView === null || tView.incompleteFirstPass) {
        return def.tView = createTView(1
        /* Component */
        , -1, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts);
      }

      return tView;
    }
    /**
     * Creates a TView instance
     *
     * @param viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic
     * @param templateFn Template function
     * @param decls The number of nodes, local refs, and pipes in this template
     * @param directives Registry of directives for this view
     * @param pipes Registry of pipes for this view
     * @param viewQuery View queries for this view
     * @param schemas Schemas for this view
     * @param consts Constants for this view
     */


    function createTView(type, viewIndex, templateFn, decls, vars, directives, pipes, viewQuery, schemas, consts) {
      ngDevMode && ngDevMode.tView++;
      var bindingStartIndex = HEADER_OFFSET + decls; // This length does not yet contain host bindings from child directives because at this point,
      // we don't know which directives are active on this template. As soon as a directive is matched
      // that has a host binding, we will update the blueprint with that def's hostVars count.

      var initialViewLength = bindingStartIndex + vars;
      var blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);
      var tView = blueprint[TVIEW] = ngDevMode ? new TViewConstructor(type, viewIndex, // id: number,
      blueprint, // blueprint: LView,
      templateFn, // template: ComponentTemplate<{}>|null,
      null, // queries: TQueries|null
      viewQuery, // viewQuery: ViewQueriesFunction<{}>|null,
      null, // node: TViewNode|TElementNode|null,
      cloneToTViewData(blueprint).fill(null, bindingStartIndex), // data: TData,
      bindingStartIndex, // bindingStartIndex: number,
      initialViewLength, // expandoStartIndex: number,
      null, // expandoInstructions: ExpandoInstructions|null,
      true, // firstCreatePass: boolean,
      true, // firstUpdatePass: boolean,
      false, // staticViewQueries: boolean,
      false, // staticContentQueries: boolean,
      null, // preOrderHooks: HookData|null,
      null, // preOrderCheckHooks: HookData|null,
      null, // contentHooks: HookData|null,
      null, // contentCheckHooks: HookData|null,
      null, // viewHooks: HookData|null,
      null, // viewCheckHooks: HookData|null,
      null, // destroyHooks: DestroyHookData|null,
      null, // cleanup: any[]|null,
      null, // contentQueries: number[]|null,
      null, // components: number[]|null,
      typeof directives === 'function' ? directives() : directives, // directiveRegistry: DirectiveDefList|null,
      typeof pipes === 'function' ? pipes() : pipes, // pipeRegistry: PipeDefList|null,
      null, // firstChild: TNode|null,
      schemas, // schemas: SchemaMetadata[]|null,
      consts, // consts: TConstants|null
      false, // incompleteFirstPass: boolean
      decls, // ngDevMode only: decls
      vars) : {
        type: type,
        id: viewIndex,
        blueprint: blueprint,
        template: templateFn,
        queries: null,
        viewQuery: viewQuery,
        node: null,
        data: blueprint.slice().fill(null, bindingStartIndex),
        bindingStartIndex: bindingStartIndex,
        expandoStartIndex: initialViewLength,
        expandoInstructions: null,
        firstCreatePass: true,
        firstUpdatePass: true,
        staticViewQueries: false,
        staticContentQueries: false,
        preOrderHooks: null,
        preOrderCheckHooks: null,
        contentHooks: null,
        contentCheckHooks: null,
        viewHooks: null,
        viewCheckHooks: null,
        destroyHooks: null,
        cleanup: null,
        contentQueries: null,
        components: null,
        directiveRegistry: typeof directives === 'function' ? directives() : directives,
        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,
        firstChild: null,
        schemas: schemas,
        consts: consts,
        incompleteFirstPass: false
      };

      if (ngDevMode) {
        // For performance reasons it is important that the tView retains the same shape during runtime.
        // (To make sure that all of the code is monomorphic.) For this reason we seal the object to
        // prevent class transitions.
        Object.seal(tView);
      }

      return tView;
    }

    function createViewBlueprint(bindingStartIndex, initialViewLength) {
      var blueprint = ngDevMode ? new LViewBlueprint() : [];

      for (var i = 0; i < initialViewLength; i++) {
        blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);
      }

      return blueprint;
    }

    function createError(text, token) {
      return new Error("Renderer: ".concat(text, " [").concat(stringifyForError(token), "]"));
    }

    function assertHostNodeExists(rElement, elementOrSelector) {
      if (!rElement) {
        if (typeof elementOrSelector === 'string') {
          throw createError('Host node with selector not found:', elementOrSelector);
        } else {
          throw createError('Host node is required:', elementOrSelector);
        }
      }
    }
    /**
     * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.
     *
     * @param rendererFactory Factory function to create renderer instance.
     * @param elementOrSelector Render element or CSS selector to locate the element.
     * @param encapsulation View Encapsulation defined for component that requests host element.
     */


    function locateHostElement(renderer, elementOrSelector, encapsulation) {
      if (isProceduralRenderer(renderer)) {
        // When using native Shadow DOM, do not clear host element to allow native slot projection
        var preserveContent = encapsulation === ViewEncapsulation$1.ShadowDom;
        return renderer.selectRootElement(elementOrSelector, preserveContent);
      }

      var rElement = typeof elementOrSelector === 'string' ? renderer.querySelector(elementOrSelector) : elementOrSelector;
      ngDevMode && assertHostNodeExists(rElement, elementOrSelector); // Always clear host element's content when Renderer3 is in use. For procedural renderer case we
      // make it depend on whether ShadowDom encapsulation is used (in which case the content should be
      // preserved to allow native slot projection). ShadowDom encapsulation requires procedural
      // renderer, and procedural renderer case is handled above.

      rElement.textContent = '';
      return rElement;
    }
    /**
     * Saves context for this cleanup function in LView.cleanupInstances.
     *
     * On the first template pass, saves in TView:
     * - Cleanup function
     * - Index of context we just saved in LView.cleanupInstances
     */


    function storeCleanupWithContext(tView, lView, context, cleanupFn) {
      var lCleanup = getLCleanup(lView);
      lCleanup.push(context);

      if (tView.firstCreatePass) {
        getTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);
      }
    }
    /**
     * Constructs a TNode object from the arguments.
     *
     * @param tView `TView` to which this `TNode` belongs (used only in `ngDevMode`)
     * @param type The type of the node
     * @param adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET
     * @param tagName The tag name of the node
     * @param attrs The attributes defined on this node
     * @param tViews Any TViews attached to this node
     * @returns the TNode object
     */


    function createTNode(tView, tParent, type, adjustedIndex, tagName, attrs) {
      ngDevMode && ngDevMode.tNode++;
      var injectorIndex = tParent ? tParent.injectorIndex : -1;
      var tNode = ngDevMode ? new TNodeDebug(tView, // tView_: TView
      type, // type: TNodeType
      adjustedIndex, // index: number
      injectorIndex, // injectorIndex: number
      -1, // directiveStart: number
      -1, // directiveEnd: number
      -1, // directiveStylingLast: number
      null, // propertyBindings: number[]|null
      0, // flags: TNodeFlags
      0, // providerIndexes: TNodeProviderIndexes
      tagName, // tagName: string|null
      attrs, // attrs: (string|AttributeMarker|(string|SelectorFlags)[])[]|null
      null, // mergedAttrs
      null, // localNames: (string|number)[]|null
      undefined, // initialInputs: (string[]|null)[]|null|undefined
      null, // inputs: PropertyAliases|null
      null, // outputs: PropertyAliases|null
      null, // tViews: ITView|ITView[]|null
      null, // next: ITNode|null
      null, // projectionNext: ITNode|null
      null, // child: ITNode|null
      tParent, // parent: TElementNode|TContainerNode|null
      null, // projection: number|(ITNode|RNode[])[]|null
      null, // styles: string|null
      null, // stylesWithoutHost: string|null
      undefined, // residualStyles: string|null
      null, // classes: string|null
      null, // classesWithoutHost: string|null
      undefined, // residualClasses: string|null
      0, // classBindings: TStylingRange;
      0) : {
        type: type,
        index: adjustedIndex,
        injectorIndex: injectorIndex,
        directiveStart: -1,
        directiveEnd: -1,
        directiveStylingLast: -1,
        propertyBindings: null,
        flags: 0,
        providerIndexes: 0,
        tagName: tagName,
        attrs: attrs,
        mergedAttrs: null,
        localNames: null,
        initialInputs: undefined,
        inputs: null,
        outputs: null,
        tViews: null,
        next: null,
        projectionNext: null,
        child: null,
        parent: tParent,
        projection: null,
        styles: null,
        stylesWithoutHost: null,
        residualStyles: undefined,
        classes: null,
        classesWithoutHost: null,
        residualClasses: undefined,
        classBindings: 0,
        styleBindings: 0
      };

      if (ngDevMode) {
        // For performance reasons it is important that the tNode retains the same shape during runtime.
        // (To make sure that all of the code is monomorphic.) For this reason we seal the object to
        // prevent class transitions.
        Object.seal(tNode);
      }

      return tNode;
    }

    function generatePropertyAliases(inputAliasMap, directiveDefIdx, propStore) {
      for (var publicName in inputAliasMap) {
        if (inputAliasMap.hasOwnProperty(publicName)) {
          propStore = propStore === null ? {} : propStore;
          var internalName = inputAliasMap[publicName];

          if (propStore.hasOwnProperty(publicName)) {
            propStore[publicName].push(directiveDefIdx, internalName);
          } else {
            propStore[publicName] = [directiveDefIdx, internalName];
          }
        }
      }

      return propStore;
    }
    /**
     * Initializes data structures required to work with directive outputs and outputs.
     * Initialization is done for all directives matched on a given TNode.
     */


    function initializeInputAndOutputAliases(tView, tNode) {
      ngDevMode && assertFirstCreatePass(tView);
      var start = tNode.directiveStart;
      var end = tNode.directiveEnd;
      var defs = tView.data;
      var tNodeAttrs = tNode.attrs;
      var inputsFromAttrs = ngDevMode ? new TNodeInitialInputs() : [];
      var inputsStore = null;
      var outputsStore = null;

      for (var i = start; i < end; i++) {
        var _directiveDef3 = defs[i];
        var directiveInputs = _directiveDef3.inputs; // Do not use unbound attributes as inputs to structural directives, since structural
        // directive inputs can only be set using microsyntax (e.g. `<div *dir="exp">`).
        // TODO(FW-1930): microsyntax expressions may also contain unbound/static attributes, which
        // should be set for inline templates.

        var initialInputs = tNodeAttrs !== null && !isInlineTemplate(tNode) ? generateInitialInputs(directiveInputs, tNodeAttrs) : null;
        inputsFromAttrs.push(initialInputs);
        inputsStore = generatePropertyAliases(directiveInputs, i, inputsStore);
        outputsStore = generatePropertyAliases(_directiveDef3.outputs, i, outputsStore);
      }

      if (inputsStore !== null) {
        if (inputsStore.hasOwnProperty('class')) {
          tNode.flags |= 16
          /* hasClassInput */
          ;
        }

        if (inputsStore.hasOwnProperty('style')) {
          tNode.flags |= 32
          /* hasStyleInput */
          ;
        }
      }

      tNode.initialInputs = inputsFromAttrs;
      tNode.inputs = inputsStore;
      tNode.outputs = outputsStore;
    }
    /**
     * Mapping between attributes names that don't correspond to their element property names.
     *
     * Performance note: this function is written as a series of if checks (instead of, say, a property
     * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of
     * mapping property names. Do NOT change without benchmarking.
     *
     * Note: this mapping has to be kept in sync with the equally named mapping in the template
     * type-checking machinery of ngtsc.
     */


    function mapPropName(name) {
      if (name === 'class') return 'className';
      if (name === 'for') return 'htmlFor';
      if (name === 'formaction') return 'formAction';
      if (name === 'innerHtml') return 'innerHTML';
      if (name === 'readonly') return 'readOnly';
      if (name === 'tabindex') return 'tabIndex';
      return name;
    }

    function elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {
      ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
      var element = getNativeByTNode(tNode, lView);
      var inputData = tNode.inputs;
      var dataValue;

      if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {
        setInputsForProperty(tView, lView, dataValue, propName, value);
        if (isComponentHost(tNode)) markDirtyIfOnPush(lView, tNode.index);

        if (ngDevMode) {
          setNgReflectProperties(lView, element, tNode.type, dataValue, value);
        }
      } else if (tNode.type === 3
      /* Element */
      ) {
          propName = mapPropName(propName);

          if (ngDevMode) {
            validateAgainstEventProperties(propName);

            if (!validateProperty(tView, element, propName, tNode)) {
              // Return here since we only log warnings for unknown properties.
              logUnknownPropertyError(propName, tNode);
              return;
            }

            ngDevMode.rendererSetProperty++;
          } // It is assumed that the sanitizer is only added when the compiler determines that the
          // property is risky, so sanitization can be done without further checks.


          value = sanitizer != null ? sanitizer(value, tNode.tagName || '', propName) : value;

          if (isProceduralRenderer(renderer)) {
            renderer.setProperty(element, propName, value);
          } else if (!isAnimationProp(propName)) {
            element.setProperty ? element.setProperty(propName, value) : element[propName] = value;
          }
        } else if (tNode.type === 0
      /* Container */
      || tNode.type === 4
      /* ElementContainer */
      ) {
          // If the node is a container and the property didn't
          // match any of the inputs or schemas we should throw.
          if (ngDevMode && !matchingSchemas(tView, tNode.tagName)) {
            logUnknownPropertyError(propName, tNode);
          }
        }
    }
    /** If node is an OnPush component, marks its LView dirty. */


    function markDirtyIfOnPush(lView, viewIndex) {
      ngDevMode && assertLView(lView);
      var childComponentLView = getComponentLViewByIndex(viewIndex, lView);

      if (!(childComponentLView[FLAGS] & 16
      /* CheckAlways */
      )) {
        childComponentLView[FLAGS] |= 64
        /* Dirty */
        ;
      }
    }

    function setNgReflectProperty(lView, element, type, attrName, value) {
      var renderer = lView[RENDERER];
      attrName = normalizeDebugBindingName(attrName);
      var debugValue = normalizeDebugBindingValue(value);

      if (type === 3
      /* Element */
      ) {
          if (value == null) {
            isProceduralRenderer(renderer) ? renderer.removeAttribute(element, attrName) : element.removeAttribute(attrName);
          } else {
            isProceduralRenderer(renderer) ? renderer.setAttribute(element, attrName, debugValue) : element.setAttribute(attrName, debugValue);
          }
        } else {
        var textContent = "bindings=".concat(JSON.stringify(_defineProperty({}, attrName, debugValue), null, 2));

        if (isProceduralRenderer(renderer)) {
          renderer.setValue(element, textContent);
        } else {
          element.textContent = textContent;
        }
      }
    }

    function setNgReflectProperties(lView, element, type, dataValue, value) {
      if (type === 3
      /* Element */
      || type === 0
      /* Container */
      ) {
          /**
           * dataValue is an array containing runtime input or output names for the directives:
           * i+0: directive instance index
           * i+1: privateName
           *
           * e.g. [0, 'change', 'change-minified']
           * we want to set the reflected property with the privateName: dataValue[i+1]
           */
          for (var i = 0; i < dataValue.length; i += 2) {
            setNgReflectProperty(lView, element, type, dataValue[i + 1], value);
          }
        }
    }

    function validateProperty(tView, element, propName, tNode) {
      // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT
      // mode where this check happens at compile time. In JIT mode, `schemas` is always present and
      // defined as an array (as an empty array in case `schemas` field is not defined) and we should
      // execute the check below.
      if (tView.schemas === null) return true; // The property is considered valid if the element matches the schema, it exists on the element
      // or it is synthetic, and we are in a browser context (web worker nodes should be skipped).

      if (matchingSchemas(tView, tNode.tagName) || propName in element || isAnimationProp(propName)) {
        return true;
      } // Note: `typeof Node` returns 'function' in most browsers, but on IE it is 'object' so we
      // need to account for both here, while being careful for `typeof null` also returning 'object'.


      return typeof Node === 'undefined' || Node === null || !(element instanceof Node);
    }

    function matchingSchemas(tView, tagName) {
      var schemas = tView.schemas;

      if (schemas !== null) {
        for (var i = 0; i < schemas.length; i++) {
          var schema = schemas[i];

          if (schema === NO_ERRORS_SCHEMA || schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {
            return true;
          }
        }
      }

      return false;
    }
    /**
     * Logs an error that a property is not supported on an element.
     * @param propName Name of the invalid property.
     * @param tNode Node on which we encountered the property.
     */


    function logUnknownPropertyError(propName, tNode) {
      console.error("Can't bind to '".concat(propName, "' since it isn't a known property of '").concat(tNode.tagName, "'."));
    }
    /**
     * Instantiate a root component.
     */


    function instantiateRootComponent(tView, lView, def) {
      var rootTNode = getPreviousOrParentTNode();

      if (tView.firstCreatePass) {
        if (def.providersResolver) def.providersResolver(def);
        generateExpandoInstructionBlock(tView, rootTNode, 1);
        baseResolveDirective(tView, lView, def);
      }

      var directive = getNodeInjectable(lView, tView, lView.length - 1, rootTNode);
      attachPatchData(directive, lView);

      var _native7 = getNativeByTNode(rootTNode, lView);

      if (_native7) {
        attachPatchData(_native7, lView);
      }

      return directive;
    }
    /**
     * Resolve the matched directives on a node.
     */


    function resolveDirectives(tView, lView, tNode, localRefs) {
      // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in
      // tsickle.
      ngDevMode && assertFirstCreatePass(tView);
      var hasDirectives = false;

      if (getBindingsEnabled()) {
        var directiveDefs = findDirectiveDefMatches(tView, lView, tNode);
        var exportsMap = localRefs === null ? null : {
          '': -1
        };

        if (directiveDefs !== null) {
          var totalDirectiveHostVars = 0;
          hasDirectives = true;
          initTNodeFlags(tNode, tView.data.length, directiveDefs.length); // When the same token is provided by several directives on the same node, some rules apply in
          // the viewEngine:
          // - viewProviders have priority over providers
          // - the last directive in NgModule.declarations has priority over the previous one
          // So to match these rules, the order in which providers are added in the arrays is very
          // important.

          for (var i = 0; i < directiveDefs.length; i++) {
            var def = directiveDefs[i];
            if (def.providersResolver) def.providersResolver(def);
          }

          generateExpandoInstructionBlock(tView, tNode, directiveDefs.length);
          var preOrderHooksFound = false;
          var preOrderCheckHooksFound = false;

          for (var _i5 = 0; _i5 < directiveDefs.length; _i5++) {
            var _def2 = directiveDefs[_i5]; // Merge the attrs in the order of matches. This assumes that the first directive is the
            // component itself, so that the component has the least priority.

            tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, _def2.hostAttrs);
            baseResolveDirective(tView, lView, _def2);
            saveNameToExportMap(tView.data.length - 1, _def2, exportsMap);
            if (_def2.contentQueries !== null) tNode.flags |= 8
            /* hasContentQuery */
            ;
            if (_def2.hostBindings !== null || _def2.hostAttrs !== null || _def2.hostVars !== 0) tNode.flags |= 128
            /* hasHostBindings */
            ;
            var lifeCycleHooks = _def2.type.prototype; // Only push a node index into the preOrderHooks array if this is the first
            // pre-order hook found on this node.

            if (!preOrderHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {
              // We will push the actual hook function into this array later during dir instantiation.
              // We cannot do it now because we must ensure hooks are registered in the same
              // order that directives are created (i.e. injection order).
              (tView.preOrderHooks || (tView.preOrderHooks = [])).push(tNode.index - HEADER_OFFSET);
              preOrderHooksFound = true;
            }

            if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {
              (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(tNode.index - HEADER_OFFSET);
              preOrderCheckHooksFound = true;
            }

            addHostBindingsToExpandoInstructions(tView, _def2);
            totalDirectiveHostVars += _def2.hostVars;
          }

          initializeInputAndOutputAliases(tView, tNode);
          growHostVarsSpace(tView, lView, totalDirectiveHostVars);
        }

        if (exportsMap) cacheMatchingLocalNames(tNode, localRefs, exportsMap);
      } // Merge the template attrs last so that they have the highest priority.


      tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);
      return hasDirectives;
    }
    /**
     * Add `hostBindings` to the `TView.expandoInstructions`.
     *
     * @param tView `TView` to which the `hostBindings` should be added.
     * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.
     */


    function addHostBindingsToExpandoInstructions(tView, def) {
      ngDevMode && assertFirstCreatePass(tView);
      var expando = tView.expandoInstructions; // TODO(misko): PERF we are adding `hostBindings` even if there is nothing to add! This is
      // suboptimal for performance. `def.hostBindings` may be null,
      // but we still need to push null to the array as a placeholder
      // to ensure the directive counter is incremented (so host
      // binding functions always line up with the corrective directive).
      // This is suboptimal for performance. See `currentDirectiveIndex`
      //  comment in `setHostBindingsByExecutingExpandoInstructions` for more
      // details.  expando.push(def.hostBindings);

      expando.push(def.hostBindings);
      var hostVars = def.hostVars;

      if (hostVars !== 0) {
        expando.push(def.hostVars);
      }
    }
    /**
     * Grow the `LView`, blueprint and `TView.data` to accommodate the `hostBindings`.
     *
     * To support locality we don't know ahead of time how many `hostVars` of the containing directives
     * we need to allocate. For this reason we allow growing these data structures as we discover more
     * directives to accommodate them.
     *
     * @param tView `TView` which needs to be grown.
     * @param lView `LView` which needs to be grown.
     * @param count Size by which we need to grow the data structures.
     */


    function growHostVarsSpace(tView, lView, count) {
      ngDevMode && assertFirstCreatePass(tView);
      ngDevMode && assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');

      for (var i = 0; i < count; i++) {
        lView.push(NO_CHANGE);
        tView.blueprint.push(NO_CHANGE);
        tView.data.push(null);
      }
    }
    /**
     * Instantiate all the directives that were previously resolved on the current node.
     */


    function instantiateAllDirectives(tView, lView, tNode, _native8) {
      var start = tNode.directiveStart;
      var end = tNode.directiveEnd;

      if (!tView.firstCreatePass) {
        getOrCreateNodeInjectorForNode(tNode, lView);
      }

      attachPatchData(_native8, lView);
      var initialInputs = tNode.initialInputs;

      for (var i = start; i < end; i++) {
        var def = tView.data[i];
        var isComponent = isComponentDef(def);

        if (isComponent) {
          ngDevMode && assertNodeOfPossibleTypes(tNode, [3
          /* Element */
          ]);
          addComponentLogic(lView, tNode, def);
        }

        var directive = getNodeInjectable(lView, tView, i, tNode);
        attachPatchData(directive, lView);

        if (initialInputs !== null) {
          setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);
        }

        if (isComponent) {
          var componentView = getComponentLViewByIndex(tNode.index, lView);
          componentView[CONTEXT] = directive;
        }
      }
    }

    function invokeDirectivesHostBindings(tView, lView, tNode) {
      var start = tNode.directiveStart;
      var end = tNode.directiveEnd;
      var expando = tView.expandoInstructions;
      var firstCreatePass = tView.firstCreatePass;
      var elementIndex = tNode.index - HEADER_OFFSET;
      var currentDirectiveIndex = getCurrentDirectiveIndex();

      try {
        setSelectedIndex(elementIndex);

        for (var dirIndex = start; dirIndex < end; dirIndex++) {
          var def = tView.data[dirIndex];
          var directive = lView[dirIndex];
          setCurrentDirectiveIndex(dirIndex);

          if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {
            invokeHostBindingsInCreationMode(def, directive);
          } else if (firstCreatePass) {
            expando.push(null);
          }
        }
      } finally {
        setSelectedIndex(-1);
        setCurrentDirectiveIndex(currentDirectiveIndex);
      }
    }
    /**
     * Invoke the host bindings in creation mode.
     *
     * @param def `DirectiveDef` which may contain the `hostBindings` function.
     * @param directive Instance of directive.
     */


    function invokeHostBindingsInCreationMode(def, directive) {
      if (def.hostBindings !== null) {
        def.hostBindings(1
        /* Create */
        , directive);
      }
    }
    /**
     * Generates a new block in TView.expandoInstructions for this node.
     *
     * Each expando block starts with the element index (turned negative so we can distinguish
     * it from the hostVar count) and the directive count. See more in VIEW_DATA.md.
     */


    function generateExpandoInstructionBlock(tView, tNode, directiveCount) {
      ngDevMode && assertEqual(tView.firstCreatePass, true, 'Expando block should only be generated on first create pass.'); // Important: In JS `-x` and `0-x` is not the same! If `x===0` then `-x` will produce `-0` which
      // requires non standard math arithmetic and it can prevent VM optimizations.
      // `0-0` will always produce `0` and will not cause a potential deoptimization in VM.

      var elementIndex = HEADER_OFFSET - tNode.index;
      var providerStartIndex = tNode.providerIndexes & 1048575
      /* ProvidersStartIndexMask */
      ;
      var providerCount = tView.data.length - providerStartIndex;
      (tView.expandoInstructions || (tView.expandoInstructions = [])).push(elementIndex, providerCount, directiveCount);
    }
    /**
     * Matches the current node against all available selectors.
     * If a component is matched (at most one), it is returned in first position in the array.
     */


    function findDirectiveDefMatches(tView, viewData, tNode) {
      ngDevMode && assertFirstCreatePass(tView);
      ngDevMode && assertNodeOfPossibleTypes(tNode, [3
      /* Element */
      , 4
      /* ElementContainer */
      , 0
      /* Container */
      ]);
      var registry = tView.directiveRegistry;
      var matches = null;

      if (registry) {
        for (var i = 0; i < registry.length; i++) {
          var def = registry[i];

          if (isNodeMatchingSelectorList(tNode, def.selectors,
          /* isProjectionMode */
          false)) {
            matches || (matches = ngDevMode ? new MatchesArray() : []);
            diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, viewData), tView, def.type);

            if (isComponentDef(def)) {
              ngDevMode && assertNodeOfPossibleTypes(tNode, [3
              /* Element */
              ], "\"".concat(tNode.tagName, "\" tags cannot be used as component hosts. ") + "Please use a different tag to activate the ".concat(stringify(def.type), " component."));
              if (tNode.flags & 2
              /* isComponentHost */
              ) throwMultipleComponentError(tNode);
              markAsComponentHost(tView, tNode); // The component is always stored first with directives after.

              matches.unshift(def);
            } else {
              matches.push(def);
            }
          }
        }
      }

      return matches;
    }
    /**
     * Marks a given TNode as a component's host. This consists of:
     * - setting appropriate TNode flags;
     * - storing index of component's host element so it will be queued for view refresh during CD.
     */


    function markAsComponentHost(tView, hostTNode) {
      ngDevMode && assertFirstCreatePass(tView);
      hostTNode.flags |= 2
      /* isComponentHost */
      ;
      (tView.components || (tView.components = ngDevMode ? new TViewComponents() : [])).push(hostTNode.index);
    }
    /** Caches local names and their matching directive indices for query and template lookups. */


    function cacheMatchingLocalNames(tNode, localRefs, exportsMap) {
      if (localRefs) {
        var localNames = tNode.localNames = ngDevMode ? new TNodeLocalNames() : []; // Local names must be stored in tNode in the same order that localRefs are defined
        // in the template to ensure the data is loaded in the same slots as their refs
        // in the template (for template queries).

        for (var i = 0; i < localRefs.length; i += 2) {
          var index = exportsMap[localRefs[i + 1]];
          if (index == null) throw new Error("Export of name '".concat(localRefs[i + 1], "' not found!"));
          localNames.push(localRefs[i], index);
        }
      }
    }
    /**
     * Builds up an export map as directives are created, so local refs can be quickly mapped
     * to their directive instances.
     */


    function saveNameToExportMap(index, def, exportsMap) {
      if (exportsMap) {
        if (def.exportAs) {
          for (var i = 0; i < def.exportAs.length; i++) {
            exportsMap[def.exportAs[i]] = index;
          }
        }

        if (isComponentDef(def)) exportsMap[''] = index;
      }
    }
    /**
     * Initializes the flags on the current node, setting all indices to the initial index,
     * the directive count to 0, and adding the isComponent flag.
     * @param index the initial index
     */


    function initTNodeFlags(tNode, index, numberOfDirectives) {
      ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');
      tNode.flags |= 1
      /* isDirectiveHost */
      ; // When the first directive is created on a node, save the index

      tNode.directiveStart = index;
      tNode.directiveEnd = index + numberOfDirectives;
      tNode.providerIndexes = index;
    }

    function baseResolveDirective(tView, viewData, def) {
      tView.data.push(def);
      var directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));
      var nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);
      tView.blueprint.push(nodeInjectorFactory);
      viewData.push(nodeInjectorFactory);
    }

    function addComponentLogic(lView, hostTNode, def) {
      var _native9 = getNativeByTNode(hostTNode, lView);

      var tView = getOrCreateTComponentView(def); // Only component views should be added to the view tree directly. Embedded views are
      // accessed through their containers because they may be removed / re-added later.

      var rendererFactory = lView[RENDERER_FACTORY];
      var componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 64
      /* Dirty */
      : 16
      /* CheckAlways */
      , _native9, hostTNode, rendererFactory, rendererFactory.createRenderer(_native9, def))); // Component view will always be created before any injected LContainers,
      // so this is a regular element, wrap it with the component view

      lView[hostTNode.index] = componentView;
    }

    function elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {
      if (ngDevMode) {
        assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
        validateAgainstEventAttributes(name);
        assertNodeNotOfTypes(tNode, [0
        /* Container */
        , 4
        /* ElementContainer */
        ], "Attempted to set attribute `".concat(name, "` on a container node. ") + "Host bindings are not valid on ng-container or ng-template.");
      }

      var element = getNativeByTNode(tNode, lView);
      var renderer = lView[RENDERER];

      if (value == null) {
        ngDevMode && ngDevMode.rendererRemoveAttribute++;
        isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name, namespace) : element.removeAttribute(name);
      } else {
        ngDevMode && ngDevMode.rendererSetAttribute++;
        var strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tNode.tagName || '', name);

        if (isProceduralRenderer(renderer)) {
          renderer.setAttribute(element, name, strValue, namespace);
        } else {
          namespace ? element.setAttributeNS(namespace, name, strValue) : element.setAttribute(name, strValue);
        }
      }
    }
    /**
     * Sets initial input properties on directive instances from attribute data
     *
     * @param lView Current LView that is being processed.
     * @param directiveIndex Index of the directive in directives array
     * @param instance Instance of the directive on which to set the initial inputs
     * @param def The directive def that contains the list of inputs
     * @param tNode The static data for this node
     */


    function setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {
      var initialInputs = initialInputData[directiveIndex];

      if (initialInputs !== null) {
        var setInput = def.setInput;

        for (var i = 0; i < initialInputs.length;) {
          var publicName = initialInputs[i++];
          var privateName = initialInputs[i++];
          var value = initialInputs[i++];

          if (setInput !== null) {
            def.setInput(instance, value, publicName, privateName);
          } else {
            instance[privateName] = value;
          }

          if (ngDevMode) {
            var nativeElement = getNativeByTNode(tNode, lView);
            setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);
          }
        }
      }
    }
    /**
     * Generates initialInputData for a node and stores it in the template's static storage
     * so subsequent template invocations don't have to recalculate it.
     *
     * initialInputData is an array containing values that need to be set as input properties
     * for directives on this node, but only once on creation. We need this array to support
     * the case where you set an @Input property of a directive using attribute-like syntax.
     * e.g. if you have a `name` @Input, you can set it once like this:
     *
     * <my-component name="Bess"></my-component>
     *
     * @param inputs The list of inputs from the directive def
     * @param attrs The static attrs on this node
     */


    function generateInitialInputs(inputs, attrs) {
      var inputsToStore = null;
      var i = 0;

      while (i < attrs.length) {
        var attrName = attrs[i];

        if (attrName === 0
        /* NamespaceURI */
        ) {
            // We do not allow inputs on namespaced attributes.
            i += 4;
            continue;
          } else if (attrName === 5
        /* ProjectAs */
        ) {
            // Skip over the `ngProjectAs` value.
            i += 2;
            continue;
          } // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.


        if (typeof attrName === 'number') break;

        if (inputs.hasOwnProperty(attrName)) {
          if (inputsToStore === null) inputsToStore = [];
          inputsToStore.push(attrName, inputs[attrName], attrs[i + 1]);
        }

        i += 2;
      }

      return inputsToStore;
    } //////////////////////////
    //// ViewContainer & View
    //////////////////////////
    // Not sure why I need to do `any` here but TS complains later.


    var LContainerArray = (typeof ngDevMode === 'undefined' || ngDevMode) && /*@__PURE__*/initNgDevMode() && /*@__PURE__*/createNamedArrayType('LContainer');
    /**
     * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.
     *
     * @param hostNative The host element for the LContainer
     * @param hostTNode The host TNode for the LContainer
     * @param currentView The parent view of the LContainer
     * @param native The native comment element
     * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case
     * @returns LContainer
     */

    function createLContainer(hostNative, currentView, _native10, tNode) {
      ngDevMode && assertLView(currentView);
      ngDevMode && !isProceduralRenderer(currentView[RENDERER]) && assertDomNode(_native10); // https://jsperf.com/array-literal-vs-new-array-really

      var lContainer = new (ngDevMode ? LContainerArray : Array)(hostNative, // host native
      true, // Boolean `true` in this position signifies that this is an `LContainer`
      false, // has transplanted views
      currentView, // parent
      null, // next
      0, // transplanted views to refresh count
      tNode, // t_host
      _native10, // native,
      null, // view refs
      null);
      ngDevMode && assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, 'Should allocate correct number of slots for LContainer header.');
      ngDevMode && attachLContainerDebug(lContainer);
      return lContainer;
    }
    /**
     * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes
     * them by executing an associated template function.
     */


    function refreshEmbeddedViews(lView) {
      for (var lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
        for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
          var embeddedLView = lContainer[i];
          var embeddedTView = embeddedLView[TVIEW];
          ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');

          if (viewAttachedToChangeDetector(embeddedLView)) {
            refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);
          }
        }
      }
    }
    /**
     * Mark transplanted views as needing to be refreshed at their insertion points.
     *
     * @param lView The `LView` that may have transplanted views.
     */


    function markTransplantedViewsForRefresh(lView) {
      for (var lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
        if (!lContainer[HAS_TRANSPLANTED_VIEWS]) continue;
        var movedViews = lContainer[MOVED_VIEWS];
        ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');

        for (var i = 0; i < movedViews.length; i++) {
          var movedLView = movedViews[i];
          var insertionLContainer = movedLView[PARENT];
          ngDevMode && assertLContainer(insertionLContainer); // We don't want to increment the counter if the moved LView was already marked for
          // refresh.

          if ((movedLView[FLAGS] & 1024
          /* RefreshTransplantedView */
          ) === 0) {
            updateTransplantedViewCount(insertionLContainer, 1);
          } // Note, it is possible that the `movedViews` is tracking views that are transplanted *and*
          // those that aren't (declaration component === insertion component). In the latter case,
          // it's fine to add the flag, as we will clear it immediately in
          // `refreshEmbeddedViews` for the view currently being refreshed.


          movedLView[FLAGS] |= 1024
          /* RefreshTransplantedView */
          ;
        }
      }
    } /////////////

    /**
     * Refreshes components by entering the component view and processing its bindings, queries, etc.
     *
     * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)
     */


    function refreshComponent(hostLView, componentHostIdx) {
      ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');
      var componentView = getComponentLViewByIndex(componentHostIdx, hostLView); // Only attached components that are CheckAlways or OnPush and dirty should be refreshed

      if (viewAttachedToChangeDetector(componentView)) {
        var tView = componentView[TVIEW];

        if (componentView[FLAGS] & (16
        /* CheckAlways */
        | 64
        /* Dirty */
        )) {
          refreshView(tView, componentView, tView.template, componentView[CONTEXT]);
        } else if (componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
          // Only attached components that are CheckAlways or OnPush and dirty should be refreshed
          refreshContainsDirtyView(componentView);
        }
      }
    }
    /**
     * Refreshes all transplanted views marked with `LViewFlags.RefreshTransplantedView` that are
     * children or descendants of the given lView.
     *
     * @param lView The lView which contains descendant transplanted views that need to be refreshed.
     */


    function refreshContainsDirtyView(lView) {
      for (var lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
        for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
          var embeddedLView = lContainer[i];

          if (embeddedLView[FLAGS] & 1024
          /* RefreshTransplantedView */
          ) {
              var embeddedTView = embeddedLView[TVIEW];
              ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');
              refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);
            } else if (embeddedLView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
            refreshContainsDirtyView(embeddedLView);
          }
        }
      }

      var tView = lView[TVIEW]; // Refresh child component views.

      var components = tView.components;

      if (components !== null) {
        for (var _i6 = 0; _i6 < components.length; _i6++) {
          var componentView = getComponentLViewByIndex(components[_i6], lView); // Only attached components that are CheckAlways or OnPush and dirty should be refreshed

          if (viewAttachedToChangeDetector(componentView) && componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
            refreshContainsDirtyView(componentView);
          }
        }
      }
    }

    function renderComponent(hostLView, componentHostIdx) {
      ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');
      var componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
      var componentTView = componentView[TVIEW];
      syncViewWithBlueprint(componentTView, componentView);
      renderView(componentTView, componentView, componentView[CONTEXT]);
    }
    /**
     * Syncs an LView instance with its blueprint if they have gotten out of sync.
     *
     * Typically, blueprints and their view instances should always be in sync, so the loop here
     * will be skipped. However, consider this case of two components side-by-side:
     *
     * App template:
     * ```
     * <comp></comp>
     * <comp></comp>
     * ```
     *
     * The following will happen:
     * 1. App template begins processing.
     * 2. First <comp> is matched as a component and its LView is created.
     * 3. Second <comp> is matched as a component and its LView is created.
     * 4. App template completes processing, so it's time to check child templates.
     * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.
     * 6. Second <comp> template is checked. Its blueprint has been updated by the first
     * <comp> template, but its LView was created before this update, so it is out of sync.
     *
     * Note that embedded views inside ngFor loops will never be out of sync because these views
     * are processed as soon as they are created.
     *
     * @param tView The `TView` that contains the blueprint for syncing
     * @param lView The view to sync
     */


    function syncViewWithBlueprint(tView, lView) {
      for (var i = lView.length; i < tView.blueprint.length; i++) {
        lView.push(tView.blueprint[i]);
      }
    }
    /**
     * Adds LView or LContainer to the end of the current view tree.
     *
     * This structure will be used to traverse through nested views to remove listeners
     * and call onDestroy callbacks.
     *
     * @param lView The view where LView or LContainer should be added
     * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header
     * @param lViewOrLContainer The LView or LContainer to add to the view tree
     * @returns The state passed in
     */


    function addToViewTree(lView, lViewOrLContainer) {
      // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer
      // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out
      // of order, the change detection will run out of order, as the act of retrieving the the
      // LContainer from the RNode is what adds it to the queue.
      if (lView[CHILD_HEAD]) {
        lView[CHILD_TAIL][NEXT] = lViewOrLContainer;
      } else {
        lView[CHILD_HEAD] = lViewOrLContainer;
      }

      lView[CHILD_TAIL] = lViewOrLContainer;
      return lViewOrLContainer;
    } ///////////////////////////////
    //// Change detection
    ///////////////////////////////

    /**
     * Marks current view and all ancestors dirty.
     *
     * Returns the root view because it is found as a byproduct of marking the view tree
     * dirty, and can be used by methods that consume markViewDirty() to easily schedule
     * change detection. Otherwise, such methods would need to traverse up the view tree
     * an additional time to get the root view and schedule a tick on it.
     *
     * @param lView The starting LView to mark dirty
     * @returns the root LView
     */


    function markViewDirty(lView) {
      while (lView) {
        lView[FLAGS] |= 64
        /* Dirty */
        ;
        var parent = getLViewParent(lView); // Stop traversing up as soon as you find a root view that wasn't attached to any container

        if (isRootView(lView) && !parent) {
          return lView;
        } // continue otherwise


        lView = parent;
      }

      return null;
    }
    /**
     * Used to schedule change detection on the whole application.
     *
     * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.
     * It is usually called indirectly by calling `markDirty` when the view needs to be
     * re-rendered.
     *
     * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple
     * `scheduleTick` requests. The scheduling function can be overridden in
     * `renderComponent`'s `scheduler` option.
     */


    function scheduleTick(rootContext, flags) {
      var nothingScheduled = rootContext.flags === 0
      /* Empty */
      ;
      rootContext.flags |= flags;

      if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {
        var res;
        rootContext.clean = new Promise(function (r) {
          return res = r;
        });
        rootContext.scheduler(function () {
          if (rootContext.flags & 1
          /* DetectChanges */
          ) {
              rootContext.flags &= ~1
              /* DetectChanges */
              ;
              tickRootContext(rootContext);
            }

          if (rootContext.flags & 2
          /* FlushPlayers */
          ) {
              rootContext.flags &= ~2
              /* FlushPlayers */
              ;
              var playerHandler = rootContext.playerHandler;

              if (playerHandler) {
                playerHandler.flushPlayers();
              }
            }

          rootContext.clean = _CLEAN_PROMISE;
          res(null);
        });
      }
    }

    function tickRootContext(rootContext) {
      for (var i = 0; i < rootContext.components.length; i++) {
        var rootComponent = rootContext.components[i];
        var lView = readPatchedLView(rootComponent);
        var tView = lView[TVIEW];
        renderComponentOrTemplate(tView, lView, tView.template, rootComponent);
      }
    }

    function detectChangesInternal(tView, lView, context) {
      var rendererFactory = lView[RENDERER_FACTORY];
      if (rendererFactory.begin) rendererFactory.begin();

      try {
        refreshView(tView, lView, tView.template, context);
      } catch (error) {
        handleError(lView, error);
        throw error;
      } finally {
        if (rendererFactory.end) rendererFactory.end();
      }
    }
    /**
     * Synchronously perform change detection on a root view and its components.
     *
     * @param lView The view which the change detection should be performed on.
     */


    function detectChangesInRootView(lView) {
      tickRootContext(lView[CONTEXT]);
    }

    function checkNoChangesInternal(tView, view, context) {
      setCheckNoChangesMode(true);

      try {
        detectChangesInternal(tView, view, context);
      } finally {
        setCheckNoChangesMode(false);
      }
    }
    /**
     * Checks the change detector on a root view and its components, and throws if any changes are
     * detected.
     *
     * This is used in development mode to verify that running change detection doesn't
     * introduce other changes.
     *
     * @param lView The view which the change detection should be checked on.
     */


    function checkNoChangesInRootView(lView) {
      setCheckNoChangesMode(true);

      try {
        detectChangesInRootView(lView);
      } finally {
        setCheckNoChangesMode(false);
      }
    }

    function executeViewQueryFn(flags, viewQueryFn, component) {
      ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');
      setCurrentQueryIndex(0);
      viewQueryFn(flags, component);
    } ///////////////////////////////
    //// Bindings & interpolations
    ///////////////////////////////

    /**
     * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.
     *
     * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:
     * - a bound property name;
     * - a static parts of interpolated strings;
     *
     * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a
     * property binding metadata will be stored in `TView.data` at the same index as a bound value in
     * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the
     * following format:
     * - `propertyName` for bound properties;
     * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for
     * interpolated properties.
     *
     * @param tData `TData` where meta-data will be saved;
     * @param tNode `TNode` that is a target of the binding;
     * @param propertyName bound property name;
     * @param bindingIndex binding index in `LView`
     * @param interpolationParts static interpolation parts (for property interpolations)
     */


    function storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex) {
      // Binding meta-data are stored only the first time a given property instruction is processed.
      // Since we don't have a concept of the "first update pass" we need to check for presence of the
      // binding meta-data to decide if one should be stored (or if was stored already).
      if (tData[bindingIndex] === null) {
        if (tNode.inputs == null || !tNode.inputs[propertyName]) {
          var propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);
          propBindingIdxs.push(bindingIndex);
          var bindingMetadata = propertyName;

          for (var _len7 = arguments.length, interpolationParts = new Array(_len7 > 4 ? _len7 - 4 : 0), _key7 = 4; _key7 < _len7; _key7++) {
            interpolationParts[_key7 - 4] = arguments[_key7];
          }

          if (interpolationParts.length > 0) {
            bindingMetadata += INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);
          }

          tData[bindingIndex] = bindingMetadata;
        }
      }
    }

    var CLEAN_PROMISE = _CLEAN_PROMISE;

    function getLCleanup(view) {
      // top level variables should not be exported for performance reasons (PERF_NOTES.md)
      return view[CLEANUP] || (view[CLEANUP] = ngDevMode ? new LCleanup() : []);
    }

    function getTViewCleanup(tView) {
      return tView.cleanup || (tView.cleanup = ngDevMode ? new TCleanup() : []);
    }
    /**
     * There are cases where the sub component's renderer needs to be included
     * instead of the current renderer (see the componentSyntheticHost* instructions).
     */


    function loadComponentRenderer(currentDef, tNode, lView) {
      // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root
      // component (see packages/core/src/render3/component.ts). This is not consistent with the process
      // of creating inner components, when current directive index is available in the state. In order
      // to avoid relying on current def being `null` (thus special-casing root component creation), the
      // process of creating root component should be unified with the process of creating inner
      // components.
      if (currentDef === null || isComponentDef(currentDef)) {
        lView = unwrapLView(lView[tNode.index]);
      }

      return lView[RENDERER];
    }
    /** Handles an error thrown in an LView. */


    function handleError(lView, error) {
      var injector = lView[INJECTOR$1];
      var errorHandler = injector ? injector.get(ErrorHandler, null) : null;
      errorHandler && errorHandler.handleError(error);
    }
    /**
     * Set the inputs of directives at the current node to corresponding value.
     *
     * @param tView The current TView
     * @param lView the `LView` which contains the directives.
     * @param inputs mapping between the public "input" name and privately-known,
     *        possibly minified, property names to write to.
     * @param value Value to set.
     */


    function setInputsForProperty(tView, lView, inputs, publicName, value) {
      for (var i = 0; i < inputs.length;) {
        var index = inputs[i++];
        var privateName = inputs[i++];
        var instance = lView[index];
        ngDevMode && assertIndexInRange(lView, index);
        var def = tView.data[index];

        if (def.setInput !== null) {
          def.setInput(instance, value, publicName, privateName);
        } else {
          instance[privateName] = value;
        }
      }
    }
    /**
     * Updates a text binding at a given index in a given LView.
     */


    function textBindingInternal(lView, index, value) {
      ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');
      ngDevMode && assertIndexInRange(lView, index + HEADER_OFFSET);
      var element = getNativeByIndex(index, lView);
      ngDevMode && assertDefined(element, 'native element should exist');
      ngDevMode && ngDevMode.rendererSetText++;
      var renderer = lView[RENDERER];
      isProceduralRenderer(renderer) ? renderer.setValue(element, value) : element.textContent = value;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var unusedValueToPlacateAjd$1 = unusedValueExportToPlacateAjd$1 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$5 + unusedValueExportToPlacateAjd$2 + unusedValueExportToPlacateAjd;

    function getLContainer(tNode, embeddedView) {
      ngDevMode && assertLView(embeddedView);
      var container = embeddedView[PARENT];

      if (tNode.index === -1) {
        // This is a dynamically created view inside a dynamic container.
        // The parent isn't an LContainer if the embedded view hasn't been attached yet.
        return isLContainer(container) ? container : null;
      } else {
        ngDevMode && assertLContainer(container); // This is a inline view node (e.g. embeddedViewStart)

        return container;
      }
    }
    /**
     * Retrieves render parent for a given view.
     * Might be null if a view is not yet attached to any container.
     */


    function getContainerRenderParent(tViewNode, view) {
      var container = getLContainer(tViewNode, view);
      return container ? nativeParentNode(view[RENDERER], container[NATIVE]) : null;
    }
    /**
     * NOTE: for performance reasons, the possible actions are inlined within the function instead of
     * being passed as an argument.
     */


    function applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {
      // If this slot was allocated for a text node dynamically created by i18n, the text node itself
      // won't be created until i18nApply() in the update block, so this node should be skipped.
      // For more info, see "ICU expressions should work inside an ngTemplateOutlet inside an ngFor"
      // in `i18n_spec.ts`.
      if (lNodeToHandle != null) {
        var lContainer;
        var isComponent = false; // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is
        // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if
        // it has LContainer so that we can process all of those cases appropriately.

        if (isLContainer(lNodeToHandle)) {
          lContainer = lNodeToHandle;
        } else if (isLView(lNodeToHandle)) {
          isComponent = true;
          ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');
          lNodeToHandle = lNodeToHandle[HOST];
        }

        var rNode = unwrapRNode(lNodeToHandle);
        ngDevMode && !isProceduralRenderer(renderer) && assertDomNode(rNode);

        if (action === 0
        /* Create */
        && parent !== null) {
          if (beforeNode == null) {
            nativeAppendChild(renderer, parent, rNode);
          } else {
            nativeInsertBefore(renderer, parent, rNode, beforeNode || null);
          }
        } else if (action === 1
        /* Insert */
        && parent !== null) {
          nativeInsertBefore(renderer, parent, rNode, beforeNode || null);
        } else if (action === 2
        /* Detach */
        ) {
            nativeRemoveNode(renderer, rNode, isComponent);
          } else if (action === 3
        /* Destroy */
        ) {
            ngDevMode && ngDevMode.rendererDestroyNode++;
            renderer.destroyNode(rNode);
          }

        if (lContainer != null) {
          applyContainer(renderer, action, lContainer, parent, beforeNode);
        }
      }
    }

    function createTextNode(value, renderer) {
      ngDevMode && ngDevMode.rendererCreateTextNode++;
      ngDevMode && ngDevMode.rendererSetText++;
      return isProceduralRenderer(renderer) ? renderer.createText(value) : renderer.createTextNode(value);
    }

    function addRemoveViewFromContainer(tView, lView, insertMode, beforeNode) {
      var renderParent = getContainerRenderParent(tView.node, lView);
      ngDevMode && assertNodeType(tView.node, 2
      /* View */
      );

      if (renderParent) {
        var renderer = lView[RENDERER];
        var action = insertMode ? 1
        /* Insert */
        : 2
        /* Detach */
        ;
        applyView(tView, lView, renderer, action, renderParent, beforeNode);
      }
    }
    /**
     * Detach a `LView` from the DOM by detaching its nodes.
     *
     * @param tView The `TView' of the `LView` to be detached
     * @param lView the `LView` to be detached.
     */


    function renderDetachView(tView, lView) {
      applyView(tView, lView, lView[RENDERER], 2
      /* Detach */
      , null, null);
    }
    /**
     * Traverses down and up the tree of views and containers to remove listeners and
     * call onDestroy callbacks.
     *
     * Notes:
     *  - Because it's used for onDestroy calls, it needs to be bottom-up.
     *  - Must process containers instead of their views to avoid splicing
     *  when views are destroyed and re-added.
     *  - Using a while loop because it's faster than recursion
     *  - Destroy only called on movement to sibling or movement to parent (laterally or up)
     *
     *  @param rootView The view to destroy
     */


    function destroyViewTree(rootView) {
      // If the view has no children, we can clean it up and return early.
      var lViewOrLContainer = rootView[CHILD_HEAD];

      if (!lViewOrLContainer) {
        return cleanUpView(rootView[TVIEW], rootView);
      }

      while (lViewOrLContainer) {
        var next = null;

        if (isLView(lViewOrLContainer)) {
          // If LView, traverse down to child.
          next = lViewOrLContainer[CHILD_HEAD];
        } else {
          ngDevMode && assertLContainer(lViewOrLContainer); // If container, traverse down to its first LView.

          var firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];
          if (firstView) next = firstView;
        }

        if (!next) {
          // Only clean up view when moving to the side or up, as destroy hooks
          // should be called in order from the bottom up.
          while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {
            isLView(lViewOrLContainer) && cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
            lViewOrLContainer = getParentState(lViewOrLContainer, rootView);
          }

          if (lViewOrLContainer === null) lViewOrLContainer = rootView;
          isLView(lViewOrLContainer) && cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
          next = lViewOrLContainer && lViewOrLContainer[NEXT];
        }

        lViewOrLContainer = next;
      }
    }
    /**
     * Inserts a view into a container.
     *
     * This adds the view to the container's array of active views in the correct
     * position. It also adds the view's elements to the DOM if the container isn't a
     * root node of another view (in that case, the view's elements will be added when
     * the container's parent view is added later).
     *
     * @param tView The `TView' of the `LView` to insert
     * @param lView The view to insert
     * @param lContainer The container into which the view should be inserted
     * @param index Which index in the container to insert the child view into
     */


    function insertView(tView, lView, lContainer, index) {
      ngDevMode && assertLView(lView);
      ngDevMode && assertLContainer(lContainer);
      var indexInContainer = CONTAINER_HEADER_OFFSET + index;
      var containerLength = lContainer.length;

      if (index > 0) {
        // This is a new view, we need to add it to the children.
        lContainer[indexInContainer - 1][NEXT] = lView;
      }

      if (index < containerLength - CONTAINER_HEADER_OFFSET) {
        lView[NEXT] = lContainer[indexInContainer];
        addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);
      } else {
        lContainer.push(lView);
        lView[NEXT] = null;
      }

      lView[PARENT] = lContainer; // track views where declaration and insertion points are different

      var declarationLContainer = lView[DECLARATION_LCONTAINER];

      if (declarationLContainer !== null && lContainer !== declarationLContainer) {
        trackMovedView(declarationLContainer, lView);
      } // notify query that a new view has been added


      var lQueries = lView[QUERIES];

      if (lQueries !== null) {
        lQueries.insertView(tView);
      } // Sets the attached flag


      lView[FLAGS] |= 128
      /* Attached */
      ;
    }
    /**
     * Track views created from the declaration container (TemplateRef) and inserted into a
     * different LContainer.
     */


    function trackMovedView(declarationContainer, lView) {
      ngDevMode && assertDefined(lView, 'LView required');
      ngDevMode && assertLContainer(declarationContainer);
      var movedViews = declarationContainer[MOVED_VIEWS];
      var insertedLContainer = lView[PARENT];
      ngDevMode && assertLContainer(insertedLContainer);
      var insertedComponentLView = insertedLContainer[PARENT][DECLARATION_COMPONENT_VIEW];
      ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');
      var declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];
      ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');

      if (declaredComponentLView !== insertedComponentLView) {
        // At this point the declaration-component is not same as insertion-component; this means that
        // this is a transplanted view. Mark the declared lView as having transplanted views so that
        // those views can participate in CD.
        declarationContainer[HAS_TRANSPLANTED_VIEWS] = true;
      }

      if (movedViews === null) {
        declarationContainer[MOVED_VIEWS] = [lView];
      } else {
        movedViews.push(lView);
      }
    }

    function detachMovedView(declarationContainer, lView) {
      ngDevMode && assertLContainer(declarationContainer);
      ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');
      var movedViews = declarationContainer[MOVED_VIEWS];
      var declarationViewIndex = movedViews.indexOf(lView);
      var insertionLContainer = lView[PARENT];
      ngDevMode && assertLContainer(insertionLContainer); // If the view was marked for refresh but then detached before it was checked (where the flag
      // would be cleared and the counter decremented), we need to decrement the view counter here
      // instead.

      if (lView[FLAGS] & 1024
      /* RefreshTransplantedView */
      ) {
          updateTransplantedViewCount(insertionLContainer, -1);
        }

      movedViews.splice(declarationViewIndex, 1);
    }
    /**
     * Detaches a view from a container.
     *
     * This method removes the view from the container's array of active views. It also
     * removes the view's elements from the DOM.
     *
     * @param lContainer The container from which to detach a view
     * @param removeIndex The index of the view to detach
     * @returns Detached LView instance.
     */


    function detachView(lContainer, removeIndex) {
      if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;
      var indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;
      var viewToDetach = lContainer[indexInContainer];

      if (viewToDetach) {
        var declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];

        if (declarationLContainer !== null && declarationLContainer !== lContainer) {
          detachMovedView(declarationLContainer, viewToDetach);
        }

        if (removeIndex > 0) {
          lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];
        }

        var removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);
        addRemoveViewFromContainer(viewToDetach[TVIEW], viewToDetach, false, null); // notify query that a view has been removed

        var lQueries = removedLView[QUERIES];

        if (lQueries !== null) {
          lQueries.detachView(removedLView[TVIEW]);
        }

        viewToDetach[PARENT] = null;
        viewToDetach[NEXT] = null; // Unsets the attached flag

        viewToDetach[FLAGS] &= ~128
        /* Attached */
        ;
      }

      return viewToDetach;
    }
    /**
     * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.
     *
     * @param lContainer The container from which to remove a view
     * @param removeIndex The index of the view to remove
     */


    function removeView(lContainer, removeIndex) {
      var detachedView = detachView(lContainer, removeIndex);
      detachedView && destroyLView(detachedView[TVIEW], detachedView);
    }
    /**
     * A standalone function which destroys an LView,
     * conducting clean up (e.g. removing listeners, calling onDestroys).
     *
     * @param tView The `TView' of the `LView` to be destroyed
     * @param lView The view to be destroyed.
     */


    function destroyLView(tView, lView) {
      if (!(lView[FLAGS] & 256
      /* Destroyed */
      )) {
        var renderer = lView[RENDERER];

        if (isProceduralRenderer(renderer) && renderer.destroyNode) {
          applyView(tView, lView, renderer, 3
          /* Destroy */
          , null, null);
        }

        destroyViewTree(lView);
      }
    }
    /**
     * Determines which LViewOrLContainer to jump to when traversing back up the
     * tree in destroyViewTree.
     *
     * Normally, the view's parent LView should be checked, but in the case of
     * embedded views, the container (which is the view node's parent, but not the
     * LView's parent) needs to be checked for a possible next property.
     *
     * @param lViewOrLContainer The LViewOrLContainer for which we need a parent state
     * @param rootView The rootView, so we don't propagate too far up the view tree
     * @returns The correct parent LViewOrLContainer
     */


    function getParentState(lViewOrLContainer, rootView) {
      var tNode;

      if (isLView(lViewOrLContainer) && (tNode = lViewOrLContainer[T_HOST]) && tNode.type === 2
      /* View */
      ) {
          // if it's an embedded view, the state needs to go up to the container, in case the
          // container has a next
          return getLContainer(tNode, lViewOrLContainer);
        } else {
        // otherwise, use parent view for containers or component views
        return lViewOrLContainer[PARENT] === rootView ? null : lViewOrLContainer[PARENT];
      }
    }
    /**
     * Calls onDestroys hooks for all directives and pipes in a given view and then removes all
     * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks
     * can be propagated to @Output listeners.
     *
     * @param tView `TView` for the `LView` to clean up.
     * @param lView The LView to clean up
     */


    function cleanUpView(tView, lView) {
      if (!(lView[FLAGS] & 256
      /* Destroyed */
      )) {
        // Usually the Attached flag is removed when the view is detached from its parent, however
        // if it's a root view, the flag won't be unset hence why we're also removing on destroy.
        lView[FLAGS] &= ~128
        /* Attached */
        ; // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook
        // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If
        // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.
        // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is
        // really more of an "afterDestroy" hook if you think about it.

        lView[FLAGS] |= 256
        /* Destroyed */
        ;
        executeOnDestroys(tView, lView);
        removeListeners(tView, lView);
        var hostTNode = lView[T_HOST]; // For component views only, the local renderer is destroyed as clean up time.

        if (hostTNode && hostTNode.type === 3
        /* Element */
        && isProceduralRenderer(lView[RENDERER])) {
          ngDevMode && ngDevMode.rendererDestroy++;
          lView[RENDERER].destroy();
        }

        var declarationContainer = lView[DECLARATION_LCONTAINER]; // we are dealing with an embedded view that is still inserted into a container

        if (declarationContainer !== null && isLContainer(lView[PARENT])) {
          // and this is a projected view
          if (declarationContainer !== lView[PARENT]) {
            detachMovedView(declarationContainer, lView);
          } // For embedded views still attached to a container: remove query result from this view.


          var lQueries = lView[QUERIES];

          if (lQueries !== null) {
            lQueries.detachView(tView);
          }
        }
      }
    }
    /** Removes listeners and unsubscribes from output subscriptions */


    function removeListeners(tView, lView) {
      var tCleanup = tView.cleanup;

      if (tCleanup !== null) {
        var lCleanup = lView[CLEANUP];

        for (var i = 0; i < tCleanup.length - 1; i += 2) {
          if (typeof tCleanup[i] === 'string') {
            // This is a native DOM listener
            var idxOrTargetGetter = tCleanup[i + 1];
            var target = typeof idxOrTargetGetter === 'function' ? idxOrTargetGetter(lView) : unwrapRNode(lView[idxOrTargetGetter]);
            var listener = lCleanup[tCleanup[i + 2]];
            var useCaptureOrSubIdx = tCleanup[i + 3];

            if (typeof useCaptureOrSubIdx === 'boolean') {
              // native DOM listener registered with Renderer3
              target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);
            } else {
              if (useCaptureOrSubIdx >= 0) {
                // unregister
                lCleanup[useCaptureOrSubIdx]();
              } else {
                // Subscription
                lCleanup[-useCaptureOrSubIdx].unsubscribe();
              }
            }

            i += 2;
          } else {
            // This is a cleanup function that is grouped with the index of its context
            var context = lCleanup[tCleanup[i + 1]];
            tCleanup[i].call(context);
          }
        }

        lView[CLEANUP] = null;
      }
    }
    /** Calls onDestroy hooks for this view */


    function executeOnDestroys(tView, lView) {
      var destroyHooks;

      if (tView != null && (destroyHooks = tView.destroyHooks) != null) {
        for (var i = 0; i < destroyHooks.length; i += 2) {
          var context = lView[destroyHooks[i]]; // Only call the destroy hook if the context has been requested.

          if (!(context instanceof NodeInjectorFactory)) {
            var toCall = destroyHooks[i + 1];

            if (Array.isArray(toCall)) {
              for (var j = 0; j < toCall.length; j += 2) {
                toCall[j + 1].call(context[toCall[j]]);
              }
            } else {
              toCall.call(context);
            }
          }
        }
      }
    }
    /**
     * Returns a native element if a node can be inserted into the given parent.
     *
     * There are two reasons why we may not be able to insert a element immediately.
     * - Projection: When creating a child content element of a component, we have to skip the
     *   insertion because the content of a component will be projected.
     *   `<component><content>delayed due to projection</content></component>`
     * - Parent container is disconnected: This can happen when we are inserting a view into
     *   parent container, which itself is disconnected. For example the parent container is part
     *   of a View which has not be inserted or is made for projection but has not been inserted
     *   into destination.
     */


    function getRenderParent(tView, tNode, currentView) {
      // Skip over element and ICU containers as those are represented by a comment node and
      // can't be used as a render parent.
      var parentTNode = tNode.parent;

      while (parentTNode != null && (parentTNode.type === 4
      /* ElementContainer */
      || parentTNode.type === 5
      /* IcuContainer */
      )) {
        tNode = parentTNode;
        parentTNode = tNode.parent;
      } // If the parent tNode is null, then we are inserting across views: either into an embedded view
      // or a component view.


      if (parentTNode == null) {
        var hostTNode = currentView[T_HOST];

        if (hostTNode.type === 2
        /* View */
        ) {
            // We are inserting a root element of an embedded view We might delay insertion of children
            // for a given view if it is disconnected. This might happen for 2 main reasons:
            // - view is not inserted into any container(view was created but not inserted yet)
            // - view is inserted into a container but the container itself is not inserted into the DOM
            // (container might be part of projection or child of a view that is not inserted yet).
            // In other words we can insert children of a given view if this view was inserted into a
            // container and the container itself has its render parent determined.
            return getContainerRenderParent(hostTNode, currentView);
          } else {
          // We are inserting a root element of the component view into the component host element and
          // it should always be eager.
          ngDevMode && assertNodeOfPossibleTypes(hostTNode, [3
          /* Element */
          ]);
          return currentView[HOST];
        }
      } else {
        var isIcuCase = tNode && tNode.type === 5
        /* IcuContainer */
        ; // If the parent of this node is an ICU container, then it is represented by comment node and we
        // need to use it as an anchor. If it is projected then it's direct parent node is the renderer.

        if (isIcuCase && tNode.flags & 4
        /* isProjected */
        ) {
            return getNativeByTNode(tNode, currentView).parentNode;
          }

        ngDevMode && assertNodeType(parentTNode, 3
        /* Element */
        );

        if (parentTNode.flags & 2
        /* isComponentHost */
        ) {
            var tData = tView.data;
            var _tNode2 = tData[parentTNode.index];
            var encapsulation = tData[_tNode2.directiveStart].encapsulation; // We've got a parent which is an element in the current view. We just need to verify if the
            // parent element is not a component. Component's content nodes are not inserted immediately
            // because they will be projected, and so doing insert at this point would be wasteful.
            // Since the projection would then move it to its final destination. Note that we can't
            // make this assumption when using the Shadow DOM, because the native projection placeholders
            // (<content> or <slot>) have to be in place as elements are being inserted.

            if (encapsulation !== ViewEncapsulation$1.ShadowDom && encapsulation !== ViewEncapsulation$1.Native) {
              return null;
            }
          }

        return getNativeByTNode(parentTNode, currentView);
      }
    }
    /**
     * Inserts a native node before another native node for a given parent using {@link Renderer3}.
     * This is a utility function that can be used when native nodes were determined - it abstracts an
     * actual renderer being used.
     */


    function nativeInsertBefore(renderer, parent, child, beforeNode) {
      ngDevMode && ngDevMode.rendererInsertBefore++;

      if (isProceduralRenderer(renderer)) {
        renderer.insertBefore(parent, child, beforeNode);
      } else {
        parent.insertBefore(child, beforeNode, true);
      }
    }

    function nativeAppendChild(renderer, parent, child) {
      ngDevMode && ngDevMode.rendererAppendChild++;
      ngDevMode && assertDefined(parent, 'parent node must be defined');

      if (isProceduralRenderer(renderer)) {
        renderer.appendChild(parent, child);
      } else {
        parent.appendChild(child);
      }
    }

    function nativeAppendOrInsertBefore(renderer, parent, child, beforeNode) {
      if (beforeNode !== null) {
        nativeInsertBefore(renderer, parent, child, beforeNode);
      } else {
        nativeAppendChild(renderer, parent, child);
      }
    }
    /** Removes a node from the DOM given its native parent. */


    function nativeRemoveChild(renderer, parent, child, isHostElement) {
      if (isProceduralRenderer(renderer)) {
        renderer.removeChild(parent, child, isHostElement);
      } else {
        parent.removeChild(child);
      }
    }
    /**
     * Returns a native parent of a given native node.
     */


    function nativeParentNode(renderer, node) {
      return isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode;
    }
    /**
     * Returns a native sibling of a given native node.
     */


    function nativeNextSibling(renderer, node) {
      return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;
    }
    /**
     * Finds a native "anchor" node for cases where we can't append a native child directly
     * (`appendChild`) and need to use a reference (anchor) node for the `insertBefore` operation.
     * @param parentTNode
     * @param lView
     */


    function getNativeAnchorNode(parentTNode, lView) {
      if (parentTNode.type === 2
      /* View */
      ) {
          var lContainer = getLContainer(parentTNode, lView);
          if (lContainer === null) return null;
          var index = lContainer.indexOf(lView, CONTAINER_HEADER_OFFSET) - CONTAINER_HEADER_OFFSET;
          return getBeforeNodeForView(index, lContainer);
        } else if (parentTNode.type === 4
      /* ElementContainer */
      || parentTNode.type === 5
      /* IcuContainer */
      ) {
          return getNativeByTNode(parentTNode, lView);
        }

      return null;
    }
    /**
     * Appends the `child` native node (or a collection of nodes) to the `parent`.
     *
     * The element insertion might be delayed {@link canInsertNativeNode}.
     *
     * @param tView The `TView' to be appended
     * @param lView The current LView
     * @param childEl The native child (or children) that should be appended
     * @param childTNode The TNode of the child element
     * @returns Whether or not the child was appended
     */


    function appendChild(tView, lView, childEl, childTNode) {
      var renderParent = getRenderParent(tView, childTNode, lView);

      if (renderParent != null) {
        var renderer = lView[RENDERER];
        var parentTNode = childTNode.parent || lView[T_HOST];
        var anchorNode = getNativeAnchorNode(parentTNode, lView);

        if (Array.isArray(childEl)) {
          for (var i = 0; i < childEl.length; i++) {
            nativeAppendOrInsertBefore(renderer, renderParent, childEl[i], anchorNode);
          }
        } else {
          nativeAppendOrInsertBefore(renderer, renderParent, childEl, anchorNode);
        }
      }
    }
    /**
     * Returns the first native node for a given LView, starting from the provided TNode.
     *
     * Native nodes are returned in the order in which those appear in the native tree (DOM).
     */


    function getFirstNativeNode(lView, tNode) {
      if (tNode !== null) {
        ngDevMode && assertNodeOfPossibleTypes(tNode, [3
        /* Element */
        , 0
        /* Container */
        , 4
        /* ElementContainer */
        , 5
        /* IcuContainer */
        , 1
        /* Projection */
        ]);
        var tNodeType = tNode.type;

        if (tNodeType === 3
        /* Element */
        ) {
            return getNativeByTNode(tNode, lView);
          } else if (tNodeType === 0
        /* Container */
        ) {
            return getBeforeNodeForView(-1, lView[tNode.index]);
          } else if (tNodeType === 4
        /* ElementContainer */
        || tNodeType === 5
        /* IcuContainer */
        ) {
            var elIcuContainerChild = tNode.child;

            if (elIcuContainerChild !== null) {
              return getFirstNativeNode(lView, elIcuContainerChild);
            } else {
              var rNodeOrLContainer = lView[tNode.index];

              if (isLContainer(rNodeOrLContainer)) {
                return getBeforeNodeForView(-1, rNodeOrLContainer);
              } else {
                return unwrapRNode(rNodeOrLContainer);
              }
            }
          } else {
          var componentView = lView[DECLARATION_COMPONENT_VIEW];
          var componentHost = componentView[T_HOST];
          var parentView = getLViewParent(componentView);
          var firstProjectedTNode = componentHost.projection[tNode.projection];

          if (firstProjectedTNode != null) {
            return getFirstNativeNode(parentView, firstProjectedTNode);
          } else {
            return getFirstNativeNode(lView, tNode.next);
          }
        }
      }

      return null;
    }

    function getBeforeNodeForView(viewIndexInContainer, lContainer) {
      var nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;

      if (nextViewIndex < lContainer.length) {
        var lView = lContainer[nextViewIndex];
        var firstTNodeOfView = lView[TVIEW].firstChild;

        if (firstTNodeOfView !== null) {
          return getFirstNativeNode(lView, firstTNodeOfView);
        }
      }

      return lContainer[NATIVE];
    }
    /**
     * Removes a native node itself using a given renderer. To remove the node we are looking up its
     * parent from the native tree as not all platforms / browsers support the equivalent of
     * node.remove().
     *
     * @param renderer A renderer to be used
     * @param rNode The native node that should be removed
     * @param isHostElement A flag indicating if a node to be removed is a host of a component.
     */


    function nativeRemoveNode(renderer, rNode, isHostElement) {
      var nativeParent = nativeParentNode(renderer, rNode);

      if (nativeParent) {
        nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);
      }
    }
    /**
     * Performs the operation of `action` on the node. Typically this involves inserting or removing
     * nodes on the LView or projection boundary.
     */


    function applyNodes(renderer, action, tNode, lView, renderParent, beforeNode, isProjection) {
      while (tNode != null) {
        ngDevMode && assertTNodeForLView(tNode, lView);
        ngDevMode && assertNodeOfPossibleTypes(tNode, [0
        /* Container */
        , 3
        /* Element */
        , 4
        /* ElementContainer */
        , 1
        /* Projection */
        , 5
        /* IcuContainer */
        ]);
        var rawSlotValue = lView[tNode.index];
        var tNodeType = tNode.type;

        if (isProjection) {
          if (action === 0
          /* Create */
          ) {
              rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);
              tNode.flags |= 4
              /* isProjected */
              ;
            }
        }

        if ((tNode.flags & 64
        /* isDetached */
        ) !== 64
        /* isDetached */
        ) {
            if (tNodeType === 4
            /* ElementContainer */
            || tNodeType === 5
            /* IcuContainer */
            ) {
                applyNodes(renderer, action, tNode.child, lView, renderParent, beforeNode, false);
                applyToElementOrContainer(action, renderer, renderParent, rawSlotValue, beforeNode);
              } else if (tNodeType === 1
            /* Projection */
            ) {
                applyProjectionRecursive(renderer, action, lView, tNode, renderParent, beforeNode);
              } else {
              ngDevMode && assertNodeOfPossibleTypes(tNode, [3
              /* Element */
              , 0
              /* Container */
              ]);
              applyToElementOrContainer(action, renderer, renderParent, rawSlotValue, beforeNode);
            }
          }

        tNode = isProjection ? tNode.projectionNext : tNode.next;
      }
    }
    /**
     * `applyView` performs operation on the view as specified in `action` (insert, detach, destroy)
     *
     * Inserting a view without projection or containers at top level is simple. Just iterate over the
     * root nodes of the View, and for each node perform the `action`.
     *
     * Things get more complicated with containers and projections. That is because coming across:
     * - Container: implies that we have to insert/remove/destroy the views of that container as well
     *              which in turn can have their own Containers at the View roots.
     * - Projection: implies that we have to insert/remove/destroy the nodes of the projection. The
     *               complication is that the nodes we are projecting can themselves have Containers
     *               or other Projections.
     *
     * As you can see this is a very recursive problem. Yes recursion is not most efficient but the
     * code is complicated enough that trying to implemented with recursion becomes unmaintainable.
     *
     * @param tView The `TView' which needs to be inserted, detached, destroyed
     * @param lView The LView which needs to be inserted, detached, destroyed.
     * @param renderer Renderer to use
     * @param action action to perform (insert, detach, destroy)
     * @param renderParent parent DOM element for insertion/removal.
     * @param beforeNode Before which node the insertions should happen.
     */


    function applyView(tView, lView, renderer, action, renderParent, beforeNode) {
      ngDevMode && assertNodeType(tView.node, 2
      /* View */
      );
      var viewRootTNode = tView.node.child;
      applyNodes(renderer, action, viewRootTNode, lView, renderParent, beforeNode, false);
    }
    /**
     * `applyProjection` performs operation on the projection.
     *
     * Inserting a projection requires us to locate the projected nodes from the parent component. The
     * complication is that those nodes themselves could be re-projected from their parent component.
     *
     * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed
     * @param lView The `LView` which needs to be inserted, detached, destroyed.
     * @param tProjectionNode node to project
     */


    function applyProjection(tView, lView, tProjectionNode) {
      var renderer = lView[RENDERER];
      var renderParent = getRenderParent(tView, tProjectionNode, lView);
      var parentTNode = tProjectionNode.parent || lView[T_HOST];
      var beforeNode = getNativeAnchorNode(parentTNode, lView);
      applyProjectionRecursive(renderer, 0
      /* Create */
      , lView, tProjectionNode, renderParent, beforeNode);
    }
    /**
     * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,
     * detach, destroy)
     *
     * Inserting a projection requires us to locate the projected nodes from the parent component. The
     * complication is that those nodes themselves could be re-projected from their parent component.
     *
     * @param renderer Render to use
     * @param action action to perform (insert, detach, destroy)
     * @param lView The LView which needs to be inserted, detached, destroyed.
     * @param tProjectionNode node to project
     * @param renderParent parent DOM element for insertion/removal.
     * @param beforeNode Before which node the insertions should happen.
     */


    function applyProjectionRecursive(renderer, action, lView, tProjectionNode, renderParent, beforeNode) {
      var componentLView = lView[DECLARATION_COMPONENT_VIEW];
      var componentNode = componentLView[T_HOST];
      ngDevMode && assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');
      var nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];

      if (Array.isArray(nodeToProjectOrRNodes)) {
        // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we
        // need to support passing projectable nodes, so we cheat and put them in the TNode
        // of the Host TView. (Yes we put instance info at the T Level). We can get away with it
        // because we know that that TView is not shared and therefore it will not be a problem.
        // This should be refactored and cleaned up.
        for (var i = 0; i < nodeToProjectOrRNodes.length; i++) {
          var rNode = nodeToProjectOrRNodes[i];
          applyToElementOrContainer(action, renderer, renderParent, rNode, beforeNode);
        }
      } else {
        var nodeToProject = nodeToProjectOrRNodes;
        var projectedComponentLView = componentLView[PARENT];
        applyNodes(renderer, action, nodeToProject, projectedComponentLView, renderParent, beforeNode, true);
      }
    }
    /**
     * `applyContainer` performs an operation on the container and its views as specified by
     * `action` (insert, detach, destroy)
     *
     * Inserting a Container is complicated by the fact that the container may have Views which
     * themselves have containers or projections.
     *
     * @param renderer Renderer to use
     * @param action action to perform (insert, detach, destroy)
     * @param lContainer The LContainer which needs to be inserted, detached, destroyed.
     * @param renderParent parent DOM element for insertion/removal.
     * @param beforeNode Before which node the insertions should happen.
     */


    function applyContainer(renderer, action, lContainer, renderParent, beforeNode) {
      ngDevMode && assertLContainer(lContainer);
      var anchor = lContainer[NATIVE]; // LContainer has its own before node.

      var _native11 = unwrapRNode(lContainer); // An LContainer can be created dynamically on any node by injecting ViewContainerRef.
      // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor node
      // (comment in the DOM) that will be different from the LContainer's host node. In this particular
      // case we need to execute action on 2 nodes:
      // - container's host node (this is done in the executeActionOnElementOrContainer)
      // - container's host node (this is done here)


      if (anchor !== _native11) {
        // This is very strange to me (Misko). I would expect that the native is same as anchor. I don't
        // see a reason why they should be different, but they are.
        //
        // If they are we need to process the second anchor as well.
        applyToElementOrContainer(action, renderer, renderParent, anchor, beforeNode);
      }

      for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
        var lView = lContainer[i];
        applyView(lView[TVIEW], lView, renderer, action, renderParent, anchor);
      }
    }
    /**
     * Writes class/style to element.
     *
     * @param renderer Renderer to use.
     * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)
     * @param rNode The Node to write to.
     * @param prop Property to write to. This would be the class/style name.
     * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add
     *        otherwise).
     */


    function applyStyling(renderer, isClassBased, rNode, prop, value) {
      var isProcedural = isProceduralRenderer(renderer);

      if (isClassBased) {
        // We actually want JS true/false here because any truthy value should add the class
        if (!value) {
          ngDevMode && ngDevMode.rendererRemoveClass++;

          if (isProcedural) {
            renderer.removeClass(rNode, prop);
          } else {
            rNode.classList.remove(prop);
          }
        } else {
          ngDevMode && ngDevMode.rendererAddClass++;

          if (isProcedural) {
            renderer.addClass(rNode, prop);
          } else {
            ngDevMode && assertDefined(rNode.classList, 'HTMLElement expected');
            rNode.classList.add(prop);
          }
        }
      } else {
        // TODO(misko): Can't import RendererStyleFlags2.DashCase as it causes imports to be resolved in
        // different order which causes failures. Using direct constant as workaround for now.
        var flags = prop.indexOf('-') == -1 ? undefined : 2
        /* RendererStyleFlags2.DashCase */
        ;

        if (value == null
        /** || value === undefined */
        ) {
            ngDevMode && ngDevMode.rendererRemoveStyle++;

            if (isProcedural) {
              renderer.removeStyle(rNode, prop, flags);
            } else {
              rNode.style.removeProperty(prop);
            }
          } else {
          ngDevMode && ngDevMode.rendererSetStyle++;

          if (isProcedural) {
            renderer.setStyle(rNode, prop, value, flags);
          } else {
            ngDevMode && assertDefined(rNode.style, 'HTMLElement expected');
            rNode.style.setProperty(prop, value);
          }
        }
      }
    }
    /**
     * Write `cssText` to `RElement`.
     *
     * This function does direct write without any reconciliation. Used for writing initial values, so
     * that static styling values do not pull in the style parser.
     *
     * @param renderer Renderer to use
     * @param element The element which needs to be updated.
     * @param newValue The new class list to write.
     */


    function writeDirectStyle(renderer, element, newValue) {
      ngDevMode && assertString(newValue, '\'newValue\' should be a string');

      if (isProceduralRenderer(renderer)) {
        renderer.setAttribute(element, 'style', newValue);
      } else {
        element.style.cssText = newValue;
      }

      ngDevMode && ngDevMode.rendererSetStyle++;
    }
    /**
     * Write `className` to `RElement`.
     *
     * This function does direct write without any reconciliation. Used for writing initial values, so
     * that static styling values do not pull in the style parser.
     *
     * @param renderer Renderer to use
     * @param element The element which needs to be updated.
     * @param newValue The new class list to write.
     */


    function writeDirectClass(renderer, element, newValue) {
      ngDevMode && assertString(newValue, '\'newValue\' should be a string');

      if (isProceduralRenderer(renderer)) {
        if (newValue === '') {
          // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.
          renderer.removeAttribute(element, 'class');
        } else {
          renderer.setAttribute(element, 'class', newValue);
        }
      } else {
        element.className = newValue;
      }

      ngDevMode && ngDevMode.rendererSetClassName++;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * If `startTNode.parent` exists and has an injector, returns TNode for that injector.
     * Otherwise, unwraps a parent injector location number to find the view offset from the current
     * injector, then walks up the declaration view tree until the TNode of the parent injector is
     * found.
     *
     * @param location The location of the parent injector, which contains the view offset
     * @param startView The LView instance from which to start walking up the view tree
     * @param startTNode The TNode instance of the starting element
     * @returns The TNode of the parent injector
     */


    function getParentInjectorTNode(location, startView, startTNode) {
      // If there is an injector on the parent TNode, retrieve the TNode for that injector.
      if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {
        // view offset is 0
        var injectorIndex = startTNode.parent.injectorIndex;
        var tNode = startTNode.parent; // If tNode.injectorIndex === tNode.parent.injectorIndex, then the index belongs to a parent
        // injector.

        while (tNode.parent != null && injectorIndex == tNode.parent.injectorIndex) {
          tNode = tNode.parent;
        }

        return tNode;
      }

      var viewOffset = getParentInjectorViewOffset(location); // view offset is 1

      var parentView = startView;
      var parentTNode = startView[T_HOST]; // view offset is superior to 1

      while (viewOffset > 1) {
        parentView = parentView[DECLARATION_VIEW];
        parentTNode = parentView[T_HOST];
        viewOffset--;
      }

      return parentTNode;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var ViewRef = /*#__PURE__*/function () {
      function ViewRef(
      /**
       * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.
       *
       * When ViewRef is created for a dynamic component, this also represents the `LView` for the
       * component.
       *
       * For a "regular" ViewRef created for an embedded view, this is the `LView` for the embedded
       * view.
       *
       * @internal
       */
      _lView,
      /**
       * This represents the `LView` associated with the point where `ChangeDetectorRef` was
       * requested.
       *
       * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.
       */
      _cdRefInjectingView) {
        _classCallCheck(this, ViewRef);

        this._lView = _lView;
        this._cdRefInjectingView = _cdRefInjectingView;
        this._appRef = null;
        this._viewContainerRef = null;
      }

      _createClass2(ViewRef, [{
        key: "destroy",
        value: function destroy() {
          if (this._appRef) {
            this._appRef.detachView(this);
          } else if (this._viewContainerRef) {
            var index = this._viewContainerRef.indexOf(this);

            if (index > -1) {
              this._viewContainerRef.detach(index);
            }

            this._viewContainerRef = null;
          }

          destroyLView(this._lView[TVIEW], this._lView);
        }
      }, {
        key: "onDestroy",
        value: function onDestroy(callback) {
          storeCleanupWithContext(this._lView[TVIEW], this._lView, null, callback);
        }
        /**
         * Marks a view and all of its ancestors dirty.
         *
         * It also triggers change detection by calling `scheduleTick` internally, which coalesces
         * multiple `markForCheck` calls to into one change detection run.
         *
         * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is
         * checked when it needs to be re-rendered but the two normal triggers haven't marked it
         * dirty (i.e. inputs haven't changed and events haven't fired in the view).
         *
         * <!-- TODO: Add a link to a chapter on OnPush components -->
         *
         * @usageNotes
         * ### Example
         *
         * ```typescript
         * @Component({
         *   selector: 'my-app',
         *   template: `Number of ticks: {{numberOfTicks}}`
         *   changeDetection: ChangeDetectionStrategy.OnPush,
         * })
         * class AppComponent {
         *   numberOfTicks = 0;
         *
         *   constructor(private ref: ChangeDetectorRef) {
         *     setInterval(() => {
         *       this.numberOfTicks++;
         *       // the following is required, otherwise the view will not be updated
         *       this.ref.markForCheck();
         *     }, 1000);
         *   }
         * }
         * ```
         */

      }, {
        key: "markForCheck",
        value: function markForCheck() {
          markViewDirty(this._cdRefInjectingView || this._lView);
        }
        /**
         * Detaches the view from the change detection tree.
         *
         * Detached views will not be checked during change detection runs until they are
         * re-attached, even if they are dirty. `detach` can be used in combination with
         * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change
         * detection checks.
         *
         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
         *
         * @usageNotes
         * ### Example
         *
         * The following example defines a component with a large list of readonly data.
         * Imagine the data changes constantly, many times per second. For performance reasons,
         * we want to check and update the list every five seconds. We can do that by detaching
         * the component's change detector and doing a local check every five seconds.
         *
         * ```typescript
         * class DataProvider {
         *   // in a real application the returned data will be different every time
         *   get data() {
         *     return [1,2,3,4,5];
         *   }
         * }
         *
         * @Component({
         *   selector: 'giant-list',
         *   template: `
         *     <li *ngFor="let d of dataProvider.data">Data {{d}}</li>
         *   `,
         * })
         * class GiantList {
         *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {
         *     ref.detach();
         *     setInterval(() => {
         *       this.ref.detectChanges();
         *     }, 5000);
         *   }
         * }
         *
         * @Component({
         *   selector: 'app',
         *   providers: [DataProvider],
         *   template: `
         *     <giant-list><giant-list>
         *   `,
         * })
         * class App {
         * }
         * ```
         */

      }, {
        key: "detach",
        value: function detach() {
          this._lView[FLAGS] &= ~128
          /* Attached */
          ;
        }
        /**
         * Re-attaches a view to the change detection tree.
         *
         * This can be used to re-attach views that were previously detached from the tree
         * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.
         *
         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
         *
         * @usageNotes
         * ### Example
         *
         * The following example creates a component displaying `live` data. The component will detach
         * its change detector from the main change detector tree when the component's live property
         * is set to false.
         *
         * ```typescript
         * class DataProvider {
         *   data = 1;
         *
         *   constructor() {
         *     setInterval(() => {
         *       this.data = this.data * 2;
         *     }, 500);
         *   }
         * }
         *
         * @Component({
         *   selector: 'live-data',
         *   inputs: ['live'],
         *   template: 'Data: {{dataProvider.data}}'
         * })
         * class LiveData {
         *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}
         *
         *   set live(value) {
         *     if (value) {
         *       this.ref.reattach();
         *     } else {
         *       this.ref.detach();
         *     }
         *   }
         * }
         *
         * @Component({
         *   selector: 'my-app',
         *   providers: [DataProvider],
         *   template: `
         *     Live Update: <input type="checkbox" [(ngModel)]="live">
         *     <live-data [live]="live"><live-data>
         *   `,
         * })
         * class AppComponent {
         *   live = true;
         * }
         * ```
         */

      }, {
        key: "reattach",
        value: function reattach() {
          this._lView[FLAGS] |= 128
          /* Attached */
          ;
        }
        /**
         * Checks the view and its children.
         *
         * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement
         * local change detection checks.
         *
         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
         *
         * @usageNotes
         * ### Example
         *
         * The following example defines a component with a large list of readonly data.
         * Imagine, the data changes constantly, many times per second. For performance reasons,
         * we want to check and update the list every five seconds.
         *
         * We can do that by detaching the component's change detector and doing a local change detection
         * check every five seconds.
         *
         * See {@link ChangeDetectorRef#detach detach} for more information.
         */

      }, {
        key: "detectChanges",
        value: function detectChanges() {
          detectChangesInternal(this._lView[TVIEW], this._lView, this.context);
        }
        /**
         * Checks the change detector and its children, and throws if any changes are detected.
         *
         * This is used in development mode to verify that running change detection doesn't
         * introduce other changes.
         */

      }, {
        key: "checkNoChanges",
        value: function checkNoChanges() {
          checkNoChangesInternal(this._lView[TVIEW], this._lView, this.context);
        }
      }, {
        key: "attachToViewContainerRef",
        value: function attachToViewContainerRef(vcRef) {
          if (this._appRef) {
            throw new Error('This view is already attached directly to the ApplicationRef!');
          }

          this._viewContainerRef = vcRef;
        }
      }, {
        key: "detachFromAppRef",
        value: function detachFromAppRef() {
          this._appRef = null;
          renderDetachView(this._lView[TVIEW], this._lView);
        }
      }, {
        key: "attachToAppRef",
        value: function attachToAppRef(appRef) {
          if (this._viewContainerRef) {
            throw new Error('This view is already attached to a ViewContainer!');
          }

          this._appRef = appRef;
        }
      }, {
        key: "rootNodes",
        get: function get() {
          var lView = this._lView;

          if (lView[HOST] == null) {
            var hostTView = lView[T_HOST];
            return collectNativeNodes(lView[TVIEW], lView, hostTView.child, []);
          }

          return [];
        }
      }, {
        key: "context",
        get: function get() {
          return this._lView[CONTEXT];
        }
      }, {
        key: "destroyed",
        get: function get() {
          return (this._lView[FLAGS] & 256
          /* Destroyed */
          ) === 256
          /* Destroyed */
          ;
        }
      }]);

      return ViewRef;
    }();
    /** @internal */


    var RootViewRef = /*#__PURE__*/function (_ViewRef) {
      _inherits(RootViewRef, _ViewRef);

      var _super10 = _createSuper(RootViewRef);

      function RootViewRef(_view) {
        var _this16;

        _classCallCheck(this, RootViewRef);

        _this16 = _super10.call(this, _view);
        _this16._view = _view;
        return _this16;
      }

      _createClass2(RootViewRef, [{
        key: "detectChanges",
        value: function detectChanges() {
          detectChangesInRootView(this._view);
        }
      }, {
        key: "checkNoChanges",
        value: function checkNoChanges() {
          checkNoChangesInRootView(this._view);
        }
      }, {
        key: "context",
        get: function get() {
          return null;
        }
      }]);

      return RootViewRef;
    }(ViewRef);

    function collectNativeNodes(tView, lView, tNode, result) {
      var isProjection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

      while (tNode !== null) {
        ngDevMode && assertNodeOfPossibleTypes(tNode, [3
        /* Element */
        , 0
        /* Container */
        , 1
        /* Projection */
        , 4
        /* ElementContainer */
        , 5
        /* IcuContainer */
        ]);
        var lNode = lView[tNode.index];

        if (lNode !== null) {
          result.push(unwrapRNode(lNode));
        } // A given lNode can represent either a native node or a LContainer (when it is a host of a
        // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes
        // from the views in this container.


        if (isLContainer(lNode)) {
          for (var i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {
            var lViewInAContainer = lNode[i];
            var lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;

            if (lViewFirstChildTNode !== null) {
              collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);
            }
          }
        }

        var tNodeType = tNode.type;

        if (tNodeType === 4
        /* ElementContainer */
        || tNodeType === 5
        /* IcuContainer */
        ) {
            collectNativeNodes(tView, lView, tNode.child, result);
          } else if (tNodeType === 1
        /* Projection */
        ) {
            var componentView = lView[DECLARATION_COMPONENT_VIEW];
            var componentHost = componentView[T_HOST];
            var slotIdx = tNode.projection;
            ngDevMode && assertDefined(componentHost.projection, 'Components with projection nodes (<ng-content>) must have projection slots defined.');
            var nodesInSlot = componentHost.projection[slotIdx];

            if (Array.isArray(nodesInSlot)) {
              result.push.apply(result, _toConsumableArray(nodesInSlot));
            } else {
              var parentView = getLViewParent(componentView);
              ngDevMode && assertDefined(parentView, 'Component views should always have a parent view (component\'s host view)');
              collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);
            }
          }

        tNode = isProjection ? tNode.projectionNext : tNode.next;
      }

      return result;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Creates an ElementRef from the most recent node.
     *
     * @returns The ElementRef instance to use
     */


    function injectElementRef(ElementRefToken) {
      return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getLView());
    }

    var R3ElementRef;
    /**
     * Creates an ElementRef given a node.
     *
     * @param ElementRefToken The ElementRef type
     * @param tNode The node for which you'd like an ElementRef
     * @param view The view to which the node belongs
     * @returns The ElementRef instance to use
     */

    function createElementRef(ElementRefToken, tNode, view) {
      if (!R3ElementRef) {
        R3ElementRef = /*#__PURE__*/function (_ElementRefToken) {
          _inherits(ElementRef, _ElementRefToken);

          var _super11 = _createSuper(ElementRef);

          function ElementRef() {
            _classCallCheck(this, ElementRef);

            return _super11.apply(this, arguments);
          }

          return ElementRef;
        }(ElementRefToken);
      }

      return new R3ElementRef(getNativeByTNode(tNode, view));
    }

    var R3TemplateRef;
    /**
     * Creates a TemplateRef given a node.
     *
     * @returns The TemplateRef instance to use
     */

    function injectTemplateRef(TemplateRefToken, ElementRefToken) {
      return createTemplateRef(TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getLView());
    }
    /**
     * Creates a TemplateRef and stores it on the injector.
     *
     * @param TemplateRefToken The TemplateRef type
     * @param ElementRefToken The ElementRef type
     * @param hostTNode The node on which a TemplateRef is requested
     * @param hostView The view to which the node belongs
     * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type
     */


    function createTemplateRef(TemplateRefToken, ElementRefToken, hostTNode, hostView) {
      if (!R3TemplateRef) {
        R3TemplateRef = /*#__PURE__*/function (_TemplateRefToken) {
          _inherits(TemplateRef, _TemplateRefToken);

          var _super12 = _createSuper(TemplateRef);

          function TemplateRef(_declarationView, _declarationTContainer, elementRef) {
            var _this17;

            _classCallCheck(this, TemplateRef);

            _this17 = _super12.call(this);
            _this17._declarationView = _declarationView;
            _this17._declarationTContainer = _declarationTContainer;
            _this17.elementRef = elementRef;
            return _this17;
          }

          _createClass2(TemplateRef, [{
            key: "createEmbeddedView",
            value: function createEmbeddedView(context) {
              var embeddedTView = this._declarationTContainer.tViews;
              var embeddedLView = createLView(this._declarationView, embeddedTView, context, 16
              /* CheckAlways */
              , null, embeddedTView.node);
              var declarationLContainer = this._declarationView[this._declarationTContainer.index];
              ngDevMode && assertLContainer(declarationLContainer);
              embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;
              var declarationViewLQueries = this._declarationView[QUERIES];

              if (declarationViewLQueries !== null) {
                embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);
              }

              renderView(embeddedTView, embeddedLView, context);
              return new ViewRef(embeddedLView);
            }
          }]);

          return TemplateRef;
        }(TemplateRefToken);
      }

      if (hostTNode.type === 0
      /* Container */
      ) {
          ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');
          return new R3TemplateRef(hostView, hostTNode, createElementRef(ElementRefToken, hostTNode, hostView));
        } else {
        return null;
      }
    }

    var R3ViewContainerRef;
    /**
     * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef
     * already exists, retrieves the existing ViewContainerRef.
     *
     * @returns The ViewContainerRef instance to use
     */

    function injectViewContainerRef(ViewContainerRefToken, ElementRefToken) {
      var previousTNode = getPreviousOrParentTNode();
      return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getLView());
    }
    /**
     * Creates a ViewContainerRef and stores it on the injector.
     *
     * @param ViewContainerRefToken The ViewContainerRef type
     * @param ElementRefToken The ElementRef type
     * @param hostTNode The node that is requesting a ViewContainerRef
     * @param hostView The view to which the node belongs
     * @returns The ViewContainerRef instance to use
     */


    function createContainerRef(ViewContainerRefToken, ElementRefToken, hostTNode, hostView) {
      if (!R3ViewContainerRef) {
        R3ViewContainerRef = /*#__PURE__*/function (_ViewContainerRefToke) {
          _inherits(ViewContainerRef, _ViewContainerRefToke);

          var _super13 = _createSuper(ViewContainerRef);

          function ViewContainerRef(_lContainer, _hostTNode, _hostView) {
            var _this18;

            _classCallCheck(this, ViewContainerRef);

            _this18 = _super13.call(this);
            _this18._lContainer = _lContainer;
            _this18._hostTNode = _hostTNode;
            _this18._hostView = _hostView;
            return _this18;
          }

          _createClass2(ViewContainerRef, [{
            key: "clear",
            value: function clear() {
              while (this.length > 0) {
                this.remove(this.length - 1);
              }
            }
          }, {
            key: "get",
            value: function get(index) {
              return this._lContainer[VIEW_REFS] !== null && this._lContainer[VIEW_REFS][index] || null;
            }
          }, {
            key: "createEmbeddedView",
            value: function createEmbeddedView(templateRef, context, index) {
              var viewRef = templateRef.createEmbeddedView(context || {});
              this.insert(viewRef, index);
              return viewRef;
            }
          }, {
            key: "createComponent",
            value: function createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {
              var contextInjector = injector || this.parentInjector;

              if (!ngModuleRef && componentFactory.ngModule == null && contextInjector) {
                // DO NOT REFACTOR. The code here used to have a `value || undefined` expression
                // which seems to cause internal google apps to fail. This is documented in the
                // following internal bug issue: go/b/142967802
                var result = contextInjector.get(NgModuleRef, null);

                if (result) {
                  ngModuleRef = result;
                }
              }

              var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
              this.insert(componentRef.hostView, index);
              return componentRef;
            }
          }, {
            key: "insert",
            value: function insert(viewRef, index) {
              var lView = viewRef._lView;
              var tView = lView[TVIEW];

              if (viewRef.destroyed) {
                throw new Error('Cannot insert a destroyed View in a ViewContainer!');
              }

              this.allocateContainerIfNeeded();

              if (viewAttachedToContainer(lView)) {
                // If view is already attached, detach it first so we clean up references appropriately.
                var prevIdx = this.indexOf(viewRef); // A view might be attached either to this or a different container. The `prevIdx` for
                // those cases will be:
                // equal to -1 for views attached to this ViewContainerRef
                // >= 0 for views attached to a different ViewContainerRef

                if (prevIdx !== -1) {
                  this.detach(prevIdx);
                } else {
                  var prevLContainer = lView[PARENT];
                  ngDevMode && assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.'); // We need to re-create a R3ViewContainerRef instance since those are not stored on
                  // LView (nor anywhere else).

                  var prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);
                  prevVCRef.detach(prevVCRef.indexOf(viewRef));
                }
              }

              var adjustedIdx = this._adjustIndex(index);

              insertView(tView, lView, this._lContainer, adjustedIdx);
              var beforeNode = getBeforeNodeForView(adjustedIdx, this._lContainer);
              addRemoveViewFromContainer(tView, lView, true, beforeNode);
              viewRef.attachToViewContainerRef(this);
              addToArray(this._lContainer[VIEW_REFS], adjustedIdx, viewRef);
              return viewRef;
            }
          }, {
            key: "move",
            value: function move(viewRef, newIndex) {
              if (viewRef.destroyed) {
                throw new Error('Cannot move a destroyed View in a ViewContainer!');
              }

              return this.insert(viewRef, newIndex);
            }
          }, {
            key: "indexOf",
            value: function indexOf(viewRef) {
              var viewRefsArr = this._lContainer[VIEW_REFS];
              return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;
            }
          }, {
            key: "remove",
            value: function remove(index) {
              this.allocateContainerIfNeeded();

              var adjustedIdx = this._adjustIndex(index, -1);

              removeView(this._lContainer, adjustedIdx);
              removeFromArray(this._lContainer[VIEW_REFS], adjustedIdx);
            }
          }, {
            key: "detach",
            value: function detach(index) {
              this.allocateContainerIfNeeded();

              var adjustedIdx = this._adjustIndex(index, -1);

              var view = detachView(this._lContainer, adjustedIdx);
              var wasDetached = view && removeFromArray(this._lContainer[VIEW_REFS], adjustedIdx) != null;
              return wasDetached ? new ViewRef(view) : null;
            }
          }, {
            key: "_adjustIndex",
            value: function _adjustIndex(index) {
              var shift = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

              if (index == null) {
                return this.length + shift;
              }

              if (ngDevMode) {
                assertGreaterThan(index, -1, "ViewRef index must be positive, got ".concat(index)); // +1 because it's legal to insert at the end.

                assertLessThan(index, this.length + 1 + shift, 'index');
              }

              return index;
            }
          }, {
            key: "allocateContainerIfNeeded",
            value: function allocateContainerIfNeeded() {
              if (this._lContainer[VIEW_REFS] === null) {
                this._lContainer[VIEW_REFS] = [];
              }
            }
          }, {
            key: "element",
            get: function get() {
              return createElementRef(ElementRefToken, this._hostTNode, this._hostView);
            }
          }, {
            key: "injector",
            get: function get() {
              return new NodeInjector(this._hostTNode, this._hostView);
            }
            /** @deprecated No replacement */

          }, {
            key: "parentInjector",
            get: function get() {
              var parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);
              var parentView = getParentInjectorView(parentLocation, this._hostView);
              var parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);
              return !hasParentInjector(parentLocation) || parentTNode == null ? new NodeInjector(null, this._hostView) : new NodeInjector(parentTNode, parentView);
            }
          }, {
            key: "length",
            get: function get() {
              return this._lContainer.length - CONTAINER_HEADER_OFFSET;
            }
          }]);

          return ViewContainerRef;
        }(ViewContainerRefToken);
      }

      ngDevMode && assertNodeOfPossibleTypes(hostTNode, [0
      /* Container */
      , 3
      /* Element */
      , 4
      /* ElementContainer */
      ]);
      var lContainer;
      var slotValue = hostView[hostTNode.index];

      if (isLContainer(slotValue)) {
        // If the host is a container, we don't need to create a new LContainer
        lContainer = slotValue;
      } else {
        var commentNode; // If the host is an element container, the native host element is guaranteed to be a
        // comment and we can reuse that comment as anchor element for the new LContainer.
        // The comment node in question is already part of the DOM structure so we don't need to append
        // it again.

        if (hostTNode.type === 4
        /* ElementContainer */
        ) {
            commentNode = unwrapRNode(slotValue);
          } else {
          ngDevMode && ngDevMode.rendererCreateComment++;
          commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : ''); // A `ViewContainerRef` can be injected by the root (topmost / bootstrapped) component. In
          // this case we can't use TView / TNode data structures to insert container's marker node
          // (both a parent of a comment node and the comment node itself are not part of any view). In
          // this specific case we use low-level DOM manipulation to insert container's marker (comment)
          // node.

          if (isRootView(hostView)) {
            var renderer = hostView[RENDERER];
            var hostNative = getNativeByTNode(hostTNode, hostView);
            var parentOfHostNative = nativeParentNode(renderer, hostNative);
            nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative));
          } else {
            appendChild(hostView[TVIEW], hostView, commentNode, hostTNode);
          }
        }

        hostView[hostTNode.index] = lContainer = createLContainer(slotValue, hostView, commentNode, hostTNode);
        addToViewTree(hostView, lContainer);
      }

      return new R3ViewContainerRef(lContainer, hostTNode, hostView);
    }
    /** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */


    function injectChangeDetectorRef() {
      var isPipe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return createViewRef(getPreviousOrParentTNode(), getLView(), isPipe);
    }
    /**
     * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).
     *
     * @param tNode The node that is requesting a ChangeDetectorRef
     * @param lView The view to which the node belongs
     * @param isPipe Whether the view is being injected into a pipe.
     * @returns The ChangeDetectorRef to use
     */


    function createViewRef(tNode, lView, isPipe) {
      // `isComponentView` will be true for Component and Directives (but not for Pipes).
      // See https://github.com/angular/angular/pull/33072 for proper fix
      var isComponentView = !isPipe && isComponentHost(tNode);

      if (isComponentView) {
        // The LView represents the location where the component is declared.
        // Instead we want the LView for the component View and so we need to look it up.
        var componentView = getComponentLViewByIndex(tNode.index, lView); // look down

        return new ViewRef(componentView, componentView);
      } else if (tNode.type === 3
      /* Element */
      || tNode.type === 0
      /* Container */
      || tNode.type === 4
      /* ElementContainer */
      || tNode.type === 5
      /* IcuContainer */
      ) {
          // The LView represents the location where the injection is requested from.
          // We need to locate the containing LView (in case where the `lView` is an embedded view)
          var hostComponentView = lView[DECLARATION_COMPONENT_VIEW]; // look up

          return new ViewRef(hostComponentView, lView);
        }

      return null;
    }
    /** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */


    function getOrCreateRenderer2(view) {
      var renderer = view[RENDERER];

      if (isProceduralRenderer(renderer)) {
        return renderer;
      } else {
        throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');
      }
    }
    /** Injects a Renderer2 for the current component. */


    function injectRenderer2() {
      // We need the Renderer to be based on the component that it's being injected into, however since
      // DI happens before we've entered its view, `getLView` will return the parent view instead.
      var lView = getLView();
      var tNode = getPreviousOrParentTNode();
      var nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);
      return getOrCreateRenderer2(isLView(nodeAtIndex) ? nodeAtIndex : lView);
    }

    var ChangeDetectorRef = /*@__PURE__*/function () {
      var ChangeDetectorRef = function ChangeDetectorRef() {
        _classCallCheck(this, ChangeDetectorRef);
      };
      /**
       * @internal
       * @nocollapse
       */


      ChangeDetectorRef.__NG_ELEMENT_ID__ = function () {
        return SWITCH_CHANGE_DETECTOR_REF_FACTORY();
      };

      return ChangeDetectorRef;
    }();

    var SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = injectChangeDetectorRef;

    var SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = function SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__() {};

    var ɵ0$5 = SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;
    var SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @description
     *
     * Represents a type that a Component or other object is instances of.
     *
     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by
     * the `MyCustomComponent` constructor function.
     *
     * @publicApi
     */

    var Type = Function;

    function isType(v) {
      return typeof v === 'function';
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Attention: These regex has to hold even if the code is minified!
     */


    var DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*arguments\)/;
    var INHERITED_CLASS = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/;
    var INHERITED_CLASS_WITH_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/;
    var INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{\s*super\(\.\.\.arguments\)/;
    /**
     * Determine whether a stringified type is a class which delegates its constructor
     * to its parent.
     *
     * This is not trivial since compiled code can actually contain a constructor function
     * even if the original source code did not. For instance, when the child class contains
     * an initialized instance property.
     */

    function isDelegateCtor(typeStr) {
      return DELEGATE_CTOR.test(typeStr) || INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) || INHERITED_CLASS.test(typeStr) && !INHERITED_CLASS_WITH_CTOR.test(typeStr);
    }

    var ReflectionCapabilities = /*#__PURE__*/function () {
      function ReflectionCapabilities(reflect) {
        _classCallCheck(this, ReflectionCapabilities);

        this._reflect = reflect || _global['Reflect'];
      }

      _createClass2(ReflectionCapabilities, [{
        key: "isReflectionEnabled",
        value: function isReflectionEnabled() {
          return true;
        }
      }, {
        key: "factory",
        value: function factory(t) {
          return function () {
            for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
              args[_key8] = arguments[_key8];
            }

            return _construct(t, args);
          };
        }
        /** @internal */

      }, {
        key: "_zipTypesAndAnnotations",
        value: function _zipTypesAndAnnotations(paramTypes, paramAnnotations) {
          var result;

          if (typeof paramTypes === 'undefined') {
            result = newArray(paramAnnotations.length);
          } else {
            result = newArray(paramTypes.length);
          }

          for (var i = 0; i < result.length; i++) {
            // TS outputs Object for parameters without types, while Traceur omits
            // the annotations. For now we preserve the Traceur behavior to aid
            // migration, but this can be revisited.
            if (typeof paramTypes === 'undefined') {
              result[i] = [];
            } else if (paramTypes[i] && paramTypes[i] != Object) {
              result[i] = [paramTypes[i]];
            } else {
              result[i] = [];
            }

            if (paramAnnotations && paramAnnotations[i] != null) {
              result[i] = result[i].concat(paramAnnotations[i]);
            }
          }

          return result;
        }
      }, {
        key: "_ownParameters",
        value: function _ownParameters(type, parentCtor) {
          var typeStr = type.toString(); // If we have no decorators, we only have function.length as metadata.
          // In that case, to detect whether a child class declared an own constructor or not,
          // we need to look inside of that constructor to check whether it is
          // just calling the parent.
          // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
          // that sets 'design:paramtypes' to []
          // if a class inherits from another class but has no ctor declared itself.

          if (isDelegateCtor(typeStr)) {
            return null;
          } // Prefer the direct API.


          if (type.parameters && type.parameters !== parentCtor.parameters) {
            return type.parameters;
          } // API of tsickle for lowering decorators to properties on the class.


          var tsickleCtorParams = type.ctorParameters;

          if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
            // Newer tsickle uses a function closure
            // Retain the non-function case for compatibility with older tsickle
            var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;

            var _paramTypes = ctorParameters.map(function (ctorParam) {
              return ctorParam && ctorParam.type;
            });

            var _paramAnnotations = ctorParameters.map(function (ctorParam) {
              return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
            });

            return this._zipTypesAndAnnotations(_paramTypes, _paramAnnotations);
          } // API for metadata created by invoking the decorators.


          var paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];

          var paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata('design:paramtypes', type);

          if (paramTypes || paramAnnotations) {
            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
          } // If a class has no decorators, at least create metadata
          // based on function.length.
          // Note: We know that this is a real constructor as we checked
          // the content of the constructor above.


          return newArray(type.length);
        }
      }, {
        key: "parameters",
        value: function parameters(type) {
          // Note: only report metadata if we have at least one class decorator
          // to stay in sync with the static reflector.
          if (!isType(type)) {
            return [];
          }

          var parentCtor = getParentCtor(type);

          var parameters = this._ownParameters(type, parentCtor);

          if (!parameters && parentCtor !== Object) {
            parameters = this.parameters(parentCtor);
          }

          return parameters || [];
        }
      }, {
        key: "_ownAnnotations",
        value: function _ownAnnotations(typeOrFunc, parentCtor) {
          // Prefer the direct API.
          if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
            var annotations = typeOrFunc.annotations;

            if (typeof annotations === 'function' && annotations.annotations) {
              annotations = annotations.annotations;
            }

            return annotations;
          } // API of tsickle for lowering decorators to properties on the class.


          if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
          } // API for metadata created by invoking the decorators.


          if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {
            return typeOrFunc[ANNOTATIONS];
          }

          return null;
        }
      }, {
        key: "annotations",
        value: function annotations(typeOrFunc) {
          if (!isType(typeOrFunc)) {
            return [];
          }

          var parentCtor = getParentCtor(typeOrFunc);
          var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
          var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
          return parentAnnotations.concat(ownAnnotations);
        }
      }, {
        key: "_ownPropMetadata",
        value: function _ownPropMetadata(typeOrFunc, parentCtor) {
          // Prefer the direct API.
          if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {
            var propMetadata = typeOrFunc.propMetadata;

            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
              propMetadata = propMetadata.propMetadata;
            }

            return propMetadata;
          } // API of tsickle for lowering decorators to properties on the class.


          if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {
            var propDecorators = typeOrFunc.propDecorators;
            var _propMetadata = {};
            Object.keys(propDecorators).forEach(function (prop) {
              _propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);
            });
            return _propMetadata;
          } // API for metadata created by invoking the decorators.


          if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {
            return typeOrFunc[PROP_METADATA];
          }

          return null;
        }
      }, {
        key: "propMetadata",
        value: function propMetadata(typeOrFunc) {
          if (!isType(typeOrFunc)) {
            return {};
          }

          var parentCtor = getParentCtor(typeOrFunc);
          var propMetadata = {};

          if (parentCtor !== Object) {
            var parentPropMetadata = this.propMetadata(parentCtor);
            Object.keys(parentPropMetadata).forEach(function (propName) {
              propMetadata[propName] = parentPropMetadata[propName];
            });
          }

          var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);

          if (ownPropMetadata) {
            Object.keys(ownPropMetadata).forEach(function (propName) {
              var decorators = [];

              if (propMetadata.hasOwnProperty(propName)) {
                decorators.push.apply(decorators, _toConsumableArray(propMetadata[propName]));
              }

              decorators.push.apply(decorators, _toConsumableArray(ownPropMetadata[propName]));
              propMetadata[propName] = decorators;
            });
          }

          return propMetadata;
        }
      }, {
        key: "ownPropMetadata",
        value: function ownPropMetadata(typeOrFunc) {
          if (!isType(typeOrFunc)) {
            return {};
          }

          return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};
        }
      }, {
        key: "hasLifecycleHook",
        value: function hasLifecycleHook(type, lcProperty) {
          return type instanceof Type && lcProperty in type.prototype;
        }
      }, {
        key: "guards",
        value: function guards(type) {
          return {};
        }
      }, {
        key: "getter",
        value: function getter(name) {
          return new Function('o', 'return o.' + name + ';');
        }
      }, {
        key: "setter",
        value: function setter(name) {
          return new Function('o', 'v', 'return o.' + name + ' = v;');
        }
      }, {
        key: "method",
        value: function method(name) {
          var functionBody = "if (!o.".concat(name, ") throw new Error('\"").concat(name, "\" is undefined');\n        return o.").concat(name, ".apply(o, args);");
          return new Function('o', 'args', functionBody);
        } // There is not a concept of import uri in Js, but this is useful in developing Dart applications.

      }, {
        key: "importUri",
        value: function importUri(type) {
          // StaticSymbol
          if (typeof type === 'object' && type['filePath']) {
            return type['filePath'];
          } // Runtime type


          return "./".concat(stringify(type));
        }
      }, {
        key: "resourceUri",
        value: function resourceUri(type) {
          return "./".concat(stringify(type));
        }
      }, {
        key: "resolveIdentifier",
        value: function resolveIdentifier(name, moduleUrl, members, runtime) {
          return runtime;
        }
      }, {
        key: "resolveEnum",
        value: function resolveEnum(enumIdentifier, name) {
          return enumIdentifier[name];
        }
      }]);

      return ReflectionCapabilities;
    }();

    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
      if (!decoratorInvocations) {
        return [];
      }

      return decoratorInvocations.map(function (decoratorInvocation) {
        var decoratorType = decoratorInvocation.type;
        var annotationCls = decoratorType.annotationCls;
        var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
        return _construct(annotationCls, _toConsumableArray(annotationArgs));
      });
    }

    function getParentCtor(ctor) {
      var parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;
      var parentCtor = parentProto ? parentProto.constructor : null; // Note: We always use `Object` as the null value
      // to simplify checking later on.

      return parentCtor || Object;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var _reflect = null;

    function getReflect() {
      return _reflect = _reflect || new ReflectionCapabilities();
    }

    function reflectDependencies(type) {
      return convertDependencies(getReflect().parameters(type));
    }

    function convertDependencies(deps) {
      var compiler = getCompilerFacade();
      return deps.map(function (dep) {
        return reflectDependency(compiler, dep);
      });
    }

    function reflectDependency(compiler, dep) {
      var meta = {
        token: null,
        host: false,
        optional: false,
        resolved: compiler.R3ResolvedDependencyType.Token,
        self: false,
        skipSelf: false
      };

      function setTokenAndResolvedType(token) {
        meta.resolved = compiler.R3ResolvedDependencyType.Token;
        meta.token = token;
      }

      if (Array.isArray(dep) && dep.length > 0) {
        for (var j = 0; j < dep.length; j++) {
          var param = dep[j];

          if (param === undefined) {
            // param may be undefined if type of dep is not set by ngtsc
            continue;
          }

          var proto = Object.getPrototypeOf(param);

          if (param instanceof Optional || proto.ngMetadataName === 'Optional') {
            meta.optional = true;
          } else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {
            meta.skipSelf = true;
          } else if (param instanceof Self || proto.ngMetadataName === 'Self') {
            meta.self = true;
          } else if (param instanceof Host || proto.ngMetadataName === 'Host') {
            meta.host = true;
          } else if (param instanceof Inject) {
            meta.token = param.token;
          } else if (param instanceof Attribute) {
            if (param.attributeName === undefined) {
              throw new Error("Attribute name must be defined.");
            }

            meta.token = param.attributeName;
            meta.resolved = compiler.R3ResolvedDependencyType.Attribute;
          } else if (param === ChangeDetectorRef) {
            meta.token = param;
            meta.resolved = compiler.R3ResolvedDependencyType.ChangeDetectorRef;
          } else {
            setTokenAndResolvedType(param);
          }
        }
      } else if (dep === undefined || Array.isArray(dep) && dep.length === 0) {
        meta.token = undefined;
        meta.resolved = R3ResolvedDependencyType.Invalid;
      } else {
        setTokenAndResolvedType(dep);
      }

      return meta;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting
     * injectable def (`ɵprov`) onto the injectable type.
     */


    function compileInjectable(type, srcMeta) {
      var ngInjectableDef = null;
      var ngFactoryDef = null; // if NG_PROV_DEF is already defined on this class then don't overwrite it

      if (!type.hasOwnProperty(NG_PROV_DEF)) {
        Object.defineProperty(type, NG_PROV_DEF, {
          get: function get() {
            if (ngInjectableDef === null) {
              ngInjectableDef = getCompilerFacade().compileInjectable(angularCoreDiEnv, "ng:///".concat(type.name, "/\u0275prov.js"), getInjectableMetadata(type, srcMeta));
            }

            return ngInjectableDef;
          }
        }); // On IE10 properties defined via `defineProperty` won't be inherited by child classes,
        // which will break inheriting the injectable definition from a grandparent through an
        // undecorated parent class. We work around it by defining a method which should be used
        // as a fallback. This should only be a problem in JIT mode, because in AOT TypeScript
        // seems to have a workaround for static properties. When inheriting from an undecorated
        // parent is no longer supported (v11 or later), this can safely be removed.

        if (!type.hasOwnProperty(NG_PROV_DEF_FALLBACK)) {
          type[NG_PROV_DEF_FALLBACK] = function () {
            return type[NG_PROV_DEF];
          };
        }
      } // if NG_FACTORY_DEF is already defined on this class then don't overwrite it


      if (!type.hasOwnProperty(NG_FACTORY_DEF)) {
        Object.defineProperty(type, NG_FACTORY_DEF, {
          get: function get() {
            if (ngFactoryDef === null) {
              var metadata = getInjectableMetadata(type, srcMeta);
              var compiler = getCompilerFacade();
              ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, "ng:///".concat(type.name, "/\u0275fac.js"), {
                name: metadata.name,
                type: metadata.type,
                typeArgumentCount: metadata.typeArgumentCount,
                deps: reflectDependencies(type),
                injectFn: 'inject',
                target: compiler.R3FactoryTarget.Injectable
              });
            }

            return ngFactoryDef;
          },
          // Leave this configurable so that the factories from directives or pipes can take precedence.
          configurable: true
        });
      }
    }

    var ɵ0$6 = getClosureSafeProperty;
    var USE_VALUE$1 = /*@__PURE__*/getClosureSafeProperty({
      provide: String,
      useValue: ɵ0$6
    });

    function isUseClassProvider(meta) {
      return meta.useClass !== undefined;
    }

    function isUseValueProvider(meta) {
      return USE_VALUE$1 in meta;
    }

    function isUseFactoryProvider(meta) {
      return meta.useFactory !== undefined;
    }

    function isUseExistingProvider(meta) {
      return meta.useExisting !== undefined;
    }

    function getInjectableMetadata(type, srcMeta) {
      // Allow the compilation of a class with a `@Injectable()` decorator without parameters
      var meta = srcMeta || {
        providedIn: null
      };
      var compilerMeta = {
        name: type.name,
        type: type,
        typeArgumentCount: 0,
        providedIn: meta.providedIn,
        userDeps: undefined
      };

      if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {
        compilerMeta.userDeps = convertDependencies(meta.deps);
      }

      if (isUseClassProvider(meta)) {
        // The user explicitly specified useClass, and may or may not have provided deps.
        compilerMeta.useClass = resolveForwardRef(meta.useClass);
      } else if (isUseValueProvider(meta)) {
        // The user explicitly specified useValue.
        compilerMeta.useValue = resolveForwardRef(meta.useValue);
      } else if (isUseFactoryProvider(meta)) {
        // The user explicitly specified useFactory.
        compilerMeta.useFactory = meta.useFactory;
      } else if (isUseExistingProvider(meta)) {
        // The user explicitly specified useExisting.
        compilerMeta.useExisting = resolveForwardRef(meta.useExisting);
      }

      return compilerMeta;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var ɵ0$7 = getClosureSafeProperty;
    var USE_VALUE$2 = /*@__PURE__*/getClosureSafeProperty({
      provide: String,
      useValue: ɵ0$7
    });
    var EMPTY_ARRAY$1 = [];

    function convertInjectableProviderToFactory(type, provider) {
      if (!provider) {
        var reflectionCapabilities = new ReflectionCapabilities();
        var deps = reflectionCapabilities.parameters(type); // TODO - convert to flags.

        return function () {
          return _construct(type, _toConsumableArray(injectArgs(deps)));
        };
      }

      if (USE_VALUE$2 in provider) {
        var valueProvider = provider;
        return function () {
          return valueProvider.useValue;
        };
      } else if (provider.useExisting) {
        var existingProvider = provider;
        return function () {
          return ɵɵinject(resolveForwardRef(existingProvider.useExisting));
        };
      } else if (provider.useFactory) {
        var factoryProvider = provider;
        return function () {
          return factoryProvider.useFactory.apply(factoryProvider, _toConsumableArray(injectArgs(factoryProvider.deps || EMPTY_ARRAY$1)));
        };
      } else if (provider.useClass) {
        var classProvider = provider;
        var _deps = provider.deps;

        if (!_deps) {
          var _reflectionCapabilities = new ReflectionCapabilities();

          _deps = _reflectionCapabilities.parameters(type);
        }

        return function () {
          return _construct(resolveForwardRef(classProvider.useClass), _toConsumableArray(injectArgs(_deps)));
        };
      } else {
        var _deps2 = provider.deps;

        if (!_deps2) {
          var _reflectionCapabilities2 = new ReflectionCapabilities();

          _deps2 = _reflectionCapabilities2.parameters(type);
        }

        return function () {
          return _construct(type, _toConsumableArray(injectArgs(_deps2)));
        };
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var ɵ0$8 = function ɵ0$8(type, meta) {
      return SWITCH_COMPILE_INJECTABLE(type, meta);
    };
    /**
     * Injectable decorator and metadata.
     *
     * @Annotation
     * @publicApi
     */


    var Injectable = /*@__PURE__*/makeDecorator('Injectable', undefined, undefined, undefined, ɵ0$8);
    /**
     * Supports @Injectable() in JIT mode for Render2.
     */

    function render2CompileInjectable(injectableType, options) {
      if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {
        injectableType.ɵprov = ɵɵdefineInjectable({
          token: injectableType,
          providedIn: options.providedIn,
          factory: convertInjectableProviderToFactory(injectableType, options)
        });
      }
    }

    var SWITCH_COMPILE_INJECTABLE__POST_R3__ = compileInjectable;
    var SWITCH_COMPILE_INJECTABLE__PRE_R3__ = render2CompileInjectable;
    var SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__POST_R3__;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * An internal token whose presence in an injector indicates that the injector should treat itself
     * as a root scoped injector when processing requests for unknown tokens which may indicate
     * they are provided in the root scope.
     */

    var INJECTOR_SCOPE = /*@__PURE__*/new InjectionToken('Set Injector scope.');
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Marker which indicates that a value has not yet been created from the factory function.
     */

    var NOT_YET = {};
    /**
     * Marker which indicates that the factory function for a token is in the process of being called.
     *
     * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates
     * injection of a dependency has recursively attempted to inject the original token, and there is
     * a circular dependency among the providers.
     */

    var CIRCULAR = {};
    var EMPTY_ARRAY$2 = [];
    /**
     * A lazily initialized NullInjector.
     */

    var NULL_INJECTOR = undefined;

    function getNullInjector() {
      if (NULL_INJECTOR === undefined) {
        NULL_INJECTOR = new NullInjector();
      }

      return NULL_INJECTOR;
    }
    /**
     * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.
     *
     * @publicApi
     */


    function createInjector(defType) {
      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var additionalProviders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var name = arguments.length > 3 ? arguments[3] : undefined;
      var injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);

      injector._resolveInjectorDefTypes();

      return injector;
    }
    /**
     * Creates a new injector without eagerly resolving its injector types. Can be used in places
     * where resolving the injector types immediately can lead to an infinite loop. The injector types
     * should be resolved at a later point by calling `_resolveInjectorDefTypes`.
     */


    function createInjectorWithoutInjectorInstances(defType) {
      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var additionalProviders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var name = arguments.length > 3 ? arguments[3] : undefined;
      return new R3Injector(defType, additionalProviders, parent || getNullInjector(), name);
    }

    var R3Injector = /*#__PURE__*/function () {
      function R3Injector(def, additionalProviders, parent) {
        var _this19 = this;

        var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

        _classCallCheck(this, R3Injector);

        this.parent = parent;
        /**
         * Map of tokens to records which contain the instances of those tokens.
         * - `null` value implies that we don't have the record. Used by tree-shakable injectors
         * to prevent further searches.
         */

        this.records = new Map();
        /**
         * The transitive set of `InjectorType`s which define this injector.
         */

        this.injectorDefTypes = new Set();
        /**
         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.
         */

        this.onDestroy = new Set();
        this._destroyed = false;
        var dedupStack = []; // Start off by creating Records for every provider declared in every InjectorType
        // included transitively in additional providers then do the same for `def`. This order is
        // important because `def` may include providers that override ones in additionalProviders.

        additionalProviders && deepForEach(additionalProviders, function (provider) {
          return _this19.processProvider(provider, def, additionalProviders);
        });
        deepForEach([def], function (injectorDef) {
          return _this19.processInjectorType(injectorDef, [], dedupStack);
        }); // Make sure the INJECTOR token provides this injector.

        this.records.set(INJECTOR, makeRecord(undefined, this)); // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide
        // any injectable scoped to APP_ROOT_SCOPE.

        var record = this.records.get(INJECTOR_SCOPE);
        this.scope = record != null ? record.value : null; // Source name, used for debugging

        this.source = source || (typeof def === 'object' ? null : stringify(def));
      }
      /**
       * Flag indicating that this injector was previously destroyed.
       */


      _createClass2(R3Injector, [{
        key: "destroy",

        /**
         * Destroy the injector and release references to every instance or provider associated with it.
         *
         * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a
         * hook was found.
         */
        value: function destroy() {
          this.assertNotDestroyed(); // Set destroyed = true first, in case lifecycle hooks re-enter destroy().

          this._destroyed = true;

          try {
            // Call all the lifecycle hooks.
            this.onDestroy.forEach(function (service) {
              return service.ngOnDestroy();
            });
          } finally {
            // Release all references.
            this.records.clear();
            this.onDestroy.clear();
            this.injectorDefTypes.clear();
          }
        }
      }, {
        key: "get",
        value: function get(token) {
          var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;
          var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InjectFlags.Default;
          this.assertNotDestroyed(); // Set the injection context.

          var previousInjector = setCurrentInjector(this);

          try {
            // Check for the SkipSelf flag.
            if (!(flags & InjectFlags.SkipSelf)) {
              // SkipSelf isn't set, check if the record belongs to this injector.
              var record = this.records.get(token);

              if (record === undefined) {
                // No record, but maybe the token is scoped to this injector. Look for an injectable
                // def with a scope matching this injector.
                var def = couldBeInjectableType(token) && getInjectableDef(token);

                if (def && this.injectableDefInScope(def)) {
                  // Found an injectable def and it's scoped to this injector. Pretend as if it was here
                  // all along.
                  record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);
                } else {
                  record = null;
                }

                this.records.set(token, record);
              } // If a record was found, get the instance for it and return it.


              if (record != null
              /* NOT null || undefined */
              ) {
                  return this.hydrate(token, record);
                }
            } // Select the next injector based on the Self flag - if self is set, the next injector is
            // the NullInjector, otherwise it's the parent.


            var nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector(); // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue
            // is undefined, the value is null, otherwise it's the notFoundValue.

            notFoundValue = flags & InjectFlags.Optional && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;
            return nextInjector.get(token, notFoundValue);
          } catch (e) {
            if (e.name === 'NullInjectorError') {
              var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
              path.unshift(stringify(token));

              if (previousInjector) {
                // We still have a parent injector, keep throwing
                throw e;
              } else {
                // Format & throw the final error message when we don't have any previous injector
                return catchInjectorError(e, token, 'R3InjectorError', this.source);
              }
            } else {
              throw e;
            }
          } finally {
            // Lastly, clean up the state by restoring the previous injector.
            setCurrentInjector(previousInjector);
          }
        }
        /** @internal */

      }, {
        key: "_resolveInjectorDefTypes",
        value: function _resolveInjectorDefTypes() {
          var _this20 = this;

          this.injectorDefTypes.forEach(function (defType) {
            return _this20.get(defType);
          });
        }
      }, {
        key: "toString",
        value: function toString() {
          var tokens = [],
              records = this.records;
          records.forEach(function (v, token) {
            return tokens.push(stringify(token));
          });
          return "R3Injector[".concat(tokens.join(', '), "]");
        }
      }, {
        key: "assertNotDestroyed",
        value: function assertNotDestroyed() {
          if (this._destroyed) {
            throw new Error('Injector has already been destroyed.');
          }
        }
        /**
         * Add an `InjectorType` or `InjectorTypeWithProviders` and all of its transitive providers
         * to this injector.
         *
         * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,
         * the function will return "true" to indicate that the providers of the type definition need
         * to be processed. This allows us to process providers of injector types after all imports of
         * an injector definition are processed. (following View Engine semantics: see FW-1349)
         */

      }, {
        key: "processInjectorType",
        value: function processInjectorType(defOrWrappedDef, parents, dedupStack) {
          var _this21 = this;

          defOrWrappedDef = resolveForwardRef(defOrWrappedDef);
          if (!defOrWrappedDef) return false; // Either the defOrWrappedDef is an InjectorType (with injector def) or an
          // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic
          // read, so care is taken to only do the read once.
          // First attempt to read the injector def (`ɵinj`).

          var def = getInjectorDef(defOrWrappedDef); // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.

          var ngModule = def == null && defOrWrappedDef.ngModule || undefined; // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,
          // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type
          // is the `ngModule`.

          var defType = ngModule === undefined ? defOrWrappedDef : ngModule; // Check for circular dependencies.

          if (ngDevMode && parents.indexOf(defType) !== -1) {
            var defName = stringify(defType);
            throw new Error("Circular dependency in DI detected for type ".concat(defName, ". Dependency path: ").concat(parents.map(function (defType) {
              return stringify(defType);
            }).join(' > '), " > ").concat(defName, "."));
          } // Check for multiple imports of the same module


          var isDuplicate = dedupStack.indexOf(defType) !== -1; // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual
          // `InjectorDef` is on its `ngModule`.

          if (ngModule !== undefined) {
            def = getInjectorDef(ngModule);
          } // If no definition was found, it might be from exports. Remove it.


          if (def == null) {
            return false;
          } // Add providers in the same way that @NgModule resolution did:
          // First, include providers from any imports.


          if (def.imports != null && !isDuplicate) {
            // Before processing defType's imports, add it to the set of parents. This way, if it ends
            // up deeply importing itself, this can be detected.
            ngDevMode && parents.push(defType); // Add it to the set of dedups. This way we can detect multiple imports of the same module

            dedupStack.push(defType);
            var importTypesWithProviders;

            try {
              deepForEach(def.imports, function (imported) {
                if (_this21.processInjectorType(imported, parents, dedupStack)) {
                  if (importTypesWithProviders === undefined) importTypesWithProviders = []; // If the processed import is an injector type with providers, we store it in the
                  // list of import types with providers, so that we can process those afterwards.

                  importTypesWithProviders.push(imported);
                }
              });
            } finally {
              // Remove it from the parents set when finished.
              ngDevMode && parents.pop();
            } // Imports which are declared with providers (TypeWithProviders) need to be processed
            // after all imported modules are processed. This is similar to how View Engine
            // processes/merges module imports in the metadata resolver. See: FW-1349.


            if (importTypesWithProviders !== undefined) {
              var _loop = function _loop(i) {
                var _importTypesWithProvi = importTypesWithProviders[i],
                    ngModule = _importTypesWithProvi.ngModule,
                    providers = _importTypesWithProvi.providers;
                deepForEach(providers, function (provider) {
                  return _this21.processProvider(provider, ngModule, providers || EMPTY_ARRAY$2);
                });
              };

              for (var i = 0; i < importTypesWithProviders.length; i++) {
                _loop(i);
              }
            }
          } // Track the InjectorType and add a provider for it. It's important that this is done after the
          // def's imports.


          this.injectorDefTypes.add(defType);
          this.records.set(defType, makeRecord(def.factory, NOT_YET)); // Next, include providers listed on the definition itself.

          var defProviders = def.providers;

          if (defProviders != null && !isDuplicate) {
            var injectorType = defOrWrappedDef;
            deepForEach(defProviders, function (provider) {
              return _this21.processProvider(provider, injectorType, defProviders);
            });
          }

          return ngModule !== undefined && defOrWrappedDef.providers !== undefined;
        }
        /**
         * Process a `SingleProvider` and add it.
         */

      }, {
        key: "processProvider",
        value: function processProvider(provider, ngModuleType, providers) {
          // Determine the token from the provider. Either it's its own token, or has a {provide: ...}
          // property.
          provider = resolveForwardRef(provider);
          var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide); // Construct a `Record` for the provider.

          var record = providerToRecord(provider, ngModuleType, providers);

          if (!isTypeProvider(provider) && provider.multi === true) {
            // If the provider indicates that it's a multi-provider, process it specially.
            // First check whether it's been defined already.
            var multiRecord = this.records.get(token);

            if (multiRecord) {
              // It has. Throw a nice error if
              if (multiRecord.multi === undefined) {
                throwMixedMultiProviderError();
              }
            } else {
              multiRecord = makeRecord(undefined, NOT_YET, true);

              multiRecord.factory = function () {
                return injectArgs(multiRecord.multi);
              };

              this.records.set(token, multiRecord);
            }

            token = provider;
            multiRecord.multi.push(provider);
          } else {
            var existing = this.records.get(token);

            if (existing && existing.multi !== undefined) {
              throwMixedMultiProviderError();
            }
          }

          this.records.set(token, record);
        }
      }, {
        key: "hydrate",
        value: function hydrate(token, record) {
          if (record.value === CIRCULAR) {
            throwCyclicDependencyError(stringify(token));
          } else if (record.value === NOT_YET) {
            record.value = CIRCULAR;
            record.value = record.factory();
          }

          if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {
            this.onDestroy.add(record.value);
          }

          return record.value;
        }
      }, {
        key: "injectableDefInScope",
        value: function injectableDefInScope(def) {
          if (!def.providedIn) {
            return false;
          } else if (typeof def.providedIn === 'string') {
            return def.providedIn === 'any' || def.providedIn === this.scope;
          } else {
            return this.injectorDefTypes.has(def.providedIn);
          }
        }
      }, {
        key: "destroyed",
        get: function get() {
          return this._destroyed;
        }
      }]);

      return R3Injector;
    }();

    function injectableDefOrInjectorDefFactory(token) {
      // Most tokens will have an injectable def directly on them, which specifies a factory directly.
      var injectableDef = getInjectableDef(token);
      var factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);

      if (factory !== null) {
        return factory;
      } // If the token is an NgModule, it's also injectable but the factory is on its injector def
      // (`ɵinj`)


      var injectorDef = getInjectorDef(token);

      if (injectorDef !== null) {
        return injectorDef.factory;
      } // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.
      // If it's missing that, it's an error.


      if (token instanceof InjectionToken) {
        throw new Error("Token ".concat(stringify(token), " is missing a \u0275prov definition."));
      } // Undecorated types can sometimes be created if they have no constructor arguments.


      if (token instanceof Function) {
        return getUndecoratedInjectableFactory(token);
      } // There was no way to resolve a factory for this token.


      throw new Error('unreachable');
    }

    function getUndecoratedInjectableFactory(token) {
      // If the token has parameters then it has dependencies that we cannot resolve implicitly.
      var paramLength = token.length;

      if (paramLength > 0) {
        var args = newArray(paramLength, '?');
        throw new Error("Can't resolve all parameters for ".concat(stringify(token), ": (").concat(args.join(', '), ")."));
      } // The constructor function appears to have no parameters.
      // This might be because it inherits from a super-class. In which case, use an injectable
      // def from an ancestor if there is one.
      // Otherwise this really is a simple class with no dependencies, so return a factory that
      // just instantiates the zero-arg constructor.


      var inheritedInjectableDef = getInheritedInjectableDef(token);

      if (inheritedInjectableDef !== null) {
        return function () {
          return inheritedInjectableDef.factory(token);
        };
      } else {
        return function () {
          return new token();
        };
      }
    }

    function providerToRecord(provider, ngModuleType, providers) {
      if (isValueProvider(provider)) {
        return makeRecord(undefined, provider.useValue);
      } else {
        var factory = providerToFactory(provider, ngModuleType, providers);
        return makeRecord(factory, NOT_YET);
      }
    }
    /**
     * Converts a `SingleProvider` into a factory function.
     *
     * @param provider provider to convert to factory
     */


    function providerToFactory(provider, ngModuleType, providers) {
      var factory = undefined;

      if (isTypeProvider(provider)) {
        var unwrappedProvider = resolveForwardRef(provider);
        return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);
      } else {
        if (isValueProvider(provider)) {
          factory = function factory() {
            return resolveForwardRef(provider.useValue);
          };
        } else if (isFactoryProvider(provider)) {
          factory = function factory() {
            return provider.useFactory.apply(provider, _toConsumableArray(injectArgs(provider.deps || [])));
          };
        } else if (isExistingProvider(provider)) {
          factory = function factory() {
            return ɵɵinject(resolveForwardRef(provider.useExisting));
          };
        } else {
          var classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));

          if (!classRef) {
            throwInvalidProviderError(ngModuleType, providers, provider);
          }

          if (hasDeps(provider)) {
            factory = function factory() {
              return _construct(classRef, _toConsumableArray(injectArgs(provider.deps)));
            };
          } else {
            return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);
          }
        }
      }

      return factory;
    }

    function makeRecord(factory, value) {
      var multi = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      return {
        factory: factory,
        value: value,
        multi: multi ? [] : undefined
      };
    }

    function isValueProvider(value) {
      return value !== null && typeof value == 'object' && USE_VALUE in value;
    }

    function isExistingProvider(value) {
      return !!(value && value.useExisting);
    }

    function isFactoryProvider(value) {
      return !!(value && value.useFactory);
    }

    function isTypeProvider(value) {
      return typeof value === 'function';
    }

    function isClassProvider(value) {
      return !!value.useClass;
    }

    function hasDeps(value) {
      return !!value.deps;
    }

    function hasOnDestroy(value) {
      return value !== null && typeof value === 'object' && typeof value.ngOnDestroy === 'function';
    }

    function couldBeInjectableType(value) {
      return typeof value === 'function' || typeof value === 'object' && value instanceof InjectionToken;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function INJECTOR_IMPL__PRE_R3__(providers, parent, name) {
      return new StaticInjector(providers, parent, name);
    }

    function INJECTOR_IMPL__POST_R3__(providers, parent, name) {
      return createInjector({
        name: name
      }, parent, providers, name);
    }

    var INJECTOR_IMPL = INJECTOR_IMPL__POST_R3__;

    var Injector = /*@__PURE__*/function () {
      var Injector = /*#__PURE__*/function () {
        function Injector() {
          _classCallCheck(this, Injector);
        }

        _createClass2(Injector, null, [{
          key: "create",
          value: function create(options, parent) {
            if (Array.isArray(options)) {
              return INJECTOR_IMPL(options, parent, '');
            } else {
              return INJECTOR_IMPL(options.providers, options.parent, options.name || '');
            }
          }
        }]);

        return Injector;
      }();

      Injector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;
      Injector.NULL = /*@__PURE__*/new NullInjector();
      /** @nocollapse */

      Injector.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
        token: Injector,
        providedIn: 'any',
        factory: function factory() {
          return ɵɵinject(INJECTOR);
        }
      });
      /**
       * @internal
       * @nocollapse
       */

      Injector.__NG_ELEMENT_ID__ = -1;
      return Injector;
    }();

    var IDENT = function IDENT(value) {
      return value;
    };

    var ɵ0$9 = IDENT;
    var EMPTY = [];
    var CIRCULAR$1 = IDENT;

    var MULTI_PROVIDER_FN = function MULTI_PROVIDER_FN() {
      return Array.prototype.slice.call(arguments);
    };

    var ɵ1$1 = MULTI_PROVIDER_FN;
    var NO_NEW_LINE$1 = 'ɵ';

    var StaticInjector = /*#__PURE__*/function () {
      function StaticInjector(providers) {
        var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.NULL;
        var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        _classCallCheck(this, StaticInjector);

        this.parent = parent;
        this.source = source;
        var records = this._records = new Map();
        records.set(Injector, {
          token: Injector,
          fn: IDENT,
          deps: EMPTY,
          value: this,
          useNew: false
        });
        records.set(INJECTOR, {
          token: INJECTOR,
          fn: IDENT,
          deps: EMPTY,
          value: this,
          useNew: false
        });
        this.scope = recursivelyProcessProviders(records, providers);
      }

      _createClass2(StaticInjector, [{
        key: "get",
        value: function get(token, notFoundValue) {
          var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InjectFlags.Default;
          var records = this._records;
          var record = records.get(token);

          if (record === undefined) {
            // This means we have never seen this record, see if it is tree shakable provider.
            var injectableDef = getInjectableDef(token);

            if (injectableDef) {
              var providedIn = injectableDef && injectableDef.providedIn;

              if (providedIn === 'any' || providedIn != null && providedIn === this.scope) {
                records.set(token, record = resolveProvider({
                  provide: token,
                  useFactory: injectableDef.factory,
                  deps: EMPTY
                }));
              }
            }

            if (record === undefined) {
              // Set record to null to make sure that we don't go through expensive lookup above again.
              records.set(token, null);
            }
          }

          var lastInjector = setCurrentInjector(this);

          try {
            return tryResolveToken(token, record, records, this.parent, notFoundValue, flags);
          } catch (e) {
            return catchInjectorError(e, token, 'StaticInjectorError', this.source);
          } finally {
            setCurrentInjector(lastInjector);
          }
        }
      }, {
        key: "toString",
        value: function toString() {
          var tokens = [],
              records = this._records;
          records.forEach(function (v, token) {
            return tokens.push(stringify(token));
          });
          return "StaticInjector[".concat(tokens.join(', '), "]");
        }
      }]);

      return StaticInjector;
    }();

    function resolveProvider(provider) {
      var deps = computeDeps(provider);
      var fn = IDENT;
      var value = EMPTY;
      var useNew = false;
      var provide = resolveForwardRef(provider.provide);

      if (USE_VALUE in provider) {
        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.
        value = provider.useValue;
      } else if (provider.useFactory) {
        fn = provider.useFactory;
      } else if (provider.useExisting) {// Just use IDENT
      } else if (provider.useClass) {
        useNew = true;
        fn = resolveForwardRef(provider.useClass);
      } else if (typeof provide == 'function') {
        useNew = true;
        fn = provide;
      } else {
        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);
      }

      return {
        deps: deps,
        fn: fn,
        useNew: useNew,
        value: value
      };
    }

    function multiProviderMixError(token) {
      return staticError('Cannot mix multi providers and regular providers', token);
    }

    function recursivelyProcessProviders(records, provider) {
      var scope = null;

      if (provider) {
        provider = resolveForwardRef(provider);

        if (Array.isArray(provider)) {
          // if we have an array recurse into the array
          for (var i = 0; i < provider.length; i++) {
            scope = recursivelyProcessProviders(records, provider[i]) || scope;
          }
        } else if (typeof provider === 'function') {
          // Functions were supported in ReflectiveInjector, but are not here. For safety give useful
          // error messages
          throw staticError('Function/Class not supported', provider);
        } else if (provider && typeof provider === 'object' && provider.provide) {
          // At this point we have what looks like a provider: {provide: ?, ....}
          var token = resolveForwardRef(provider.provide);
          var resolvedProvider = resolveProvider(provider);

          if (provider.multi === true) {
            // This is a multi provider.
            var multiProvider = records.get(token);

            if (multiProvider) {
              if (multiProvider.fn !== MULTI_PROVIDER_FN) {
                throw multiProviderMixError(token);
              }
            } else {
              // Create a placeholder factory which will look up the constituents of the multi provider.
              records.set(token, multiProvider = {
                token: provider.provide,
                deps: [],
                useNew: false,
                fn: MULTI_PROVIDER_FN,
                value: EMPTY
              });
            } // Treat the provider as the token.


            token = provider;
            multiProvider.deps.push({
              token: token,
              options: 6
              /* Default */

            });
          }

          var record = records.get(token);

          if (record && record.fn == MULTI_PROVIDER_FN) {
            throw multiProviderMixError(token);
          }

          if (token === INJECTOR_SCOPE) {
            scope = resolvedProvider.value;
          }

          records.set(token, resolvedProvider);
        } else {
          throw staticError('Unexpected provider', provider);
        }
      }

      return scope;
    }

    function tryResolveToken(token, record, records, parent, notFoundValue, flags) {
      try {
        return resolveToken(token, record, records, parent, notFoundValue, flags);
      } catch (e) {
        // ensure that 'e' is of type Error.
        if (!(e instanceof Error)) {
          e = new Error(e);
        }

        var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
        path.unshift(token);

        if (record && record.value == CIRCULAR$1) {
          // Reset the Circular flag.
          record.value = EMPTY;
        }

        throw e;
      }
    }

    function resolveToken(token, record, records, parent, notFoundValue, flags) {
      var value;

      if (record && !(flags & InjectFlags.SkipSelf)) {
        // If we don't have a record, this implies that we don't own the provider hence don't know how
        // to resolve it.
        value = record.value;

        if (value == CIRCULAR$1) {
          throw Error(NO_NEW_LINE$1 + 'Circular dependency');
        } else if (value === EMPTY) {
          record.value = CIRCULAR$1;
          var obj = undefined;
          var useNew = record.useNew;
          var fn = record.fn;
          var depRecords = record.deps;
          var deps = EMPTY;

          if (depRecords.length) {
            deps = [];

            for (var i = 0; i < depRecords.length; i++) {
              var depRecord = depRecords[i];
              var options = depRecord.options;
              var childRecord = options & 2
              /* CheckSelf */
              ? records.get(depRecord.token) : undefined;
              deps.push(tryResolveToken( // Current Token to resolve
              depRecord.token, // A record which describes how to resolve the token.
              // If undefined, this means we don't have such a record
              childRecord, // Other records we know about.
              records, // If we don't know how to resolve dependency and we should not check parent for it,
              // than pass in Null injector.
              !childRecord && !(options & 4
              /* CheckParent */
              ) ? Injector.NULL : parent, options & 1
              /* Optional */
              ? null : Injector.THROW_IF_NOT_FOUND, InjectFlags.Default));
            }
          }

          record.value = value = useNew ? _construct(fn, _toConsumableArray(deps)) : fn.apply(obj, deps);
        }
      } else if (!(flags & InjectFlags.Self)) {
        value = parent.get(token, notFoundValue, InjectFlags.Default);
      } else if (!(flags & InjectFlags.Optional)) {
        value = Injector.NULL.get(token, notFoundValue);
      } else {
        value = Injector.NULL.get(token, typeof notFoundValue !== 'undefined' ? notFoundValue : null);
      }

      return value;
    }

    function computeDeps(provider) {
      var deps = EMPTY;
      var providerDeps = provider.deps;

      if (providerDeps && providerDeps.length) {
        deps = [];

        for (var i = 0; i < providerDeps.length; i++) {
          var options = 6
          /* Default */
          ;
          var token = resolveForwardRef(providerDeps[i]);

          if (Array.isArray(token)) {
            for (var j = 0, annotations = token; j < annotations.length; j++) {
              var annotation = annotations[j];

              if (annotation instanceof Optional || annotation == Optional) {
                options = options | 1
                /* Optional */
                ;
              } else if (annotation instanceof SkipSelf || annotation == SkipSelf) {
                options = options & ~2
                /* CheckSelf */
                ;
              } else if (annotation instanceof Self || annotation == Self) {
                options = options & ~4
                /* CheckParent */
                ;
              } else if (annotation instanceof Inject) {
                token = annotation.token;
              } else {
                token = resolveForwardRef(annotation);
              }
            }
          }

          deps.push({
            token: token,
            options: options
          });
        }
      } else if (provider.useExisting) {
        var _token = resolveForwardRef(provider.useExisting);

        deps = [{
          token: _token,
          options: 6
          /* Default */

        }];
      } else if (!providerDeps && !(USE_VALUE in provider)) {
        // useValue & useExisting are the only ones which are exempt from deps all others need it.
        throw staticError('\'deps\' required', provider);
      }

      return deps;
    }

    function staticError(text, obj) {
      return new Error(formatError(text, obj, 'StaticInjectorError'));
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function findFirstClosedCycle(keys) {
      var res = [];

      for (var i = 0; i < keys.length; ++i) {
        if (res.indexOf(keys[i]) > -1) {
          res.push(keys[i]);
          return res;
        }

        res.push(keys[i]);
      }

      return res;
    }

    function constructResolvingPath(keys) {
      if (keys.length > 1) {
        var reversed = findFirstClosedCycle(keys.slice().reverse());
        var tokenStrs = reversed.map(function (k) {
          return stringify(k.token);
        });
        return ' (' + tokenStrs.join(' -> ') + ')';
      }

      return '';
    }

    function injectionError(injector, key, constructResolvingMessage, originalError) {
      var keys = [key];
      var errMsg = constructResolvingMessage(keys);
      var error = originalError ? wrappedError(errMsg, originalError) : Error(errMsg);
      error.addKey = addKey;
      error.keys = keys;
      error.injectors = [injector];
      error.constructResolvingMessage = constructResolvingMessage;
      error[ERROR_ORIGINAL_ERROR] = originalError;
      return error;
    }

    function addKey(injector, key) {
      this.injectors.push(injector);
      this.keys.push(key); // Note: This updated message won't be reflected in the `.stack` property

      this.message = this.constructResolvingMessage(this.keys);
    }
    /**
     * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the
     * {@link Injector} does not have a {@link Provider} for the given key.
     *
     * @usageNotes
     * ### Example
     *
     * ```typescript
     * class A {
     *   constructor(b:B) {}
     * }
     *
     * expect(() => Injector.resolveAndCreate([A])).toThrowError();
     * ```
     */


    function noProviderError(injector, key) {
      return injectionError(injector, key, function (keys) {
        var first = stringify(keys[0].token);
        return "No provider for ".concat(first, "!").concat(constructResolvingPath(keys));
      });
    }
    /**
     * Thrown when dependencies form a cycle.
     *
     * @usageNotes
     * ### Example
     *
     * ```typescript
     * var injector = Injector.resolveAndCreate([
     *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
     *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
     * ]);
     *
     * expect(() => injector.get("one")).toThrowError();
     * ```
     *
     * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
     */


    function cyclicDependencyError(injector, key) {
      return injectionError(injector, key, function (keys) {
        return "Cannot instantiate cyclic dependency!".concat(constructResolvingPath(keys));
      });
    }
    /**
     * Thrown when a constructing type returns with an Error.
     *
     * The `InstantiationError` class contains the original error plus the dependency graph which caused
     * this object to be instantiated.
     *
     * @usageNotes
     * ### Example
     *
     * ```typescript
     * class A {
     *   constructor() {
     *     throw new Error('message');
     *   }
     * }
     *
     * var injector = Injector.resolveAndCreate([A]);
    
     * try {
     *   injector.get(A);
     * } catch (e) {
     *   expect(e instanceof InstantiationError).toBe(true);
     *   expect(e.originalException.message).toEqual("message");
     *   expect(e.originalStack).toBeDefined();
     * }
     * ```
     */


    function instantiationError(injector, originalException, originalStack, key) {
      return injectionError(injector, key, function (keys) {
        var first = stringify(keys[0].token);
        return "".concat(originalException.message, ": Error during instantiation of ").concat(first, "!").concat(constructResolvingPath(keys), ".");
      }, originalException);
    }
    /**
     * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
     * creation.
     *
     * @usageNotes
     * ### Example
     *
     * ```typescript
     * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
     * ```
     */


    function invalidProviderError(provider) {
      return Error("Invalid provider - only instances of Provider and Type are allowed, got: ".concat(provider));
    }
    /**
     * Thrown when the class has no annotation information.
     *
     * Lack of annotation information prevents the {@link Injector} from determining which dependencies
     * need to be injected into the constructor.
     *
     * @usageNotes
     * ### Example
     *
     * ```typescript
     * class A {
     *   constructor(b) {}
     * }
     *
     * expect(() => Injector.resolveAndCreate([A])).toThrowError();
     * ```
     *
     * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
     *
     * ```typescript
     * class B {}
     *
     * class A {
     *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
     * }
     *
     * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
     * ```
     *
     */


    function noAnnotationError(typeOrFunc, params) {
      var signature = [];

      for (var i = 0, ii = params.length; i < ii; i++) {
        var parameter = params[i];

        if (!parameter || parameter.length == 0) {
          signature.push('?');
        } else {
          signature.push(parameter.map(stringify).join(' '));
        }
      }

      return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' + stringify(typeOrFunc) + '\' is decorated with Injectable.');
    }
    /**
     * Thrown when getting an object by index.
     *
     * @usageNotes
     * ### Example
     *
     * ```typescript
     * class A {}
     *
     * var injector = Injector.resolveAndCreate([A]);
     *
     * expect(() => injector.getAt(100)).toThrowError();
     * ```
     *
     */


    function outOfBoundsError(index) {
      return Error("Index ".concat(index, " is out-of-bounds."));
    } // TODO: add a working example after alpha38 is released

    /**
     * Thrown when a multi provider and a regular provider are bound to the same token.
     *
     * @usageNotes
     * ### Example
     *
     * ```typescript
     * expect(() => Injector.resolveAndCreate([
     *   { provide: "Strings", useValue: "string1", multi: true},
     *   { provide: "Strings", useValue: "string2", multi: false}
     * ])).toThrowError();
     * ```
     */


    function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
      return Error("Cannot mix multi providers and regular providers, got: ".concat(provider1, " ").concat(provider2));
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * A unique object used for retrieving items from the {@link ReflectiveInjector}.
     *
     * Keys have:
     * - a system-wide unique `id`.
     * - a `token`.
     *
     * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows
     * the
     * injector to store created objects in a more efficient way.
     *
     * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when
     * resolving
     * providers.
     *
     * @deprecated No replacement
     * @publicApi
     */


    var ReflectiveKey = /*#__PURE__*/function () {
      /**
       * Private
       */
      function ReflectiveKey(token, id) {
        _classCallCheck(this, ReflectiveKey);

        this.token = token;
        this.id = id;

        if (!token) {
          throw new Error('Token must be defined!');
        }

        this.displayName = stringify(this.token);
      }
      /**
       * Retrieves a `Key` for a token.
       */


      _createClass2(ReflectiveKey, null, [{
        key: "get",
        value: function get(token) {
          return _globalKeyRegistry.get(resolveForwardRef(token));
        }
        /**
         * @returns the number of keys registered in the system.
         */

      }, {
        key: "numberOfKeys",
        get: function get() {
          return _globalKeyRegistry.numberOfKeys;
        }
      }]);

      return ReflectiveKey;
    }();

    var KeyRegistry = /*#__PURE__*/function () {
      function KeyRegistry() {
        _classCallCheck(this, KeyRegistry);

        this._allKeys = new Map();
      }

      _createClass2(KeyRegistry, [{
        key: "get",
        value: function get(token) {
          if (token instanceof ReflectiveKey) return token;

          if (this._allKeys.has(token)) {
            return this._allKeys.get(token);
          }

          var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);

          this._allKeys.set(token, newKey);

          return newKey;
        }
      }, {
        key: "numberOfKeys",
        get: function get() {
          return this._allKeys.size;
        }
      }]);

      return KeyRegistry;
    }();

    var _globalKeyRegistry = /*@__PURE__*/new KeyRegistry();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Provides access to reflection data about symbols. Used internally by Angular
     * to power dependency injection and compilation.
     */


    var Reflector = /*#__PURE__*/function () {
      function Reflector(reflectionCapabilities) {
        _classCallCheck(this, Reflector);

        this.reflectionCapabilities = reflectionCapabilities;
      }

      _createClass2(Reflector, [{
        key: "updateCapabilities",
        value: function updateCapabilities(caps) {
          this.reflectionCapabilities = caps;
        }
      }, {
        key: "factory",
        value: function factory(type) {
          return this.reflectionCapabilities.factory(type);
        }
      }, {
        key: "parameters",
        value: function parameters(typeOrFunc) {
          return this.reflectionCapabilities.parameters(typeOrFunc);
        }
      }, {
        key: "annotations",
        value: function annotations(typeOrFunc) {
          return this.reflectionCapabilities.annotations(typeOrFunc);
        }
      }, {
        key: "propMetadata",
        value: function propMetadata(typeOrFunc) {
          return this.reflectionCapabilities.propMetadata(typeOrFunc);
        }
      }, {
        key: "hasLifecycleHook",
        value: function hasLifecycleHook(type, lcProperty) {
          return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
        }
      }, {
        key: "getter",
        value: function getter(name) {
          return this.reflectionCapabilities.getter(name);
        }
      }, {
        key: "setter",
        value: function setter(name) {
          return this.reflectionCapabilities.setter(name);
        }
      }, {
        key: "method",
        value: function method(name) {
          return this.reflectionCapabilities.method(name);
        }
      }, {
        key: "importUri",
        value: function importUri(type) {
          return this.reflectionCapabilities.importUri(type);
        }
      }, {
        key: "resourceUri",
        value: function resourceUri(type) {
          return this.reflectionCapabilities.resourceUri(type);
        }
      }, {
        key: "resolveIdentifier",
        value: function resolveIdentifier(name, moduleUrl, members, runtime) {
          return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
        }
      }, {
        key: "resolveEnum",
        value: function resolveEnum(identifier, name) {
          return this.reflectionCapabilities.resolveEnum(identifier, name);
        }
      }]);

      return Reflector;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * The {@link Reflector} used internally in Angular to access metadata
     * about symbols.
     */


    var reflector = /*@__PURE__*/new Reflector( /*@__PURE__*/new ReflectionCapabilities());
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * `Dependency` is used by the framework to extend DI.
     * This is internal to Angular and should not be used directly.
     */

    var ReflectiveDependency = /*#__PURE__*/function () {
      function ReflectiveDependency(key, optional, visibility) {
        _classCallCheck(this, ReflectiveDependency);

        this.key = key;
        this.optional = optional;
        this.visibility = visibility;
      }

      _createClass2(ReflectiveDependency, null, [{
        key: "fromKey",
        value: function fromKey(key) {
          return new ReflectiveDependency(key, false, null);
        }
      }]);

      return ReflectiveDependency;
    }();

    var _EMPTY_LIST = [];

    var ResolvedReflectiveProvider_ = function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
      _classCallCheck(this, ResolvedReflectiveProvider_);

      this.key = key;
      this.resolvedFactories = resolvedFactories;
      this.multiProvider = multiProvider;
      this.resolvedFactory = this.resolvedFactories[0];
    };
    /**
     * An internal resolved representation of a factory function created by resolving `Provider`.
     * @publicApi
     */


    var ResolvedReflectiveFactory = function ResolvedReflectiveFactory(
    /**
     * Factory function which can return an instance of an object represented by a key.
     */
    factory,
    /**
     * Arguments (dependencies) to the `factory` function.
     */
    dependencies) {
      _classCallCheck(this, ResolvedReflectiveFactory);

      this.factory = factory;
      this.dependencies = dependencies;
    };
    /**
     * Resolve a single provider.
     */


    function resolveReflectiveFactory(provider) {
      var factoryFn;
      var resolvedDeps;

      if (provider.useClass) {
        var useClass = resolveForwardRef(provider.useClass);
        factoryFn = reflector.factory(useClass);
        resolvedDeps = _dependenciesFor(useClass);
      } else if (provider.useExisting) {
        factoryFn = function factoryFn(aliasInstance) {
          return aliasInstance;
        };

        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
      } else if (provider.useFactory) {
        factoryFn = provider.useFactory;
        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
      } else {
        factoryFn = function factoryFn() {
          return provider.useValue;
        };

        resolvedDeps = _EMPTY_LIST;
      }

      return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
    }
    /**
     * Converts the `Provider` into `ResolvedProvider`.
     *
     * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider
     * syntax.
     */


    function resolveReflectiveProvider(provider) {
      return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);
    }
    /**
     * Resolve a list of Providers.
     */


    function resolveReflectiveProviders(providers) {
      var normalized = _normalizeProviders(providers, []);

      var resolved = normalized.map(resolveReflectiveProvider);
      var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
      return Array.from(resolvedProviderMap.values());
    }
    /**
     * Merges a list of ResolvedProviders into a list where each key is contained exactly once and
     * multi providers have been merged.
     */


    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
      for (var i = 0; i < providers.length; i++) {
        var provider = providers[i];
        var existing = normalizedProvidersMap.get(provider.key.id);

        if (existing) {
          if (provider.multiProvider !== existing.multiProvider) {
            throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
          }

          if (provider.multiProvider) {
            for (var j = 0; j < provider.resolvedFactories.length; j++) {
              existing.resolvedFactories.push(provider.resolvedFactories[j]);
            }
          } else {
            normalizedProvidersMap.set(provider.key.id, provider);
          }
        } else {
          var resolvedProvider = void 0;

          if (provider.multiProvider) {
            resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
          } else {
            resolvedProvider = provider;
          }

          normalizedProvidersMap.set(provider.key.id, resolvedProvider);
        }
      }

      return normalizedProvidersMap;
    }

    function _normalizeProviders(providers, res) {
      providers.forEach(function (b) {
        if (b instanceof Type) {
          res.push({
            provide: b,
            useClass: b
          });
        } else if (b && typeof b == 'object' && b.provide !== undefined) {
          res.push(b);
        } else if (Array.isArray(b)) {
          _normalizeProviders(b, res);
        } else {
          throw invalidProviderError(b);
        }
      });
      return res;
    }

    function constructDependencies(typeOrFunc, dependencies) {
      if (!dependencies) {
        return _dependenciesFor(typeOrFunc);
      } else {
        var params = dependencies.map(function (t) {
          return [t];
        });
        return dependencies.map(function (t) {
          return _extractToken(typeOrFunc, t, params);
        });
      }
    }

    function _dependenciesFor(typeOrFunc) {
      var params = reflector.parameters(typeOrFunc);
      if (!params) return [];

      if (params.some(function (p) {
        return p == null;
      })) {
        throw noAnnotationError(typeOrFunc, params);
      }

      return params.map(function (p) {
        return _extractToken(typeOrFunc, p, params);
      });
    }

    function _extractToken(typeOrFunc, metadata, params) {
      var token = null;
      var optional = false;

      if (!Array.isArray(metadata)) {
        if (metadata instanceof Inject) {
          return _createDependency(metadata.token, optional, null);
        } else {
          return _createDependency(metadata, optional, null);
        }
      }

      var visibility = null;

      for (var i = 0; i < metadata.length; ++i) {
        var paramMetadata = metadata[i];

        if (paramMetadata instanceof Type) {
          token = paramMetadata;
        } else if (paramMetadata instanceof Inject) {
          token = paramMetadata.token;
        } else if (paramMetadata instanceof Optional) {
          optional = true;
        } else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
          visibility = paramMetadata;
        } else if (paramMetadata instanceof InjectionToken) {
          token = paramMetadata;
        }
      }

      token = resolveForwardRef(token);

      if (token != null) {
        return _createDependency(token, optional, visibility);
      } else {
        throw noAnnotationError(typeOrFunc, params);
      }
    }

    function _createDependency(token, optional, visibility) {
      return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // Threshold for the dynamic version


    var UNDEFINED = {};
    /**
     * A ReflectiveDependency injection container used for instantiating objects and resolving
     * dependencies.
     *
     * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
     * constructor dependencies.
     *
     * In typical use, application code asks for the dependencies in the constructor and they are
     * resolved by the `Injector`.
     *
     * @usageNotes
     * ### Example
     *
     * The following example creates an `Injector` configured to create `Engine` and `Car`.
     *
     * ```typescript
     * @Injectable()
     * class Engine {
     * }
     *
     * @Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
     * var car = injector.get(Car);
     * expect(car instanceof Car).toBe(true);
     * expect(car.engine instanceof Engine).toBe(true);
     * ```
     *
     * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
     * resolve all of the object's dependencies automatically.
     *
     * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.
     * @publicApi
     */

    var ReflectiveInjector = /*#__PURE__*/function () {
      function ReflectiveInjector() {
        _classCallCheck(this, ReflectiveInjector);
      }

      _createClass2(ReflectiveInjector, null, [{
        key: "resolve",

        /**
         * Turns an array of provider definitions into an array of resolved providers.
         *
         * A resolution is a process of flattening multiple nested arrays and converting individual
         * providers into an array of `ResolvedReflectiveProvider`s.
         *
         * @usageNotes
         * ### Example
         *
         * ```typescript
         * @Injectable()
         * class Engine {
         * }
         *
         * @Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
         *
         * expect(providers.length).toEqual(2);
         *
         * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
         * expect(providers[0].key.displayName).toBe("Car");
         * expect(providers[0].dependencies.length).toEqual(1);
         * expect(providers[0].factory).toBeDefined();
         *
         * expect(providers[1].key.displayName).toBe("Engine");
         * });
         * ```
         *
         */
        value: function resolve(providers) {
          return resolveReflectiveProviders(providers);
        }
        /**
         * Resolves an array of providers and creates an injector from those providers.
         *
         * The passed-in providers can be an array of `Type`, `Provider`,
         * or a recursive array of more providers.
         *
         * @usageNotes
         * ### Example
         *
         * ```typescript
         * @Injectable()
         * class Engine {
         * }
         *
         * @Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
         * expect(injector.get(Car) instanceof Car).toBe(true);
         * ```
         */

      }, {
        key: "resolveAndCreate",
        value: function resolveAndCreate(providers, parent) {
          var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
          return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
        }
        /**
         * Creates an injector from previously resolved providers.
         *
         * This API is the recommended way to construct injectors in performance-sensitive parts.
         *
         * @usageNotes
         * ### Example
         *
         * ```typescript
         * @Injectable()
         * class Engine {
         * }
         *
         * @Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var providers = ReflectiveInjector.resolve([Car, Engine]);
         * var injector = ReflectiveInjector.fromResolvedProviders(providers);
         * expect(injector.get(Car) instanceof Car).toBe(true);
         * ```
         */

      }, {
        key: "fromResolvedProviders",
        value: function fromResolvedProviders(providers, parent) {
          return new ReflectiveInjector_(providers, parent);
        }
      }]);

      return ReflectiveInjector;
    }();

    var ReflectiveInjector_ = /*@__PURE__*/function () {
      var ReflectiveInjector_ = /*#__PURE__*/function () {
        /**
         * Private
         */
        function ReflectiveInjector_(_providers, _parent) {
          _classCallCheck(this, ReflectiveInjector_);

          /** @internal */
          this._constructionCounter = 0;
          this._providers = _providers;
          this.parent = _parent || null;
          var len = _providers.length;
          this.keyIds = [];
          this.objs = [];

          for (var i = 0; i < len; i++) {
            this.keyIds[i] = _providers[i].key.id;
            this.objs[i] = UNDEFINED;
          }
        }

        _createClass2(ReflectiveInjector_, [{
          key: "get",
          value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;
            return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
          }
        }, {
          key: "resolveAndCreateChild",
          value: function resolveAndCreateChild(providers) {
            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
            return this.createChildFromResolved(ResolvedReflectiveProviders);
          }
        }, {
          key: "createChildFromResolved",
          value: function createChildFromResolved(providers) {
            var inj = new ReflectiveInjector_(providers);
            inj.parent = this;
            return inj;
          }
        }, {
          key: "resolveAndInstantiate",
          value: function resolveAndInstantiate(provider) {
            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
          }
        }, {
          key: "instantiateResolved",
          value: function instantiateResolved(provider) {
            return this._instantiateProvider(provider);
          }
        }, {
          key: "getProviderAtIndex",
          value: function getProviderAtIndex(index) {
            if (index < 0 || index >= this._providers.length) {
              throw outOfBoundsError(index);
            }

            return this._providers[index];
          }
          /** @internal */

        }, {
          key: "_new",
          value: function _new(provider) {
            if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
              throw cyclicDependencyError(this, provider.key);
            }

            return this._instantiateProvider(provider);
          }
        }, {
          key: "_getMaxNumberOfObjects",
          value: function _getMaxNumberOfObjects() {
            return this.objs.length;
          }
        }, {
          key: "_instantiateProvider",
          value: function _instantiateProvider(provider) {
            if (provider.multiProvider) {
              var res = [];

              for (var i = 0; i < provider.resolvedFactories.length; ++i) {
                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
              }

              return res;
            } else {
              return this._instantiate(provider, provider.resolvedFactories[0]);
            }
          }
        }, {
          key: "_instantiate",
          value: function _instantiate(provider, ResolvedReflectiveFactory) {
            var _this22 = this;

            var factory = ResolvedReflectiveFactory.factory;
            var deps;

            try {
              deps = ResolvedReflectiveFactory.dependencies.map(function (dep) {
                return _this22._getByReflectiveDependency(dep);
              });
            } catch (e) {
              if (e.addKey) {
                e.addKey(this, provider.key);
              }

              throw e;
            }

            var obj;

            try {
              obj = factory.apply(void 0, _toConsumableArray(deps));
            } catch (e) {
              throw instantiationError(this, e, e.stack, provider.key);
            }

            return obj;
          }
        }, {
          key: "_getByReflectiveDependency",
          value: function _getByReflectiveDependency(dep) {
            return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
          }
        }, {
          key: "_getByKey",
          value: function _getByKey(key, visibility, notFoundValue) {
            if (key === ReflectiveInjector_.INJECTOR_KEY) {
              return this;
            }

            if (visibility instanceof Self) {
              return this._getByKeySelf(key, notFoundValue);
            } else {
              return this._getByKeyDefault(key, notFoundValue, visibility);
            }
          }
        }, {
          key: "_getObjByKeyId",
          value: function _getObjByKeyId(keyId) {
            for (var i = 0; i < this.keyIds.length; i++) {
              if (this.keyIds[i] === keyId) {
                if (this.objs[i] === UNDEFINED) {
                  this.objs[i] = this._new(this._providers[i]);
                }

                return this.objs[i];
              }
            }

            return UNDEFINED;
          }
          /** @internal */

        }, {
          key: "_throwOrNull",
          value: function _throwOrNull(key, notFoundValue) {
            if (notFoundValue !== THROW_IF_NOT_FOUND) {
              return notFoundValue;
            } else {
              throw noProviderError(this, key);
            }
          }
          /** @internal */

        }, {
          key: "_getByKeySelf",
          value: function _getByKeySelf(key, notFoundValue) {
            var obj = this._getObjByKeyId(key.id);

            return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);
          }
          /** @internal */

        }, {
          key: "_getByKeyDefault",
          value: function _getByKeyDefault(key, notFoundValue, visibility) {
            var inj;

            if (visibility instanceof SkipSelf) {
              inj = this.parent;
            } else {
              inj = this;
            }

            while (inj instanceof ReflectiveInjector_) {
              var inj_ = inj;

              var obj = inj_._getObjByKeyId(key.id);

              if (obj !== UNDEFINED) return obj;
              inj = inj_.parent;
            }

            if (inj !== null) {
              return inj.get(key.token, notFoundValue);
            } else {
              return this._throwOrNull(key, notFoundValue);
            }
          }
        }, {
          key: "toString",
          value: function toString() {
            return this.displayName;
          }
        }, {
          key: "displayName",
          get: function get() {
            var providers = _mapProviders(this, function (b) {
              return ' "' + b.key.displayName + '" ';
            }).join(', ');

            return "ReflectiveInjector(providers: [".concat(providers, "])");
          }
        }]);

        return ReflectiveInjector_;
      }();

      ReflectiveInjector_.INJECTOR_KEY = /*@__PURE__*/ReflectiveKey.get(Injector);
      return ReflectiveInjector_;
    }();

    function _mapProviders(injector, fn) {
      var res = [];

      for (var i = 0; i < injector._providers.length; ++i) {
        res[i] = fn(injector.getProviderAtIndex(i));
      }

      return res;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * A DI token that you can use to create a virtual [provider](guide/glossary#provider)
     * that will populate the `entryComponents` field of components and NgModules
     * based on its `useValue` property value.
     * All components that are referenced in the `useValue` value (either directly
     * or in a nested array or map) are added to the `entryComponents` property.
     *
     * @usageNotes
     *
     * The following example shows how the router can populate the `entryComponents`
     * field of an NgModule based on a router configuration that refers
     * to components.
     *
     * ```typescript
     * // helper function inside the router
     * function provideRoutes(routes) {
     *   return [
     *     {provide: ROUTES, useValue: routes},
     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
     *   ];
     * }
     *
     * // user code
     * let routes = [
     *   {path: '/root', component: RootComp},
     *   {path: '/teams', component: TeamsComp}
     * ];
     *
     * @NgModule({
     *   providers: [provideRoutes(routes)]
     * })
     * class ModuleWithRoutes {}
     * ```
     *
     * @publicApi
     * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.
     */


    var ANALYZE_FOR_ENTRY_COMPONENTS = /*@__PURE__*/new InjectionToken('AnalyzeForEntryComponents');
    /**
     * Base class for query metadata.
     *
     * @see `ContentChildren`.
     * @see `ContentChild`.
     * @see `ViewChildren`.
     * @see `ViewChild`.
     *
     * @publicApi
     */

    var Query = function Query() {
      _classCallCheck(this, Query);
    };

    var ɵ0$a = function ɵ0$a(selector) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return Object.assign({
        selector: selector,
        first: false,
        isViewQuery: false,
        descendants: false
      }, data);
    };
    /**
     * ContentChildren decorator and metadata.
     *
     *
     * @Annotation
     * @publicApi
     */


    var ContentChildren = /*@__PURE__*/makePropDecorator('ContentChildren', ɵ0$a, Query);

    var ɵ1$2 = function ɵ1$2(selector) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return Object.assign({
        selector: selector,
        first: true,
        isViewQuery: false,
        descendants: true
      }, data);
    };
    /**
     * ContentChild decorator and metadata.
     *
     *
     * @Annotation
     *
     * @publicApi
     */


    var ContentChild = /*@__PURE__*/makePropDecorator('ContentChild', ɵ1$2, Query);

    var ɵ2 = function ɵ2(selector) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return Object.assign({
        selector: selector,
        first: false,
        isViewQuery: true,
        descendants: true
      }, data);
    };
    /**
     * ViewChildren decorator and metadata.
     *
     * @Annotation
     * @publicApi
     */


    var ViewChildren = /*@__PURE__*/makePropDecorator('ViewChildren', ɵ2, Query);

    var ɵ3 = function ɵ3(selector, data) {
      return Object.assign({
        selector: selector,
        first: true,
        isViewQuery: true,
        descendants: true
      }, data);
    };
    /**
     * ViewChild decorator and metadata.
     *
     * @Annotation
     * @publicApi
     */


    var ViewChild = /*@__PURE__*/makePropDecorator('ViewChild', ɵ3, Query);
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Used to resolve resource URLs on `@Component` when used with JIT compilation.
     *
     * Example:
     * ```
     * @Component({
     *   selector: 'my-comp',
     *   templateUrl: 'my-comp.html', // This requires asynchronous resolution
     * })
     * class MyComponent{
     * }
     *
     * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process
     * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.
     *
     * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into
     * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.
     *
     * // Use browser's `fetch()` function as the default resource resolution strategy.
     * resolveComponentResources(fetch).then(() => {
     *   // After resolution all URLs have been converted into `template` strings.
     *   renderComponent(MyComponent);
     * });
     *
     * ```
     *
     * NOTE: In AOT the resolution happens during compilation, and so there should be no need
     * to call this method outside JIT mode.
     *
     * @param resourceResolver a function which is responsible for returning a `Promise` to the
     * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.
     */

    function resolveComponentResources(resourceResolver) {
      // Store all promises which are fetching the resources.
      var componentResolved = []; // Cache so that we don't fetch the same resource more than once.

      var urlMap = new Map();

      function cachedResourceResolve(url) {
        var promise = urlMap.get(url);

        if (!promise) {
          var resp = resourceResolver(url);
          urlMap.set(url, promise = resp.then(unwrapResponse));
        }

        return promise;
      }

      componentResourceResolutionQueue.forEach(function (component, type) {
        var promises = [];

        if (component.templateUrl) {
          promises.push(cachedResourceResolve(component.templateUrl).then(function (template) {
            component.template = template;
          }));
        }

        var styleUrls = component.styleUrls;
        var styles = component.styles || (component.styles = []);
        var styleOffset = component.styles.length;
        styleUrls && styleUrls.forEach(function (styleUrl, index) {
          styles.push(''); // pre-allocate array.

          promises.push(cachedResourceResolve(styleUrl).then(function (style) {
            styles[styleOffset + index] = style;
            styleUrls.splice(styleUrls.indexOf(styleUrl), 1);

            if (styleUrls.length == 0) {
              component.styleUrls = undefined;
            }
          }));
        });
        var fullyResolved = Promise.all(promises).then(function () {
          return componentDefResolved(type);
        });
        componentResolved.push(fullyResolved);
      });
      clearResolutionOfComponentResourcesQueue();
      return Promise.all(componentResolved).then(function () {
        return undefined;
      });
    }

    var componentResourceResolutionQueue = /*@__PURE__*/new Map(); // Track when existing ɵcmp for a Type is waiting on resources.

    var componentDefPendingResolution = /*@__PURE__*/new Set();

    function maybeQueueResolutionOfComponentResources(type, metadata) {
      if (componentNeedsResolution(metadata)) {
        componentResourceResolutionQueue.set(type, metadata);
        componentDefPendingResolution.add(type);
      }
    }

    function isComponentDefPendingResolution(type) {
      return componentDefPendingResolution.has(type);
    }

    function componentNeedsResolution(component) {
      return !!(component.templateUrl && !component.hasOwnProperty('template') || component.styleUrls && component.styleUrls.length);
    }

    function clearResolutionOfComponentResourcesQueue() {
      var old = componentResourceResolutionQueue;
      componentResourceResolutionQueue = new Map();
      return old;
    }

    function restoreComponentResolutionQueue(queue) {
      componentDefPendingResolution.clear();
      queue.forEach(function (_, type) {
        return componentDefPendingResolution.add(type);
      });
      componentResourceResolutionQueue = queue;
    }

    function isComponentResourceResolutionQueueEmpty() {
      return componentResourceResolutionQueue.size === 0;
    }

    function unwrapResponse(response) {
      return typeof response == 'string' ? response : response.text();
    }

    function componentDefResolved(type) {
      componentDefPendingResolution["delete"](type);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Compute the static styling (class/style) from `TAttributes`.
     *
     * This function should be called during `firstCreatePass` only.
     *
     * @param tNode The `TNode` into which the styling information should be loaded.
     * @param attrs `TAttributes` containing the styling information.
     * @param writeToHost Where should the resulting static styles be written?
     *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`
     *   - `true` Write to `TNode.styles` / `TNode.classes`
     */


    function computeStaticStyling(tNode, attrs, writeToHost) {
      ngDevMode && assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');
      var styles = writeToHost ? tNode.styles : null;
      var classes = writeToHost ? tNode.classes : null;
      var mode = 0;

      if (attrs !== null) {
        for (var i = 0; i < attrs.length; i++) {
          var value = attrs[i];

          if (typeof value === 'number') {
            mode = value;
          } else if (mode == 1
          /* Classes */
          ) {
              classes = concatStringsWithSpace(classes, value);
            } else if (mode == 2
          /* Styles */
          ) {
              var style = value;
              var styleValue = attrs[++i];
              styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');
            }
        }
      }

      writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;
      writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var _symbolIterator = null;

    function getSymbolIterator() {
      if (!_symbolIterator) {
        var _Symbol = _global['Symbol'];

        if (_Symbol && _Symbol.iterator) {
          _symbolIterator = _Symbol.iterator;
        } else {
          // es6-shim specific logic
          var keys = Object.getOwnPropertyNames(Map.prototype);

          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];

            if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
              _symbolIterator = key;
            }
          }
        }
      }

      return _symbolIterator;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function devModeEqual(a, b) {
      var isListLikeIterableA = isListLikeIterable(a);
      var isListLikeIterableB = isListLikeIterable(b);

      if (isListLikeIterableA && isListLikeIterableB) {
        return areIterablesEqual(a, b, devModeEqual);
      } else {
        var isAObject = a && (typeof a === 'object' || typeof a === 'function');
        var isBObject = b && (typeof b === 'object' || typeof b === 'function');

        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
          return true;
        } else {
          return Object.is(a, b);
        }
      }
    }
    /**
     * Indicates that the result of a {@link Pipe} transformation has changed even though the
     * reference has not changed.
     *
     * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value
     * is stored.
     *
     * Example:
     *
     * ```
     * if (this._latestValue === this._latestReturnedValue) {
     *    return this._latestReturnedValue;
     *  } else {
     *    this._latestReturnedValue = this._latestValue;
     *    return WrappedValue.wrap(this._latestValue); // this will force update
     *  }
     * ```
     *
     * @publicApi
     * @deprecated from v10 stop using. (No replacement, deemed unnecessary.)
     */


    var WrappedValue = /*#__PURE__*/function () {
      function WrappedValue(value) {
        _classCallCheck(this, WrappedValue);

        this.wrapped = value;
      }
      /** Creates a wrapped value. */


      _createClass2(WrappedValue, null, [{
        key: "wrap",
        value: function wrap(value) {
          return new WrappedValue(value);
        }
        /**
         * Returns the underlying value of a wrapped value.
         * Returns the given `value` when it is not wrapped.
         **/

      }, {
        key: "unwrap",
        value: function unwrap(value) {
          return WrappedValue.isWrapped(value) ? value.wrapped : value;
        }
        /** Returns true if `value` is a wrapped value. */

      }, {
        key: "isWrapped",
        value: function isWrapped(value) {
          return value instanceof WrappedValue;
        }
      }]);

      return WrappedValue;
    }();

    function isListLikeIterable(obj) {
      if (!isJsObject(obj)) return false;
      return Array.isArray(obj) || !(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
      getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop
    }

    function areIterablesEqual(a, b, comparator) {
      var iterator1 = a[getSymbolIterator()]();
      var iterator2 = b[getSymbolIterator()]();

      while (true) {
        var item1 = iterator1.next();
        var item2 = iterator2.next();
        if (item1.done && item2.done) return true;
        if (item1.done || item2.done) return false;
        if (!comparator(item1.value, item2.value)) return false;
      }
    }

    function iterateListLike(obj, fn) {
      if (Array.isArray(obj)) {
        for (var i = 0; i < obj.length; i++) {
          fn(obj[i]);
        }
      } else {
        var iterator = obj[getSymbolIterator()]();
        var item;

        while (!(item = iterator.next()).done) {
          fn(item.value);
        }
      }
    }

    function isJsObject(o) {
      return o !== null && (typeof o === 'function' || typeof o === 'object');
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // TODO(misko): consider inlining

    /** Updates binding and returns the value. */


    function updateBinding(lView, bindingIndex, value) {
      return lView[bindingIndex] = value;
    }
    /** Gets the current binding value. */


    function getBinding(lView, bindingIndex) {
      ngDevMode && assertIndexInRange(lView, bindingIndex);
      ngDevMode && assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');
      return lView[bindingIndex];
    }
    /**
     * Updates binding if changed, then returns whether it was updated.
     *
     * This function also checks the `CheckNoChangesMode` and throws if changes are made.
     * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE
     * behavior.
     *
     * @param lView current `LView`
     * @param bindingIndex The binding in the `LView` to check
     * @param value New value to check against `lView[bindingIndex]`
     * @returns `true` if the bindings has changed. (Throws if binding has changed during
     *          `CheckNoChangesMode`)
     */


    function bindingUpdated(lView, bindingIndex, value) {
      ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
      ngDevMode && assertLessThan(bindingIndex, lView.length, "Slot should have been initialized to NO_CHANGE");
      var oldValue = lView[bindingIndex];

      if (Object.is(oldValue, value)) {
        return false;
      } else {
        if (ngDevMode && getCheckNoChangesMode()) {
          // View engine didn't report undefined values as changed on the first checkNoChanges pass
          // (before the change detection was run).
          var oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;

          if (!devModeEqual(oldValueToCompare, value)) {
            var details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);
            throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName);
          } // There was a change, but the `devModeEqual` decided that the change is exempt from an error.
          // For this reason we exit as if no change. The early exit is needed to prevent the changed
          // value to be written into `LView` (If we would write the new value that we would not see it
          // as change on next CD.)


          return false;
        }

        lView[bindingIndex] = value;
        return true;
      }
    }
    /** Updates 2 bindings if changed, then returns whether either was updated. */


    function bindingUpdated2(lView, bindingIndex, exp1, exp2) {
      var different = bindingUpdated(lView, bindingIndex, exp1);
      return bindingUpdated(lView, bindingIndex + 1, exp2) || different;
    }
    /** Updates 3 bindings if changed, then returns whether any was updated. */


    function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {
      var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
      return bindingUpdated(lView, bindingIndex + 2, exp3) || different;
    }
    /** Updates 4 bindings if changed, then returns whether any was updated. */


    function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {
      var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
      return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Updates the value of or removes a bound attribute on an Element.
     *
     * Used in the case of `[attr.title]="value"`
     *
     * @param name name The name of the attribute.
     * @param value value The attribute is removed when value is `null` or `undefined`.
     *                  Otherwise the attribute value is set to the stringified value.
     * @param sanitizer An optional function used to sanitize the value.
     * @param namespace Optional namespace to use when setting the attribute.
     *
     * @codeGenApi
     */


    function ɵɵattribute(name, value, sanitizer, namespace) {
      var lView = getLView();
      var bindingIndex = nextBindingIndex();

      if (bindingUpdated(lView, bindingIndex, value)) {
        var tView = getTView();
        var tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);
      }

      return ɵɵattribute;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Create interpolation bindings with a variable number of expressions.
     *
     * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.
     * Those are faster because there is no need to create an array of expressions and iterate over it.
     *
     * `values`:
     * - has static text at even indexes,
     * - has evaluated expressions at odd indexes.
     *
     * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.
     */


    function interpolationV(lView, values) {
      ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');
      ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');
      var isBindingUpdated = false;
      var bindingIndex = getBindingIndex();

      for (var i = 1; i < values.length; i += 2) {
        // Check if bindings (odd indexes) have changed
        isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;
      }

      setBindingIndex(bindingIndex);

      if (!isBindingUpdated) {
        return NO_CHANGE;
      } // Build the updated content


      var content = values[0];

      for (var _i7 = 1; _i7 < values.length; _i7 += 2) {
        content += renderStringify(values[_i7]) + values[_i7 + 1];
      }

      return content;
    }
    /**
     * Creates an interpolation binding with 1 expression.
     *
     * @param prefix static value used for concatenation only.
     * @param v0 value checked for change.
     * @param suffix static value used for concatenation only.
     */


    function interpolation1(lView, prefix, v0, suffix) {
      var different = bindingUpdated(lView, nextBindingIndex(), v0);
      return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;
    }
    /**
     * Creates an interpolation binding with 2 expressions.
     */


    function interpolation2(lView, prefix, v0, i0, v1, suffix) {
      var bindingIndex = getBindingIndex();
      var different = bindingUpdated2(lView, bindingIndex, v0, v1);
      incrementBindingIndex(2);
      return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;
    }
    /**
     * Creates an interpolation binding with 3 expressions.
     */


    function interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {
      var bindingIndex = getBindingIndex();
      var different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);
      incrementBindingIndex(3);
      return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix : NO_CHANGE;
    }
    /**
     * Create an interpolation binding with 4 expressions.
     */


    function interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
      var bindingIndex = getBindingIndex();
      var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
      incrementBindingIndex(4);
      return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + suffix : NO_CHANGE;
    }
    /**
     * Creates an interpolation binding with 5 expressions.
     */


    function interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
      var bindingIndex = getBindingIndex();
      var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
      different = bindingUpdated(lView, bindingIndex + 4, v4) || different;
      incrementBindingIndex(5);
      return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix : NO_CHANGE;
    }
    /**
     * Creates an interpolation binding with 6 expressions.
     */


    function interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
      var bindingIndex = getBindingIndex();
      var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
      different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;
      incrementBindingIndex(6);
      return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix : NO_CHANGE;
    }
    /**
     * Creates an interpolation binding with 7 expressions.
     */


    function interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
      var bindingIndex = getBindingIndex();
      var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
      different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;
      incrementBindingIndex(7);
      return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + suffix : NO_CHANGE;
    }
    /**
     * Creates an interpolation binding with 8 expressions.
     */


    function interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
      var bindingIndex = getBindingIndex();
      var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
      different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;
      incrementBindingIndex(8);
      return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix : NO_CHANGE;
    }
    /**
     *
     * Update an interpolated attribute on an element with single bound value surrounded by text.
     *
     * Used when the value passed to a property has 1 interpolated value in it:
     *
     * ```html
     * <div attr.title="prefix{{v0}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');
     * ```
     *
     * @param attrName The name of the attribute to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {
      var lView = getLView();
      var interpolatedValue = interpolation1(lView, prefix, v0, suffix);

      if (interpolatedValue !== NO_CHANGE) {
        var tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
        ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);
      }

      return ɵɵattributeInterpolate1;
    }
    /**
     *
     * Update an interpolated attribute on an element with 2 bound values surrounded by text.
     *
     * Used when the value passed to a property has 2 interpolated values in it:
     *
     * ```html
     * <div attr.title="prefix{{v0}}-{{v1}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');
     * ```
     *
     * @param attrName The name of the attribute to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {
      var lView = getLView();
      var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);

      if (interpolatedValue !== NO_CHANGE) {
        var tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
        ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);
      }

      return ɵɵattributeInterpolate2;
    }
    /**
     *
     * Update an interpolated attribute on an element with 3 bound values surrounded by text.
     *
     * Used when the value passed to a property has 3 interpolated values in it:
     *
     * ```html
     * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵattributeInterpolate3(
     * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');
     * ```
     *
     * @param attrName The name of the attribute to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {
      var lView = getLView();
      var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);

      if (interpolatedValue !== NO_CHANGE) {
        var tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
        ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);
      }

      return ɵɵattributeInterpolate3;
    }
    /**
     *
     * Update an interpolated attribute on an element with 4 bound values surrounded by text.
     *
     * Used when the value passed to a property has 4 interpolated values in it:
     *
     * ```html
     * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵattributeInterpolate4(
     * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
     * ```
     *
     * @param attrName The name of the attribute to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {
      var lView = getLView();
      var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);

      if (interpolatedValue !== NO_CHANGE) {
        var tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
        ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
      }

      return ɵɵattributeInterpolate4;
    }
    /**
     *
     * Update an interpolated attribute on an element with 5 bound values surrounded by text.
     *
     * Used when the value passed to a property has 5 interpolated values in it:
     *
     * ```html
     * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵattributeInterpolate5(
     * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
     * ```
     *
     * @param attrName The name of the attribute to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {
      var lView = getLView();
      var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);

      if (interpolatedValue !== NO_CHANGE) {
        var tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
        ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
      }

      return ɵɵattributeInterpolate5;
    }
    /**
     *
     * Update an interpolated attribute on an element with 6 bound values surrounded by text.
     *
     * Used when the value passed to a property has 6 interpolated values in it:
     *
     * ```html
     * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵattributeInterpolate6(
     *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
     * ```
     *
     * @param attrName The name of the attribute to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param i4 Static value used for concatenation only.
     * @param v5 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {
      var lView = getLView();
      var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);

      if (interpolatedValue !== NO_CHANGE) {
        var tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
        ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
      }

      return ɵɵattributeInterpolate6;
    }
    /**
     *
     * Update an interpolated attribute on an element with 7 bound values surrounded by text.
     *
     * Used when the value passed to a property has 7 interpolated values in it:
     *
     * ```html
     * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵattributeInterpolate7(
     *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
     * ```
     *
     * @param attrName The name of the attribute to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param i4 Static value used for concatenation only.
     * @param v5 Value checked for change.
     * @param i5 Static value used for concatenation only.
     * @param v6 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {
      var lView = getLView();
      var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);

      if (interpolatedValue !== NO_CHANGE) {
        var tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
        ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
      }

      return ɵɵattributeInterpolate7;
    }
    /**
     *
     * Update an interpolated attribute on an element with 8 bound values surrounded by text.
     *
     * Used when the value passed to a property has 8 interpolated values in it:
     *
     * ```html
     * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵattributeInterpolate8(
     *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
     * ```
     *
     * @param attrName The name of the attribute to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param i4 Static value used for concatenation only.
     * @param v5 Value checked for change.
     * @param i5 Static value used for concatenation only.
     * @param v6 Value checked for change.
     * @param i6 Static value used for concatenation only.
     * @param v7 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {
      var lView = getLView();
      var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);

      if (interpolatedValue !== NO_CHANGE) {
        var tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
        ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
      }

      return ɵɵattributeInterpolate8;
    }
    /**
     * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.
     *
     * Used when the number of interpolated values exceeds 8.
     *
     * ```html
     * <div
     *  title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵattributeInterpolateV(
     *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
     *  'suffix']);
     * ```
     *
     * @param attrName The name of the attribute to update.
     * @param values The collection of values and the strings in-between those values, beginning with
     * a string prefix and ending with a string suffix.
     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵattributeInterpolateV(attrName, values, sanitizer, namespace) {
      var lView = getLView();
      var interpolated = interpolationV(lView, values);

      if (interpolated !== NO_CHANGE) {
        var tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);

        if (ngDevMode) {
          var interpolationInBetween = [values[0]]; // prefix

          for (var i = 2; i < values.length; i += 2) {
            interpolationInBetween.push(values[i]);
          }

          storePropertyBindingMetadata.apply(void 0, [getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - interpolationInBetween.length + 1].concat(interpolationInBetween));
        }
      }

      return ɵɵattributeInterpolateV;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Synchronously perform change detection on a component (and possibly its sub-components).
     *
     * This function triggers change detection in a synchronous way on a component.
     *
     * @param component The component which the change detection should be performed on.
     */


    function detectChanges(component) {
      var view = getComponentViewByInstance(component);
      detectChangesInternal(view[TVIEW], view, component);
    }
    /**
     * Marks the component as dirty (needing change detection). Marking a component dirty will
     * schedule a change detection on it at some point in the future.
     *
     * Marking an already dirty component as dirty won't do anything. Only one outstanding change
     * detection can be scheduled per component tree.
     *
     * @param component Component to mark as dirty.
     */


    function markDirty(component) {
      ngDevMode && assertDefined(component, 'component');
      var rootView = markViewDirty(getComponentViewByInstance(component));
      ngDevMode && assertDefined(rootView[CONTEXT], 'rootContext should be defined');
      scheduleTick(rootView[CONTEXT], 1
      /* DetectChanges */
      );
    }
    /**
     * Used to perform change detection on the whole application.
     *
     * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`
     * executes lifecycle hooks and conditionally checks components based on their
     * `ChangeDetectionStrategy` and dirtiness.
     *
     * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally
     * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a
     * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can
     * be changed when calling `renderComponent` and providing the `scheduler` option.
     */


    function tick(component) {
      var rootView = getRootView(component);
      var rootContext = rootView[CONTEXT];
      tickRootContext(rootContext);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {
      ngDevMode && assertFirstCreatePass(tView);
      ngDevMode && ngDevMode.firstCreatePass++;
      var tViewConsts = tView.consts; // TODO(pk): refactor getOrCreateTNode to have the "create" only version

      var tNode = getOrCreateTNode(tView, lView[T_HOST], index, 0
      /* Container */
      , tagName || null, getConstant(tViewConsts, attrsIndex));
      resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
      registerPostOrderHooks(tView, tNode);
      var embeddedTView = tNode.tViews = createTView(2
      /* Embedded */
      , -1, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts);
      var embeddedTViewNode = createTNode(tView, null, 2
      /* View */
      , -1, null, null);
      embeddedTViewNode.injectorIndex = tNode.injectorIndex;
      embeddedTView.node = embeddedTViewNode;

      if (tView.queries !== null) {
        tView.queries.template(tView, tNode);
        embeddedTView.queries = tView.queries.embeddedTView(tNode);
      }

      return tNode;
    }
    /**
     * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.
     *
     * <ng-template #foo>
     *    <div></div>
     * </ng-template>
     *
     * @param index The index of the container in the data array
     * @param templateFn Inline template
     * @param decls The number of nodes, local refs, and pipes for this template
     * @param vars The number of bindings for this template
     * @param tagName The name of the container element, if applicable
     * @param attrsIndex Index of template attributes in the `consts` array.
     * @param localRefs Index of the local references in the `consts` array.
     * @param localRefExtractor A function which extracts local-refs values from the template.
     *        Defaults to the current element associated with the local-ref.
     *
     * @codeGenApi
     */


    function ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {
      var lView = getLView();
      var tView = getTView();
      var adjustedIndex = index + HEADER_OFFSET;
      var tNode = tView.firstCreatePass ? templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
      setPreviousOrParentTNode(tNode, false);
      var comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');
      appendChild(tView, lView, comment, tNode);
      attachPatchData(comment, lView);
      addToViewTree(lView, lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode));

      if (isDirectiveHost(tNode)) {
        createDirectivesInstances(tView, lView, tNode);
      }

      if (localRefsIndex != null) {
        saveResolvedLocalsInData(lView, tNode, localRefExtractor);
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /** Store a value in the `data` at a given `index`. */


    function store(tView, lView, index, value) {
      // We don't store any static data for local variables, so the first time
      // we see the template, we should store as null to avoid a sparse array
      var adjustedIndex = index + HEADER_OFFSET;

      if (adjustedIndex >= tView.data.length) {
        tView.data[adjustedIndex] = null;
        tView.blueprint[adjustedIndex] = null;
      }

      lView[adjustedIndex] = value;
    }
    /**
     * Retrieves a local reference from the current contextViewData.
     *
     * If the reference to retrieve is in a parent view, this instruction is used in conjunction
     * with a nextContext() call, which walks up the tree and updates the contextViewData instance.
     *
     * @param index The index of the local ref in contextViewData.
     *
     * @codeGenApi
     */


    function ɵɵreference(index) {
      var contextLView = getContextLView();
      return load(contextLView, index);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function ɵɵdirectiveInject(token) {
      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : InjectFlags.Default;
      var lView = getLView(); // Fall back to inject() if view hasn't been created. This situation can happen in tests
      // if inject utilities are used before bootstrapping.

      if (lView == null) return ɵɵinject(token, flags);
      var tNode = getPreviousOrParentTNode();
      return getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);
    }
    /**
     * Facade for the attribute injection from DI.
     *
     * @codeGenApi
     */


    function ɵɵinjectAttribute(attrNameToInject) {
      return injectAttributeImpl(getPreviousOrParentTNode(), attrNameToInject);
    }
    /**
     * Throws an error indicating that a factory function could not be generated by the compiler for a
     * particular class.
     *
     * This instruction allows the actual error message to be optimized away when ngDevMode is turned
     * off, saving bytes of generated code while still providing a good experience in dev mode.
     *
     * The name of the class is not mentioned here, but will be in the generated factory function name
     * and thus in the stack trace.
     *
     * @codeGenApi
     */


    function ɵɵinvalidFactory() {
      var msg = ngDevMode ? "This constructor was not compatible with Dependency Injection." : 'invalid';
      throw new Error(msg);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Update a property on a selected element.
     *
     * Operates on the element selected by index via the {@link select} instruction.
     *
     * If the property name also exists as an input property on one of the element's directives,
     * the component property will be set instead of the element property. This check must
     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled
     *
     * @param propName Name of property. Because it is going to DOM, this is not subject to
     *        renaming as part of minification.
     * @param value New value to write.
     * @param sanitizer An optional function used to sanitize the value.
     * @returns This function returns itself so that it may be chained
     * (e.g. `property('name', ctx.name)('title', ctx.title)`)
     *
     * @codeGenApi
     */


    function ɵɵproperty(propName, value, sanitizer) {
      var lView = getLView();
      var bindingIndex = nextBindingIndex();

      if (bindingUpdated(lView, bindingIndex, value)) {
        var tView = getTView();
        var tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
      }

      return ɵɵproperty;
    }
    /**
     * Given `<div style="..." my-dir>` and `MyDir` with `@Input('style')` we need to write to
     * directive input.
     */


    function setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {
      var inputs = tNode.inputs;
      var property = isClassBased ? 'class' : 'style'; // We support both 'class' and `className` hence the fallback.

      setInputsForProperty(tView, lView, inputs[property], property, value);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function elementStartFirstCreatePass(index, tView, lView, _native12, name, attrsIndex, localRefsIndex) {
      ngDevMode && assertFirstCreatePass(tView);
      ngDevMode && ngDevMode.firstCreatePass++;
      var tViewConsts = tView.consts;
      var attrs = getConstant(tViewConsts, attrsIndex);
      var tNode = getOrCreateTNode(tView, lView[T_HOST], index, 3
      /* Element */
      , name, attrs);
      var hasDirectives = resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
      ngDevMode && logUnknownElementError(tView, _native12, tNode, hasDirectives);

      if (tNode.attrs !== null) {
        computeStaticStyling(tNode, tNode.attrs, false);
      }

      if (tNode.mergedAttrs !== null) {
        computeStaticStyling(tNode, tNode.mergedAttrs, true);
      }

      if (tView.queries !== null) {
        tView.queries.elementStart(tView, tNode);
      }

      return tNode;
    }
    /**
     * Create DOM element. The instruction must later be followed by `elementEnd()` call.
     *
     * @param index Index of the element in the LView array
     * @param name Name of the DOM Node
     * @param attrsIndex Index of the element's attributes in the `consts` array.
     * @param localRefsIndex Index of the element's local references in the `consts` array.
     *
     * Attributes and localRefs are passed as an array of strings where elements with an even index
     * hold an attribute name and elements with an odd index hold an attribute value, ex.:
     * ['id', 'warning5', 'class', 'alert']
     *
     * @codeGenApi
     */


    function ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {
      var lView = getLView();
      var tView = getTView();
      var adjustedIndex = HEADER_OFFSET + index;
      ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');
      ngDevMode && ngDevMode.rendererCreateElement++;
      ngDevMode && assertIndexInRange(lView, adjustedIndex);
      var renderer = lView[RENDERER];

      var _native13 = lView[adjustedIndex] = elementCreate(name, renderer, getNamespace());

      var tNode = tView.firstCreatePass ? elementStartFirstCreatePass(index, tView, lView, _native13, name, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
      setPreviousOrParentTNode(tNode, true);
      var mergedAttrs = tNode.mergedAttrs;

      if (mergedAttrs !== null) {
        setUpAttributes(renderer, _native13, mergedAttrs);
      }

      var classes = tNode.classes;

      if (classes !== null) {
        writeDirectClass(renderer, _native13, classes);
      }

      var styles = tNode.styles;

      if (styles !== null) {
        writeDirectStyle(renderer, _native13, styles);
      }

      appendChild(tView, lView, _native13, tNode); // any immediate children of a component or template container must be pre-emptively
      // monkey-patched with the component view data so that the element can be inspected
      // later on using any element discovery utility methods (see `element_discovery.ts`)

      if (getElementDepthCount() === 0) {
        attachPatchData(_native13, lView);
      }

      increaseElementDepthCount();

      if (isDirectiveHost(tNode)) {
        createDirectivesInstances(tView, lView, tNode);
        executeContentQueries(tView, tNode, lView);
      }

      if (localRefsIndex !== null) {
        saveResolvedLocalsInData(lView, tNode);
      }
    }
    /**
     * Mark the end of the element.
     *
     * @codeGenApi
     */


    function ɵɵelementEnd() {
      var previousOrParentTNode = getPreviousOrParentTNode();
      ngDevMode && assertDefined(previousOrParentTNode, 'No parent node to close.');

      if (getIsParent()) {
        setIsNotParent();
      } else {
        ngDevMode && assertHasParent(getPreviousOrParentTNode());
        previousOrParentTNode = previousOrParentTNode.parent;
        setPreviousOrParentTNode(previousOrParentTNode, false);
      }

      var tNode = previousOrParentTNode;
      ngDevMode && assertNodeType(tNode, 3
      /* Element */
      );
      decreaseElementDepthCount();
      var tView = getTView();

      if (tView.firstCreatePass) {
        registerPostOrderHooks(tView, previousOrParentTNode);

        if (isContentQueryHost(previousOrParentTNode)) {
          tView.queries.elementEnd(previousOrParentTNode);
        }
      }

      if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {
        setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);
      }

      if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {
        setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);
      }
    }
    /**
     * Creates an empty element using {@link elementStart} and {@link elementEnd}
     *
     * @param index Index of the element in the data array
     * @param name Name of the DOM Node
     * @param attrsIndex Index of the element's attributes in the `consts` array.
     * @param localRefsIndex Index of the element's local references in the `consts` array.
     *
     * @codeGenApi
     */


    function ɵɵelement(index, name, attrsIndex, localRefsIndex) {
      ɵɵelementStart(index, name, attrsIndex, localRefsIndex);
      ɵɵelementEnd();
    }

    function logUnknownElementError(tView, element, tNode, hasDirectives) {
      var schemas = tView.schemas; // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT
      // mode where this check happens at compile time. In JIT mode, `schemas` is always present and
      // defined as an array (as an empty array in case `schemas` field is not defined) and we should
      // execute the check below.

      if (schemas === null) return;
      var tagName = tNode.tagName; // If the element matches any directive, it's considered as valid.

      if (!hasDirectives && tagName !== null) {
        // The element is unknown if it's an instance of HTMLUnknownElement or it isn't registered
        // as a custom element. Note that unknown elements with a dash in their name won't be instances
        // of HTMLUnknownElement in browsers that support web components.
        var isUnknown = // Note that we can't check for `typeof HTMLUnknownElement === 'function'`,
        // because while most browsers return 'function', IE returns 'object'.
        typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement && element instanceof HTMLUnknownElement || typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 && !customElements.get(tagName);

        if (isUnknown && !matchingSchemas(tView, tagName)) {
          var message = "'".concat(tagName, "' is not a known element:\n");
          message += "1. If '".concat(tagName, "' is an Angular component, then verify that it is part of this module.\n");

          if (tagName && tagName.indexOf('-') > -1) {
            message += "2. If '".concat(tagName, "' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.");
          } else {
            message += "2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
          }

          console.error(message);
        }
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {
      ngDevMode && ngDevMode.firstCreatePass++;
      var tViewConsts = tView.consts;
      var attrs = getConstant(tViewConsts, attrsIndex);
      var tNode = getOrCreateTNode(tView, lView[T_HOST], index, 4
      /* ElementContainer */
      , 'ng-container', attrs); // While ng-container doesn't necessarily support styling, we use the style context to identify
      // and execute directives on the ng-container.

      if (attrs !== null) {
        computeStaticStyling(tNode, attrs, true);
      }

      var localRefs = getConstant(tViewConsts, localRefsIndex);
      resolveDirectives(tView, lView, tNode, localRefs);

      if (tView.queries !== null) {
        tView.queries.elementStart(tView, tNode);
      }

      return tNode;
    }
    /**
     * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.
     * The instruction must later be followed by `elementContainerEnd()` call.
     *
     * @param index Index of the element in the LView array
     * @param attrsIndex Index of the container attributes in the `consts` array.
     * @param localRefsIndex Index of the container's local references in the `consts` array.
     *
     * Even if this instruction accepts a set of attributes no actual attribute values are propagated to
     * the DOM (as a comment node can't have attributes). Attributes are here only for directive
     * matching purposes and setting initial inputs of directives.
     *
     * @codeGenApi
     */


    function ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {
      var lView = getLView();
      var tView = getTView();
      var adjustedIndex = index + HEADER_OFFSET;
      ngDevMode && assertIndexInRange(lView, adjustedIndex);
      ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');
      var tNode = tView.firstCreatePass ? elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
      setPreviousOrParentTNode(tNode, true);
      ngDevMode && ngDevMode.rendererCreateComment++;

      var _native14 = lView[adjustedIndex] = lView[RENDERER].createComment(ngDevMode ? 'ng-container' : '');

      appendChild(tView, lView, _native14, tNode);
      attachPatchData(_native14, lView);

      if (isDirectiveHost(tNode)) {
        createDirectivesInstances(tView, lView, tNode);
        executeContentQueries(tView, tNode, lView);
      }

      if (localRefsIndex != null) {
        saveResolvedLocalsInData(lView, tNode);
      }
    }
    /**
     * Mark the end of the <ng-container>.
     *
     * @codeGenApi
     */


    function ɵɵelementContainerEnd() {
      var previousOrParentTNode = getPreviousOrParentTNode();
      var tView = getTView();

      if (getIsParent()) {
        setIsNotParent();
      } else {
        ngDevMode && assertHasParent(previousOrParentTNode);
        previousOrParentTNode = previousOrParentTNode.parent;
        setPreviousOrParentTNode(previousOrParentTNode, false);
      }

      ngDevMode && assertNodeType(previousOrParentTNode, 4
      /* ElementContainer */
      );

      if (tView.firstCreatePass) {
        registerPostOrderHooks(tView, previousOrParentTNode);

        if (isContentQueryHost(previousOrParentTNode)) {
          tView.queries.elementEnd(previousOrParentTNode);
        }
      }
    }
    /**
     * Creates an empty logical container using {@link elementContainerStart}
     * and {@link elementContainerEnd}
     *
     * @param index Index of the element in the LView array
     * @param attrsIndex Index of the container attributes in the `consts` array.
     * @param localRefsIndex Index of the container's local references in the `consts` array.
     *
     * @codeGenApi
     */


    function ɵɵelementContainer(index, attrsIndex, localRefsIndex) {
      ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);
      ɵɵelementContainerEnd();
    }
    /**
     * Returns the current OpaqueViewState instance.
     *
     * Used in conjunction with the restoreView() instruction to save a snapshot
     * of the current view and restore it when listeners are invoked. This allows
     * walking the declaration view tree in listeners to get vars from parent views.
     *
     * @codeGenApi
     */


    function ɵɵgetCurrentView() {
      return getLView();
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Determine if the argument is shaped like a Promise
     */


    function isPromise(obj) {
      // allow any Promise/A+ compliant thenable.
      // It's up to the caller to ensure that obj.then conforms to the spec
      return !!obj && typeof obj.then === 'function';
    }
    /**
     * Determine if the argument is an Observable
     */


    function isObservable(obj) {
      // TODO: use isObservable once we update pass rxjs 6.1
      // https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#610-2018-05-03
      return !!obj && typeof obj.subscribe === 'function';
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Adds an event listener to the current node.
     *
     * If an output exists on one of the node's directives, it also subscribes to the output
     * and saves the subscription for later cleanup.
     *
     * @param eventName Name of the event
     * @param listenerFn The function to be called when event emits
     * @param useCapture Whether or not to use capture in event listener
     * @param eventTargetResolver Function that returns global target information in case this listener
     * should be attached to a global object like window, document or body
     *
     * @codeGenApi
     */


    function ɵɵlistener(eventName, listenerFn) {
      var useCapture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var eventTargetResolver = arguments.length > 3 ? arguments[3] : undefined;
      var lView = getLView();
      var tView = getTView();
      var tNode = getPreviousOrParentTNode();
      listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, useCapture, eventTargetResolver);
      return ɵɵlistener;
    }
    /**
     * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.
     *
     * This instruction is for compatibility purposes and is designed to ensure that a
     * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered
     * in the component's renderer. Normally all host listeners are evaluated with the
     * parent component's renderer, but, in the case of animation @triggers, they need
     * to be evaluated with the sub component's renderer (because that's where the
     * animation triggers are defined).
     *
     * Do not use this instruction as a replacement for `listener`. This instruction
     * only exists to ensure compatibility with the ViewEngine's host binding behavior.
     *
     * @param eventName Name of the event
     * @param listenerFn The function to be called when event emits
     * @param useCapture Whether or not to use capture in event listener
     * @param eventTargetResolver Function that returns global target information in case this listener
     * should be attached to a global object like window, document or body
     *
     * @codeGenApi
     */


    function ɵɵsyntheticHostListener(eventName, listenerFn) {
      var useCapture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var eventTargetResolver = arguments.length > 3 ? arguments[3] : undefined;
      var tNode = getPreviousOrParentTNode();
      var lView = getLView();
      var tView = getTView();
      var currentDef = getCurrentDirectiveDef(tView.data);
      var renderer = loadComponentRenderer(currentDef, tNode, lView);
      listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, useCapture, eventTargetResolver);
      return ɵɵsyntheticHostListener;
    }
    /**
     * A utility function that checks if a given element has already an event handler registered for an
     * event with a specified name. The TView.cleanup data structure is used to find out which events
     * are registered for a given element.
     */


    function findExistingListener(tView, lView, eventName, tNodeIdx) {
      var tCleanup = tView.cleanup;

      if (tCleanup != null) {
        for (var i = 0; i < tCleanup.length - 1; i += 2) {
          var cleanupEventName = tCleanup[i];

          if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {
            // We have found a matching event name on the same node but it might not have been
            // registered yet, so we must explicitly verify entries in the LView cleanup data
            // structures.
            var lCleanup = lView[CLEANUP];
            var listenerIdxInLCleanup = tCleanup[i + 2];
            return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;
          } // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or
          // 2-element entries (for directive and queries destroy hooks). As such we can encounter
          // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements
          // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check
          // documentation of TView.cleanup for more details of this data structure layout.


          if (typeof cleanupEventName === 'string') {
            i += 2;
          }
        }
      }

      return null;
    }

    function listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn) {
      var useCapture = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
      var eventTargetResolver = arguments.length > 7 ? arguments[7] : undefined;
      var isTNodeDirectiveHost = isDirectiveHost(tNode);
      var firstCreatePass = tView.firstCreatePass;
      var tCleanup = firstCreatePass && (tView.cleanup || (tView.cleanup = [])); // When the ɵɵlistener instruction was generated and is executed we know that there is either a
      // native listener or a directive output on this element. As such we we know that we will have to
      // register a listener and store its cleanup function on LView.

      var lCleanup = getLCleanup(lView);
      ngDevMode && assertNodeOfPossibleTypes(tNode, [3
      /* Element */
      , 0
      /* Container */
      , 4
      /* ElementContainer */
      ]);
      var processOutputs = true; // add native event listener - applicable to elements only

      if (tNode.type === 3
      /* Element */
      ) {
          var _native15 = getNativeByTNode(tNode, lView);

          var resolved = eventTargetResolver ? eventTargetResolver(_native15) : EMPTY_OBJ;
          var target = resolved.target || _native15;
          var lCleanupIndex = lCleanup.length;
          var idxOrTargetGetter = eventTargetResolver ? function (_lView) {
            return eventTargetResolver(unwrapRNode(_lView[tNode.index])).target;
          } : tNode.index; // In order to match current behavior, native DOM event listeners must be added for all
          // events (including outputs).

          if (isProceduralRenderer(renderer)) {
            // There might be cases where multiple directives on the same element try to register an event
            // handler function for the same event. In this situation we want to avoid registration of
            // several native listeners as each registration would be intercepted by NgZone and
            // trigger change detection. This would mean that a single user action would result in several
            // change detections being invoked. To avoid this situation we want to have only one call to
            // native handler registration (for the same element and same type of event).
            //
            // In order to have just one native event handler in presence of multiple handler functions,
            // we just register a first handler function as a native event listener and then chain
            // (coalesce) other handler functions on top of the first native handler function.
            var existingListener = null; // Please note that the coalescing described here doesn't happen for events specifying an
            // alternative target (ex. (document:click)) - this is to keep backward compatibility with the
            // view engine.
            // Also, we don't have to search for existing listeners is there are no directives
            // matching on a given node as we can't register multiple event handlers for the same event in
            // a template (this would mean having duplicate attributes).

            if (!eventTargetResolver && isTNodeDirectiveHost) {
              existingListener = findExistingListener(tView, lView, eventName, tNode.index);
            }

            if (existingListener !== null) {
              // Attach a new listener to coalesced listeners list, maintaining the order in which
              // listeners are registered. For performance reasons, we keep a reference to the last
              // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through
              // the entire set each time we need to add a new listener.
              var lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;
              lastListenerFn.__ngNextListenerFn__ = listenerFn;
              existingListener.__ngLastListenerFn__ = listenerFn;
              processOutputs = false;
            } else {
              // The first argument of `listen` function in Procedural Renderer is:
              // - either a target name (as a string) in case of global target (window, document, body)
              // - or element reference (in all other cases)
              listenerFn = wrapListener(tNode, lView, listenerFn, false
              /** preventDefault */
              );
              var cleanupFn = renderer.listen(resolved.name || target, eventName, listenerFn);
              ngDevMode && ngDevMode.rendererAddEventListener++;
              lCleanup.push(listenerFn, cleanupFn);
              tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);
            }
          } else {
            listenerFn = wrapListener(tNode, lView, listenerFn, true
            /** preventDefault */
            );
            target.addEventListener(eventName, listenerFn, useCapture);
            ngDevMode && ngDevMode.rendererAddEventListener++;
            lCleanup.push(listenerFn);
            tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCapture);
          }
        } // subscribe to directive outputs


      var outputs = tNode.outputs;
      var props;

      if (processOutputs && outputs !== null && (props = outputs[eventName])) {
        var propsLength = props.length;

        if (propsLength) {
          for (var i = 0; i < propsLength; i += 2) {
            var index = props[i];
            ngDevMode && assertIndexInRange(lView, index);
            var minifiedName = props[i + 1];
            var directiveInstance = lView[index];
            var output = directiveInstance[minifiedName];

            if (ngDevMode && !isObservable(output)) {
              throw new Error("@Output ".concat(minifiedName, " not initialized in '").concat(directiveInstance.constructor.name, "'."));
            }

            var subscription = output.subscribe(listenerFn);
            var idx = lCleanup.length;
            lCleanup.push(listenerFn, subscription);
            tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));
          }
        }
      }
    }

    function executeListenerWithErrorHandling(lView, listenerFn, e) {
      try {
        // Only explicitly returning false from a listener should preventDefault
        return listenerFn(e) !== false;
      } catch (error) {
        handleError(lView, error);
        return false;
      }
    }
    /**
     * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,
     * if applicable.
     *
     * @param tNode The TNode associated with this listener
     * @param lView The LView that contains this listener
     * @param listenerFn The listener function to call
     * @param wrapWithPreventDefault Whether or not to prevent default behavior
     * (the procedural renderer does this already, so in those cases, we should skip)
     */


    function wrapListener(tNode, lView, listenerFn, wrapWithPreventDefault) {
      // Note: we are performing most of the work in the listener function itself
      // to optimize listener registration.
      return function wrapListenerIn_markDirtyAndPreventDefault(e) {
        // Ivy uses `Function` as a special token that allows us to unwrap the function
        // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.
        if (e === Function) {
          return listenerFn;
        } // In order to be backwards compatible with View Engine, events on component host nodes
        // must also mark the component view itself dirty (i.e. the view that it owns).


        var startView = tNode.flags & 2
        /* isComponentHost */
        ? getComponentLViewByIndex(tNode.index, lView) : lView; // See interfaces/view.ts for more on LViewFlags.ManualOnPush

        if ((lView[FLAGS] & 32
        /* ManualOnPush */
        ) === 0) {
          markViewDirty(startView);
        }

        var result = executeListenerWithErrorHandling(lView, listenerFn, e); // A just-invoked listener function might have coalesced listeners so we need to check for
        // their presence and invoke as needed.

        var nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;

        while (nextListenerFn) {
          // We should prevent default if any of the listeners explicitly return false
          result = executeListenerWithErrorHandling(lView, nextListenerFn, e) && result;
          nextListenerFn = nextListenerFn.__ngNextListenerFn__;
        }

        if (wrapWithPreventDefault && result === false) {
          e.preventDefault(); // Necessary for legacy browsers that don't support preventDefault (e.g. IE)

          e.returnValue = false;
        }

        return result;
      };
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Retrieves a context at the level specified and saves it as the global, contextViewData.
     * Will get the next level up if level is not specified.
     *
     * This is used to save contexts of parent views so they can be bound in embedded views, or
     * in conjunction with reference() to bind a ref from a parent view.
     *
     * @param level The relative level of the view from which to grab context compared to contextVewData
     * @returns context
     *
     * @codeGenApi
     */


    function ɵɵnextContext() {
      var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return nextContextImpl(level);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Checks a given node against matching projection slots and returns the
     * determined slot index. Returns "null" if no slot matched the given node.
     *
     * This function takes into account the parsed ngProjectAs selector from the
     * node's attributes. If present, it will check whether the ngProjectAs selector
     * matches any of the projection slot selectors.
     */


    function matchingProjectionSlotIndex(tNode, projectionSlots) {
      var wildcardNgContentIndex = null;
      var ngProjectAsAttrVal = getProjectAsAttrValue(tNode);

      for (var i = 0; i < projectionSlots.length; i++) {
        var slotValue = projectionSlots[i]; // The last wildcard projection slot should match all nodes which aren't matching
        // any selector. This is necessary to be backwards compatible with view engine.

        if (slotValue === '*') {
          wildcardNgContentIndex = i;
          continue;
        } // If we ran into an `ngProjectAs` attribute, we should match its parsed selector
        // to the list of selectors, otherwise we fall back to matching against the node.


        if (ngProjectAsAttrVal === null ? isNodeMatchingSelectorList(tNode, slotValue,
        /* isProjectionMode */
        true) : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {
          return i; // first matching selector "captures" a given node
        }
      }

      return wildcardNgContentIndex;
    }
    /**
     * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.
     * It takes all the selectors from the entire component's template and decides where
     * each projected node belongs (it re-distributes nodes among "buckets" where each "bucket" is
     * backed by a selector).
     *
     * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,
     * un-parsed form.
     *
     * The parsed form is needed for efficient matching of a node against a given CSS selector.
     * The un-parsed, textual form is needed for support of the ngProjectAs attribute.
     *
     * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more
     * drawbacks:
     * - having only a textual form would require runtime parsing of CSS selectors;
     * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a
     * template author).
     *
     * @param projectionSlots? A collection of projection slots. A projection slot can be based
     *        on a parsed CSS selectors or set to the wildcard selector ("*") in order to match
     *        all nodes which do not match any selector. If not specified, a single wildcard
     *        selector projection slot will be defined.
     *
     * @codeGenApi
     */


    function ɵɵprojectionDef(projectionSlots) {
      var componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];

      if (!componentNode.projection) {
        // If no explicit projection slots are defined, fall back to a single
        // projection slot with the wildcard selector.
        var numProjectionSlots = projectionSlots ? projectionSlots.length : 1;
        var projectionHeads = componentNode.projection = newArray(numProjectionSlots, null);
        var tails = projectionHeads.slice();
        var componentChild = componentNode.child;

        while (componentChild !== null) {
          var slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;

          if (slotIndex !== null) {
            if (tails[slotIndex]) {
              tails[slotIndex].projectionNext = componentChild;
            } else {
              projectionHeads[slotIndex] = componentChild;
            }

            tails[slotIndex] = componentChild;
          }

          componentChild = componentChild.next;
        }
      }
    }

    var delayProjection = false;

    function setDelayProjection(value) {
      delayProjection = value;
    }
    /**
     * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call
     * to the projectionDef instruction.
     *
     * @param nodeIndex
     * @param selectorIndex:
     *        - 0 when the selector is `*` (or unspecified as this is the default value),
     *        - 1 based index of the selector from the {@link projectionDef}
     *
     * @codeGenApi
     */


    function ɵɵprojection(nodeIndex) {
      var selectorIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var attrs = arguments.length > 2 ? arguments[2] : undefined;
      var lView = getLView();
      var tView = getTView();
      var tProjectionNode = getOrCreateTNode(tView, lView[T_HOST], nodeIndex, 1
      /* Projection */
      , null, attrs || null); // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.

      if (tProjectionNode.projection === null) tProjectionNode.projection = selectorIndex; // `<ng-content>` has no content

      setIsNotParent(); // We might need to delay the projection of nodes if they are in the middle of an i18n block

      if (!delayProjection) {
        // re-distribution of projectable nodes is stored on a component's view level
        applyProjection(tView, lView, tProjectionNode);
      }
    }
    /**
     *
     * Update an interpolated property on an element with a lone bound value
     *
     * Used when the value passed to a property has 1 interpolated value in it, an no additional text
     * surrounds that interpolated value:
     *
     * ```html
     * <div title="{{v0}}"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵpropertyInterpolate('title', v0);
     * ```
     *
     * If the property name also exists as an input property on one of the element's directives,
     * the component property will be set instead of the element property. This check must
     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
     *
     * @param propName The name of the property to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵpropertyInterpolate(propName, v0, sanitizer) {
      ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);
      return ɵɵpropertyInterpolate;
    }
    /**
     *
     * Update an interpolated property on an element with single bound value surrounded by text.
     *
     * Used when the value passed to a property has 1 interpolated value in it:
     *
     * ```html
     * <div title="prefix{{v0}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');
     * ```
     *
     * If the property name also exists as an input property on one of the element's directives,
     * the component property will be set instead of the element property. This check must
     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
     *
     * @param propName The name of the property to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {
      var lView = getLView();
      var interpolatedValue = interpolation1(lView, prefix, v0, suffix);

      if (interpolatedValue !== NO_CHANGE) {
        var tView = getTView();
        var tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);
      }

      return ɵɵpropertyInterpolate1;
    }
    /**
     *
     * Update an interpolated property on an element with 2 bound values surrounded by text.
     *
     * Used when the value passed to a property has 2 interpolated values in it:
     *
     * ```html
     * <div title="prefix{{v0}}-{{v1}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');
     * ```
     *
     * If the property name also exists as an input property on one of the element's directives,
     * the component property will be set instead of the element property. This check must
     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
     *
     * @param propName The name of the property to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {
      var lView = getLView();
      var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);

      if (interpolatedValue !== NO_CHANGE) {
        var tView = getTView();
        var tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);
      }

      return ɵɵpropertyInterpolate2;
    }
    /**
     *
     * Update an interpolated property on an element with 3 bound values surrounded by text.
     *
     * Used when the value passed to a property has 3 interpolated values in it:
     *
     * ```html
     * <div title="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵpropertyInterpolate3(
     * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');
     * ```
     *
     * If the property name also exists as an input property on one of the element's directives,
     * the component property will be set instead of the element property. This check must
     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
     *
     * @param propName The name of the property to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {
      var lView = getLView();
      var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);

      if (interpolatedValue !== NO_CHANGE) {
        var tView = getTView();
        var tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);
      }

      return ɵɵpropertyInterpolate3;
    }
    /**
     *
     * Update an interpolated property on an element with 4 bound values surrounded by text.
     *
     * Used when the value passed to a property has 4 interpolated values in it:
     *
     * ```html
     * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵpropertyInterpolate4(
     * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
     * ```
     *
     * If the property name also exists as an input property on one of the element's directives,
     * the component property will be set instead of the element property. This check must
     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
     *
     * @param propName The name of the property to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {
      var lView = getLView();
      var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);

      if (interpolatedValue !== NO_CHANGE) {
        var tView = getTView();
        var tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
      }

      return ɵɵpropertyInterpolate4;
    }
    /**
     *
     * Update an interpolated property on an element with 5 bound values surrounded by text.
     *
     * Used when the value passed to a property has 5 interpolated values in it:
     *
     * ```html
     * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵpropertyInterpolate5(
     * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
     * ```
     *
     * If the property name also exists as an input property on one of the element's directives,
     * the component property will be set instead of the element property. This check must
     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
     *
     * @param propName The name of the property to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {
      var lView = getLView();
      var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);

      if (interpolatedValue !== NO_CHANGE) {
        var tView = getTView();
        var tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
      }

      return ɵɵpropertyInterpolate5;
    }
    /**
     *
     * Update an interpolated property on an element with 6 bound values surrounded by text.
     *
     * Used when the value passed to a property has 6 interpolated values in it:
     *
     * ```html
     * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵpropertyInterpolate6(
     *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
     * ```
     *
     * If the property name also exists as an input property on one of the element's directives,
     * the component property will be set instead of the element property. This check must
     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
     *
     * @param propName The name of the property to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param i4 Static value used for concatenation only.
     * @param v5 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {
      var lView = getLView();
      var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);

      if (interpolatedValue !== NO_CHANGE) {
        var tView = getTView();
        var tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
      }

      return ɵɵpropertyInterpolate6;
    }
    /**
     *
     * Update an interpolated property on an element with 7 bound values surrounded by text.
     *
     * Used when the value passed to a property has 7 interpolated values in it:
     *
     * ```html
     * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵpropertyInterpolate7(
     *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
     * ```
     *
     * If the property name also exists as an input property on one of the element's directives,
     * the component property will be set instead of the element property. This check must
     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
     *
     * @param propName The name of the property to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param i4 Static value used for concatenation only.
     * @param v5 Value checked for change.
     * @param i5 Static value used for concatenation only.
     * @param v6 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {
      var lView = getLView();
      var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);

      if (interpolatedValue !== NO_CHANGE) {
        var tView = getTView();
        var tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
      }

      return ɵɵpropertyInterpolate7;
    }
    /**
     *
     * Update an interpolated property on an element with 8 bound values surrounded by text.
     *
     * Used when the value passed to a property has 8 interpolated values in it:
     *
     * ```html
     * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵpropertyInterpolate8(
     *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
     * ```
     *
     * If the property name also exists as an input property on one of the element's directives,
     * the component property will be set instead of the element property. This check must
     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
     *
     * @param propName The name of the property to update
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param i4 Static value used for concatenation only.
     * @param v5 Value checked for change.
     * @param i5 Static value used for concatenation only.
     * @param v6 Value checked for change.
     * @param i6 Static value used for concatenation only.
     * @param v7 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {
      var lView = getLView();
      var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);

      if (interpolatedValue !== NO_CHANGE) {
        var tView = getTView();
        var tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
      }

      return ɵɵpropertyInterpolate8;
    }
    /**
     * Update an interpolated property on an element with 9 or more bound values surrounded by text.
     *
     * Used when the number of interpolated values exceeds 8.
     *
     * ```html
     * <div
     *  title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
     * ```
     *
     * Its compiled representation is::
     *
     * ```ts
     * ɵɵpropertyInterpolateV(
     *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
     *  'suffix']);
     * ```
     *
     * If the property name also exists as an input property on one of the element's directives,
     * the component property will be set instead of the element property. This check must
     * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.
     *
     * @param propName The name of the property to update.
     * @param values The collection of values and the strings inbetween those values, beginning with a
     * string prefix and ending with a string suffix.
     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
     * @param sanitizer An optional sanitizer function
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵpropertyInterpolateV(propName, values, sanitizer) {
      var lView = getLView();
      var interpolatedValue = interpolationV(lView, values);

      if (interpolatedValue !== NO_CHANGE) {
        var tView = getTView();
        var tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);

        if (ngDevMode) {
          var interpolationInBetween = [values[0]]; // prefix

          for (var i = 2; i < values.length; i += 2) {
            interpolationInBetween.push(values[i]);
          }

          storePropertyBindingMetadata.apply(void 0, [tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1].concat(interpolationInBetween));
        }
      }

      return ɵɵpropertyInterpolateV;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * This file contains reuseable "empty" symbols that can be used as default return values
     * in different parts of the rendering code. Because the same symbols are returned, this
     * allows for identity checks against these values to be consistently used by the framework
     * code.
     */


    var EMPTY_OBJ$1 = {};
    var EMPTY_ARRAY$3 = []; // freezing the values prevents any code from accidentally inserting new values in

    if ((typeof ngDevMode === 'undefined' || ngDevMode) && /*@__PURE__*/initNgDevMode()) {
      // These property accesses can be ignored because ngDevMode will be set to false
      // when optimizing code and the whole if statement will be dropped.
      // tslint:disable-next-line:no-toplevel-property-access

      /*@__PURE__*/
      Object.freeze(EMPTY_OBJ$1); // tslint:disable-next-line:no-toplevel-property-access

      /*@__PURE__*/

      Object.freeze(EMPTY_ARRAY$3);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * NOTE: The word `styling` is used interchangeably as style or class styling.
     *
     * This file contains code to link styling instructions together so that they can be replayed in
     * priority order. The file exists because Ivy styling instruction execution order does not match
     * that of the priority order. The purpose of this code is to create a linked list so that the
     * instructions can be traversed in priority order when computing the styles.
     *
     * Assume we are dealing with the following code:
     * ```
     * @Component({
     *   template: `
     *     <my-cmp [style]=" {color: '#001'} "
     *             [style.color]=" #002 "
     *             dir-style-color-1
     *             dir-style-color-2> `
     * })
     * class ExampleComponent {
     *   static ngComp = ... {
     *     ...
     *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
     *     ɵɵstyleMap({color: '#001'});
     *     ɵɵstyleProp('color', '#002');
     *     ...
     *   }
     * }
     *
     * @Directive({
     *   selector: `[dir-style-color-1]',
     * })
     * class Style1Directive {
     *   @HostBinding('style') style = {color: '#005'};
     *   @HostBinding('style.color') color = '#006';
     *
     *   static ngDir = ... {
     *     ...
     *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
     *     ɵɵstyleMap({color: '#005'});
     *     ɵɵstyleProp('color', '#006');
     *     ...
     *   }
     * }
     *
     * @Directive({
     *   selector: `[dir-style-color-2]',
     * })
     * class Style2Directive {
     *   @HostBinding('style') style = {color: '#007'};
     *   @HostBinding('style.color') color = '#008';
     *
     *   static ngDir = ... {
     *     ...
     *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
     *     ɵɵstyleMap({color: '#007'});
     *     ɵɵstyleProp('color', '#008');
     *     ...
     *   }
     * }
     *
     * @Directive({
     *   selector: `my-cmp',
     * })
     * class MyComponent {
     *   @HostBinding('style') style = {color: '#003'};
     *   @HostBinding('style.color') color = '#004';
     *
     *   static ngComp = ... {
     *     ...
     *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
     *     ɵɵstyleMap({color: '#003'});
     *     ɵɵstyleProp('color', '#004');
     *     ...
     *   }
     * }
     * ```
     *
     * The Order of instruction execution is:
     *
     * NOTE: the comment binding location is for illustrative purposes only.
     *
     * ```
     * // Template: (ExampleComponent)
     *     ɵɵstyleMap({color: '#001'});   // Binding index: 10
     *     ɵɵstyleProp('color', '#002');  // Binding index: 12
     * // MyComponent
     *     ɵɵstyleMap({color: '#003'});   // Binding index: 20
     *     ɵɵstyleProp('color', '#004');  // Binding index: 22
     * // Style1Directive
     *     ɵɵstyleMap({color: '#005'});   // Binding index: 24
     *     ɵɵstyleProp('color', '#006');  // Binding index: 26
     * // Style2Directive
     *     ɵɵstyleMap({color: '#007'});   // Binding index: 28
     *     ɵɵstyleProp('color', '#008');  // Binding index: 30
     * ```
     *
     * The correct priority order of concatenation is:
     *
     * ```
     * // MyComponent
     *     ɵɵstyleMap({color: '#003'});   // Binding index: 20
     *     ɵɵstyleProp('color', '#004');  // Binding index: 22
     * // Style1Directive
     *     ɵɵstyleMap({color: '#005'});   // Binding index: 24
     *     ɵɵstyleProp('color', '#006');  // Binding index: 26
     * // Style2Directive
     *     ɵɵstyleMap({color: '#007'});   // Binding index: 28
     *     ɵɵstyleProp('color', '#008');  // Binding index: 30
     * // Template: (ExampleComponent)
     *     ɵɵstyleMap({color: '#001'});   // Binding index: 10
     *     ɵɵstyleProp('color', '#002');  // Binding index: 12
     * ```
     *
     * What color should be rendered?
     *
     * Once the items are correctly sorted in the list, the answer is simply the last item in the
     * concatenation list which is `#002`.
     *
     * To do so we keep a linked list of all of the bindings which pertain to this element.
     * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows
     * us to traverse them in the order of priority.
     *
     * |Idx|`TView.data`|`LView`          | Notes
     * |---|------------|-----------------|--------------
     * |...|            |                 |
     * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`
     * |11 |`30 | 12`   | ...             |
     * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`
     * |13 |`10 | 0`    | ...             |
     * |...|            |                 |
     * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`
     * |21 |`0 | 22`    | ...             |
     * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`
     * |23 |`20 | 24`   | ...             |
     * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`
     * |25 |`22 | 26`   | ...             |
     * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`
     * |27 |`24 | 28`   | ...             |
     * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`
     * |29 |`26 | 30`   | ...             |
     * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`
     * |31 |`28 | 10`   | ...             |
     *
     * The above data structure allows us to re-concatenate the styling no matter which data binding
     * changes.
     *
     * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next
     * duplicate bit. The duplicate bit if true says there either is a binding with the same name or
     * there is a map (which may contain the name). This information is useful in knowing if other
     * styles with higher priority need to be searched for overwrites.
     *
     * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in
     * `tnode_linked_list_spec.ts` for working example.
     */


    var __unused_const_as_closure_does_not_like_standalone_comment_blocks__;
    /**
     * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked
     * list of styles and compute the duplicate flag.
     *
     * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.
     *
     * The function works by keeping track of `tStylingRange` which contains two pointers pointing to
     * the head/tail of the template portion of the styles.
     *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`
     *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`
     *
     * @param tData The `TData` to insert into.
     * @param tNode `TNode` associated with the styling element.
     * @param tStylingKey See `TStylingKey`.
     * @param index location of where `tStyleValue` should be stored (and linked into list.)
     * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of
     *               template.)
     * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.
     *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)
     */


    function insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {
      ngDevMode && assertFirstUpdatePass(getTView());
      var tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;
      var tmplHead = getTStylingRangePrev(tBindings);
      var tmplTail = getTStylingRangeNext(tBindings);
      tData[index] = tStylingKeyWithStatic;
      var isKeyDuplicateOfStatic = false;
      var tStylingKey;

      if (Array.isArray(tStylingKeyWithStatic)) {
        // We are case when the `TStylingKey` contains static fields as well.
        var staticKeyValueArray = tStylingKeyWithStatic;
        tStylingKey = staticKeyValueArray[1]; // unwrap.
        // We need to check if our key is present in the static so that we can mark it as duplicate.

        if (tStylingKey === null || keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {
          // tStylingKey is present in the statics, need to mark it as duplicate.
          isKeyDuplicateOfStatic = true;
        }
      } else {
        tStylingKey = tStylingKeyWithStatic;
      }

      if (isHostBinding) {
        // We are inserting host bindings
        // If we don't have template bindings then `tail` is 0.
        var hasTemplateBindings = tmplTail !== 0; // This is important to know because that means that the `head` can't point to the first
        // template bindings (there are none.) Instead the head points to the tail of the template.

        if (hasTemplateBindings) {
          // template head's "prev" will point to last host binding or to 0 if no host bindings yet
          var previousNode = getTStylingRangePrev(tData[tmplHead + 1]);
          tData[index + 1] = toTStylingRange(previousNode, tmplHead); // if a host binding has already been registered, we need to update the next of that host
          // binding to point to this one

          if (previousNode !== 0) {
            // We need to update the template-tail value to point to us.
            tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);
          } // The "previous" of the template binding head should point to this host binding


          tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);
        } else {
          tData[index + 1] = toTStylingRange(tmplHead, 0); // if a host binding has already been registered, we need to update the next of that host
          // binding to point to this one

          if (tmplHead !== 0) {
            // We need to update the template-tail value to point to us.
            tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);
          } // if we don't have template, the head points to template-tail, and needs to be advanced.


          tmplHead = index;
        }
      } else {
        // We are inserting in template section.
        // We need to set this binding's "previous" to the current template tail
        tData[index + 1] = toTStylingRange(tmplTail, 0);
        ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');

        if (tmplHead === 0) {
          tmplHead = index;
        } else {
          // We need to update the previous value "next" to point to this binding
          tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);
        }

        tmplTail = index;
      } // Now we need to update / compute the duplicates.
      // Starting with our location search towards head (least priority)


      if (isKeyDuplicateOfStatic) {
        tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);
      }

      markDuplicates(tData, tStylingKey, index, true, isClassBinding);
      markDuplicates(tData, tStylingKey, index, false, isClassBinding);
      markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);
      tBindings = toTStylingRange(tmplHead, tmplTail);

      if (isClassBinding) {
        tNode.classBindings = tBindings;
      } else {
        tNode.styleBindings = tBindings;
      }
    }
    /**
     * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.
     *
     * @param tNode `TNode` where the residual is stored.
     * @param tStylingKey `TStylingKey` to store.
     * @param tData `TData` associated with the current `LView`.
     * @param index location of where `tStyleValue` should be stored (and linked into list.)
     * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.
     *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)
     */


    function markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {
      var residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;

      if (residual != null
      /* or undefined */
      && typeof tStylingKey == 'string' && keyValueArrayIndexOf(residual, tStylingKey) >= 0) {
        // We have duplicate in the residual so mark ourselves as duplicate.
        tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);
      }
    }
    /**
     * Marks `TStyleValue`s as duplicates if another style binding in the list has the same
     * `TStyleValue`.
     *
     * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once
     * with it set to `false` to search both the previous as well as next items in the list.
     *
     * No duplicate case
     * ```
     *   [style.color]
     *   [style.width.px] <<- index
     *   [style.height.px]
     * ```
     *
     * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no
     * duplicates because `width` is not found in any other part of the linked list.
     *
     * Duplicate case
     * ```
     *   [style.color]
     *   [style.width.em]
     *   [style.width.px] <<- index
     * ```
     * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`
     * because `width` is found in the chain.
     *
     * Map case 1
     * ```
     *   [style.width.px]
     *   [style.color]
     *   [style]  <<- index
     * ```
     * In the above case adding `[style]` will produce a duplicate with any other bindings because
     * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.
     *
     * Map case 2
     * ```
     *   [style]
     *   [style.width.px]
     *   [style.color]  <<- index
     * ```
     * In the above case adding `[style.color]` will produce a duplicate because there is already a
     * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or
     * `width`.
     *
     * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.
     * NOTE: We use `style` as example, but same logic is applied to `class`es as well.
     *
     * @param tData `TData` where the linked list is stored.
     * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in
     *        the linked list.
     * @param index Starting location in the linked list to search from
     * @param isPrevDir Direction.
     *        - `true` for previous (lower priority);
     *        - `false` for next (higher priority).
     */


    function markDuplicates(tData, tStylingKey, index, isPrevDir, isClassBinding) {
      var tStylingAtIndex = tData[index + 1];
      var isMap = tStylingKey === null;
      var cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);
      var foundDuplicate = false; // We keep iterating as long as we have a cursor
      // AND either:
      // - we found what we are looking for, OR
      // - we are a map in which case we have to continue searching even after we find what we were
      //   looking for since we are a wild card and everything needs to be flipped to duplicate.

      while (cursor !== 0 && (foundDuplicate === false || isMap)) {
        ngDevMode && assertIndexInRange(tData, cursor);
        var tStylingValueAtCursor = tData[cursor];
        var tStyleRangeAtCursor = tData[cursor + 1];

        if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {
          foundDuplicate = true;
          tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);
        }

        cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) : getTStylingRangeNext(tStyleRangeAtCursor);
      }

      if (foundDuplicate) {
        // if we found a duplicate, than mark ourselves.
        tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) : setTStylingRangeNextDuplicate(tStylingAtIndex);
      }
    }
    /**
     * Determines if two `TStylingKey`s are a match.
     *
     * When computing weather a binding contains a duplicate, we need to compare if the instruction
     * `TStylingKey` has a match.
     *
     * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:
     * - `color`
     *    - `color`    // Match another color
     *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction
     *    - `['', 'color', 'other', true]` // wrapped `color` so match
     *    - `['', null, 'other', true]`       // wrapped `null` so match
     *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`
     * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction
     *
     * @param tStylingKeyCursor
     * @param tStylingKey
     */


    function isStylingMatch(tStylingKeyCursor, tStylingKey) {
      ngDevMode && assertNotEqual(Array.isArray(tStylingKey), true, 'Expected that \'tStylingKey\' has been unwrapped');

      if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that
      // location so we must assume that we have a match.
      tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it
      // contains a match.
      (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey // If the keys match explicitly than we are a match.
      ) {
          return true;
        } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {
        // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has
        // statics and we need to check those as well.
        return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0; // see if we are matching the key
      }

      return false;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // Global state of the parser. (This makes parser non-reentrant, but that is not an issue)


    var parserState = {
      textEnd: 0,
      key: 0,
      keyEnd: 0,
      value: 0,
      valueEnd: 0
    };
    /**
     * Retrieves the last parsed `key` of style.
     * @param text the text to substring the key from.
     */

    function getLastParsedKey(text) {
      return text.substring(parserState.key, parserState.keyEnd);
    }
    /**
     * Retrieves the last parsed `value` of style.
     * @param text the text to substring the key from.
     */


    function getLastParsedValue(text) {
      return text.substring(parserState.value, parserState.valueEnd);
    }
    /**
     * Initializes `className` string for parsing and parses the first token.
     *
     * This function is intended to be used in this format:
     * ```
     * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
     *   const key = getLastParsedKey();
     *   ...
     * }
     * ```
     * @param text `className` to parse
     * @returns index where the next invocation of `parseClassNameNext` should resume.
     */


    function parseClassName(text) {
      resetParserState(text);
      return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));
    }
    /**
     * Parses next `className` token.
     *
     * This function is intended to be used in this format:
     * ```
     * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
     *   const key = getLastParsedKey();
     *   ...
     * }
     * ```
     *
     * @param text `className` to parse
     * @param index where the parsing should resume.
     * @returns index where the next invocation of `parseClassNameNext` should resume.
     */


    function parseClassNameNext(text, index) {
      var end = parserState.textEnd;

      if (end === index) {
        return -1;
      }

      index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);
      return consumeWhitespace(text, index, end);
    }
    /**
     * Initializes `cssText` string for parsing and parses the first key/values.
     *
     * This function is intended to be used in this format:
     * ```
     * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {
     *   const key = getLastParsedKey();
     *   const value = getLastParsedValue();
     *   ...
     * }
     * ```
     * @param text `cssText` to parse
     * @returns index where the next invocation of `parseStyleNext` should resume.
     */


    function parseStyle(text) {
      resetParserState(text);
      return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));
    }
    /**
     * Parses the next `cssText` key/values.
     *
     * This function is intended to be used in this format:
     * ```
     * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {
     *   const key = getLastParsedKey();
     *   const value = getLastParsedValue();
     *   ...
     * }
     *
     * @param text `cssText` to parse
     * @param index where the parsing should resume.
     * @returns index where the next invocation of `parseStyleNext` should resume.
     */


    function parseStyleNext(text, startIndex) {
      var end = parserState.textEnd;
      var index = parserState.key = consumeWhitespace(text, startIndex, end);

      if (end === index) {
        // we reached an end so just quit
        return -1;
      }

      index = parserState.keyEnd = consumeStyleKey(text, index, end);
      index = consumeSeparator(text, index, end, 58
      /* COLON */
      );
      index = parserState.value = consumeWhitespace(text, index, end);
      index = parserState.valueEnd = consumeStyleValue(text, index, end);
      return consumeSeparator(text, index, end, 59
      /* SEMI_COLON */
      );
    }
    /**
     * Reset the global state of the styling parser.
     * @param text The styling text to parse.
     */


    function resetParserState(text) {
      parserState.key = 0;
      parserState.keyEnd = 0;
      parserState.value = 0;
      parserState.valueEnd = 0;
      parserState.textEnd = text.length;
    }
    /**
     * Returns index of next non-whitespace character.
     *
     * @param text Text to scan
     * @param startIndex Starting index of character where the scan should start.
     * @param endIndex Ending index of character where the scan should end.
     * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at
     *          that location.)
     */


    function consumeWhitespace(text, startIndex, endIndex) {
      while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32
      /* SPACE */
      ) {
        startIndex++;
      }

      return startIndex;
    }
    /**
     * Returns index of last char in class token.
     *
     * @param text Text to scan
     * @param startIndex Starting index of character where the scan should start.
     * @param endIndex Ending index of character where the scan should end.
     * @returns Index after last char in class token.
     */


    function consumeClassToken(text, startIndex, endIndex) {
      while (startIndex < endIndex && text.charCodeAt(startIndex) > 32
      /* SPACE */
      ) {
        startIndex++;
      }

      return startIndex;
    }
    /**
     * Consumes all of the characters belonging to style key and token.
     *
     * @param text Text to scan
     * @param startIndex Starting index of character where the scan should start.
     * @param endIndex Ending index of character where the scan should end.
     * @returns Index after last style key character.
     */


    function consumeStyleKey(text, startIndex, endIndex) {
      var ch;

      while (startIndex < endIndex && ((ch = text.charCodeAt(startIndex)) === 45
      /* DASH */
      || ch === 95
      /* UNDERSCORE */
      || (ch & -33
      /* UPPER_CASE */
      ) >= 65
      /* A */
      && (ch & -33
      /* UPPER_CASE */
      ) <= 90
      /* Z */
      )) {
        startIndex++;
      }

      return startIndex;
    }
    /**
     * Consumes all whitespace and the separator `:` after the style key.
     *
     * @param text Text to scan
     * @param startIndex Starting index of character where the scan should start.
     * @param endIndex Ending index of character where the scan should end.
     * @returns Index after separator and surrounding whitespace.
     */


    function consumeSeparator(text, startIndex, endIndex, separator) {
      startIndex = consumeWhitespace(text, startIndex, endIndex);

      if (startIndex < endIndex) {
        if (ngDevMode && text.charCodeAt(startIndex) !== separator) {
          malformedStyleError(text, String.fromCharCode(separator), startIndex);
        }

        startIndex++;
      }

      return startIndex;
    }
    /**
     * Consumes style value honoring `url()` and `""` text.
     *
     * @param text Text to scan
     * @param startIndex Starting index of character where the scan should start.
     * @param endIndex Ending index of character where the scan should end.
     * @returns Index after last style value character.
     */


    function consumeStyleValue(text, startIndex, endIndex) {
      var ch1 = -1; // 1st previous character

      var ch2 = -1; // 2nd previous character

      var ch3 = -1; // 3rd previous character

      var i = startIndex;
      var lastChIndex = i;

      while (i < endIndex) {
        var ch = text.charCodeAt(i++);

        if (ch === 59
        /* SEMI_COLON */
        ) {
            return lastChIndex;
          } else if (ch === 34
        /* DOUBLE_QUOTE */
        || ch === 39
        /* SINGLE_QUOTE */
        ) {
            lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);
          } else if (startIndex === i - 4 && // We have seen only 4 characters so far "URL(" (Ignore "foo_URL()")
        ch3 === 85
        /* U */
        && ch2 === 82
        /* R */
        && ch1 === 76
        /* L */
        && ch === 40
        /* OPEN_PAREN */
        ) {
            lastChIndex = i = consumeQuotedText(text, 41
            /* CLOSE_PAREN */
            , i, endIndex);
          } else if (ch > 32
        /* SPACE */
        ) {
            // if we have a non-whitespace character then capture its location
            lastChIndex = i;
          }

        ch3 = ch2;
        ch2 = ch1;
        ch1 = ch & -33
        /* UPPER_CASE */
        ;
      }

      return lastChIndex;
    }
    /**
     * Consumes all of the quoted characters.
     *
     * @param text Text to scan
     * @param quoteCharCode CharCode of either `"` or `'` quote or `)` for `url(...)`.
     * @param startIndex Starting index of character where the scan should start.
     * @param endIndex Ending index of character where the scan should end.
     * @returns Index after quoted characters.
     */


    function consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {
      var ch1 = -1; // 1st previous character

      var index = startIndex;

      while (index < endIndex) {
        var ch = text.charCodeAt(index++);

        if (ch == quoteCharCode && ch1 !== 92
        /* BACK_SLASH */
        ) {
            return index;
          }

        if (ch == 92
        /* BACK_SLASH */
        && ch1 === 92
        /* BACK_SLASH */
        ) {
            // two back slashes cancel each other out. For example `"\\"` should properly end the
            // quotation. (It should not assume that the last `"` is escaped.)
            ch1 = 0;
          } else {
          ch1 = ch;
        }
      }

      throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) : new Error();
    }

    function malformedStyleError(text, expecting, index) {
      ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');
      throw throwError("Malformed style at location ".concat(index, " in string '") + text.substring(0, index) + '[>>' + text.substring(index, index + 1) + '<<]' + text.substr(index + 1) + "'. Expecting '".concat(expecting, "'."));
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Update a style binding on an element with the provided value.
     *
     * If the style value is falsy then it will be removed from the element
     * (or assigned a different value depending if there are any styles placed
     * on the element with `styleMap` or any static styles that are
     * present from when the element was created with `styling`).
     *
     * Note that the styling element is updated as part of `stylingApply`.
     *
     * @param prop A valid CSS property.
     * @param value New value to write (`null` or an empty string to remove).
     * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.
     *
     * Note that this will apply the provided style value to the host element if this function is called
     * within a host binding function.
     *
     * @codeGenApi
     */


    function ɵɵstyleProp(prop, value, suffix) {
      checkStylingProperty(prop, value, suffix, false);
      return ɵɵstyleProp;
    }
    /**
     * Update a class binding on an element with the provided value.
     *
     * This instruction is meant to handle the `[class.foo]="exp"` case and,
     * therefore, the class binding itself must already be allocated using
     * `styling` within the creation block.
     *
     * @param prop A valid CSS class (only one).
     * @param value A true/false value which will turn the class on or off.
     *
     * Note that this will apply the provided class value to the host element if this function
     * is called within a host binding function.
     *
     * @codeGenApi
     */


    function ɵɵclassProp(className, value) {
      checkStylingProperty(className, value, null, true);
      return ɵɵclassProp;
    }
    /**
     * Update style bindings using an object literal on an element.
     *
     * This instruction is meant to apply styling via the `[style]="exp"` template bindings.
     * When styles are applied to the element they will then be updated with respect to
     * any styles/classes set via `styleProp`. If any styles are set to falsy
     * then they will be removed from the element.
     *
     * Note that the styling instruction will not be applied until `stylingApply` is called.
     *
     * @param styles A key/value style map of the styles that will be applied to the given element.
     *        Any missing styles (that have already been applied to the element beforehand) will be
     *        removed (unset) from the element's styling.
     *
     * Note that this will apply the provided styleMap value to the host element if this function
     * is called within a host binding.
     *
     * @codeGenApi
     */


    function ɵɵstyleMap(styles) {
      checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);
    }
    /**
     * Parse text as style and add values to KeyValueArray.
     *
     * This code is pulled out to a separate function so that it can be tree shaken away if it is not
     * needed. It is only referenced from `ɵɵstyleMap`.
     *
     * @param keyValueArray KeyValueArray to add parsed values to.
     * @param text text to parse.
     */


    function styleStringParser(keyValueArray, text) {
      for (var i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {
        styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));
      }
    }
    /**
     * Update class bindings using an object literal or class-string on an element.
     *
     * This instruction is meant to apply styling via the `[class]="exp"` template bindings.
     * When classes are applied to the element they will then be updated with
     * respect to any styles/classes set via `classProp`. If any
     * classes are set to falsy then they will be removed from the element.
     *
     * Note that the styling instruction will not be applied until `stylingApply` is called.
     * Note that this will the provided classMap value to the host element if this function is called
     * within a host binding.
     *
     * @param classes A key/value map or string of CSS classes that will be added to the
     *        given element. Any missing classes (that have already been applied to the element
     *        beforehand) will be removed (unset) from the element's list of CSS classes.
     *
     * @codeGenApi
     */


    function ɵɵclassMap(classes) {
      checkStylingMap(keyValueArraySet, classStringParser, classes, true);
    }
    /**
     * Parse text as class and add values to KeyValueArray.
     *
     * This code is pulled out to a separate function so that it can be tree shaken away if it is not
     * needed. It is only referenced from `ɵɵclassMap`.
     *
     * @param keyValueArray KeyValueArray to add parsed values to.
     * @param text text to parse.
     */


    function classStringParser(keyValueArray, text) {
      for (var i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
        keyValueArraySet(keyValueArray, getLastParsedKey(text), true);
      }
    }
    /**
     * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.
     *
     * @param prop property name.
     * @param value binding value.
     * @param suffix suffix for the property (e.g. `em` or `px`)
     * @param isClassBased `true` if `class` change (`false` if `style`)
     */


    function checkStylingProperty(prop, value, suffix, isClassBased) {
      var lView = getLView();
      var tView = getTView(); // Styling instructions use 2 slots per binding.
      // 1. one for the value / TStylingKey
      // 2. one for the intermittent-value / TStylingRange

      var bindingIndex = incrementBindingIndex(2);

      if (tView.firstUpdatePass) {
        stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);
      }

      if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
        var tNode = tView.data[getSelectedIndex() + HEADER_OFFSET];
        updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);
      }
    }
    /**
     * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.
     *
     * @param keyValueArraySet (See `keyValueArraySet` in "util/array_utils") Gets passed in as a
     *        function so that `style` can be processed. This is done for tree shaking purposes.
     * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`
     *        have different parsers.)
     * @param value bound value from application
     * @param isClassBased `true` if `class` change (`false` if `style`)
     */


    function checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {
      var tView = getTView();
      var bindingIndex = incrementBindingIndex(2);

      if (tView.firstUpdatePass) {
        stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);
      }

      var lView = getLView();

      if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
        // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the
        // if so as not to read unnecessarily.
        var tNode = tView.data[getSelectedIndex() + HEADER_OFFSET];

        if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {
          if (ngDevMode) {
            // verify that if we are shadowing then `TData` is appropriately marked so that we skip
            // processing this binding in styling resolution.
            var tStylingKey = tView.data[bindingIndex];
            assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, 'Styling linked list shadow input should be marked as \'false\'');
          } // VE does not concatenate the static portion like we are doing here.
          // Instead VE just ignores the static completely if dynamic binding is present.
          // Because of locality we have already set the static portion because we don't know if there
          // is a dynamic portion until later. If we would ignore the static portion it would look like
          // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong
          // thing as it would think that the static portion was removed. For this reason we
          // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.


          var staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;
          ngDevMode && isClassBased === false && staticPrefix !== null && assertEqual(staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \';\'');

          if (staticPrefix !== null) {
            // We want to make sure that falsy values of `value` become empty strings.
            value = concatStringsWithSpace(staticPrefix, value ? value : '');
          } // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.
          // This takes over the `[style]` binding. (Same for `[class]`)


          setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);
        } else {
          updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value), isClassBased, bindingIndex);
        }
      }
    }
    /**
     * Determines when the binding is in `hostBindings` section
     *
     * @param tView Current `TView`
     * @param bindingIndex index of binding which we would like if it is in `hostBindings`
     */


    function isInHostBindings(tView, bindingIndex) {
      // All host bindings are placed after the expando section.
      return bindingIndex >= tView.expandoStartIndex;
    }
    /**
     * Collects the necessary information to insert the binding into a linked list of style bindings
     * using `insertTStylingBinding`.
     *
     * @param tView `TView` where the binding linked list will be stored.
     * @param tStylingKey Property/key of the binding.
     * @param bindingIndex Index of binding associated with the `prop`
     * @param isClassBased `true` if `class` change (`false` if `style`)
     */


    function stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {
      ngDevMode && assertFirstUpdatePass(tView);
      var tData = tView.data;

      if (tData[bindingIndex + 1] === null) {
        // The above check is necessary because we don't clear first update pass until first successful
        // (no exception) template execution. This prevents the styling instruction from double adding
        // itself to the list.
        // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the
        // if so as not to read unnecessarily.
        var tNode = tData[getSelectedIndex() + HEADER_OFFSET];
        var isHostBindings = isInHostBindings(tView, bindingIndex);

        if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {
          // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.
          // If there is a directive which uses `@Input('style')` or `@Input('class')` than
          // we need to neutralize this binding since that directive is shadowing it.
          // We turn this into a noop by setting the key to `false`
          tStylingKey = false;
        }

        tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);
        insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);
      }
    }
    /**
     * Adds static styling information to the binding if applicable.
     *
     * The linked list of styles not only stores the list and keys, but also stores static styling
     * information on some of the keys. This function determines if the key should contain the styling
     * information and computes it.
     *
     * See `TStylingStatic` for more details.
     *
     * @param tData `TData` where the linked list is stored.
     * @param tNode `TNode` for which the styling is being computed.
     * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`
     * @param isClassBased `true` if `class` (`false` if `style`)
     */


    function wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {
      var hostDirectiveDef = getCurrentDirectiveDef(tData);
      var residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;

      if (hostDirectiveDef === null) {
        // We are in template node.
        // If template node already had styling instruction then it has already collected the static
        // styling and there is no need to collect them again. We know that we are the first styling
        // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).
        var isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;

        if (isFirstStylingInstructionInTemplate) {
          // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point
          // they are already merged and it would not be possible to figure which property belongs where
          // in the priority.
          stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);
          stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased); // We know that if we have styling binding in template we can't have residual.

          residual = null;
        }
      } else {
        // We are in host binding node and there was no binding instruction in template node.
        // This means that we need to compute the residual.
        var directiveStylingLast = tNode.directiveStylingLast;
        var isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;

        if (isFirstStylingInstructionInHostBinding) {
          stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);

          if (residual === null) {
            // - If `null` than either:
            //    - Template styling instruction already ran and it has consumed the static
            //      styling into its `TStylingKey` and so there is no need to update residual. Instead
            //      we need to update the `TStylingKey` associated with the first template node
            //      instruction. OR
            //    - Some other styling instruction ran and determined that there are no residuals
            var templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);

            if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {
              // Only recompute if `templateStylingKey` had static values. (If no static value found
              // then there is nothing to do since this operation can only produce less static keys, not
              // more.)
              templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1]
              /* unwrap previous statics */
              , isClassBased);
              templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);
              setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);
            }
          } else {
            // We only need to recompute residual if it is not `null`.
            // - If existing residual (implies there was no template styling). This means that some of
            //   the statics may have moved from the residual to the `stylingKey` and so we have to
            //   recompute.
            // - If `undefined` this is the first time we are running.
            residual = collectResidual(tData, tNode, isClassBased);
          }
        }
      }

      if (residual !== undefined) {
        isClassBased ? tNode.residualClasses = residual : tNode.residualStyles = residual;
      }

      return stylingKey;
    }
    /**
     * Retrieve the `TStylingKey` for the template styling instruction.
     *
     * This is needed since `hostBinding` styling instructions are inserted after the template
     * instruction. While the template instruction needs to update the residual in `TNode` the
     * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because
     * the template instruction is downstream from the `hostBindings` instructions.
     *
     * @param tData `TData` where the linked list is stored.
     * @param tNode `TNode` for which the styling is being computed.
     * @param isClassBased `true` if `class` (`false` if `style`)
     * @return `TStylingKey` if found or `undefined` if not found.
     */


    function getTemplateHeadTStylingKey(tData, tNode, isClassBased) {
      var bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;

      if (getTStylingRangeNext(bindings) === 0) {
        // There does not seem to be a styling instruction in the `template`.
        return undefined;
      }

      return tData[getTStylingRangePrev(bindings)];
    }
    /**
     * Update the `TStylingKey` of the first template instruction in `TNode`.
     *
     * Logically `hostBindings` styling instructions are of lower priority than that of the template.
     * However, they execute after the template styling instructions. This means that they get inserted
     * in front of the template styling instructions.
     *
     * If we have a template styling instruction and a new `hostBindings` styling instruction is
     * executed it means that it may need to steal static fields from the template instruction. This
     * method allows us to update the first template instruction `TStylingKey` with a new value.
     *
     * Assume:
     * ```
     * <div my-dir style="color: red" [style.color]="tmplExp"></div>
     *
     * @Directive({
     *   host: {
     *     'style': 'width: 100px',
     *     '[style.color]': 'dirExp',
     *   }
     * })
     * class MyDir {}
     * ```
     *
     * when `[style.color]="tmplExp"` executes it creates this data structure.
     * ```
     *  ['', 'color', 'color', 'red', 'width', '100px'],
     * ```
     *
     * The reason for this is that the template instruction does not know if there are styling
     * instructions and must assume that there are none and must collect all of the static styling.
     * (both
     * `color' and 'width`)
     *
     * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.
     * ```
     *  ['', 'color', 'width', '100px'],  // newly inserted
     *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong
     * ```
     *
     * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to
     * update it like so:
     * ```
     *  ['', 'color', 'width', '100px'],
     *  ['', 'color', 'color', 'red'],    // UPDATE
     * ```
     *
     * @param tData `TData` where the linked list is stored.
     * @param tNode `TNode` for which the styling is being computed.
     * @param isClassBased `true` if `class` (`false` if `style`)
     * @param tStylingKey New `TStylingKey` which is replacing the old one.
     */


    function setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {
      var bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
      ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');
      tData[getTStylingRangePrev(bindings)] = tStylingKey;
    }
    /**
     * Collect all static values after the current `TNode.directiveStylingLast` index.
     *
     * Collect the remaining styling information which has not yet been collected by an existing
     * styling instruction.
     *
     * @param tData `TData` where the `DirectiveDefs` are stored.
     * @param tNode `TNode` which contains the directive range.
     * @param isClassBased `true` if `class` (`false` if `style`)
     */


    function collectResidual(tData, tNode, isClassBased) {
      var residual = undefined;
      var directiveEnd = tNode.directiveEnd;
      ngDevMode && assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.'); // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are
      // collecting things after the last `hostBindings` directive which had a styling instruction.)

      for (var i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {
        var attrs = tData[i].hostAttrs;
        residual = collectStylingFromTAttrs(residual, attrs, isClassBased);
      }

      return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);
    }
    /**
     * Collect the static styling information with lower priority than `hostDirectiveDef`.
     *
     * (This is opposite of residual styling.)
     *
     * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static
     *        styling. (Or `null` if template styling)
     * @param tData `TData` where the linked list is stored.
     * @param tNode `TNode` for which the styling is being computed.
     * @param stylingKey Existing `TStylingKey` to update or wrap.
     * @param isClassBased `true` if `class` (`false` if `style`)
     */


    function collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {
      // We need to loop because there can be directives which have `hostAttrs` but don't have
      // `hostBindings` so this loop catches up to the current directive..
      var currentDirective = null;
      var directiveEnd = tNode.directiveEnd;
      var directiveStylingLast = tNode.directiveStylingLast;

      if (directiveStylingLast === -1) {
        directiveStylingLast = tNode.directiveStart;
      } else {
        directiveStylingLast++;
      }

      while (directiveStylingLast < directiveEnd) {
        currentDirective = tData[directiveStylingLast];
        ngDevMode && assertDefined(currentDirective, 'expected to be defined');
        stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);
        if (currentDirective === hostDirectiveDef) break;
        directiveStylingLast++;
      }

      if (hostDirectiveDef !== null) {
        // we only advance the styling cursor if we are collecting data from host bindings.
        // Template executes before host bindings and so if we would update the index,
        // host bindings would not get their statics.
        tNode.directiveStylingLast = directiveStylingLast;
      }

      return stylingKey;
    }
    /**
     * Convert `TAttrs` into `TStylingStatic`.
     *
     * @param stylingKey existing `TStylingKey` to update or wrap.
     * @param attrs `TAttributes` to process.
     * @param isClassBased `true` if `class` (`false` if `style`)
     */


    function collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {
      var desiredMarker = isClassBased ? 1
      /* Classes */
      : 2
      /* Styles */
      ;
      var currentMarker = -1
      /* ImplicitAttributes */
      ;

      if (attrs !== null) {
        for (var i = 0; i < attrs.length; i++) {
          var item = attrs[i];

          if (typeof item === 'number') {
            currentMarker = item;
          } else {
            if (currentMarker === desiredMarker) {
              if (!Array.isArray(stylingKey)) {
                stylingKey = stylingKey === undefined ? [] : ['', stylingKey];
              }

              keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);
            }
          }
        }
      }

      return stylingKey === undefined ? null : stylingKey;
    }
    /**
     * Convert user input to `KeyValueArray`.
     *
     * This function takes user input which could be `string`, Object literal, or iterable and converts
     * it into a consistent representation. The output of this is `KeyValueArray` (which is an array
     * where
     * even indexes contain keys and odd indexes contain values for those keys).
     *
     * The advantage of converting to `KeyValueArray` is that we can perform diff in an input
     * independent
     * way.
     * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be
     * applied)
     *
     * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the
     * difference in linear fashion without the need to allocate any additional data.
     *
     * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine
     * which values need to be deleted, over the new `Map` to determine additions, and we would have to
     * keep additional `Map` to keep track of duplicates or items which have not yet been visited.
     *
     * @param keyValueArraySet (See `keyValueArraySet` in "util/array_utils") Gets passed in as a
     *        function so that `style` can be processed. This is done
     *        for tree shaking purposes.
     * @param stringParser The parser is passed in so that it will be tree shakable. See
     *        `styleStringParser` and `classStringParser`
     * @param value The value to parse/convert to `KeyValueArray`
     */


    function toStylingKeyValueArray(keyValueArraySet, stringParser, value) {
      if (value == null
      /*|| value === undefined */
      || value === '') return EMPTY_ARRAY$3;
      var styleKeyValueArray = [];
      var unwrappedValue = unwrapSafeValue(value);

      if (Array.isArray(unwrappedValue)) {
        for (var i = 0; i < unwrappedValue.length; i++) {
          keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);
        }
      } else if (typeof unwrappedValue === 'object') {
        for (var key in unwrappedValue) {
          if (unwrappedValue.hasOwnProperty(key)) {
            keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);
          }
        }
      } else if (typeof unwrappedValue === 'string') {
        stringParser(styleKeyValueArray, unwrappedValue);
      } else {
        ngDevMode && throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);
      }

      return styleKeyValueArray;
    }
    /**
     * Set a `value` for a `key`.
     *
     * See: `keyValueArraySet` for details
     *
     * @param keyValueArray KeyValueArray to add to.
     * @param key Style key to add.
     * @param value The value to set.
     */


    function styleKeyValueArraySet(keyValueArray, key, value) {
      keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));
    }
    /**
     * Update map based styling.
     *
     * Map based styling could be anything which contains more than one binding. For example `string`,
     * or object literal. Dealing with all of these types would complicate the logic so
     * instead this function expects that the complex input is first converted into normalized
     * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it
     * very cheap to compute deltas between the previous and current value.
     *
     * @param tView Associated `TView.data` contains the linked list of binding priorities.
     * @param tNode `TNode` where the binding is located.
     * @param lView `LView` contains the values associated with other styling binding at this `TNode`.
     * @param renderer Renderer to use if any updates.
     * @param oldKeyValueArray Previous value represented as `KeyValueArray`
     * @param newKeyValueArray Current value represented as `KeyValueArray`
     * @param isClassBased `true` if `class` (`false` if `style`)
     * @param bindingIndex Binding index of the binding.
     */


    function updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {
      if (oldKeyValueArray === NO_CHANGE) {
        // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.
        oldKeyValueArray = EMPTY_ARRAY$3;
      }

      var oldIndex = 0;
      var newIndex = 0;
      var oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;
      var newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;

      while (oldKey !== null || newKey !== null) {
        ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');
        ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');
        var oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;
        var newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;
        var setKey = null;
        var setValue = undefined;

        if (oldKey === newKey) {
          // UPDATE: Keys are equal => new value is overwriting old value.
          oldIndex += 2;
          newIndex += 2;

          if (oldValue !== newValue) {
            setKey = newKey;
            setValue = newValue;
          }
        } else if (newKey === null || oldKey !== null && oldKey < newKey) {
          // DELETE: oldKey key is missing or we did not find the oldKey in the newValue
          // (because the keyValueArray is sorted and `newKey` is found later alphabetically).
          // `"background" < "color"` so we need to delete `"background"` because it is not found in the
          // new array.
          oldIndex += 2;
          setKey = oldKey;
        } else {
          // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.
          // `"color" > "background"` so we need to add `color` because it is in new array but not in
          // old array.
          ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');
          newIndex += 2;
          setKey = newKey;
          setValue = newValue;
        }

        if (setKey !== null) {
          updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);
        }

        oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;
        newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;
      }
    }
    /**
     * Update a simple (property name) styling.
     *
     * This function takes `prop` and updates the DOM to that value. The function takes the binding
     * value as well as binding priority into consideration to determine which value should be written
     * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks
     * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)
     *
     * @param tView Associated `TView.data` contains the linked list of binding priorities.
     * @param tNode `TNode` where the binding is located.
     * @param lView `LView` contains the values associated with other styling binding at this `TNode`.
     * @param renderer Renderer to use if any updates.
     * @param prop Either style property name or a class name.
     * @param value Either style value for `prop` or `true`/`false` if `prop` is class.
     * @param isClassBased `true` if `class` (`false` if `style`)
     * @param bindingIndex Binding index of the binding.
     */


    function updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {
      if (tNode.type !== 3
      /* Element */
      ) {
          // It is possible to have styling on non-elements (such as ng-container).
          // This is rare, but it does happen. In such a case, just ignore the binding.
          return;
        }

      var tData = tView.data;
      var tRange = tData[bindingIndex + 1];
      var higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) : undefined;

      if (!isStylingValuePresent(higherPriorityValue)) {
        // We don't have a next duplicate, or we did not find a duplicate value.
        if (!isStylingValuePresent(value)) {
          // We should delete current value or restore to lower priority value.
          if (getTStylingRangePrevDuplicate(tRange)) {
            // We have a possible prev duplicate, let's retrieve it.
            value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);
          }
        }

        var rNode = getNativeByIndex(getSelectedIndex(), lView);
        applyStyling(renderer, isClassBased, rNode, prop, value);
      }
    }
    /**
     * Search for styling value with higher priority which is overwriting current value, or a
     * value of lower priority to which we should fall back if the value is `undefined`.
     *
     * When value is being applied at a location, related values need to be consulted.
     * - If there is a higher priority binding, we should be using that one instead.
     *   For example `<div  [style]="{color:exp1}" [style.color]="exp2">` change to `exp1`
     *   requires that we check `exp2` to see if it is set to value other than `undefined`.
     * - If there is a lower priority binding and we are changing to `undefined`
     *   For example `<div  [style]="{color:exp1}" [style.color]="exp2">` change to `exp2` to
     *   `undefined` requires that we check `exp1` (and static values) and use that as new value.
     *
     * NOTE: The styling stores two values.
     * 1. The raw value which came from the application is stored at `index + 0` location. (This value
     *    is used for dirty checking).
     * 2. The normalized value is stored at `index + 1`.
     *
     * @param tData `TData` used for traversing the priority.
     * @param tNode `TNode` to use for resolving static styling. Also controls search direction.
     *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.
     *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.
     *   - `null` search prev and go all the way to end. Return last value where
     *     `isStylingValuePresent(value)` is true.
     * @param lView `LView` used for retrieving the actual values.
     * @param prop Property which we are interested in.
     * @param index Starting index in the linked list of styling bindings where the search should start.
     * @param isClassBased `true` if `class` (`false` if `style`)
     */


    function findStylingValue(tData, tNode, lView, prop, index, isClassBased) {
      // `TNode` to use for resolving static styling. Also controls search direction.
      //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.
      //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.
      //   - `null` search prev and go all the way to end. Return last value where
      //     `isStylingValuePresent(value)` is true.
      var isPrevDirection = tNode === null;
      var value = undefined;

      while (index > 0) {
        var rawKey = tData[index];
        var containsStatics = Array.isArray(rawKey); // Unwrap the key if we contain static values.

        var key = containsStatics ? rawKey[1] : rawKey;
        var isStylingMap = key === null;
        var valueAtLViewIndex = lView[index + 1];

        if (valueAtLViewIndex === NO_CHANGE) {
          // In firstUpdatePass the styling instructions create a linked list of styling.
          // On subsequent passes it is possible for a styling instruction to try to read a binding
          // which
          // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that
          // we have `undefined` (or empty array in case of styling-map instruction) instead. This
          // allows the resolution to apply the value (which may later be overwritten when the
          // binding actually executes.)
          valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY$3 : undefined;
        }

        var currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) : key === prop ? valueAtLViewIndex : undefined;

        if (containsStatics && !isStylingValuePresent(currentValue)) {
          currentValue = keyValueArrayGet(rawKey, prop);
        }

        if (isStylingValuePresent(currentValue)) {
          value = currentValue;

          if (isPrevDirection) {
            return value;
          }
        }

        var tRange = tData[index + 1];
        index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);
      }

      if (tNode !== null) {
        // in case where we are going in next direction AND we did not find anything, we need to
        // consult residual styling
        var residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;

        if (residual != null
        /** OR residual !=== undefined */
        ) {
            value = keyValueArrayGet(residual, prop);
          }
      }

      return value;
    }
    /**
     * Determines if the binding value should be used (or if the value is 'undefined' and hence priority
     * resolution should be used.)
     *
     * @param value Binding style value.
     */


    function isStylingValuePresent(value) {
      // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't
      // have an opinion as to what this binding should be and you should consult other bindings by
      // priority to determine the valid value.
      // This is extracted into a single function so that we have a single place to control this.
      return value !== undefined;
    }
    /**
     * Normalizes and/or adds a suffix to the value.
     *
     * If value is `null`/`undefined` no suffix is added
     * @param value
     * @param suffix
     */


    function normalizeSuffix(value, suffix) {
      if (value == null
      /** || value === undefined */
      ) {// do nothing
        } else if (typeof suffix === 'string') {
        value = value + suffix;
      } else if (typeof value === 'object') {
        value = stringify(unwrapSafeValue(value));
      }

      return value;
    }
    /**
     * Tests if the `TNode` has input shadow.
     *
     * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or
     * `@Input('class')` as input.
     *
     * @param tNode `TNode` which we would like to see if it has shadow.
     * @param isClassBased `true` if `class` (`false` if `style`)
     */


    function hasStylingInputShadow(tNode, isClassBased) {
      return (tNode.flags & (isClassBased ? 16
      /* hasClassInput */
      : 32
      /* hasStyleInput */
      )) !== 0;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Create static text node
     *
     * @param index Index of the node in the data array
     * @param value Static string value to write.
     *
     * @codeGenApi
     */


    function ɵɵtext(index) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var lView = getLView();
      var tView = getTView();
      var adjustedIndex = index + HEADER_OFFSET;
      ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');
      ngDevMode && assertIndexInRange(lView, adjustedIndex);
      var tNode = tView.firstCreatePass ? getOrCreateTNode(tView, lView[T_HOST], index, 3
      /* Element */
      , null, null) : tView.data[adjustedIndex];
      var textNative = lView[adjustedIndex] = createTextNode(value, lView[RENDERER]);
      appendChild(tView, lView, textNative, tNode); // Text nodes are self closing.

      setPreviousOrParentTNode(tNode, false);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     *
     * Update text content with a lone bound value
     *
     * Used when a text node has 1 interpolated value in it, an no additional text
     * surrounds that interpolated value:
     *
     * ```html
     * <div>{{v0}}</div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵtextInterpolate(v0);
     * ```
     * @returns itself, so that it may be chained.
     * @see textInterpolateV
     * @codeGenApi
     */


    function ɵɵtextInterpolate(v0) {
      ɵɵtextInterpolate1('', v0, '');
      return ɵɵtextInterpolate;
    }
    /**
     *
     * Update text content with single bound value surrounded by other text.
     *
     * Used when a text node has 1 interpolated value in it:
     *
     * ```html
     * <div>prefix{{v0}}suffix</div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵtextInterpolate1('prefix', v0, 'suffix');
     * ```
     * @returns itself, so that it may be chained.
     * @see textInterpolateV
     * @codeGenApi
     */


    function ɵɵtextInterpolate1(prefix, v0, suffix) {
      var lView = getLView();
      var interpolated = interpolation1(lView, prefix, v0, suffix);

      if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), interpolated);
      }

      return ɵɵtextInterpolate1;
    }
    /**
     *
     * Update text content with 2 bound values surrounded by other text.
     *
     * Used when a text node has 2 interpolated values in it:
     *
     * ```html
     * <div>prefix{{v0}}-{{v1}}suffix</div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');
     * ```
     * @returns itself, so that it may be chained.
     * @see textInterpolateV
     * @codeGenApi
     */


    function ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {
      var lView = getLView();
      var interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);

      if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), interpolated);
      }

      return ɵɵtextInterpolate2;
    }
    /**
     *
     * Update text content with 3 bound values surrounded by other text.
     *
     * Used when a text node has 3 interpolated values in it:
     *
     * ```html
     * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵtextInterpolate3(
     * 'prefix', v0, '-', v1, '-', v2, 'suffix');
     * ```
     * @returns itself, so that it may be chained.
     * @see textInterpolateV
     * @codeGenApi
     */


    function ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
      var lView = getLView();
      var interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);

      if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), interpolated);
      }

      return ɵɵtextInterpolate3;
    }
    /**
     *
     * Update text content with 4 bound values surrounded by other text.
     *
     * Used when a text node has 4 interpolated values in it:
     *
     * ```html
     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵtextInterpolate4(
     * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
     * ```
     * @returns itself, so that it may be chained.
     * @see ɵɵtextInterpolateV
     * @codeGenApi
     */


    function ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
      var lView = getLView();
      var interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);

      if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), interpolated);
      }

      return ɵɵtextInterpolate4;
    }
    /**
     *
     * Update text content with 5 bound values surrounded by other text.
     *
     * Used when a text node has 5 interpolated values in it:
     *
     * ```html
     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵtextInterpolate5(
     * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
     * ```
     * @returns itself, so that it may be chained.
     * @see textInterpolateV
     * @codeGenApi
     */


    function ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
      var lView = getLView();
      var interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);

      if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), interpolated);
      }

      return ɵɵtextInterpolate5;
    }
    /**
     *
     * Update text content with 6 bound values surrounded by other text.
     *
     * Used when a text node has 6 interpolated values in it:
     *
     * ```html
     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵtextInterpolate6(
     *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
     * ```
     *
     * @param i4 Static value used for concatenation only.
     * @param v5 Value checked for change. @returns itself, so that it may be chained.
     * @see textInterpolateV
     * @codeGenApi
     */


    function ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
      var lView = getLView();
      var interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);

      if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), interpolated);
      }

      return ɵɵtextInterpolate6;
    }
    /**
     *
     * Update text content with 7 bound values surrounded by other text.
     *
     * Used when a text node has 7 interpolated values in it:
     *
     * ```html
     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵtextInterpolate7(
     *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
     * ```
     * @returns itself, so that it may be chained.
     * @see textInterpolateV
     * @codeGenApi
     */


    function ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
      var lView = getLView();
      var interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);

      if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), interpolated);
      }

      return ɵɵtextInterpolate7;
    }
    /**
     *
     * Update text content with 8 bound values surrounded by other text.
     *
     * Used when a text node has 8 interpolated values in it:
     *
     * ```html
     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵtextInterpolate8(
     *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
     * ```
     * @returns itself, so that it may be chained.
     * @see textInterpolateV
     * @codeGenApi
     */


    function ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
      var lView = getLView();
      var interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);

      if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), interpolated);
      }

      return ɵɵtextInterpolate8;
    }
    /**
     * Update text content with 9 or more bound values other surrounded by text.
     *
     * Used when the number of interpolated values exceeds 8.
     *
     * ```html
     * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵtextInterpolateV(
     *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
     *  'suffix']);
     * ```
     *.
     * @param values The collection of values and the strings in between those values, beginning with
     * a string prefix and ending with a string suffix.
     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
     *
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵtextInterpolateV(values) {
      var lView = getLView();
      var interpolated = interpolationV(lView, values);

      if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), interpolated);
      }

      return ɵɵtextInterpolateV;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     *
     * Update an interpolated class on an element with single bound value surrounded by text.
     *
     * Used when the value passed to a property has 1 interpolated value in it:
     *
     * ```html
     * <div class="prefix{{v0}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');
     * ```
     *
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @codeGenApi
     */


    function ɵɵclassMapInterpolate1(prefix, v0, suffix) {
      var lView = getLView();
      var interpolatedValue = interpolation1(lView, prefix, v0, suffix);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
    }
    /**
     *
     * Update an interpolated class on an element with 2 bound values surrounded by text.
     *
     * Used when the value passed to a property has 2 interpolated values in it:
     *
     * ```html
     * <div class="prefix{{v0}}-{{v1}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');
     * ```
     *
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @codeGenApi
     */


    function ɵɵclassMapInterpolate2(prefix, v0, i0, v1, suffix) {
      var lView = getLView();
      var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
    }
    /**
     *
     * Update an interpolated class on an element with 3 bound values surrounded by text.
     *
     * Used when the value passed to a property has 3 interpolated values in it:
     *
     * ```html
     * <div class="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵclassMapInterpolate3(
     * 'prefix', v0, '-', v1, '-', v2, 'suffix');
     * ```
     *
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @codeGenApi
     */


    function ɵɵclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
      var lView = getLView();
      var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
    }
    /**
     *
     * Update an interpolated class on an element with 4 bound values surrounded by text.
     *
     * Used when the value passed to a property has 4 interpolated values in it:
     *
     * ```html
     * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵclassMapInterpolate4(
     * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
     * ```
     *
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @codeGenApi
     */


    function ɵɵclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
      var lView = getLView();
      var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
    }
    /**
     *
     * Update an interpolated class on an element with 5 bound values surrounded by text.
     *
     * Used when the value passed to a property has 5 interpolated values in it:
     *
     * ```html
     * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵclassMapInterpolate5(
     * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
     * ```
     *
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @codeGenApi
     */


    function ɵɵclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
      var lView = getLView();
      var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
    }
    /**
     *
     * Update an interpolated class on an element with 6 bound values surrounded by text.
     *
     * Used when the value passed to a property has 6 interpolated values in it:
     *
     * ```html
     * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵclassMapInterpolate6(
     *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
     * ```
     *
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param i4 Static value used for concatenation only.
     * @param v5 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @codeGenApi
     */


    function ɵɵclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
      var lView = getLView();
      var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
    }
    /**
     *
     * Update an interpolated class on an element with 7 bound values surrounded by text.
     *
     * Used when the value passed to a property has 7 interpolated values in it:
     *
     * ```html
     * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵclassMapInterpolate7(
     *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
     * ```
     *
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param i4 Static value used for concatenation only.
     * @param v5 Value checked for change.
     * @param i5 Static value used for concatenation only.
     * @param v6 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @codeGenApi
     */


    function ɵɵclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
      var lView = getLView();
      var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
    }
    /**
     *
     * Update an interpolated class on an element with 8 bound values surrounded by text.
     *
     * Used when the value passed to a property has 8 interpolated values in it:
     *
     * ```html
     * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵclassMapInterpolate8(
     *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
     * ```
     *
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param i4 Static value used for concatenation only.
     * @param v5 Value checked for change.
     * @param i5 Static value used for concatenation only.
     * @param v6 Value checked for change.
     * @param i6 Static value used for concatenation only.
     * @param v7 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @codeGenApi
     */


    function ɵɵclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
      var lView = getLView();
      var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
    }
    /**
     * Update an interpolated class on an element with 9 or more bound values surrounded by text.
     *
     * Used when the number of interpolated values exceeds 8.
     *
     * ```html
     * <div
     *  class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵclassMapInterpolateV(
     *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
     *  'suffix']);
     * ```
     *.
     * @param values The collection of values and the strings in-between those values, beginning with
     * a string prefix and ending with a string suffix.
     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
     * @codeGenApi
     */


    function ɵɵclassMapInterpolateV(values) {
      var lView = getLView();
      var interpolatedValue = interpolationV(lView, values);
      checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     *
     * Update an interpolated style on an element with single bound value surrounded by text.
     *
     * Used when the value passed to a property has 1 interpolated value in it:
     *
     * ```html
     * <div style="key: {{v0}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstyleMapInterpolate1('key: ', v0, 'suffix');
     * ```
     *
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @codeGenApi
     */


    function ɵɵstyleMapInterpolate1(prefix, v0, suffix) {
      var lView = getLView();
      var interpolatedValue = interpolation1(lView, prefix, v0, suffix);
      ɵɵstyleMap(interpolatedValue);
    }
    /**
     *
     * Update an interpolated style on an element with 2 bound values surrounded by text.
     *
     * Used when the value passed to a property has 2 interpolated values in it:
     *
     * ```html
     * <div style="key: {{v0}}; key1: {{v1}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');
     * ```
     *
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @codeGenApi
     */


    function ɵɵstyleMapInterpolate2(prefix, v0, i0, v1, suffix) {
      var lView = getLView();
      var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
      ɵɵstyleMap(interpolatedValue);
    }
    /**
     *
     * Update an interpolated style on an element with 3 bound values surrounded by text.
     *
     * Used when the value passed to a property has 3 interpolated values in it:
     *
     * ```html
     * <div style="key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstyleMapInterpolate3(
     *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');
     * ```
     *
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @codeGenApi
     */


    function ɵɵstyleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
      var lView = getLView();
      var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
      ɵɵstyleMap(interpolatedValue);
    }
    /**
     *
     * Update an interpolated style on an element with 4 bound values surrounded by text.
     *
     * Used when the value passed to a property has 4 interpolated values in it:
     *
     * ```html
     * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstyleMapInterpolate4(
     *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');
     * ```
     *
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @codeGenApi
     */


    function ɵɵstyleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
      var lView = getLView();
      var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
      ɵɵstyleMap(interpolatedValue);
    }
    /**
     *
     * Update an interpolated style on an element with 5 bound values surrounded by text.
     *
     * Used when the value passed to a property has 5 interpolated values in it:
     *
     * ```html
     * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstyleMapInterpolate5(
     *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');
     * ```
     *
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @codeGenApi
     */


    function ɵɵstyleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
      var lView = getLView();
      var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
      ɵɵstyleMap(interpolatedValue);
    }
    /**
     *
     * Update an interpolated style on an element with 6 bound values surrounded by text.
     *
     * Used when the value passed to a property has 6 interpolated values in it:
     *
     * ```html
     * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};
     *             key5: {{v5}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstyleMapInterpolate6(
     *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
     *    'suffix');
     * ```
     *
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param i4 Static value used for concatenation only.
     * @param v5 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @codeGenApi
     */


    function ɵɵstyleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
      var lView = getLView();
      var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
      ɵɵstyleMap(interpolatedValue);
    }
    /**
     *
     * Update an interpolated style on an element with 7 bound values surrounded by text.
     *
     * Used when the value passed to a property has 7 interpolated values in it:
     *
     * ```html
     * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
     *             key6: {{v6}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstyleMapInterpolate7(
     *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
     *    '; key6: ', v6, 'suffix');
     * ```
     *
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param i4 Static value used for concatenation only.
     * @param v5 Value checked for change.
     * @param i5 Static value used for concatenation only.
     * @param v6 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @codeGenApi
     */


    function ɵɵstyleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
      var lView = getLView();
      var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
      ɵɵstyleMap(interpolatedValue);
    }
    /**
     *
     * Update an interpolated style on an element with 8 bound values surrounded by text.
     *
     * Used when the value passed to a property has 8 interpolated values in it:
     *
     * ```html
     * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
     *             key6: {{v6}}; key7: {{v7}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstyleMapInterpolate8(
     *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
     *    '; key6: ', v6, '; key7: ', v7, 'suffix');
     * ```
     *
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param i4 Static value used for concatenation only.
     * @param v5 Value checked for change.
     * @param i5 Static value used for concatenation only.
     * @param v6 Value checked for change.
     * @param i6 Static value used for concatenation only.
     * @param v7 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @codeGenApi
     */


    function ɵɵstyleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
      var lView = getLView();
      var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
      ɵɵstyleMap(interpolatedValue);
    }
    /**
     * Update an interpolated style on an element with 9 or more bound values surrounded by text.
     *
     * Used when the number of interpolated values exceeds 8.
     *
     * ```html
     * <div
     *  class="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
     *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstyleMapInterpolateV(
     *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
     *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);
     * ```
     *.
     * @param values The collection of values and the strings in-between those values, beginning with
     * a string prefix and ending with a string suffix.
     * (e.g. `['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']`)
     * @codeGenApi
     */


    function ɵɵstyleMapInterpolateV(values) {
      var lView = getLView();
      var interpolatedValue = interpolationV(lView, values);
      ɵɵstyleMap(interpolatedValue);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     *
     * Update an interpolated style property on an element with single bound value surrounded by text.
     *
     * Used when the value passed to a property has 1 interpolated value in it:
     *
     * ```html
     * <div style.color="prefix{{v0}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');
     * ```
     *
     * @param styleIndex Index of style to update. This index value refers to the
     *        index of the style in the style bindings array that was passed into
     *        `styling`.
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵstylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {
      var lView = getLView();
      var interpolatedValue = interpolation1(lView, prefix, v0, suffix);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ɵɵstylePropInterpolate1;
    }
    /**
     *
     * Update an interpolated style property on an element with 2 bound values surrounded by text.
     *
     * Used when the value passed to a property has 2 interpolated values in it:
     *
     * ```html
     * <div style.color="prefix{{v0}}-{{v1}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');
     * ```
     *
     * @param styleIndex Index of style to update. This index value refers to the
     *        index of the style in the style bindings array that was passed into
     *        `styling`.
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵstylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {
      var lView = getLView();
      var interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ɵɵstylePropInterpolate2;
    }
    /**
     *
     * Update an interpolated style property on an element with 3 bound values surrounded by text.
     *
     * Used when the value passed to a property has 3 interpolated values in it:
     *
     * ```html
     * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');
     * ```
     *
     * @param styleIndex Index of style to update. This index value refers to the
     *        index of the style in the style bindings array that was passed into
     *        `styling`.
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵstylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {
      var lView = getLView();
      var interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ɵɵstylePropInterpolate3;
    }
    /**
     *
     * Update an interpolated style property on an element with 4 bound values surrounded by text.
     *
     * Used when the value passed to a property has 4 interpolated values in it:
     *
     * ```html
     * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
     * ```
     *
     * @param styleIndex Index of style to update. This index value refers to the
     *        index of the style in the style bindings array that was passed into
     *        `styling`.
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵstylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {
      var lView = getLView();
      var interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ɵɵstylePropInterpolate4;
    }
    /**
     *
     * Update an interpolated style property on an element with 5 bound values surrounded by text.
     *
     * Used when the value passed to a property has 5 interpolated values in it:
     *
     * ```html
     * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
     * ```
     *
     * @param styleIndex Index of style to update. This index value refers to the
     *        index of the style in the style bindings array that was passed into
     *        `styling`.
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵstylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {
      var lView = getLView();
      var interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ɵɵstylePropInterpolate5;
    }
    /**
     *
     * Update an interpolated style property on an element with 6 bound values surrounded by text.
     *
     * Used when the value passed to a property has 6 interpolated values in it:
     *
     * ```html
     * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
     * ```
     *
     * @param styleIndex Index of style to update. This index value refers to the
     *        index of the style in the style bindings array that was passed into
     *        `styling`.
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param i4 Static value used for concatenation only.
     * @param v5 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵstylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {
      var lView = getLView();
      var interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ɵɵstylePropInterpolate6;
    }
    /**
     *
     * Update an interpolated style property on an element with 7 bound values surrounded by text.
     *
     * Used when the value passed to a property has 7 interpolated values in it:
     *
     * ```html
     * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstylePropInterpolate7(
     *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
     * ```
     *
     * @param styleIndex Index of style to update. This index value refers to the
     *        index of the style in the style bindings array that was passed into
     *        `styling`.
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param i4 Static value used for concatenation only.
     * @param v5 Value checked for change.
     * @param i5 Static value used for concatenation only.
     * @param v6 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵstylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {
      var lView = getLView();
      var interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ɵɵstylePropInterpolate7;
    }
    /**
     *
     * Update an interpolated style property on an element with 8 bound values surrounded by text.
     *
     * Used when the value passed to a property has 8 interpolated values in it:
     *
     * ```html
     * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,
     * '-', v7, 'suffix');
     * ```
     *
     * @param styleIndex Index of style to update. This index value refers to the
     *        index of the style in the style bindings array that was passed into
     *        `styling`.
     * @param prefix Static value used for concatenation only.
     * @param v0 Value checked for change.
     * @param i0 Static value used for concatenation only.
     * @param v1 Value checked for change.
     * @param i1 Static value used for concatenation only.
     * @param v2 Value checked for change.
     * @param i2 Static value used for concatenation only.
     * @param v3 Value checked for change.
     * @param i3 Static value used for concatenation only.
     * @param v4 Value checked for change.
     * @param i4 Static value used for concatenation only.
     * @param v5 Value checked for change.
     * @param i5 Static value used for concatenation only.
     * @param v6 Value checked for change.
     * @param i6 Static value used for concatenation only.
     * @param v7 Value checked for change.
     * @param suffix Static value used for concatenation only.
     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵstylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {
      var lView = getLView();
      var interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ɵɵstylePropInterpolate8;
    }
    /**
     * Update an interpolated style property on an element with 9 or more bound values surrounded by
     * text.
     *
     * Used when the number of interpolated values exceeds 8.
     *
     * ```html
     * <div
     *  style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix">
     * </div>
     * ```
     *
     * Its compiled representation is:
     *
     * ```ts
     * ɵɵstylePropInterpolateV(
     *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
     *  'suffix']);
     * ```
     *
     * @param styleIndex Index of style to update. This index value refers to the
     *        index of the style in the style bindings array that was passed into
     *        `styling`..
     * @param values The collection of values and the strings in-between those values, beginning with
     * a string prefix and ending with a string suffix.
     * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
     * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
     * @returns itself, so that it may be chained.
     * @codeGenApi
     */


    function ɵɵstylePropInterpolateV(prop, values, valueSuffix) {
      var lView = getLView();
      var interpolatedValue = interpolationV(lView, values);
      checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
      return ɵɵstylePropInterpolateV;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Update a property on a host element. Only applies to native node properties, not inputs.
     *
     * Operates on the element selected by index via the {@link select} instruction.
     *
     * @param propName Name of property. Because it is going to DOM, this is not subject to
     *        renaming as part of minification.
     * @param value New value to write.
     * @param sanitizer An optional function used to sanitize the value.
     * @returns This function returns itself so that it may be chained
     * (e.g. `property('name', ctx.name)('title', ctx.title)`)
     *
     * @codeGenApi
     */


    function ɵɵhostProperty(propName, value, sanitizer) {
      var lView = getLView();
      var bindingIndex = nextBindingIndex();

      if (bindingUpdated(lView, bindingIndex, value)) {
        var tView = getTView();
        var tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
      }

      return ɵɵhostProperty;
    }
    /**
     * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.
     *
     * This instruction is for compatibility purposes and is designed to ensure that a
     * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in
     * the component's renderer. Normally all host bindings are evaluated with the parent
     * component's renderer, but, in the case of animation @triggers, they need to be
     * evaluated with the sub component's renderer (because that's where the animation
     * triggers are defined).
     *
     * Do not use this instruction as a replacement for `elementProperty`. This instruction
     * only exists to ensure compatibility with the ViewEngine's host binding behavior.
     *
     * @param index The index of the element to update in the data array
     * @param propName Name of property. Because it is going to DOM, this is not subject to
     *        renaming as part of minification.
     * @param value New value to write.
     * @param sanitizer An optional function used to sanitize the value.
     *
     * @codeGenApi
     */


    function ɵɵsyntheticHostProperty(propName, value, sanitizer) {
      var lView = getLView();
      var bindingIndex = nextBindingIndex();

      if (bindingUpdated(lView, bindingIndex, value)) {
        var tView = getTView();
        var tNode = getSelectedTNode();
        var currentDef = getCurrentDirectiveDef(tView.data);
        var renderer = loadComponentRenderer(currentDef, tNode, lView);
        elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
      }

      return ɵɵsyntheticHostProperty;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Retrieves the component instance associated with a given DOM element.
     *
     * @usageNotes
     * Given the following DOM structure:
     * ```html
     * <my-app>
     *   <div>
     *     <child-comp></child-comp>
     *   </div>
     * </my-app>
     * ```
     * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`
     * associated with this DOM element.
     *
     * Calling the function on `<my-app>` will return the `MyApp` instance.
     *
     *
     * @param element DOM element from which the component should be retrieved.
     * @returns Component instance associated with the element or `null` if there
     *    is no component associated with it.
     *
     * @publicApi
     * @globalApi ng
     */


    function getComponent(element) {
      assertDomElement(element);
      var context = loadLContext(element, false);
      if (context === null) return null;

      if (context.component === undefined) {
        context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);
      }

      return context.component;
    }
    /**
     * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded
     * view that the element is part of. Otherwise retrieves the instance of the component whose view
     * owns the element (in this case, the result is the same as calling `getOwningComponent`).
     *
     * @param element Element for which to get the surrounding component instance.
     * @returns Instance of the component that is around the element or null if the element isn't
     *    inside any component.
     *
     * @publicApi
     * @globalApi ng
     */


    function getContext(element) {
      assertDomElement(element);
      var context = loadLContext(element, false);
      return context === null ? null : context.lView[CONTEXT];
    }
    /**
     * Retrieves the component instance whose view contains the DOM element.
     *
     * For example, if `<child-comp>` is used in the template of `<app-comp>`
     * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`
     * would return `<app-comp>`.
     *
     * @param elementOrDir DOM element, component or directive instance
     *    for which to retrieve the root components.
     * @returns Component instance whose view owns the DOM element or null if the element is not
     *    part of a component view.
     *
     * @publicApi
     * @globalApi ng
     */


    function getOwningComponent(elementOrDir) {
      var context = loadLContext(elementOrDir, false);
      if (context === null) return null;
      var lView = context.lView;
      var parent;
      ngDevMode && assertLView(lView);

      while (lView[HOST] === null && (parent = getLViewParent(lView))) {
        // As long as lView[HOST] is null we know we are part of sub-template such as `*ngIf`
        lView = parent;
      }

      return lView[FLAGS] & 512
      /* IsRoot */
      ? null : lView[CONTEXT];
    }
    /**
     * Retrieves all root components associated with a DOM element, directive or component instance.
     * Root components are those which have been bootstrapped by Angular.
     *
     * @param elementOrDir DOM element, component or directive instance
     *    for which to retrieve the root components.
     * @returns Root components associated with the target object.
     *
     * @publicApi
     * @globalApi ng
     */


    function getRootComponents(elementOrDir) {
      return _toConsumableArray(getRootContext(elementOrDir).components);
    }
    /**
     * Retrieves an `Injector` associated with an element, component or directive instance.
     *
     * @param elementOrDir DOM element, component or directive instance for which to
     *    retrieve the injector.
     * @returns Injector associated with the element, component or directive instance.
     *
     * @publicApi
     * @globalApi ng
     */


    function getInjector(elementOrDir) {
      var context = loadLContext(elementOrDir, false);
      if (context === null) return Injector.NULL;
      var tNode = context.lView[TVIEW].data[context.nodeIndex];
      return new NodeInjector(tNode, context.lView);
    }
    /**
     * Retrieve a set of injection tokens at a given DOM node.
     *
     * @param element Element for which the injection tokens should be retrieved.
     */


    function getInjectionTokens(element) {
      var context = loadLContext(element, false);
      if (context === null) return [];
      var lView = context.lView;
      var tView = lView[TVIEW];
      var tNode = tView.data[context.nodeIndex];
      var providerTokens = [];
      var startIndex = tNode.providerIndexes & 1048575
      /* ProvidersStartIndexMask */
      ;
      var endIndex = tNode.directiveEnd;

      for (var i = startIndex; i < endIndex; i++) {
        var value = tView.data[i];

        if (isDirectiveDefHack(value)) {
          // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a
          // design flaw.  We should always store same type so that we can be monomorphic. The issue
          // is that for Components/Directives we store the def instead the type. The correct behavior
          // is that we should always be storing injectable type in this location.
          value = value.type;
        }

        providerTokens.push(value);
      }

      return providerTokens;
    }
    /**
     * Retrieves directive instances associated with a given DOM element. Does not include
     * component instances.
     *
     * @usageNotes
     * Given the following DOM structure:
     * ```
     * <my-app>
     *   <button my-button></button>
     *   <my-comp></my-comp>
     * </my-app>
     * ```
     * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`
     * directive that is associated with the DOM element.
     *
     * Calling `getDirectives` on `<my-comp>` will return an empty array.
     *
     * @param element DOM element for which to get the directives.
     * @returns Array of directives associated with the element.
     *
     * @publicApi
     * @globalApi ng
     */


    function getDirectives(element) {
      var context = loadLContext(element);

      if (context.directives === undefined) {
        context.directives = getDirectivesAtNodeIndex(context.nodeIndex, context.lView, false);
      } // The `directives` in this case are a named array called `LComponentView`. Clone the
      // result so we don't expose an internal data structure in the user's console.


      return context.directives === null ? [] : _toConsumableArray(context.directives);
    }

    function loadLContext(target) {
      var throwOnNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var context = getLContext(target);

      if (!context && throwOnNotFound) {
        throw new Error(ngDevMode ? "Unable to find context associated with ".concat(stringifyForError(target)) : 'Invalid ng target');
      }

      return context;
    }
    /**
     * Retrieve map of local references.
     *
     * The references are retrieved as a map of local reference name to element or directive instance.
     *
     * @param target DOM element, component or directive instance for which to retrieve
     *    the local references.
     */


    function getLocalRefs(target) {
      var context = loadLContext(target, false);
      if (context === null) return {};

      if (context.localRefs === undefined) {
        context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);
      }

      return context.localRefs || {};
    }
    /**
     * Retrieves the host element of a component or directive instance.
     * The host element is the DOM element that matched the selector of the directive.
     *
     * @param componentOrDirective Component or directive instance for which the host
     *     element should be retrieved.
     * @returns Host element of the target.
     *
     * @publicApi
     * @globalApi ng
     */


    function getHostElement(componentOrDirective) {
      return getLContext(componentOrDirective)["native"];
    }
    /**
     * Retrieves the rendered text for a given component.
     *
     * This function retrieves the host element of a component and
     * and then returns the `textContent` for that element. This implies
     * that the text returned will include re-projected content of
     * the component as well.
     *
     * @param component The component to return the content text for.
     */


    function getRenderedText(component) {
      var hostElement = getHostElement(component);
      return hostElement.textContent || '';
    }

    function loadLContextFromNode(node) {
      if (!(node instanceof Node)) throw new Error('Expecting instance of DOM Element');
      return loadLContext(node);
    }
    /**
     * Retrieves a list of event listeners associated with a DOM element. The list does include host
     * listeners, but it does not include event listeners defined outside of the Angular context
     * (e.g. through `addEventListener`).
     *
     * @usageNotes
     * Given the following DOM structure:
     * ```
     * <my-app>
     *   <div (click)="doSomething()"></div>
     * </my-app>
     *
     * ```
     * Calling `getListeners` on `<div>` will return an object that looks as follows:
     * ```
     * {
     *   name: 'click',
     *   element: <div>,
     *   callback: () => doSomething(),
     *   useCapture: false
     * }
     * ```
     *
     * @param element Element for which the DOM listeners should be retrieved.
     * @returns Array of event listeners on the DOM element.
     *
     * @publicApi
     * @globalApi ng
     */


    function getListeners(element) {
      assertDomElement(element);
      var lContext = loadLContext(element, false);
      if (lContext === null) return [];
      var lView = lContext.lView;
      var tView = lView[TVIEW];
      var lCleanup = lView[CLEANUP];
      var tCleanup = tView.cleanup;
      var listeners = [];

      if (tCleanup && lCleanup) {
        for (var i = 0; i < tCleanup.length;) {
          var firstParam = tCleanup[i++];
          var secondParam = tCleanup[i++];

          if (typeof firstParam === 'string') {
            var name = firstParam;
            var listenerElement = unwrapRNode(lView[secondParam]);
            var callback = lCleanup[tCleanup[i++]];
            var useCaptureOrIndx = tCleanup[i++]; // if useCaptureOrIndx is boolean then report it as is.
            // if useCaptureOrIndx is positive number then it in unsubscribe method
            // if useCaptureOrIndx is negative number then it is a Subscription

            var type = typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0 ? 'dom' : 'output';
            var useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;

            if (element == listenerElement) {
              listeners.push({
                element: element,
                name: name,
                callback: callback,
                useCapture: useCapture,
                type: type
              });
            }
          }
        }
      }

      listeners.sort(sortListeners);
      return listeners;
    }

    function sortListeners(a, b) {
      if (a.name == b.name) return 0;
      return a.name < b.name ? -1 : 1;
    }
    /**
     * This function should not exist because it is megamorphic and only mostly correct.
     *
     * See call site for more info.
     */


    function isDirectiveDefHack(obj) {
      return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;
    }
    /**
     * Returns the attached `DebugNode` instance for an element in the DOM.
     *
     * @param element DOM element which is owned by an existing component's view.
     */


    function getDebugNode(element) {
      var debugNode = null;
      var lContext = loadLContextFromNode(element);
      var lView = lContext.lView;
      var nodeIndex = lContext.nodeIndex;

      if (nodeIndex !== -1) {
        var valueInLView = lView[nodeIndex]; // this means that value in the lView is a component with its own
        // data. In this situation the TNode is not accessed at the same spot.

        var tNode = isLView(valueInLView) ? valueInLView[T_HOST] : getTNode(lView[TVIEW], nodeIndex - HEADER_OFFSET);
        debugNode = buildDebugNode(tNode, lView, nodeIndex);
      }

      return debugNode;
    }
    /**
     * Retrieve the component `LView` from component/element.
     *
     * NOTE: `LView` is a private and should not be leaked outside.
     *       Don't export this method to `ng.*` on window.
     *
     * @param target DOM element or component instance for which to retrieve the LView.
     */


    function getComponentLView(target) {
      var lContext = loadLContext(target);
      var nodeIndx = lContext.nodeIndex;
      var lView = lContext.lView;
      var componentLView = lView[nodeIndx];
      ngDevMode && assertLView(componentLView);
      return componentLView;
    }
    /** Asserts that a value is a DOM Element. */


    function assertDomElement(value) {
      if (typeof Element !== 'undefined' && !(value instanceof Element)) {
        throw new Error('Expecting instance of DOM Element');
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Marks a component for check (in case of OnPush components) and synchronously
     * performs change detection on the application this component belongs to.
     *
     * @param component Component to {@link ChangeDetectorRef#markForCheck mark for check}.
     *
     * @publicApi
     * @globalApi ng
     */


    function applyChanges(component) {
      markDirty(component);
      getRootComponents(component).forEach(function (rootComponent) {
        return detectChanges(rootComponent);
      });
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * This file introduces series of globally accessible debug tools
     * to allow for the Angular debugging story to function.
     *
     * To see this in action run the following command:
     *
     *   bazel run --config=ivy
     *   //packages/core/test/bundling/todo:devserver
     *
     *  Then load `localhost:5432` and start using the console tools.
     */

    /**
     * This value reflects the property on the window where the dev
     * tools are patched (window.ng).
     * */


    var GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';
    var _published = false;
    /**
     * Publishes a collection of default debug tools onto`window.ng`.
     *
     * These functions are available globally when Angular is in development
     * mode and are automatically stripped away from prod mode is on.
     */

    function publishDefaultGlobalUtils() {
      if (!_published) {
        _published = true;
        publishGlobalUtil('getComponent', getComponent);
        publishGlobalUtil('getContext', getContext);
        publishGlobalUtil('getListeners', getListeners);
        publishGlobalUtil('getOwningComponent', getOwningComponent);
        publishGlobalUtil('getHostElement', getHostElement);
        publishGlobalUtil('getInjector', getInjector);
        publishGlobalUtil('getRootComponents', getRootComponents);
        publishGlobalUtil('getDirectives', getDirectives);
        publishGlobalUtil('applyChanges', applyChanges);
      }
    }
    /**
     * Publishes the given function to `window.ng` so that it can be
     * used from the browser console when an application is not in production.
     */


    function publishGlobalUtil(name, fn) {
      if (typeof COMPILED === 'undefined' || !COMPILED) {
        // Note: we can't export `ng` when using closure enhanced optimization as:
        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global
        // - we can't declare a closure extern as the namespace `ng` is already used within Google
        //   for typings for AngularJS (via `goog.provide('ng....')`).
        var w = _global;
        ngDevMode && assertDefined(fn, 'function not defined');

        if (w) {
          var container = w[GLOBAL_PUBLISH_EXPANDO_KEY];

          if (!container) {
            container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};
          }

          container[name] = fn;
        }
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var ɵ0$b = function ɵ0$b(token, notFoundValue) {
      throw new Error('NullInjector: Not found: ' + stringifyForError(token));
    }; // TODO: A hack to not pull in the NullInjector from @angular/core.


    var NULL_INJECTOR$1 = {
      get: ɵ0$b
    };
    /**
     * Bootstraps a Component into an existing host element and returns an instance
     * of the component.
     *
     * Use this function to bootstrap a component into the DOM tree. Each invocation
     * of this function will create a separate tree of components, injectors and
     * change detection cycles and lifetimes. To dynamically insert a new component
     * into an existing tree such that it shares the same injection, change detection
     * and object lifetime, use {@link ViewContainer#createComponent}.
     *
     * @param componentType Component to bootstrap
     * @param options Optional parameters which control bootstrapping
     */

    function renderComponent$1(componentType
    /* Type as workaround for: Microsoft/TypeScript/issues/4881 */
    ) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      ngDevMode && publishDefaultGlobalUtils();
      ngDevMode && assertComponentType(componentType);
      var rendererFactory = opts.rendererFactory || domRendererFactory3;
      var sanitizer = opts.sanitizer || null;
      var componentDef = getComponentDef(componentType);
      if (componentDef.type != componentType) componentDef.type = componentType; // The first index of the first selector is the tag name.

      var componentTag = componentDef.selectors[0][0];
      var hostRenderer = rendererFactory.createRenderer(null, null);
      var hostRNode = locateHostElement(hostRenderer, opts.host || componentTag, componentDef.encapsulation);
      var rootFlags = componentDef.onPush ? 64
      /* Dirty */
      | 512
      /* IsRoot */
      : 16
      /* CheckAlways */
      | 512
      /* IsRoot */
      ;
      var rootContext = createRootContext(opts.scheduler, opts.playerHandler);
      var renderer = rendererFactory.createRenderer(hostRNode, componentDef);
      var rootTView = createTView(0
      /* Root */
      , -1, null, 1, 0, null, null, null, null, null);
      var rootView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, renderer, undefined, opts.injector || null);
      enterView(rootView, null);
      var component;

      try {
        if (rendererFactory.begin) rendererFactory.begin();
        var componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);
        component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null); // create mode pass

        renderView(rootTView, rootView, null); // update mode pass

        refreshView(rootTView, rootView, null, null);
      } finally {
        leaveView();
        if (rendererFactory.end) rendererFactory.end();
      }

      return component;
    }
    /**
     * Creates the root component view and the root component node.
     *
     * @param rNode Render host element.
     * @param def ComponentDef
     * @param rootView The parent view where the host node is stored
     * @param hostRenderer The current renderer
     * @param sanitizer The sanitizer, if provided
     *
     * @returns Component view created
     */


    function createRootComponentView(rNode, def, rootView, rendererFactory, hostRenderer, sanitizer) {
      var tView = rootView[TVIEW];
      ngDevMode && assertIndexInRange(rootView, 0 + HEADER_OFFSET);
      rootView[0 + HEADER_OFFSET] = rNode;
      var tNode = getOrCreateTNode(tView, null, 0, 3
      /* Element */
      , null, null);
      var mergedAttrs = tNode.mergedAttrs = def.hostAttrs;

      if (mergedAttrs !== null) {
        computeStaticStyling(tNode, mergedAttrs, true);

        if (rNode !== null) {
          setUpAttributes(hostRenderer, rNode, mergedAttrs);

          if (tNode.classes !== null) {
            writeDirectClass(hostRenderer, rNode, tNode.classes);
          }

          if (tNode.styles !== null) {
            writeDirectStyle(hostRenderer, rNode, tNode.styles);
          }
        }
      }

      var viewRenderer = rendererFactory.createRenderer(rNode, def);
      var componentView = createLView(rootView, getOrCreateTComponentView(def), null, def.onPush ? 64
      /* Dirty */
      : 16
      /* CheckAlways */
      , rootView[HEADER_OFFSET], tNode, rendererFactory, viewRenderer, sanitizer);

      if (tView.firstCreatePass) {
        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), tView, def.type);
        markAsComponentHost(tView, tNode);
        initTNodeFlags(tNode, rootView.length, 1);
      }

      addToViewTree(rootView, componentView); // Store component view at node index, with node as the HOST

      return rootView[HEADER_OFFSET] = componentView;
    }
    /**
     * Creates a root component and sets it up with features and host bindings. Shared by
     * renderComponent() and ViewContainerRef.createComponent().
     */


    function createRootComponent(componentView, componentDef, rootLView, rootContext, hostFeatures) {
      var tView = rootLView[TVIEW]; // Create directive instance with factory() and store at next index in viewData

      var component = instantiateRootComponent(tView, rootLView, componentDef);
      rootContext.components.push(component);
      componentView[CONTEXT] = component;
      hostFeatures && hostFeatures.forEach(function (feature) {
        return feature(component, componentDef);
      }); // We want to generate an empty QueryList for root content queries for backwards
      // compatibility with ViewEngine.

      if (componentDef.contentQueries) {
        componentDef.contentQueries(1
        /* Create */
        , component, rootLView.length - 1);
      }

      var rootTNode = getPreviousOrParentTNode();

      if (tView.firstCreatePass && (componentDef.hostBindings !== null || componentDef.hostAttrs !== null)) {
        var elementIndex = rootTNode.index - HEADER_OFFSET;
        setSelectedIndex(elementIndex);
        var rootTView = rootLView[TVIEW];
        addHostBindingsToExpandoInstructions(rootTView, componentDef);
        growHostVarsSpace(rootTView, rootLView, componentDef.hostVars);
        invokeHostBindingsInCreationMode(componentDef, component);
      }

      return component;
    }

    function createRootContext(scheduler, playerHandler) {
      return {
        components: [],
        scheduler: scheduler || defaultScheduler,
        clean: CLEAN_PROMISE,
        playerHandler: playerHandler || null,
        flags: 0
        /* Empty */

      };
    }
    /**
     * Used to enable lifecycle hooks on the root component.
     *
     * Include this feature when calling `renderComponent` if the root component
     * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't
     * be called properly.
     *
     * Example:
     *
     * ```
     * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});
     * ```
     */


    function LifecycleHooksFeature(component, def) {
      var rootTView = readPatchedLView(component)[TVIEW];
      var dirIndex = rootTView.data.length - 1; // TODO(misko): replace `as TNode` with createTNode call. (needs refactoring to lose dep on
      // LNode).

      registerPostOrderHooks(rootTView, {
        directiveStart: dirIndex,
        directiveEnd: dirIndex + 1
      });
    }
    /**
     * Wait on component until it is rendered.
     *
     * This function returns a `Promise` which is resolved when the component's
     * change detection is executed. This is determined by finding the scheduler
     * associated with the `component`'s render tree and waiting until the scheduler
     * flushes. If nothing is scheduled, the function returns a resolved promise.
     *
     * Example:
     * ```
     * await whenRendered(myComponent);
     * ```
     *
     * @param component Component to wait upon
     * @returns Promise which resolves when the component is rendered.
     */


    function whenRendered(component) {
      return getRootContext(component).clean;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function getSuperType(type) {
      return Object.getPrototypeOf(type.prototype).constructor;
    }
    /**
     * Merges the definition from a super class to a sub class.
     * @param definition The definition that is a SubClass of another directive of component
     *
     * @codeGenApi
     */


    function ɵɵInheritDefinitionFeature(definition) {
      var superType = getSuperType(definition.type);
      var shouldInheritFields = true;
      var inheritanceChain = [definition];

      while (superType) {
        var superDef = undefined;

        if (isComponentDef(definition)) {
          // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
          superDef = superType.ɵcmp || superType.ɵdir;
        } else {
          if (superType.ɵcmp) {
            throw new Error('Directives cannot inherit Components');
          } // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.


          superDef = superType.ɵdir;
        }

        if (superDef) {
          if (shouldInheritFields) {
            inheritanceChain.push(superDef); // Some fields in the definition may be empty, if there were no values to put in them that
            // would've justified object creation. Unwrap them if necessary.

            var writeableDef = definition;
            writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);
            writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);
            writeableDef.outputs = maybeUnwrapEmpty(definition.outputs); // Merge hostBindings

            var superHostBindings = superDef.hostBindings;
            superHostBindings && inheritHostBindings(definition, superHostBindings); // Merge queries

            var superViewQuery = superDef.viewQuery;
            var superContentQueries = superDef.contentQueries;
            superViewQuery && inheritViewQuery(definition, superViewQuery);
            superContentQueries && inheritContentQueries(definition, superContentQueries); // Merge inputs and outputs

            fillProperties(definition.inputs, superDef.inputs);
            fillProperties(definition.declaredInputs, superDef.declaredInputs);
            fillProperties(definition.outputs, superDef.outputs); // Merge animations metadata.
            // If `superDef` is a Component, the `data` field is present (defaults to an empty object).

            if (isComponentDef(superDef) && superDef.data.animation) {
              // If super def is a Component, the `definition` is also a Component, since Directives can
              // not inherit Components (we throw an error above and cannot reach this code).
              var defData = definition.data;
              defData.animation = (defData.animation || []).concat(superDef.data.animation);
            }
          } // Run parent features


          var features = superDef.features;

          if (features) {
            for (var i = 0; i < features.length; i++) {
              var feature = features[i];

              if (feature && feature.ngInherit) {
                feature(definition);
              } // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this
              // def already has all the necessary information inherited from its super class(es), so we
              // can stop merging fields from super classes. However we need to iterate through the
              // prototype chain to look for classes that might contain other "features" (like
              // NgOnChanges), which we should invoke for the original `definition`. We set the
              // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance
              // logic and only invoking functions from the "features" list.


              if (feature === ɵɵInheritDefinitionFeature) {
                shouldInheritFields = false;
              }
            }
          }
        }

        superType = Object.getPrototypeOf(superType);
      }

      mergeHostAttrsAcrossInheritance(inheritanceChain);
    }
    /**
     * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.
     *
     * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing
     * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child
     * type.
     */


    function mergeHostAttrsAcrossInheritance(inheritanceChain) {
      var hostVars = 0;
      var hostAttrs = null; // We process the inheritance order from the base to the leaves here.

      for (var i = inheritanceChain.length - 1; i >= 0; i--) {
        var def = inheritanceChain[i]; // For each `hostVars`, we need to add the superclass amount.

        def.hostVars = hostVars += def.hostVars; // for each `hostAttrs` we need to merge it with superclass.

        def.hostAttrs = mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));
      }
    }

    function maybeUnwrapEmpty(value) {
      if (value === EMPTY_OBJ) {
        return {};
      } else if (value === EMPTY_ARRAY) {
        return [];
      } else {
        return value;
      }
    }

    function inheritViewQuery(definition, superViewQuery) {
      var prevViewQuery = definition.viewQuery;

      if (prevViewQuery) {
        definition.viewQuery = function (rf, ctx) {
          superViewQuery(rf, ctx);
          prevViewQuery(rf, ctx);
        };
      } else {
        definition.viewQuery = superViewQuery;
      }
    }

    function inheritContentQueries(definition, superContentQueries) {
      var prevContentQueries = definition.contentQueries;

      if (prevContentQueries) {
        definition.contentQueries = function (rf, ctx, directiveIndex) {
          superContentQueries(rf, ctx, directiveIndex);
          prevContentQueries(rf, ctx, directiveIndex);
        };
      } else {
        definition.contentQueries = superContentQueries;
      }
    }

    function inheritHostBindings(definition, superHostBindings) {
      var prevHostBindings = definition.hostBindings;

      if (prevHostBindings) {
        definition.hostBindings = function (rf, ctx) {
          superHostBindings(rf, ctx);
          prevHostBindings(rf, ctx);
        };
      } else {
        definition.hostBindings = superHostBindings;
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Fields which exist on either directive or component definitions, and need to be copied from
     * parent to child classes by the `ɵɵCopyDefinitionFeature`.
     */


    var COPY_DIRECTIVE_FIELDS = [// The child class should use the providers of its parent.
    'providersResolver'];
    /**
     * Fields which exist only on component definitions, and need to be copied from parent to child
     * classes by the `ɵɵCopyDefinitionFeature`.
     *
     * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,
     * since those should go in `COPY_DIRECTIVE_FIELDS` above.
     */

    var COPY_COMPONENT_FIELDS = [// The child class should use the template function of its parent, including all template
    // semantics.
    'template', 'decls', 'consts', 'vars', 'onPush', 'ngContentSelectors', // The child class should use the CSS styles of its parent, including all styling semantics.
    'styles', 'encapsulation', // The child class should be checked by the runtime in the same way as its parent.
    'schemas'];
    /**
     * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a
     * definition.
     *
     * This exists primarily to support ngcc migration of an existing View Engine pattern, where an
     * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it
     * generates a skeleton definition on the child class, and applies this feature.
     *
     * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,
     * including things like the component template function.
     *
     * @param definition The definition of a child class which inherits from a parent class with its
     * own definition.
     *
     * @codeGenApi
     */

    function ɵɵCopyDefinitionFeature(definition) {
      var superType = getSuperType(definition.type);
      var superDef = undefined;

      if (isComponentDef(definition)) {
        // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
        superDef = superType.ɵcmp;
      } else {
        // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
        superDef = superType.ɵdir;
      } // Needed because `definition` fields are readonly.


      var defAny = definition; // Copy over any fields that apply to either directives or components.

      var _iterator4 = _createForOfIteratorHelper(COPY_DIRECTIVE_FIELDS),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _field = _step4.value;
          defAny[_field] = superDef[_field];
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      if (isComponentDef(superDef)) {
        // Copy over any component-specific fields.
        var _iterator5 = _createForOfIteratorHelper(COPY_COMPONENT_FIELDS),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var field = _step5.value;
            defAny[field] = superDef[field];
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Resolves the providers which are defined in the DirectiveDef.
     *
     * When inserting the tokens and the factories in their respective arrays, we can assume that
     * this method is called first for the component (if any), and then for other directives on the same
     * node.
     * As a consequence,the providers are always processed in that order:
     * 1) The view providers of the component
     * 2) The providers of the component
     * 3) The providers of the other directives
     * This matches the structure of the injectables arrays of a view (for each node).
     * So the tokens and the factories can be pushed at the end of the arrays, except
     * in one case for multi providers.
     *
     * @param def the directive definition
     * @param providers: Array of `providers`.
     * @param viewProviders: Array of `viewProviders`.
     */


    function providersResolver(def, providers, viewProviders) {
      var tView = getTView();

      if (tView.firstCreatePass) {
        var isComponent = isComponentDef(def); // The list of view providers is processed first, and the flags are updated

        resolveProvider$1(viewProviders, tView.data, tView.blueprint, isComponent, true); // Then, the list of providers is processed, and the flags are updated

        resolveProvider$1(providers, tView.data, tView.blueprint, isComponent, false);
      }
    }
    /**
     * Resolves a provider and publishes it to the DI system.
     */


    function resolveProvider$1(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {
      provider = resolveForwardRef(provider);

      if (Array.isArray(provider)) {
        // Recursively call `resolveProvider`
        // Recursion is OK in this case because this code will not be in hot-path once we implement
        // cloning of the initial state.
        for (var i = 0; i < provider.length; i++) {
          resolveProvider$1(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);
        }
      } else {
        var tView = getTView();
        var lView = getLView();
        var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);
        var providerFactory = providerToFactory(provider);
        var tNode = getPreviousOrParentTNode();
        var beginIndex = tNode.providerIndexes & 1048575
        /* ProvidersStartIndexMask */
        ;
        var endIndex = tNode.directiveStart;
        var cptViewProvidersCount = tNode.providerIndexes >> 20
        /* CptViewProvidersCountShift */
        ;

        if (isTypeProvider(provider) || !provider.multi) {
          // Single provider case: the factory is created and pushed immediately
          var factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);
          var existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);

          if (existingFactoryIndex === -1) {
            diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
            registerDestroyHooksIfSupported(tView, provider, tInjectables.length);
            tInjectables.push(token);
            tNode.directiveStart++;
            tNode.directiveEnd++;

            if (isViewProvider) {
              tNode.providerIndexes += 1048576
              /* CptViewProvidersCountShifter */
              ;
            }

            lInjectablesBlueprint.push(factory);
            lView.push(factory);
          } else {
            lInjectablesBlueprint[existingFactoryIndex] = factory;
            lView[existingFactoryIndex] = factory;
          }
        } else {
          // Multi provider case:
          // We create a multi factory which is going to aggregate all the values.
          // Since the output of such a factory depends on content or view injection,
          // we create two of them, which are linked together.
          //
          // The first one (for view providers) is always in the first block of the injectables array,
          // and the second one (for providers) is always in the second block.
          // This is important because view providers have higher priority. When a multi token
          // is being looked up, the view providers should be found first.
          // Note that it is not possible to have a multi factory in the third block (directive block).
          //
          // The algorithm to process multi providers is as follows:
          // 1) If the multi provider comes from the `viewProviders` of the component:
          //   a) If the special view providers factory doesn't exist, it is created and pushed.
          //   b) Else, the multi provider is added to the existing multi factory.
          // 2) If the multi provider comes from the `providers` of the component or of another
          // directive:
          //   a) If the multi factory doesn't exist, it is created and provider pushed into it.
          //      It is also linked to the multi factory for view providers, if it exists.
          //   b) Else, the multi provider is added to the existing multi factory.
          var existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);
          var existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);
          var doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];
          var doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];

          if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {
            // Cases 1.a and 2.a
            diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);

            var _factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);

            if (!isViewProvider && doesViewProvidersFactoryExist) {
              lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = _factory;
            }

            registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);
            tInjectables.push(token);
            tNode.directiveStart++;
            tNode.directiveEnd++;

            if (isViewProvider) {
              tNode.providerIndexes += 1048576
              /* CptViewProvidersCountShifter */
              ;
            }

            lInjectablesBlueprint.push(_factory);
            lView.push(_factory);
          } else {
            // Cases 1.b and 2.b
            var indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);
            registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex : existingViewProvidersFactoryIndex, indexInFactory);
          }

          if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {
            lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;
          }
        }
      }
    }
    /**
     * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.
     * @param tView `TView` in which to register the hook.
     * @param provider Provider whose hook should be registered.
     * @param contextIndex Index under which to find the context for the hook when it's being invoked.
     * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi
     * provider factory.
     */


    function registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {
      var providerIsTypeProvider = isTypeProvider(provider);

      if (providerIsTypeProvider || isClassProvider(provider)) {
        var prototype = (provider.useClass || provider).prototype;
        var ngOnDestroy = prototype.ngOnDestroy;

        if (ngOnDestroy) {
          var hooks = tView.destroyHooks || (tView.destroyHooks = []);

          if (!providerIsTypeProvider && provider.multi) {
            ngDevMode && assertDefined(indexInFactory, 'indexInFactory when registering multi factory destroy hook');
            var existingCallbacksIndex = hooks.indexOf(contextIndex);

            if (existingCallbacksIndex === -1) {
              hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);
            } else {
              hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);
            }
          } else {
            hooks.push(contextIndex, ngOnDestroy);
          }
        }
      }
    }
    /**
     * Add a factory in a multi factory.
     * @returns Index at which the factory was inserted.
     */


    function multiFactoryAdd(multiFactory, factory, isComponentProvider) {
      if (isComponentProvider) {
        multiFactory.componentProviders++;
      }

      return multiFactory.multi.push(factory) - 1;
    }
    /**
     * Returns the index of item in the array, but only in the begin to end range.
     */


    function indexOf(item, arr, begin, end) {
      for (var i = begin; i < end; i++) {
        if (arr[i] === item) return i;
      }

      return -1;
    }
    /**
     * Use this with `multi` `providers`.
     */


    function multiProvidersFactoryResolver(_, tData, lData, tNode) {
      return multiResolve(this.multi, []);
    }
    /**
     * Use this with `multi` `viewProviders`.
     *
     * This factory knows how to concatenate itself with the existing `multi` `providers`.
     */


    function multiViewProvidersFactoryResolver(_, tData, lView, tNode) {
      var factories = this.multi;
      var result;

      if (this.providerFactory) {
        var componentCount = this.providerFactory.componentProviders;
        var multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode); // Copy the section of the array which contains `multi` `providers` from the component

        result = multiProviders.slice(0, componentCount); // Insert the `viewProvider` instances.

        multiResolve(factories, result); // Copy the section of the array which contains `multi` `providers` from other directives

        for (var i = componentCount; i < multiProviders.length; i++) {
          result.push(multiProviders[i]);
        }
      } else {
        result = []; // Insert the `viewProvider` instances.

        multiResolve(factories, result);
      }

      return result;
    }
    /**
     * Maps an array of factories into an array of values.
     */


    function multiResolve(factories, result) {
      for (var i = 0; i < factories.length; i++) {
        var factory = factories[i];
        result.push(factory());
      }

      return result;
    }
    /**
     * Creates a multi factory.
     */


    function multiFactory(factoryFn, index, isViewProvider, isComponent, f) {
      var factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);
      factory.multi = [];
      factory.index = index;
      factory.componentProviders = 0;
      multiFactoryAdd(factory, f, isComponent && !isViewProvider);
      return factory;
    }
    /**
     * This feature resolves the providers of a directive (or component),
     * and publish them into the DI system, making it visible to others for injection.
     *
     * For example:
     * ```ts
     * class ComponentWithProviders {
     *   constructor(private greeter: GreeterDE) {}
     *
     *   static ɵcmp = defineComponent({
     *     type: ComponentWithProviders,
     *     selectors: [['component-with-providers']],
     *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),
     *    decls: 1,
     *    vars: 1,
     *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {
     *      if (fs & RenderFlags.Create) {
     *        ɵɵtext(0);
     *      }
     *      if (fs & RenderFlags.Update) {
     *        ɵɵtextInterpolate(ctx.greeter.greet());
     *      }
     *    },
     *    features: [ProvidersFeature([GreeterDE])]
     *  });
     * }
     * ```
     *
     * @param definition
     *
     * @codeGenApi
     */


    function ɵɵProvidersFeature(providers) {
      var viewProviders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      return function (definition) {
        definition.providersResolver = function (def, processProvidersFn) {
          return providersResolver(def, //
          processProvidersFn ? processProvidersFn(providers) : providers, //
          viewProviders);
        };
      };
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Represents a component created by a `ComponentFactory`.
     * Provides access to the component instance and related objects,
     * and provides the means of destroying the instance.
     *
     * @publicApi
     */


    var ComponentRef = function ComponentRef() {
      _classCallCheck(this, ComponentRef);
    };
    /**
     * Base class for a factory that can create a component dynamically.
     * Instantiate a factory for a given type of component with `resolveComponentFactory()`.
     * Use the resulting `ComponentFactory.create()` method to create a component of that type.
     *
     * @see [Dynamic Components](guide/dynamic-component-loader)
     *
     * @publicApi
     */


    var ComponentFactory = function ComponentFactory() {
      _classCallCheck(this, ComponentFactory);
    };
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function noComponentFactoryError(component) {
      var error = Error("No component factory found for ".concat(stringify(component), ". Did you add it to @NgModule.entryComponents?"));
      error[ERROR_COMPONENT] = component;
      return error;
    }

    var ERROR_COMPONENT = 'ngComponent';

    function getComponent$1(error) {
      return error[ERROR_COMPONENT];
    }

    var _NullComponentFactoryResolver = /*#__PURE__*/function () {
      function _NullComponentFactoryResolver() {
        _classCallCheck(this, _NullComponentFactoryResolver);
      }

      _createClass2(_NullComponentFactoryResolver, [{
        key: "resolveComponentFactory",
        value: function resolveComponentFactory(component) {
          throw noComponentFactoryError(component);
        }
      }]);

      return _NullComponentFactoryResolver;
    }();

    var ComponentFactoryResolver = /*@__PURE__*/function () {
      var ComponentFactoryResolver = function ComponentFactoryResolver() {
        _classCallCheck(this, ComponentFactoryResolver);
      };

      ComponentFactoryResolver.NULL = /*@__PURE__*/new _NullComponentFactoryResolver();
      return ComponentFactoryResolver;
    }();

    var CodegenComponentFactoryResolver = /*#__PURE__*/function () {
      function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {
        _classCallCheck(this, CodegenComponentFactoryResolver);

        this._parent = _parent;
        this._ngModule = _ngModule;
        this._factories = new Map();

        for (var i = 0; i < factories.length; i++) {
          var factory = factories[i];

          this._factories.set(factory.componentType, factory);
        }
      }

      _createClass2(CodegenComponentFactoryResolver, [{
        key: "resolveComponentFactory",
        value: function resolveComponentFactory(component) {
          var factory = this._factories.get(component);

          if (!factory && this._parent) {
            factory = this._parent.resolveComponentFactory(component);
          }

          if (!factory) {
            throw noComponentFactoryError(component);
          }

          return new ComponentFactoryBoundToModule(factory, this._ngModule);
        }
      }]);

      return CodegenComponentFactoryResolver;
    }();

    var ComponentFactoryBoundToModule = /*#__PURE__*/function (_ComponentFactory) {
      _inherits(ComponentFactoryBoundToModule, _ComponentFactory);

      var _super14 = _createSuper(ComponentFactoryBoundToModule);

      function ComponentFactoryBoundToModule(factory, ngModule) {
        var _this23;

        _classCallCheck(this, ComponentFactoryBoundToModule);

        _this23 = _super14.call(this);
        _this23.factory = factory;
        _this23.ngModule = ngModule;
        _this23.selector = factory.selector;
        _this23.componentType = factory.componentType;
        _this23.ngContentSelectors = factory.ngContentSelectors;
        _this23.inputs = factory.inputs;
        _this23.outputs = factory.outputs;
        return _this23;
      }

      _createClass2(ComponentFactoryBoundToModule, [{
        key: "create",
        value: function create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
          return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);
        }
      }]);

      return ComponentFactoryBoundToModule;
    }(ComponentFactory);
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function noop() {// Do nothing.
    }

    var ElementRef = /*@__PURE__*/function () {
      var ElementRef = function ElementRef(nativeElement) {
        _classCallCheck(this, ElementRef);

        this.nativeElement = nativeElement;
      };
      /**
       * @internal
       * @nocollapse
       */


      ElementRef.__NG_ELEMENT_ID__ = function () {
        return SWITCH_ELEMENT_REF_FACTORY(ElementRef);
      };

      return ElementRef;
    }();

    var SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = injectElementRef;
    var SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;
    var SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__POST_R3__;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    var Renderer2Interceptor = /*@__PURE__*/new InjectionToken('Renderer2Interceptor');
    /**
     * Creates and initializes a custom renderer that implements the `Renderer2` base class.
     *
     * @publicApi
     */

    var RendererFactory2 = function RendererFactory2() {
      _classCallCheck(this, RendererFactory2);
    };
    /**
     * Flags for renderer-specific style modifiers.
     * @publicApi
     */


    var RendererStyleFlags2 = /*@__PURE__*/function (RendererStyleFlags2) {
      // TODO(misko): This needs to be refactored into a separate file so that it can be imported from
      // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails
      // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.

      /**
       * Marks a style as important.
       */
      RendererStyleFlags2[RendererStyleFlags2["Important"] = 1] = "Important";
      /**
       * Marks a style as using dash case naming (this-is-dash-case).
       */

      RendererStyleFlags2[RendererStyleFlags2["DashCase"] = 2] = "DashCase";
      return RendererStyleFlags2;
    }({});

    var Renderer2 = /*@__PURE__*/function () {
      var Renderer2 = function Renderer2() {
        _classCallCheck(this, Renderer2);
      };
      /**
       * @internal
       * @nocollapse
       */


      Renderer2.__NG_ELEMENT_ID__ = function () {
        return SWITCH_RENDERER2_FACTORY();
      };

      return Renderer2;
    }();

    var SWITCH_RENDERER2_FACTORY__POST_R3__ = injectRenderer2;
    var SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;
    var SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__POST_R3__;

    var Sanitizer = /*@__PURE__*/function () {
      var Sanitizer = function Sanitizer() {
        _classCallCheck(this, Sanitizer);
      };
      /** @nocollapse */


      Sanitizer.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
        token: Sanitizer,
        providedIn: 'root',
        factory: function factory() {
          return null;
        }
      });
      return Sanitizer;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @description Represents the version of Angular
     *
     * @publicApi
     */


    var Version = function Version(full) {
      _classCallCheck(this, Version);

      this.full = full;
      this.major = full.split('.')[0];
      this.minor = full.split('.')[1];
      this.patch = full.split('.').slice(2).join('.');
    };
    /**
     * @publicApi
     */


    var VERSION = /*@__PURE__*/new Version('10.0.9');
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    var DefaultIterableDifferFactory = /*#__PURE__*/function () {
      function DefaultIterableDifferFactory() {
        _classCallCheck(this, DefaultIterableDifferFactory);
      }

      _createClass2(DefaultIterableDifferFactory, [{
        key: "supports",
        value: function supports(obj) {
          return isListLikeIterable(obj);
        }
      }, {
        key: "create",
        value: function create(trackByFn) {
          return new DefaultIterableDiffer(trackByFn);
        }
      }]);

      return DefaultIterableDifferFactory;
    }();

    var trackByIdentity = function trackByIdentity(index, item) {
      return item;
    };

    var ɵ0$c = trackByIdentity;
    /**
     * @deprecated v4.0.0 - Should not be part of public API.
     * @publicApi
     */

    var DefaultIterableDiffer = /*#__PURE__*/function () {
      function DefaultIterableDiffer(trackByFn) {
        _classCallCheck(this, DefaultIterableDiffer);

        this.length = 0; // Keeps track of the used records at any point in time (during & across `_check()` calls)

        this._linkedRecords = null; // Keeps track of the removed records at any point in time during `_check()` calls.

        this._unlinkedRecords = null;
        this._previousItHead = null;
        this._itHead = null;
        this._itTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._movesHead = null;
        this._movesTail = null;
        this._removalsHead = null;
        this._removalsTail = null; // Keeps track of records where custom track by is the same, but item identity has changed

        this._identityChangesHead = null;
        this._identityChangesTail = null;
        this._trackByFn = trackByFn || trackByIdentity;
      }

      _createClass2(DefaultIterableDiffer, [{
        key: "forEachItem",
        value: function forEachItem(fn) {
          var record;

          for (record = this._itHead; record !== null; record = record._next) {
            fn(record);
          }
        }
      }, {
        key: "forEachOperation",
        value: function forEachOperation(fn) {
          var nextIt = this._itHead;
          var nextRemove = this._removalsHead;
          var addRemoveOffset = 0;
          var moveOffsets = null;

          while (nextIt || nextRemove) {
            // Figure out which is the next record to process
            // Order: remove, add, move
            var record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
            var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
            var currentIndex = record.currentIndex; // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary

            if (record === nextRemove) {
              addRemoveOffset--;
              nextRemove = nextRemove._nextRemoved;
            } else {
              nextIt = nextIt._next;

              if (record.previousIndex == null) {
                addRemoveOffset++;
              } else {
                // INVARIANT:  currentIndex < previousIndex
                if (!moveOffsets) moveOffsets = [];
                var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                var localCurrentIndex = currentIndex - addRemoveOffset;

                if (localMovePreviousIndex != localCurrentIndex) {
                  for (var i = 0; i < localMovePreviousIndex; i++) {
                    var offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;
                    var index = offset + i;

                    if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                      moveOffsets[i] = offset + 1;
                    }
                  }

                  var previousIndex = record.previousIndex;
                  moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                }
              }
            }

            if (adjPreviousIndex !== currentIndex) {
              fn(record, adjPreviousIndex, currentIndex);
            }
          }
        }
      }, {
        key: "forEachPreviousItem",
        value: function forEachPreviousItem(fn) {
          var record;

          for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
            fn(record);
          }
        }
      }, {
        key: "forEachAddedItem",
        value: function forEachAddedItem(fn) {
          var record;

          for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
          }
        }
      }, {
        key: "forEachMovedItem",
        value: function forEachMovedItem(fn) {
          var record;

          for (record = this._movesHead; record !== null; record = record._nextMoved) {
            fn(record);
          }
        }
      }, {
        key: "forEachRemovedItem",
        value: function forEachRemovedItem(fn) {
          var record;

          for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
          }
        }
      }, {
        key: "forEachIdentityChange",
        value: function forEachIdentityChange(fn) {
          var record;

          for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
            fn(record);
          }
        }
      }, {
        key: "diff",
        value: function diff(collection) {
          if (collection == null) collection = [];

          if (!isListLikeIterable(collection)) {
            throw new Error("Error trying to diff '".concat(stringify(collection), "'. Only arrays and iterables are allowed"));
          }

          if (this.check(collection)) {
            return this;
          } else {
            return null;
          }
        }
      }, {
        key: "onDestroy",
        value: function onDestroy() {}
      }, {
        key: "check",
        value: function check(collection) {
          var _this24 = this;

          this._reset();

          var record = this._itHead;
          var mayBeDirty = false;
          var index;
          var item;
          var itemTrackBy;

          if (Array.isArray(collection)) {
            this.length = collection.length;

            for (var _index = 0; _index < this.length; _index++) {
              item = collection[_index];
              itemTrackBy = this._trackByFn(_index, item);

              if (record === null || !Object.is(record.trackById, itemTrackBy)) {
                record = this._mismatch(record, item, itemTrackBy, _index);
                mayBeDirty = true;
              } else {
                if (mayBeDirty) {
                  // TODO(misko): can we limit this to duplicates only?
                  record = this._verifyReinsertion(record, item, itemTrackBy, _index);
                }

                if (!Object.is(record.item, item)) this._addIdentityChange(record, item);
              }

              record = record._next;
            }
          } else {
            index = 0;
            iterateListLike(collection, function (item) {
              itemTrackBy = _this24._trackByFn(index, item);

              if (record === null || !Object.is(record.trackById, itemTrackBy)) {
                record = _this24._mismatch(record, item, itemTrackBy, index);
                mayBeDirty = true;
              } else {
                if (mayBeDirty) {
                  // TODO(misko): can we limit this to duplicates only?
                  record = _this24._verifyReinsertion(record, item, itemTrackBy, index);
                }

                if (!Object.is(record.item, item)) _this24._addIdentityChange(record, item);
              }

              record = record._next;
              index++;
            });
            this.length = index;
          }

          this._truncate(record);

          this.collection = collection;
          return this.isDirty;
        }
        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
         * changes.
         */

      }, {
        key: "_reset",

        /**
         * Reset the state of the change objects to show no changes. This means set previousKey to
         * currentKey, and clear all of the queues (additions, moves, removals).
         * Set the previousIndexes of moved and added items to their currentIndexes
         * Reset the list of additions, moves and removals
         *
         * @internal
         */
        value: function _reset() {
          if (this.isDirty) {
            var record;
            var nextRecord;

            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
              record._nextPrevious = record._next;
            }

            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
              record.previousIndex = record.currentIndex;
            }

            this._additionsHead = this._additionsTail = null;

            for (record = this._movesHead; record !== null; record = nextRecord) {
              record.previousIndex = record.currentIndex;
              nextRecord = record._nextMoved;
            }

            this._movesHead = this._movesTail = null;
            this._removalsHead = this._removalsTail = null;
            this._identityChangesHead = this._identityChangesTail = null; // TODO(vicb): when assert gets supported
            // assert(!this.isDirty);
          }
        }
        /**
         * This is the core function which handles differences between collections.
         *
         * - `record` is the record which we saw at this position last time. If null then it is a new
         *   item.
         * - `item` is the current item in the collection
         * - `index` is the position of the item in the collection
         *
         * @internal
         */

      }, {
        key: "_mismatch",
        value: function _mismatch(record, item, itemTrackBy, index) {
          // The previous record after which we will append the current one.
          var previousRecord;

          if (record === null) {
            previousRecord = this._itTail;
          } else {
            previousRecord = record._prev; // Remove the record from the collection since we know it does not match the item.

            this._remove(record);
          } // Attempt to see if we have seen the item before.


          record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);

          if (record !== null) {
            // We have seen this before, we need to move it forward in the collection.
            // But first we need to check if identity changed, so we can update in view if necessary
            if (!Object.is(record.item, item)) this._addIdentityChange(record, item);

            this._moveAfter(record, previousRecord, index);
          } else {
            // Never seen it, check evicted list.
            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);

            if (record !== null) {
              // It is an item which we have evicted earlier: reinsert it back into the list.
              // But first we need to check if identity changed, so we can update in view if necessary
              if (!Object.is(record.item, item)) this._addIdentityChange(record, item);

              this._reinsertAfter(record, previousRecord, index);
            } else {
              // It is a new item: add it.
              record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
            }
          }

          return record;
        }
        /**
         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
         *
         * Use case: `[a, a]` => `[b, a, a]`
         *
         * If we did not have this check then the insertion of `b` would:
         *   1) evict first `a`
         *   2) insert `b` at `0` index.
         *   3) leave `a` at index `1` as is. <-- this is wrong!
         *   3) reinsert `a` at index 2. <-- this is wrong!
         *
         * The correct behavior is:
         *   1) evict first `a`
         *   2) insert `b` at `0` index.
         *   3) reinsert `a` at index 1.
         *   3) move `a` at from `1` to `2`.
         *
         *
         * Double check that we have not evicted a duplicate item. We need to check if the item type may
         * have already been removed:
         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
         * at the end.
         *
         * @internal
         */

      }, {
        key: "_verifyReinsertion",
        value: function _verifyReinsertion(record, item, itemTrackBy, index) {
          var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);

          if (reinsertRecord !== null) {
            record = this._reinsertAfter(reinsertRecord, record._prev, index);
          } else if (record.currentIndex != index) {
            record.currentIndex = index;

            this._addToMoves(record, index);
          }

          return record;
        }
        /**
         * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection
         *
         * - `record` The first excess {@link IterableChangeRecord_}.
         *
         * @internal
         */

      }, {
        key: "_truncate",
        value: function _truncate(record) {
          // Anything after that needs to be removed;
          while (record !== null) {
            var nextRecord = record._next;

            this._addToRemovals(this._unlink(record));

            record = nextRecord;
          }

          if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.clear();
          }

          if (this._additionsTail !== null) {
            this._additionsTail._nextAdded = null;
          }

          if (this._movesTail !== null) {
            this._movesTail._nextMoved = null;
          }

          if (this._itTail !== null) {
            this._itTail._next = null;
          }

          if (this._removalsTail !== null) {
            this._removalsTail._nextRemoved = null;
          }

          if (this._identityChangesTail !== null) {
            this._identityChangesTail._nextIdentityChange = null;
          }
        }
        /** @internal */

      }, {
        key: "_reinsertAfter",
        value: function _reinsertAfter(record, prevRecord, index) {
          if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.remove(record);
          }

          var prev = record._prevRemoved;
          var next = record._nextRemoved;

          if (prev === null) {
            this._removalsHead = next;
          } else {
            prev._nextRemoved = next;
          }

          if (next === null) {
            this._removalsTail = prev;
          } else {
            next._prevRemoved = prev;
          }

          this._insertAfter(record, prevRecord, index);

          this._addToMoves(record, index);

          return record;
        }
        /** @internal */

      }, {
        key: "_moveAfter",
        value: function _moveAfter(record, prevRecord, index) {
          this._unlink(record);

          this._insertAfter(record, prevRecord, index);

          this._addToMoves(record, index);

          return record;
        }
        /** @internal */

      }, {
        key: "_addAfter",
        value: function _addAfter(record, prevRecord, index) {
          this._insertAfter(record, prevRecord, index);

          if (this._additionsTail === null) {
            // TODO(vicb):
            // assert(this._additionsHead === null);
            this._additionsTail = this._additionsHead = record;
          } else {
            // TODO(vicb):
            // assert(_additionsTail._nextAdded === null);
            // assert(record._nextAdded === null);
            this._additionsTail = this._additionsTail._nextAdded = record;
          }

          return record;
        }
        /** @internal */

      }, {
        key: "_insertAfter",
        value: function _insertAfter(record, prevRecord, index) {
          // TODO(vicb):
          // assert(record != prevRecord);
          // assert(record._next === null);
          // assert(record._prev === null);
          var next = prevRecord === null ? this._itHead : prevRecord._next; // TODO(vicb):
          // assert(next != record);
          // assert(prevRecord != record);

          record._next = next;
          record._prev = prevRecord;

          if (next === null) {
            this._itTail = record;
          } else {
            next._prev = record;
          }

          if (prevRecord === null) {
            this._itHead = record;
          } else {
            prevRecord._next = record;
          }

          if (this._linkedRecords === null) {
            this._linkedRecords = new _DuplicateMap();
          }

          this._linkedRecords.put(record);

          record.currentIndex = index;
          return record;
        }
        /** @internal */

      }, {
        key: "_remove",
        value: function _remove(record) {
          return this._addToRemovals(this._unlink(record));
        }
        /** @internal */

      }, {
        key: "_unlink",
        value: function _unlink(record) {
          if (this._linkedRecords !== null) {
            this._linkedRecords.remove(record);
          }

          var prev = record._prev;
          var next = record._next; // TODO(vicb):
          // assert((record._prev = null) === null);
          // assert((record._next = null) === null);

          if (prev === null) {
            this._itHead = next;
          } else {
            prev._next = next;
          }

          if (next === null) {
            this._itTail = prev;
          } else {
            next._prev = prev;
          }

          return record;
        }
        /** @internal */

      }, {
        key: "_addToMoves",
        value: function _addToMoves(record, toIndex) {
          // TODO(vicb):
          // assert(record._nextMoved === null);
          if (record.previousIndex === toIndex) {
            return record;
          }

          if (this._movesTail === null) {
            // TODO(vicb):
            // assert(_movesHead === null);
            this._movesTail = this._movesHead = record;
          } else {
            // TODO(vicb):
            // assert(_movesTail._nextMoved === null);
            this._movesTail = this._movesTail._nextMoved = record;
          }

          return record;
        }
      }, {
        key: "_addToRemovals",
        value: function _addToRemovals(record) {
          if (this._unlinkedRecords === null) {
            this._unlinkedRecords = new _DuplicateMap();
          }

          this._unlinkedRecords.put(record);

          record.currentIndex = null;
          record._nextRemoved = null;

          if (this._removalsTail === null) {
            // TODO(vicb):
            // assert(_removalsHead === null);
            this._removalsTail = this._removalsHead = record;
            record._prevRemoved = null;
          } else {
            // TODO(vicb):
            // assert(_removalsTail._nextRemoved === null);
            // assert(record._nextRemoved === null);
            record._prevRemoved = this._removalsTail;
            this._removalsTail = this._removalsTail._nextRemoved = record;
          }

          return record;
        }
        /** @internal */

      }, {
        key: "_addIdentityChange",
        value: function _addIdentityChange(record, item) {
          record.item = item;

          if (this._identityChangesTail === null) {
            this._identityChangesTail = this._identityChangesHead = record;
          } else {
            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
          }

          return record;
        }
      }, {
        key: "isDirty",
        get: function get() {
          return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
        }
      }]);

      return DefaultIterableDiffer;
    }();

    var IterableChangeRecord_ = function IterableChangeRecord_(item, trackById) {
      _classCallCheck(this, IterableChangeRecord_);

      this.item = item;
      this.trackById = trackById;
      this.currentIndex = null;
      this.previousIndex = null;
      /** @internal */

      this._nextPrevious = null;
      /** @internal */

      this._prev = null;
      /** @internal */

      this._next = null;
      /** @internal */

      this._prevDup = null;
      /** @internal */

      this._nextDup = null;
      /** @internal */

      this._prevRemoved = null;
      /** @internal */

      this._nextRemoved = null;
      /** @internal */

      this._nextAdded = null;
      /** @internal */

      this._nextMoved = null;
      /** @internal */

      this._nextIdentityChange = null;
    }; // A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item


    var _DuplicateItemRecordList = /*#__PURE__*/function () {
      function _DuplicateItemRecordList() {
        _classCallCheck(this, _DuplicateItemRecordList);

        /** @internal */
        this._head = null;
        /** @internal */

        this._tail = null;
      }
      /**
       * Append the record to the list of duplicates.
       *
       * Note: by design all records in the list of duplicates hold the same value in record.item.
       */


      _createClass2(_DuplicateItemRecordList, [{
        key: "add",
        value: function add(record) {
          if (this._head === null) {
            this._head = this._tail = record;
            record._nextDup = null;
            record._prevDup = null;
          } else {
            // TODO(vicb):
            // assert(record.item ==  _head.item ||
            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
            this._tail._nextDup = record;
            record._prevDup = this._tail;
            record._nextDup = null;
            this._tail = record;
          }
        } // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and
        // IterableChangeRecord_.currentIndex >= atOrAfterIndex

      }, {
        key: "get",
        value: function get(trackById, atOrAfterIndex) {
          var record;

          for (record = this._head; record !== null; record = record._nextDup) {
            if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) && Object.is(record.trackById, trackById)) {
              return record;
            }
          }

          return null;
        }
        /**
         * Remove one {@link IterableChangeRecord_} from the list of duplicates.
         *
         * Returns whether the list of duplicates is empty.
         */

      }, {
        key: "remove",
        value: function remove(record) {
          // TODO(vicb):
          // assert(() {
          //  // verify that the record being removed is in the list.
          //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
          //    if (identical(cursor, record)) return true;
          //  }
          //  return false;
          //});
          var prev = record._prevDup;
          var next = record._nextDup;

          if (prev === null) {
            this._head = next;
          } else {
            prev._nextDup = next;
          }

          if (next === null) {
            this._tail = prev;
          } else {
            next._prevDup = prev;
          }

          return this._head === null;
        }
      }]);

      return _DuplicateItemRecordList;
    }();

    var _DuplicateMap = /*#__PURE__*/function () {
      function _DuplicateMap() {
        _classCallCheck(this, _DuplicateMap);

        this.map = new Map();
      }

      _createClass2(_DuplicateMap, [{
        key: "put",
        value: function put(record) {
          var key = record.trackById;
          var duplicates = this.map.get(key);

          if (!duplicates) {
            duplicates = new _DuplicateItemRecordList();
            this.map.set(key, duplicates);
          }

          duplicates.add(record);
        }
        /**
         * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
         * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
         *
         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
         * have any more `a`s needs to return the second `a`.
         */

      }, {
        key: "get",
        value: function get(trackById, atOrAfterIndex) {
          var key = trackById;
          var recordList = this.map.get(key);
          return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
        }
        /**
         * Removes a {@link IterableChangeRecord_} from the list of duplicates.
         *
         * The list of duplicates also is removed from the map if it gets empty.
         */

      }, {
        key: "remove",
        value: function remove(record) {
          var key = record.trackById;
          var recordList = this.map.get(key); // Remove the list of duplicates when it gets empty

          if (recordList.remove(record)) {
            this.map["delete"](key);
          }

          return record;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.map.clear();
        }
      }, {
        key: "isEmpty",
        get: function get() {
          return this.map.size === 0;
        }
      }]);

      return _DuplicateMap;
    }();

    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
      var previousIndex = item.previousIndex;
      if (previousIndex === null) return previousIndex;
      var moveOffset = 0;

      if (moveOffsets && previousIndex < moveOffsets.length) {
        moveOffset = moveOffsets[previousIndex];
      }

      return previousIndex + addRemoveOffset + moveOffset;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var DefaultKeyValueDifferFactory = /*#__PURE__*/function () {
      function DefaultKeyValueDifferFactory() {
        _classCallCheck(this, DefaultKeyValueDifferFactory);
      }

      _createClass2(DefaultKeyValueDifferFactory, [{
        key: "supports",
        value: function supports(obj) {
          return obj instanceof Map || isJsObject(obj);
        }
      }, {
        key: "create",
        value: function create() {
          return new DefaultKeyValueDiffer();
        }
      }]);

      return DefaultKeyValueDifferFactory;
    }();

    var DefaultKeyValueDiffer = /*#__PURE__*/function () {
      function DefaultKeyValueDiffer() {
        _classCallCheck(this, DefaultKeyValueDiffer);

        this._records = new Map();
        this._mapHead = null; // _appendAfter is used in the check loop

        this._appendAfter = null;
        this._previousMapHead = null;
        this._changesHead = null;
        this._changesTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
      }

      _createClass2(DefaultKeyValueDiffer, [{
        key: "forEachItem",
        value: function forEachItem(fn) {
          var record;

          for (record = this._mapHead; record !== null; record = record._next) {
            fn(record);
          }
        }
      }, {
        key: "forEachPreviousItem",
        value: function forEachPreviousItem(fn) {
          var record;

          for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            fn(record);
          }
        }
      }, {
        key: "forEachChangedItem",
        value: function forEachChangedItem(fn) {
          var record;

          for (record = this._changesHead; record !== null; record = record._nextChanged) {
            fn(record);
          }
        }
      }, {
        key: "forEachAddedItem",
        value: function forEachAddedItem(fn) {
          var record;

          for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
          }
        }
      }, {
        key: "forEachRemovedItem",
        value: function forEachRemovedItem(fn) {
          var record;

          for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
          }
        }
      }, {
        key: "diff",
        value: function diff(map) {
          if (!map) {
            map = new Map();
          } else if (!(map instanceof Map || isJsObject(map))) {
            throw new Error("Error trying to diff '".concat(stringify(map), "'. Only maps and objects are allowed"));
          }

          return this.check(map) ? this : null;
        }
      }, {
        key: "onDestroy",
        value: function onDestroy() {}
        /**
         * Check the current state of the map vs the previous.
         * The algorithm is optimised for when the keys do no change.
         */

      }, {
        key: "check",
        value: function check(map) {
          var _this25 = this;

          this._reset();

          var insertBefore = this._mapHead;
          this._appendAfter = null;

          this._forEach(map, function (value, key) {
            if (insertBefore && insertBefore.key === key) {
              _this25._maybeAddToChanges(insertBefore, value);

              _this25._appendAfter = insertBefore;
              insertBefore = insertBefore._next;
            } else {
              var record = _this25._getOrCreateRecordForKey(key, value);

              insertBefore = _this25._insertBeforeOrAppend(insertBefore, record);
            }
          }); // Items remaining at the end of the list have been deleted


          if (insertBefore) {
            if (insertBefore._prev) {
              insertBefore._prev._next = null;
            }

            this._removalsHead = insertBefore;

            for (var record = insertBefore; record !== null; record = record._nextRemoved) {
              if (record === this._mapHead) {
                this._mapHead = null;
              }

              this._records["delete"](record.key);

              record._nextRemoved = record._next;
              record.previousValue = record.currentValue;
              record.currentValue = null;
              record._prev = null;
              record._next = null;
            }
          } // Make sure tails have no next records from previous runs


          if (this._changesTail) this._changesTail._nextChanged = null;
          if (this._additionsTail) this._additionsTail._nextAdded = null;
          return this.isDirty;
        }
        /**
         * Inserts a record before `before` or append at the end of the list when `before` is null.
         *
         * Notes:
         * - This method appends at `this._appendAfter`,
         * - This method updates `this._appendAfter`,
         * - The return value is the new value for the insertion pointer.
         */

      }, {
        key: "_insertBeforeOrAppend",
        value: function _insertBeforeOrAppend(before, record) {
          if (before) {
            var prev = before._prev;
            record._next = before;
            record._prev = prev;
            before._prev = record;

            if (prev) {
              prev._next = record;
            }

            if (before === this._mapHead) {
              this._mapHead = record;
            }

            this._appendAfter = before;
            return before;
          }

          if (this._appendAfter) {
            this._appendAfter._next = record;
            record._prev = this._appendAfter;
          } else {
            this._mapHead = record;
          }

          this._appendAfter = record;
          return null;
        }
      }, {
        key: "_getOrCreateRecordForKey",
        value: function _getOrCreateRecordForKey(key, value) {
          if (this._records.has(key)) {
            var _record = this._records.get(key);

            this._maybeAddToChanges(_record, value);

            var prev = _record._prev;
            var next = _record._next;

            if (prev) {
              prev._next = next;
            }

            if (next) {
              next._prev = prev;
            }

            _record._next = null;
            _record._prev = null;
            return _record;
          }

          var record = new KeyValueChangeRecord_(key);

          this._records.set(key, record);

          record.currentValue = value;

          this._addToAdditions(record);

          return record;
        }
        /** @internal */

      }, {
        key: "_reset",
        value: function _reset() {
          if (this.isDirty) {
            var record; // let `_previousMapHead` contain the state of the map before the changes

            this._previousMapHead = this._mapHead;

            for (record = this._previousMapHead; record !== null; record = record._next) {
              record._nextPrevious = record._next;
            } // Update `record.previousValue` with the value of the item before the changes
            // We need to update all changed items (that's those which have been added and changed)


            for (record = this._changesHead; record !== null; record = record._nextChanged) {
              record.previousValue = record.currentValue;
            }

            for (record = this._additionsHead; record != null; record = record._nextAdded) {
              record.previousValue = record.currentValue;
            }

            this._changesHead = this._changesTail = null;
            this._additionsHead = this._additionsTail = null;
            this._removalsHead = null;
          }
        } // Add the record or a given key to the list of changes only when the value has actually changed

      }, {
        key: "_maybeAddToChanges",
        value: function _maybeAddToChanges(record, newValue) {
          if (!Object.is(newValue, record.currentValue)) {
            record.previousValue = record.currentValue;
            record.currentValue = newValue;

            this._addToChanges(record);
          }
        }
      }, {
        key: "_addToAdditions",
        value: function _addToAdditions(record) {
          if (this._additionsHead === null) {
            this._additionsHead = this._additionsTail = record;
          } else {
            this._additionsTail._nextAdded = record;
            this._additionsTail = record;
          }
        }
      }, {
        key: "_addToChanges",
        value: function _addToChanges(record) {
          if (this._changesHead === null) {
            this._changesHead = this._changesTail = record;
          } else {
            this._changesTail._nextChanged = record;
            this._changesTail = record;
          }
        }
        /** @internal */

      }, {
        key: "_forEach",
        value: function _forEach(obj, fn) {
          if (obj instanceof Map) {
            obj.forEach(fn);
          } else {
            Object.keys(obj).forEach(function (k) {
              return fn(obj[k], k);
            });
          }
        }
      }, {
        key: "isDirty",
        get: function get() {
          return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
        }
      }]);

      return DefaultKeyValueDiffer;
    }();

    var KeyValueChangeRecord_ = function KeyValueChangeRecord_(key) {
      _classCallCheck(this, KeyValueChangeRecord_);

      this.key = key;
      this.previousValue = null;
      this.currentValue = null;
      /** @internal */

      this._nextPrevious = null;
      /** @internal */

      this._next = null;
      /** @internal */

      this._prev = null;
      /** @internal */

      this._nextAdded = null;
      /** @internal */

      this._nextRemoved = null;
      /** @internal */

      this._nextChanged = null;
    };

    var IterableDiffers = /*@__PURE__*/function () {
      var IterableDiffers = /*#__PURE__*/function () {
        function IterableDiffers(factories) {
          _classCallCheck(this, IterableDiffers);

          this.factories = factories;
        }

        _createClass2(IterableDiffers, [{
          key: "find",
          value: function find(iterable) {
            var factory = this.factories.find(function (f) {
              return f.supports(iterable);
            });

            if (factory != null) {
              return factory;
            } else {
              throw new Error("Cannot find a differ supporting object '".concat(iterable, "' of type '").concat(getTypeNameForDebugging(iterable), "'"));
            }
          }
        }], [{
          key: "create",
          value: function create(factories, parent) {
            if (parent != null) {
              var copied = parent.factories.slice();
              factories = factories.concat(copied);
            }

            return new IterableDiffers(factories);
          }
          /**
           * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
           * inherited {@link IterableDiffers} instance with the provided factories and return a new
           * {@link IterableDiffers} instance.
           *
           * @usageNotes
           * ### Example
           *
           * The following example shows how to extend an existing list of factories,
           * which will only be applied to the injector for this component and its children.
           * This step is all that's required to make a new {@link IterableDiffer} available.
           *
           * ```
           * @Component({
           *   viewProviders: [
           *     IterableDiffers.extend([new ImmutableListDiffer()])
           *   ]
           * })
           * ```
           */

        }, {
          key: "extend",
          value: function extend(factories) {
            return {
              provide: IterableDiffers,
              useFactory: function useFactory(parent) {
                if (!parent) {
                  // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
                  // to
                  // bootstrap(), which would override default pipes instead of extending them.
                  throw new Error('Cannot extend IterableDiffers without a parent injector');
                }

                return IterableDiffers.create(factories, parent);
              },
              // Dependency technically isn't optional, but we can provide a better error message this way.
              deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
            };
          }
        }]);

        return IterableDiffers;
      }();
      /** @nocollapse */


      IterableDiffers.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
        token: IterableDiffers,
        providedIn: 'root',
        factory: function factory() {
          return new IterableDiffers([new DefaultIterableDifferFactory()]);
        }
      });
      return IterableDiffers;
    }();

    function getTypeNameForDebugging(type) {
      return type['name'] || typeof type;
    }

    var KeyValueDiffers = /*@__PURE__*/function () {
      var KeyValueDiffers = /*#__PURE__*/function () {
        function KeyValueDiffers(factories) {
          _classCallCheck(this, KeyValueDiffers);

          this.factories = factories;
        }

        _createClass2(KeyValueDiffers, [{
          key: "find",
          value: function find(kv) {
            var factory = this.factories.find(function (f) {
              return f.supports(kv);
            });

            if (factory) {
              return factory;
            }

            throw new Error("Cannot find a differ supporting object '".concat(kv, "'"));
          }
        }], [{
          key: "create",
          value: function create(factories, parent) {
            if (parent) {
              var copied = parent.factories.slice();
              factories = factories.concat(copied);
            }

            return new KeyValueDiffers(factories);
          }
          /**
           * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
           * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
           * {@link KeyValueDiffers} instance.
           *
           * @usageNotes
           * ### Example
           *
           * The following example shows how to extend an existing list of factories,
           * which will only be applied to the injector for this component and its children.
           * This step is all that's required to make a new {@link KeyValueDiffer} available.
           *
           * ```
           * @Component({
           *   viewProviders: [
           *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
           *   ]
           * })
           * ```
           */

        }, {
          key: "extend",
          value: function extend(factories) {
            return {
              provide: KeyValueDiffers,
              useFactory: function useFactory(parent) {
                if (!parent) {
                  // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
                  // to bootstrap(), which would override default pipes instead of extending them.
                  throw new Error('Cannot extend KeyValueDiffers without a parent injector');
                }

                return KeyValueDiffers.create(factories, parent);
              },
              // Dependency technically isn't optional, but we can provide a better error message this way.
              deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
            };
          }
        }]);

        return KeyValueDiffers;
      }();
      /** @nocollapse */


      KeyValueDiffers.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
        token: KeyValueDiffers,
        providedIn: 'root',
        factory: function factory() {
          return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);
        }
      });
      return KeyValueDiffers;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Structural diffing for `Object`s and `Map`s.
     */


    var keyValDiff = [/*@__PURE__*/new DefaultKeyValueDifferFactory()];
    /**
     * Structural diffing for `Iterable` types such as `Array`s.
     */

    var iterableDiff = [/*@__PURE__*/new DefaultIterableDifferFactory()];
    var defaultIterableDiffers = /*@__PURE__*/new IterableDiffers(iterableDiff);
    var defaultKeyValueDiffers = /*@__PURE__*/new KeyValueDiffers(keyValDiff);

    var TemplateRef = /*@__PURE__*/function () {
      var TemplateRef = function TemplateRef() {
        _classCallCheck(this, TemplateRef);
      };
      /**
       * @internal
       * @nocollapse
       */


      TemplateRef.__NG_ELEMENT_ID__ = function () {
        return SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef);
      };

      return TemplateRef;
    }();

    var SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = injectTemplateRef;
    var SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;
    var SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__POST_R3__;

    var ViewContainerRef = /*@__PURE__*/function () {
      var ViewContainerRef = function ViewContainerRef() {
        _classCallCheck(this, ViewContainerRef);
      };
      /**
       * @internal
       * @nocollapse
       */


      ViewContainerRef.__NG_ELEMENT_ID__ = function () {
        return SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef);
      };

      return ViewContainerRef;
    }();

    var SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = injectViewContainerRef;
    var SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;
    var SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
      var msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '".concat(oldValue, "'. Current value: '").concat(currValue, "'.");

      if (isFirstCheck) {
        msg += " It seems like the view has been created after its parent and its children have been dirty checked." + " Has it been created in a change detection hook ?";
      }

      return viewDebugError(msg, context);
    }

    function viewWrappedDebugError(err, context) {
      if (!(err instanceof Error)) {
        // errors that are not Error instances don't have a stack,
        // so it is ok to wrap them into a new Error object...
        err = new Error(err.toString());
      }

      _addDebugContext(err, context);

      return err;
    }

    function viewDebugError(msg, context) {
      var err = new Error(msg);

      _addDebugContext(err, context);

      return err;
    }

    function _addDebugContext(err, context) {
      err[ERROR_DEBUG_CONTEXT] = context;
      err[ERROR_LOGGER] = context.logError.bind(context);
    }

    function isViewDebugError(err) {
      return !!getDebugContext(err);
    }

    function viewDestroyedError(action) {
      return new Error("ViewDestroyedError: Attempt to use a destroyed view: ".concat(action));
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // Called before each cycle of a view's check to detect whether this is in the
    // initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit
    // lifecycle methods. Returns true if this check cycle should call lifecycle
    // methods.


    function shiftInitState(view, priorInitState, newInitState) {
      // Only update the InitState if we are currently in the prior state.
      // For example, only move into CallingInit if we are in BeforeInit. Only
      // move into CallingContentInit if we are in CallingInit. Normally this will
      // always be true because of how checkCycle is called in checkAndUpdateView.
      // However, if checkAndUpdateView is called recursively or if an exception is
      // thrown while checkAndUpdateView is running, checkAndUpdateView starts over
      // from the beginning. This ensures the state is monotonically increasing,
      // terminating in the AfterInit state, which ensures the Init methods are called
      // at least once and only once.
      var state = view.state;
      var initState = state & 1792
      /* InitState_Mask */
      ;

      if (initState === priorInitState) {
        view.state = state & ~1792
        /* InitState_Mask */
        | newInitState;
        view.initIndex = -1;
        return true;
      }

      return initState === newInitState;
    } // Returns true if the lifecycle init method should be called for the node with
    // the given init index.


    function shouldCallLifecycleInitHook(view, initState, index) {
      if ((view.state & 1792
      /* InitState_Mask */
      ) === initState && view.initIndex <= index) {
        view.initIndex = index + 1;
        return true;
      }

      return false;
    }
    /**
     * Node instance data.
     *
     * We have a separate type per NodeType to save memory
     * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)
     *
     * To keep our code monomorphic,
     * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).
     * This way, no usage site can get a `NodeData` from view.nodes and then use it for different
     * purposes.
     */


    var NodeData = function NodeData() {
      _classCallCheck(this, NodeData);
    };
    /**
     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
     */


    function asTextData(view, index) {
      return view.nodes[index];
    }
    /**
     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
     */


    function asElementData(view, index) {
      return view.nodes[index];
    }
    /**
     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
     */


    function asProviderData(view, index) {
      return view.nodes[index];
    }
    /**
     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
     */


    function asPureExpressionData(view, index) {
      return view.nodes[index];
    }
    /**
     * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
     */


    function asQueryList(view, index) {
      return view.nodes[index];
    }

    var DebugContext = function DebugContext() {
      _classCallCheck(this, DebugContext);
    };
    /**
     * This object is used to prevent cycles in the source files and to have a place where
     * debug mode can hook it. It is lazily filled when `isDevMode` is known.
     */


    var Services = {
      setCurrentNode: undefined,
      createRootView: undefined,
      createEmbeddedView: undefined,
      createComponentView: undefined,
      createNgModuleRef: undefined,
      overrideProvider: undefined,
      overrideComponentView: undefined,
      clearOverrides: undefined,
      checkAndUpdateView: undefined,
      checkNoChangesView: undefined,
      destroyView: undefined,
      resolveDep: undefined,
      createDebugContext: undefined,
      handleEvent: undefined,
      updateDirectives: undefined,
      updateRenderer: undefined,
      dirtyParentQueries: undefined
    };
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    var NOOP = function NOOP() {};

    var _tokenKeyCache = /*@__PURE__*/new Map();

    function tokenKey(token) {
      var key = _tokenKeyCache.get(token);

      if (!key) {
        key = stringify(token) + '_' + _tokenKeyCache.size;

        _tokenKeyCache.set(token, key);
      }

      return key;
    }

    function unwrapValue(view, nodeIdx, bindingIdx, value) {
      if (WrappedValue.isWrapped(value)) {
        value = WrappedValue.unwrap(value);
        var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;
        var oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);
        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);
      }

      return value;
    }

    var UNDEFINED_RENDERER_TYPE_ID = '$$undefined';
    var EMPTY_RENDERER_TYPE_ID = '$$empty'; // Attention: this function is called as top level function.
    // Putting any logic in here will destroy closure tree shaking!

    function createRendererType2(values) {
      return {
        id: UNDEFINED_RENDERER_TYPE_ID,
        styles: values.styles,
        encapsulation: values.encapsulation,
        data: values.data
      };
    }

    var _renderCompCount$1 = 0;

    function resolveRendererType2(type) {
      if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {
        // first time we see this RendererType2. Initialize it...
        var isFilled = type.encapsulation != null && type.encapsulation !== ViewEncapsulation$1.None || type.styles.length || Object.keys(type.data).length;

        if (isFilled) {
          type.id = "c".concat(_renderCompCount$1++);
        } else {
          type.id = EMPTY_RENDERER_TYPE_ID;
        }
      }

      if (type && type.id === EMPTY_RENDERER_TYPE_ID) {
        type = null;
      }

      return type || null;
    }

    function checkBinding(view, def, bindingIdx, value) {
      var oldValues = view.oldValues;

      if (view.state & 2
      /* FirstCheck */
      || !Object.is(oldValues[def.bindingIndex + bindingIdx], value)) {
        return true;
      }

      return false;
    }

    function checkAndUpdateBinding(view, def, bindingIdx, value) {
      if (checkBinding(view, def, bindingIdx, value)) {
        view.oldValues[def.bindingIndex + bindingIdx] = value;
        return true;
      }

      return false;
    }

    function checkBindingNoChanges(view, def, bindingIdx, value) {
      var oldValue = view.oldValues[def.bindingIndex + bindingIdx];

      if (view.state & 1
      /* BeforeFirstCheck */
      || !devModeEqual(oldValue, value)) {
        var bindingName = def.bindings[bindingIdx].name;
        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), "".concat(bindingName, ": ").concat(oldValue), "".concat(bindingName, ": ").concat(value), (view.state & 1
        /* BeforeFirstCheck */
        ) !== 0);
      }
    }

    function markParentViewsForCheck(view) {
      var currView = view;

      while (currView) {
        if (currView.def.flags & 2
        /* OnPush */
        ) {
            currView.state |= 8
            /* ChecksEnabled */
            ;
          }

        currView = currView.viewContainerParent || currView.parent;
      }
    }

    function markParentViewsForCheckProjectedViews(view, endView) {
      var currView = view;

      while (currView && currView !== endView) {
        currView.state |= 64
        /* CheckProjectedViews */
        ;
        currView = currView.viewContainerParent || currView.parent;
      }
    }

    function dispatchEvent(view, nodeIndex, eventName, event) {
      try {
        var nodeDef = view.def.nodes[nodeIndex];
        var startView = nodeDef.flags & 33554432
        /* ComponentView */
        ? asElementData(view, nodeIndex).componentView : view;
        markParentViewsForCheck(startView);
        return Services.handleEvent(view, nodeIndex, eventName, event);
      } catch (e) {
        // Attention: Don't rethrow, as it would cancel Observable subscriptions!
        view.root.errorHandler.handleError(e);
      }
    }

    function declaredViewContainer(view) {
      if (view.parent) {
        var parentView = view.parent;
        return asElementData(parentView, view.parentNodeDef.nodeIndex);
      }

      return null;
    }
    /**
     * for component views, this is the host element.
     * for embedded views, this is the index of the parent node
     * that contains the view container.
     */


    function viewParentEl(view) {
      var parentView = view.parent;

      if (parentView) {
        return view.parentNodeDef.parent;
      } else {
        return null;
      }
    }

    function renderNode(view, def) {
      switch (def.flags & 201347067
      /* Types */
      ) {
        case 1
        /* TypeElement */
        :
          return asElementData(view, def.nodeIndex).renderElement;

        case 2
        /* TypeText */
        :
          return asTextData(view, def.nodeIndex).renderText;
      }
    }

    function elementEventFullName(target, name) {
      return target ? "".concat(target, ":").concat(name) : name;
    }

    function isComponentView(view) {
      return !!view.parent && !!(view.parentNodeDef.flags & 32768
      /* Component */
      );
    }

    function isEmbeddedView(view) {
      return !!view.parent && !(view.parentNodeDef.flags & 32768
      /* Component */
      );
    }

    function filterQueryId(queryId) {
      return 1 << queryId % 32;
    }

    function splitMatchedQueriesDsl(matchedQueriesDsl) {
      var matchedQueries = {};
      var matchedQueryIds = 0;
      var references = {};

      if (matchedQueriesDsl) {
        matchedQueriesDsl.forEach(function (_ref4) {
          var _ref5 = _slicedToArray(_ref4, 2),
              queryId = _ref5[0],
              valueType = _ref5[1];

          if (typeof queryId === 'number') {
            matchedQueries[queryId] = valueType;
            matchedQueryIds |= filterQueryId(queryId);
          } else {
            references[queryId] = valueType;
          }
        });
      }

      return {
        matchedQueries: matchedQueries,
        references: references,
        matchedQueryIds: matchedQueryIds
      };
    }

    function splitDepsDsl(deps, sourceName) {
      return deps.map(function (value) {
        var token;
        var flags;

        if (Array.isArray(value)) {
          var _value2 = _slicedToArray(value, 2);

          flags = _value2[0];
          token = _value2[1];
        } else {
          flags = 0
          /* None */
          ;
          token = value;
        }

        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {
          Object.defineProperty(token, SOURCE, {
            value: sourceName,
            configurable: true
          });
        }

        return {
          flags: flags,
          token: token,
          tokenKey: tokenKey(token)
        };
      });
    }

    function getParentRenderElement(view, renderHost, def) {
      var renderParent = def.renderParent;

      if (renderParent) {
        if ((renderParent.flags & 1
        /* TypeElement */
        ) === 0 || (renderParent.flags & 33554432
        /* ComponentView */
        ) === 0 || renderParent.element.componentRendererType && renderParent.element.componentRendererType.encapsulation === ViewEncapsulation$1.Native) {
          // only children of non components, or children of components with native encapsulation should
          // be attached.
          return asElementData(view, def.renderParent.nodeIndex).renderElement;
        }
      } else {
        return renderHost;
      }
    }

    var DEFINITION_CACHE = /*@__PURE__*/new WeakMap();

    function resolveDefinition(factory) {
      var value = DEFINITION_CACHE.get(factory);

      if (!value) {
        value = factory(function () {
          return NOOP;
        });
        value.factory = factory;
        DEFINITION_CACHE.set(factory, value);
      }

      return value;
    }

    function rootRenderNodes(view) {
      var renderNodes = [];
      visitRootRenderNodes(view, 0
      /* Collect */
      , undefined, undefined, renderNodes);
      return renderNodes;
    }

    function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
      // We need to re-compute the parent node in case the nodes have been moved around manually
      if (action === 3
      /* RemoveChild */
      ) {
          parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));
        }

      visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
    }

    function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
      for (var i = startIndex; i <= endIndex; i++) {
        var nodeDef = view.def.nodes[i];

        if (nodeDef.flags & (1
        /* TypeElement */
        | 2
        /* TypeText */
        | 8
        /* TypeNgContent */
        )) {
          visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
        } // jump to next sibling


        i += nodeDef.childCount;
      }
    }

    function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
      var compView = view;

      while (compView && !isComponentView(compView)) {
        compView = compView.parent;
      }

      var hostView = compView.parent;
      var hostElDef = viewParentEl(compView);
      var startIndex = hostElDef.nodeIndex + 1;
      var endIndex = hostElDef.nodeIndex + hostElDef.childCount;

      for (var i = startIndex; i <= endIndex; i++) {
        var nodeDef = hostView.def.nodes[i];

        if (nodeDef.ngContentIndex === ngContentIndex) {
          visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);
        } // jump to next sibling


        i += nodeDef.childCount;
      }

      if (!hostView.parent) {
        // a root view
        var projectedNodes = view.root.projectableNodes[ngContentIndex];

        if (projectedNodes) {
          for (var _i8 = 0; _i8 < projectedNodes.length; _i8++) {
            execRenderNodeAction(view, projectedNodes[_i8], action, parentNode, nextSibling, target);
          }
        }
      }
    }

    function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
      if (nodeDef.flags & 8
      /* TypeNgContent */
      ) {
          visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);
        } else {
        var rn = renderNode(view, nodeDef);

        if (action === 3
        /* RemoveChild */
        && nodeDef.flags & 33554432
        /* ComponentView */
        && nodeDef.bindingFlags & 48
        /* CatSyntheticProperty */
        ) {
          // Note: we might need to do both actions.
          if (nodeDef.bindingFlags & 16
          /* SyntheticProperty */
          ) {
            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
          }

          if (nodeDef.bindingFlags & 32
          /* SyntheticHostProperty */
          ) {
            var compView = asElementData(view, nodeDef.nodeIndex).componentView;
            execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);
          }
        } else {
          execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
        }

        if (nodeDef.flags & 16777216
        /* EmbeddedViews */
        ) {
            var embeddedViews = asElementData(view, nodeDef.nodeIndex).viewContainer._embeddedViews;

            for (var k = 0; k < embeddedViews.length; k++) {
              visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
            }
          }

        if (nodeDef.flags & 1
        /* TypeElement */
        && !nodeDef.element.name) {
          visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);
        }
      }
    }

    function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
      var renderer = view.renderer;

      switch (action) {
        case 1
        /* AppendChild */
        :
          renderer.appendChild(parentNode, renderNode);
          break;

        case 2
        /* InsertBefore */
        :
          renderer.insertBefore(parentNode, renderNode, nextSibling);
          break;

        case 3
        /* RemoveChild */
        :
          renderer.removeChild(parentNode, renderNode);
          break;

        case 0
        /* Collect */
        :
          target.push(renderNode);
          break;
      }
    }

    var NS_PREFIX_RE = /^:([^:]+):(.+)$/;

    function splitNamespace(name) {
      if (name[0] === ':') {
        var match = name.match(NS_PREFIX_RE);
        return [match[1], match[2]];
      }

      return ['', name];
    }

    function calcBindingFlags(bindings) {
      var flags = 0;

      for (var i = 0; i < bindings.length; i++) {
        flags |= bindings[i].flags;
      }

      return flags;
    }

    function interpolate(valueCount, constAndInterp) {
      var result = '';

      for (var i = 0; i < valueCount * 2; i = i + 2) {
        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
      }

      return result + constAndInterp[valueCount * 2];
    }

    function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
      switch (valueCount) {
        case 1:
          return c0 + _toStringWithNull(a1) + c1;

        case 2:
          return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;

        case 3:
          return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;

        case 4:
          return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;

        case 5:
          return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;

        case 6:
          return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;

        case 7:
          return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;

        case 8:
          return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;

        case 9:
          return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;

        default:
          throw new Error("Does not support more than 9 expressions");
      }
    }

    function _toStringWithNull(v) {
      return v != null ? v.toString() : '';
    }

    var EMPTY_ARRAY$4 = [];
    var EMPTY_MAP = {};
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    var UNDEFINED_VALUE = {};
    var InjectorRefTokenKey = /*@__PURE__*/tokenKey(Injector);
    var INJECTORRefTokenKey = /*@__PURE__*/tokenKey(INJECTOR);
    var NgModuleRefTokenKey = /*@__PURE__*/tokenKey(NgModuleRef);

    function moduleProvideDef(flags, token, value, deps) {
      // Need to resolve forwardRefs as e.g. for `useValue` we
      // lowered the expression and then stopped evaluating it,
      // i.e. also didn't unwrap it.
      value = resolveForwardRef(value);
      var depDefs = splitDepsDsl(deps, stringify(token));
      return {
        // will bet set by the module definition
        index: -1,
        deps: depDefs,
        flags: flags,
        token: token,
        value: value
      };
    }

    function moduleDef(providers) {
      var providersByKey = {};
      var modules = [];
      var scope = null;

      for (var i = 0; i < providers.length; i++) {
        var provider = providers[i];

        if (provider.token === INJECTOR_SCOPE) {
          scope = provider.value;
        }

        if (provider.flags & 1073741824
        /* TypeNgModule */
        ) {
            modules.push(provider.token);
          }

        provider.index = i;
        providersByKey[tokenKey(provider.token)] = provider;
      }

      return {
        // Will be filled later...
        factory: null,
        providersByKey: providersByKey,
        providers: providers,
        modules: modules,
        scope: scope
      };
    }

    function initNgModule(data) {
      var def = data._def;
      var providers = data._providers = newArray(def.providers.length);

      for (var i = 0; i < def.providers.length; i++) {
        var provDef = def.providers[i];

        if (!(provDef.flags & 4096
        /* LazyProvider */
        )) {
          // Make sure the provider has not been already initialized outside this loop.
          if (providers[i] === undefined) {
            providers[i] = _createProviderInstance(data, provDef);
          }
        }
      }
    }

    function resolveNgModuleDep(data, depDef) {
      var notFoundValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Injector.THROW_IF_NOT_FOUND;
      var former = setCurrentInjector(data);

      try {
        if (depDef.flags & 8
        /* Value */
        ) {
            return depDef.token;
          }

        if (depDef.flags & 2
        /* Optional */
        ) {
            notFoundValue = null;
          }

        if (depDef.flags & 1
        /* SkipSelf */
        ) {
            return data._parent.get(depDef.token, notFoundValue);
          }

        var _tokenKey = depDef.tokenKey;

        switch (_tokenKey) {
          case InjectorRefTokenKey:
          case INJECTORRefTokenKey:
          case NgModuleRefTokenKey:
            return data;
        }

        var _providerDef = data._def.providersByKey[_tokenKey];
        var injectableDef;

        if (_providerDef) {
          var providerInstance = data._providers[_providerDef.index];

          if (providerInstance === undefined) {
            providerInstance = data._providers[_providerDef.index] = _createProviderInstance(data, _providerDef);
          }

          return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;
        } else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {
          var index = data._providers.length;
          data._def.providers[index] = data._def.providersByKey[depDef.tokenKey] = {
            flags: 1024
            /* TypeFactoryProvider */
            | 4096
            /* LazyProvider */
            ,
            value: injectableDef.factory,
            deps: [],
            index: index,
            token: depDef.token
          };
          data._providers[index] = UNDEFINED_VALUE;
          return data._providers[index] = _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]);
        } else if (depDef.flags & 4
        /* Self */
        ) {
            return notFoundValue;
          }

        return data._parent.get(depDef.token, notFoundValue);
      } finally {
        setCurrentInjector(former);
      }
    }

    function moduleTransitivelyPresent(ngModule, scope) {
      return ngModule._def.modules.indexOf(scope) > -1;
    }

    function targetsModule(ngModule, def) {
      var providedIn = def.providedIn;
      return providedIn != null && (providedIn === 'any' || providedIn === ngModule._def.scope || moduleTransitivelyPresent(ngModule, providedIn));
    }

    function _createProviderInstance(ngModule, providerDef) {
      var injectable;

      switch (providerDef.flags & 201347067
      /* Types */
      ) {
        case 512
        /* TypeClassProvider */
        :
          injectable = _createClass(ngModule, providerDef.value, providerDef.deps);
          break;

        case 1024
        /* TypeFactoryProvider */
        :
          injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);
          break;

        case 2048
        /* TypeUseExistingProvider */
        :
          injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);
          break;

        case 256
        /* TypeValueProvider */
        :
          injectable = providerDef.value;
          break;
      } // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be
      // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be
      // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already
      // set (ngOnDestroy was detected statically).


      if (injectable !== UNDEFINED_VALUE && injectable !== null && typeof injectable === 'object' && !(providerDef.flags & 131072
      /* OnDestroy */
      ) && typeof injectable.ngOnDestroy === 'function') {
        providerDef.flags |= 131072
        /* OnDestroy */
        ;
      }

      return injectable === undefined ? UNDEFINED_VALUE : injectable;
    }

    function _createClass(ngModule, ctor, deps) {
      var len = deps.length;

      switch (len) {
        case 0:
          return new ctor();

        case 1:
          return new ctor(resolveNgModuleDep(ngModule, deps[0]));

        case 2:
          return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));

        case 3:
          return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));

        default:
          var depValues = [];

          for (var i = 0; i < len; i++) {
            depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
          }

          return _construct(ctor, depValues);
      }
    }

    function _callFactory(ngModule, factory, deps) {
      var len = deps.length;

      switch (len) {
        case 0:
          return factory();

        case 1:
          return factory(resolveNgModuleDep(ngModule, deps[0]));

        case 2:
          return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));

        case 3:
          return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));

        default:
          var depValues = [];

          for (var i = 0; i < len; i++) {
            depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
          }

          return factory.apply(void 0, depValues);
      }
    }

    function callNgModuleLifecycle(ngModule, lifecycles) {
      var def = ngModule._def;
      var destroyed = new Set();

      for (var i = 0; i < def.providers.length; i++) {
        var provDef = def.providers[i];

        if (provDef.flags & 131072
        /* OnDestroy */
        ) {
            var instance = ngModule._providers[i];

            if (instance && instance !== UNDEFINED_VALUE) {
              var onDestroy = instance.ngOnDestroy;

              if (typeof onDestroy === 'function' && !destroyed.has(instance)) {
                onDestroy.apply(instance);
                destroyed.add(instance);
              }
            }
          }
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function attachEmbeddedView(parentView, elementData, viewIndex, view) {
      var embeddedViews = elementData.viewContainer._embeddedViews;

      if (viewIndex === null || viewIndex === undefined) {
        viewIndex = embeddedViews.length;
      }

      view.viewContainerParent = parentView;
      addToArray(embeddedViews, viewIndex, view);
      attachProjectedView(elementData, view);
      Services.dirtyParentQueries(view);
      var prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;
      renderAttachEmbeddedView(elementData, prevView, view);
    }

    function attachProjectedView(vcElementData, view) {
      var dvcElementData = declaredViewContainer(view);

      if (!dvcElementData || dvcElementData === vcElementData || view.state & 16
      /* IsProjectedView */
      ) {
          return;
        } // Note: For performance reasons, we
      // - add a view to template._projectedViews only 1x throughout its lifetime,
      //   and remove it not until the view is destroyed.
      //   (hard, as when a parent view is attached/detached we would need to attach/detach all
      //    nested projected views as well, even across component boundaries).
      // - don't track the insertion order of views in the projected views array
      //   (hard, as when the views of the same template are inserted different view containers)


      view.state |= 16
      /* IsProjectedView */
      ;
      var projectedViews = dvcElementData.template._projectedViews;

      if (!projectedViews) {
        projectedViews = dvcElementData.template._projectedViews = [];
      }

      projectedViews.push(view); // Note: we are changing the NodeDef here as we cannot calculate
      // the fact whether a template is used for projection during compilation.

      markNodeAsProjectedTemplate(view.parent.def, view.parentNodeDef);
    }

    function markNodeAsProjectedTemplate(viewDef, nodeDef) {
      if (nodeDef.flags & 4
      /* ProjectedTemplate */
      ) {
          return;
        }

      viewDef.nodeFlags |= 4
      /* ProjectedTemplate */
      ;
      nodeDef.flags |= 4
      /* ProjectedTemplate */
      ;
      var parentNodeDef = nodeDef.parent;

      while (parentNodeDef) {
        parentNodeDef.childFlags |= 4
        /* ProjectedTemplate */
        ;
        parentNodeDef = parentNodeDef.parent;
      }
    }

    function detachEmbeddedView(elementData, viewIndex) {
      var embeddedViews = elementData.viewContainer._embeddedViews;

      if (viewIndex == null || viewIndex >= embeddedViews.length) {
        viewIndex = embeddedViews.length - 1;
      }

      if (viewIndex < 0) {
        return null;
      }

      var view = embeddedViews[viewIndex];
      view.viewContainerParent = null;
      removeFromArray(embeddedViews, viewIndex); // See attachProjectedView for why we don't update projectedViews here.

      Services.dirtyParentQueries(view);
      renderDetachView$1(view);
      return view;
    }

    function detachProjectedView(view) {
      if (!(view.state & 16
      /* IsProjectedView */
      )) {
        return;
      }

      var dvcElementData = declaredViewContainer(view);

      if (dvcElementData) {
        var projectedViews = dvcElementData.template._projectedViews;

        if (projectedViews) {
          removeFromArray(projectedViews, projectedViews.indexOf(view));
          Services.dirtyParentQueries(view);
        }
      }
    }

    function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
      var embeddedViews = elementData.viewContainer._embeddedViews;
      var view = embeddedViews[oldViewIndex];
      removeFromArray(embeddedViews, oldViewIndex);

      if (newViewIndex == null) {
        newViewIndex = embeddedViews.length;
      }

      addToArray(embeddedViews, newViewIndex, view); // Note: Don't need to change projectedViews as the order in there
      // as always invalid...

      Services.dirtyParentQueries(view);
      renderDetachView$1(view);
      var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
      renderAttachEmbeddedView(elementData, prevView, view);
      return view;
    }

    function renderAttachEmbeddedView(elementData, prevView, view) {
      var prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) : elementData.renderElement;
      var parentNode = view.renderer.parentNode(prevRenderNode);
      var nextSibling = view.renderer.nextSibling(prevRenderNode); // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!
      // However, browsers automatically do `appendChild` when there is no `nextSibling`.

      visitRootRenderNodes(view, 2
      /* InsertBefore */
      , parentNode, nextSibling, undefined);
    }

    function renderDetachView$1(view) {
      visitRootRenderNodes(view, 3
      /* RemoveChild */
      , null, null, undefined);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var EMPTY_CONTEXT = {}; // Attention: this function is called as top level function.
    // Putting any logic in here will destroy closure tree shaking!

    function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {
      return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);
    }

    function getComponentViewDefinitionFactory(componentFactory) {
      return componentFactory.viewDefFactory;
    }

    var ComponentFactory_ = /*#__PURE__*/function (_ComponentFactory2) {
      _inherits(ComponentFactory_, _ComponentFactory2);

      var _super15 = _createSuper(ComponentFactory_);

      function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {
        var _this26;

        _classCallCheck(this, ComponentFactory_);

        // Attention: this ctor is called as top level function.
        // Putting any logic in here will destroy closure tree shaking!
        _this26 = _super15.call(this);
        _this26.selector = selector;
        _this26.componentType = componentType;
        _this26._inputs = _inputs;
        _this26._outputs = _outputs;
        _this26.ngContentSelectors = ngContentSelectors;
        _this26.viewDefFactory = viewDefFactory;
        return _this26;
      }

      _createClass2(ComponentFactory_, [{
        key: "create",

        /**
         * Creates a new component.
         */
        value: function create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
          if (!ngModule) {
            throw new Error('ngModule should be provided');
          }

          var viewDef = resolveDefinition(this.viewDefFactory);
          var componentNodeIndex = viewDef.nodes[0].element.componentProvider.nodeIndex;
          var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);
          var component = asProviderData(view, componentNodeIndex).instance;

          if (rootSelectorOrNode) {
            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);
          }

          return new ComponentRef_(view, new ViewRef_(view), component);
        }
      }, {
        key: "inputs",
        get: function get() {
          var inputsArr = [];
          var inputs = this._inputs;

          for (var propName in inputs) {
            var templateName = inputs[propName];
            inputsArr.push({
              propName: propName,
              templateName: templateName
            });
          }

          return inputsArr;
        }
      }, {
        key: "outputs",
        get: function get() {
          var outputsArr = [];

          for (var propName in this._outputs) {
            var templateName = this._outputs[propName];
            outputsArr.push({
              propName: propName,
              templateName: templateName
            });
          }

          return outputsArr;
        }
      }]);

      return ComponentFactory_;
    }(ComponentFactory);

    var ComponentRef_ = /*#__PURE__*/function (_ComponentRef) {
      _inherits(ComponentRef_, _ComponentRef);

      var _super16 = _createSuper(ComponentRef_);

      function ComponentRef_(_view, _viewRef, _component) {
        var _this27;

        _classCallCheck(this, ComponentRef_);

        _this27 = _super16.call(this);
        _this27._view = _view;
        _this27._viewRef = _viewRef;
        _this27._component = _component;
        _this27._elDef = _this27._view.def.nodes[0];
        _this27.hostView = _viewRef;
        _this27.changeDetectorRef = _viewRef;
        _this27.instance = _component;
        return _this27;
      }

      _createClass2(ComponentRef_, [{
        key: "destroy",
        value: function destroy() {
          this._viewRef.destroy();
        }
      }, {
        key: "onDestroy",
        value: function onDestroy(callback) {
          this._viewRef.onDestroy(callback);
        }
      }, {
        key: "location",
        get: function get() {
          return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);
        }
      }, {
        key: "injector",
        get: function get() {
          return new Injector_(this._view, this._elDef);
        }
      }, {
        key: "componentType",
        get: function get() {
          return this._component.constructor;
        }
      }]);

      return ComponentRef_;
    }(ComponentRef);

    function createViewContainerData(view, elDef, elData) {
      return new ViewContainerRef_(view, elDef, elData);
    }

    var ViewContainerRef_ = /*#__PURE__*/function () {
      function ViewContainerRef_(_view, _elDef, _data) {
        _classCallCheck(this, ViewContainerRef_);

        this._view = _view;
        this._elDef = _elDef;
        this._data = _data;
        /**
         * @internal
         */

        this._embeddedViews = [];
      }

      _createClass2(ViewContainerRef_, [{
        key: "clear",
        value: function clear() {
          var len = this._embeddedViews.length;

          for (var i = len - 1; i >= 0; i--) {
            var view = detachEmbeddedView(this._data, i);
            Services.destroyView(view);
          }
        }
      }, {
        key: "get",
        value: function get(index) {
          var view = this._embeddedViews[index];

          if (view) {
            var ref = new ViewRef_(view);
            ref.attachToViewContainerRef(this);
            return ref;
          }

          return null;
        }
      }, {
        key: "createEmbeddedView",
        value: function createEmbeddedView(templateRef, context, index) {
          var viewRef = templateRef.createEmbeddedView(context || {});
          this.insert(viewRef, index);
          return viewRef;
        }
      }, {
        key: "createComponent",
        value: function createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {
          var contextInjector = injector || this.parentInjector;

          if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {
            ngModuleRef = contextInjector.get(NgModuleRef);
          }

          var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
          this.insert(componentRef.hostView, index);
          return componentRef;
        }
      }, {
        key: "insert",
        value: function insert(viewRef, index) {
          if (viewRef.destroyed) {
            throw new Error('Cannot insert a destroyed View in a ViewContainer!');
          }

          var viewRef_ = viewRef;
          var viewData = viewRef_._view;
          attachEmbeddedView(this._view, this._data, index, viewData);
          viewRef_.attachToViewContainerRef(this);
          return viewRef;
        }
      }, {
        key: "move",
        value: function move(viewRef, currentIndex) {
          if (viewRef.destroyed) {
            throw new Error('Cannot move a destroyed View in a ViewContainer!');
          }

          var previousIndex = this._embeddedViews.indexOf(viewRef._view);

          moveEmbeddedView(this._data, previousIndex, currentIndex);
          return viewRef;
        }
      }, {
        key: "indexOf",
        value: function indexOf(viewRef) {
          return this._embeddedViews.indexOf(viewRef._view);
        }
      }, {
        key: "remove",
        value: function remove(index) {
          var viewData = detachEmbeddedView(this._data, index);

          if (viewData) {
            Services.destroyView(viewData);
          }
        }
      }, {
        key: "detach",
        value: function detach(index) {
          var view = detachEmbeddedView(this._data, index);
          return view ? new ViewRef_(view) : null;
        }
      }, {
        key: "element",
        get: function get() {
          return new ElementRef(this._data.renderElement);
        }
      }, {
        key: "injector",
        get: function get() {
          return new Injector_(this._view, this._elDef);
        }
        /** @deprecated No replacement */

      }, {
        key: "parentInjector",
        get: function get() {
          var view = this._view;
          var elDef = this._elDef.parent;

          while (!elDef && view) {
            elDef = viewParentEl(view);
            view = view.parent;
          }

          return view ? new Injector_(view, elDef) : new Injector_(this._view, null);
        }
      }, {
        key: "length",
        get: function get() {
          return this._embeddedViews.length;
        }
      }]);

      return ViewContainerRef_;
    }();

    function createChangeDetectorRef(view) {
      return new ViewRef_(view);
    }

    var ViewRef_ = /*#__PURE__*/function () {
      function ViewRef_(_view) {
        _classCallCheck(this, ViewRef_);

        this._view = _view;
        this._viewContainerRef = null;
        this._appRef = null;
      }

      _createClass2(ViewRef_, [{
        key: "markForCheck",
        value: function markForCheck() {
          markParentViewsForCheck(this._view);
        }
      }, {
        key: "detach",
        value: function detach() {
          this._view.state &= ~4
          /* Attached */
          ;
        }
      }, {
        key: "detectChanges",
        value: function detectChanges() {
          var fs = this._view.root.rendererFactory;

          if (fs.begin) {
            fs.begin();
          }

          try {
            Services.checkAndUpdateView(this._view);
          } finally {
            if (fs.end) {
              fs.end();
            }
          }
        }
      }, {
        key: "checkNoChanges",
        value: function checkNoChanges() {
          Services.checkNoChangesView(this._view);
        }
      }, {
        key: "reattach",
        value: function reattach() {
          this._view.state |= 4
          /* Attached */
          ;
        }
      }, {
        key: "onDestroy",
        value: function onDestroy(callback) {
          if (!this._view.disposables) {
            this._view.disposables = [];
          }

          this._view.disposables.push(callback);
        }
      }, {
        key: "destroy",
        value: function destroy() {
          if (this._appRef) {
            this._appRef.detachView(this);
          } else if (this._viewContainerRef) {
            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
          }

          Services.destroyView(this._view);
        }
      }, {
        key: "detachFromAppRef",
        value: function detachFromAppRef() {
          this._appRef = null;
          renderDetachView$1(this._view);
          Services.dirtyParentQueries(this._view);
        }
      }, {
        key: "attachToAppRef",
        value: function attachToAppRef(appRef) {
          if (this._viewContainerRef) {
            throw new Error('This view is already attached to a ViewContainer!');
          }

          this._appRef = appRef;
        }
      }, {
        key: "attachToViewContainerRef",
        value: function attachToViewContainerRef(vcRef) {
          if (this._appRef) {
            throw new Error('This view is already attached directly to the ApplicationRef!');
          }

          this._viewContainerRef = vcRef;
        }
      }, {
        key: "rootNodes",
        get: function get() {
          return rootRenderNodes(this._view);
        }
      }, {
        key: "context",
        get: function get() {
          return this._view.context;
        }
      }, {
        key: "destroyed",
        get: function get() {
          return (this._view.state & 128
          /* Destroyed */
          ) !== 0;
        }
      }]);

      return ViewRef_;
    }();

    function createTemplateData(view, def) {
      return new TemplateRef_(view, def);
    }

    var TemplateRef_ = /*#__PURE__*/function (_TemplateRef) {
      _inherits(TemplateRef_, _TemplateRef);

      var _super17 = _createSuper(TemplateRef_);

      function TemplateRef_(_parentView, _def) {
        var _this28;

        _classCallCheck(this, TemplateRef_);

        _this28 = _super17.call(this);
        _this28._parentView = _parentView;
        _this28._def = _def;
        return _this28;
      }

      _createClass2(TemplateRef_, [{
        key: "createEmbeddedView",
        value: function createEmbeddedView(context) {
          return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, this._def.element.template, context));
        }
      }, {
        key: "elementRef",
        get: function get() {
          return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);
        }
      }]);

      return TemplateRef_;
    }(TemplateRef);

    function createInjector$1(view, elDef) {
      return new Injector_(view, elDef);
    }

    var Injector_ = /*#__PURE__*/function () {
      function Injector_(view, elDef) {
        _classCallCheck(this, Injector_);

        this.view = view;
        this.elDef = elDef;
      }

      _createClass2(Injector_, [{
        key: "get",
        value: function get(token) {
          var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.THROW_IF_NOT_FOUND;
          var allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432
          /* ComponentView */
          ) !== 0 : false;
          return Services.resolveDep(this.view, this.elDef, allowPrivateServices, {
            flags: 0
            /* None */
            ,
            token: token,
            tokenKey: tokenKey(token)
          }, notFoundValue);
        }
      }]);

      return Injector_;
    }();

    function nodeValue(view, index) {
      var def = view.def.nodes[index];

      if (def.flags & 1
      /* TypeElement */
      ) {
          var elData = asElementData(view, def.nodeIndex);
          return def.element.template ? elData.template : elData.renderElement;
        } else if (def.flags & 2
      /* TypeText */
      ) {
          return asTextData(view, def.nodeIndex).renderText;
        } else if (def.flags & (20224
      /* CatProvider */
      | 16
      /* TypePipe */
      )) {
        return asProviderData(view, def.nodeIndex).instance;
      }

      throw new Error("Illegal state: read nodeValue for node index ".concat(index));
    }

    function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {
      return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);
    }

    var NgModuleRef_ = /*#__PURE__*/function () {
      function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {
        _classCallCheck(this, NgModuleRef_);

        this._moduleType = _moduleType;
        this._parent = _parent;
        this._bootstrapComponents = _bootstrapComponents;
        this._def = _def;
        this._destroyListeners = [];
        this._destroyed = false;
        this.injector = this;
        initNgModule(this);
      }

      _createClass2(NgModuleRef_, [{
        key: "get",
        value: function get(token) {
          var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.THROW_IF_NOT_FOUND;
          var injectFlags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InjectFlags.Default;
          var flags = 0
          /* None */
          ;

          if (injectFlags & InjectFlags.SkipSelf) {
            flags |= 1
            /* SkipSelf */
            ;
          } else if (injectFlags & InjectFlags.Self) {
            flags |= 4
            /* Self */
            ;
          }

          return resolveNgModuleDep(this, {
            token: token,
            tokenKey: tokenKey(token),
            flags: flags
          }, notFoundValue);
        }
      }, {
        key: "destroy",
        value: function destroy() {
          if (this._destroyed) {
            throw new Error("The ng module ".concat(stringify(this.instance.constructor), " has already been destroyed."));
          }

          this._destroyed = true;
          callNgModuleLifecycle(this, 131072
          /* OnDestroy */
          );

          this._destroyListeners.forEach(function (listener) {
            return listener();
          });
        }
      }, {
        key: "onDestroy",
        value: function onDestroy(callback) {
          this._destroyListeners.push(callback);
        }
      }, {
        key: "instance",
        get: function get() {
          return this.get(this._moduleType);
        }
      }, {
        key: "componentFactoryResolver",
        get: function get() {
          return this.get(ComponentFactoryResolver);
        }
      }]);

      return NgModuleRef_;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var Renderer2TokenKey = /*@__PURE__*/tokenKey(Renderer2);
    var ElementRefTokenKey = /*@__PURE__*/tokenKey(ElementRef);
    var ViewContainerRefTokenKey = /*@__PURE__*/tokenKey(ViewContainerRef);
    var TemplateRefTokenKey = /*@__PURE__*/tokenKey(TemplateRef);
    var ChangeDetectorRefTokenKey = /*@__PURE__*/tokenKey(ChangeDetectorRef);
    var InjectorRefTokenKey$1 = /*@__PURE__*/tokenKey(Injector);
    var INJECTORRefTokenKey$1 = /*@__PURE__*/tokenKey(INJECTOR);

    function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {
      var bindings = [];

      if (props) {
        for (var prop in props) {
          var _props$prop = _slicedToArray(props[prop], 2),
              bindingIndex = _props$prop[0],
              nonMinifiedName = _props$prop[1];

          bindings[bindingIndex] = {
            flags: 8
            /* TypeProperty */
            ,
            name: prop,
            nonMinifiedName: nonMinifiedName,
            ns: null,
            securityContext: null,
            suffix: null
          };
        }
      }

      var outputDefs = [];

      if (outputs) {
        for (var propName in outputs) {
          outputDefs.push({
            type: 1
            /* DirectiveOutput */
            ,
            propName: propName,
            target: null,
            eventName: outputs[propName]
          });
        }
      }

      flags |= 16384
      /* TypeDirective */
      ;
      return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
    }

    function pipeDef(flags, ctor, deps) {
      flags |= 16
      /* TypePipe */
      ;
      return _def(-1, flags, null, 0, ctor, ctor, deps);
    }

    function providerDef(flags, matchedQueries, token, value, deps) {
      return _def(-1, flags, matchedQueries, 0, token, value, deps);
    }

    function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
      var _splitMatchedQueriesD = splitMatchedQueriesDsl(matchedQueriesDsl),
          matchedQueries = _splitMatchedQueriesD.matchedQueries,
          references = _splitMatchedQueriesD.references,
          matchedQueryIds = _splitMatchedQueriesD.matchedQueryIds;

      if (!outputs) {
        outputs = [];
      }

      if (!bindings) {
        bindings = [];
      } // Need to resolve forwardRefs as e.g. for `useValue` we
      // lowered the expression and then stopped evaluating it,
      // i.e. also didn't unwrap it.


      value = resolveForwardRef(value);
      var depDefs = splitDepsDsl(deps, stringify(token));
      return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        checkIndex: checkIndex,
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: matchedQueries,
        matchedQueryIds: matchedQueryIds,
        references: references,
        ngContentIndex: -1,
        childCount: childCount,
        bindings: bindings,
        bindingFlags: calcBindingFlags(bindings),
        outputs: outputs,
        element: null,
        provider: {
          token: token,
          value: value,
          deps: depDefs
        },
        text: null,
        query: null,
        ngContent: null
      };
    }

    function createProviderInstance(view, def) {
      return _createProviderInstance$1(view, def);
    }

    function createPipeInstance(view, def) {
      // deps are looked up from component.
      var compView = view;

      while (compView.parent && !isComponentView(compView)) {
        compView = compView.parent;
      } // pipes can see the private services of the component


      var allowPrivateServices = true; // pipes are always eager and classes!

      return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);
    }

    function createDirectiveInstance(view, def) {
      // components can see other private services, other directives can't.
      var allowPrivateServices = (def.flags & 32768
      /* Component */
      ) > 0; // directives are always eager and classes!

      var instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);

      if (def.outputs.length) {
        for (var i = 0; i < def.outputs.length; i++) {
          var output = def.outputs[i];
          var outputObservable = instance[output.propName];

          if (isObservable(outputObservable)) {
            var subscription = outputObservable.subscribe(eventHandlerClosure(view, def.parent.nodeIndex, output.eventName));
            view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
          } else {
            throw new Error("@Output ".concat(output.propName, " not initialized in '").concat(instance.constructor.name, "'."));
          }
        }
      }

      return instance;
    }

    function eventHandlerClosure(view, index, eventName) {
      return function (event) {
        return dispatchEvent(view, index, eventName, event);
      };
    }

    function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      var providerData = asProviderData(view, def.nodeIndex);
      var directive = providerData.instance;
      var changed = false;
      var changes = undefined;
      var bindLen = def.bindings.length;

      if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
        changed = true;
        changes = updateProp(view, providerData, def, 0, v0, changes);
      }

      if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
        changed = true;
        changes = updateProp(view, providerData, def, 1, v1, changes);
      }

      if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
        changed = true;
        changes = updateProp(view, providerData, def, 2, v2, changes);
      }

      if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
        changed = true;
        changes = updateProp(view, providerData, def, 3, v3, changes);
      }

      if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
        changed = true;
        changes = updateProp(view, providerData, def, 4, v4, changes);
      }

      if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
        changed = true;
        changes = updateProp(view, providerData, def, 5, v5, changes);
      }

      if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
        changed = true;
        changes = updateProp(view, providerData, def, 6, v6, changes);
      }

      if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
        changed = true;
        changes = updateProp(view, providerData, def, 7, v7, changes);
      }

      if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
        changed = true;
        changes = updateProp(view, providerData, def, 8, v8, changes);
      }

      if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
        changed = true;
        changes = updateProp(view, providerData, def, 9, v9, changes);
      }

      if (changes) {
        directive.ngOnChanges(changes);
      }

      if (def.flags & 65536
      /* OnInit */
      && shouldCallLifecycleInitHook(view, 256
      /* InitState_CallingOnInit */
      , def.nodeIndex)) {
        directive.ngOnInit();
      }

      if (def.flags & 262144
      /* DoCheck */
      ) {
          directive.ngDoCheck();
        }

      return changed;
    }

    function checkAndUpdateDirectiveDynamic(view, def, values) {
      var providerData = asProviderData(view, def.nodeIndex);
      var directive = providerData.instance;
      var changed = false;
      var changes = undefined;

      for (var i = 0; i < values.length; i++) {
        if (checkBinding(view, def, i, values[i])) {
          changed = true;
          changes = updateProp(view, providerData, def, i, values[i], changes);
        }
      }

      if (changes) {
        directive.ngOnChanges(changes);
      }

      if (def.flags & 65536
      /* OnInit */
      && shouldCallLifecycleInitHook(view, 256
      /* InitState_CallingOnInit */
      , def.nodeIndex)) {
        directive.ngOnInit();
      }

      if (def.flags & 262144
      /* DoCheck */
      ) {
          directive.ngDoCheck();
        }

      return changed;
    }

    function _createProviderInstance$1(view, def) {
      // private services can see other private services
      var allowPrivateServices = (def.flags & 8192
      /* PrivateProvider */
      ) > 0;
      var providerDef = def.provider;

      switch (def.flags & 201347067
      /* Types */
      ) {
        case 512
        /* TypeClassProvider */
        :
          return createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);

        case 1024
        /* TypeFactoryProvider */
        :
          return callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);

        case 2048
        /* TypeUseExistingProvider */
        :
          return resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);

        case 256
        /* TypeValueProvider */
        :
          return providerDef.value;
      }
    }

    function createClass(view, elDef, allowPrivateServices, ctor, deps) {
      var len = deps.length;

      switch (len) {
        case 0:
          return new ctor();

        case 1:
          return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));

        case 2:
          return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));

        case 3:
          return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));

        default:
          var depValues = [];

          for (var i = 0; i < len; i++) {
            depValues.push(resolveDep(view, elDef, allowPrivateServices, deps[i]));
          }

          return _construct(ctor, depValues);
      }
    }

    function callFactory(view, elDef, allowPrivateServices, factory, deps) {
      var len = deps.length;

      switch (len) {
        case 0:
          return factory();

        case 1:
          return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));

        case 2:
          return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));

        case 3:
          return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));

        default:
          var depValues = [];

          for (var i = 0; i < len; i++) {
            depValues.push(resolveDep(view, elDef, allowPrivateServices, deps[i]));
          }

          return factory.apply(void 0, depValues);
      }
    } // This default value is when checking the hierarchy for a token.
    //
    // It means both:
    // - the token is not provided by the current injector,
    // - only the element injectors should be checked (ie do not check module injectors
    //
    //          mod1
    //         /
    //       el1   mod2
    //         \  /
    //         el2
    //
    // When requesting el2.injector.get(token), we should check in the following order and return the
    // first found value:
    // - el2.injector.get(token, default)
    // - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module
    // - mod2.injector.get(token, default)


    var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};

    function resolveDep(view, elDef, allowPrivateServices, depDef) {
      var notFoundValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Injector.THROW_IF_NOT_FOUND;

      if (depDef.flags & 8
      /* Value */
      ) {
          return depDef.token;
        }

      var startView = view;

      if (depDef.flags & 2
      /* Optional */
      ) {
          notFoundValue = null;
        }

      var tokenKey = depDef.tokenKey;

      if (tokenKey === ChangeDetectorRefTokenKey) {
        // directives on the same element as a component should be able to control the change detector
        // of that component as well.
        allowPrivateServices = !!(elDef && elDef.element.componentView);
      }

      if (elDef && depDef.flags & 1
      /* SkipSelf */
      ) {
        allowPrivateServices = false;
        elDef = elDef.parent;
      }

      var searchView = view;

      while (searchView) {
        if (elDef) {
          switch (tokenKey) {
            case Renderer2TokenKey:
              {
                var compView = findCompView(searchView, elDef, allowPrivateServices);
                return compView.renderer;
              }

            case ElementRefTokenKey:
              return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);

            case ViewContainerRefTokenKey:
              return asElementData(searchView, elDef.nodeIndex).viewContainer;

            case TemplateRefTokenKey:
              {
                if (elDef.element.template) {
                  return asElementData(searchView, elDef.nodeIndex).template;
                }

                break;
              }

            case ChangeDetectorRefTokenKey:
              {
                var cdView = findCompView(searchView, elDef, allowPrivateServices);
                return createChangeDetectorRef(cdView);
              }

            case InjectorRefTokenKey$1:
            case INJECTORRefTokenKey$1:
              return createInjector$1(searchView, elDef);

            default:
              var _providerDef2 = (allowPrivateServices ? elDef.element.allProviders : elDef.element.publicProviders)[tokenKey];

              if (_providerDef2) {
                var providerData = asProviderData(searchView, _providerDef2.nodeIndex);

                if (!providerData) {
                  providerData = {
                    instance: _createProviderInstance$1(searchView, _providerDef2)
                  };
                  searchView.nodes[_providerDef2.nodeIndex] = providerData;
                }

                return providerData.instance;
              }

          }
        }

        allowPrivateServices = isComponentView(searchView);
        elDef = viewParentEl(searchView);
        searchView = searchView.parent;

        if (depDef.flags & 4
        /* Self */
        ) {
            searchView = null;
          }
      }

      var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);

      if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
        // Return the value from the root element injector when
        // - it provides it
        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
        // - the module injector should not be checked
        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
        return value;
      }

      return startView.root.ngModule.injector.get(depDef.token, notFoundValue);
    }

    function findCompView(view, elDef, allowPrivateServices) {
      var compView;

      if (allowPrivateServices) {
        compView = asElementData(view, elDef.nodeIndex).componentView;
      } else {
        compView = view;

        while (compView.parent && !isComponentView(compView)) {
          compView = compView.parent;
        }
      }

      return compView;
    }

    function updateProp(view, providerData, def, bindingIdx, value, changes) {
      if (def.flags & 32768
      /* Component */
      ) {
          var compView = asElementData(view, def.parent.nodeIndex).componentView;

          if (compView.def.flags & 2
          /* OnPush */
          ) {
              compView.state |= 8
              /* ChecksEnabled */
              ;
            }
        }

      var binding = def.bindings[bindingIdx];
      var propName = binding.name; // Note: This is still safe with Closure Compiler as
      // the user passed in the property name as an object has to `providerDef`,
      // so Closure Compiler will have renamed the property correctly already.

      providerData.instance[propName] = value;

      if (def.flags & 524288
      /* OnChanges */
      ) {
          changes = changes || {};
          var oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);
          var _binding = def.bindings[bindingIdx];
          changes[_binding.nonMinifiedName] = new SimpleChange(oldValue, value, (view.state & 2
          /* FirstCheck */
          ) !== 0);
        }

      view.oldValues[def.bindingIndex + bindingIdx] = value;
      return changes;
    } // This function calls the ngAfterContentCheck, ngAfterContentInit,
    // ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node
    // flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are
    // called during a pre-order traversal of the view tree (that is calling the
    // parent hooks before the child hooks) these events are sent in using a
    // post-order traversal of the tree (children before parents). This changes the
    // meaning of initIndex in the view state. For ngOnInit, initIndex tracks the
    // expected nodeIndex which a ngOnInit should be called. When sending
    // ngAfterContentInit and ngAfterViewInit it is the expected count of
    // ngAfterContentInit or ngAfterViewInit methods that have been called. This
    // ensure that despite being called recursively or after picking up after an
    // exception, the ngAfterContentInit or ngAfterViewInit will be called on the
    // correct nodes. Consider for example, the following (where E is an element
    // and D is a directive)
    //  Tree:       pre-order index  post-order index
    //    E1        0                6
    //      E2      1                1
    //       D3     2                0
    //      E4      3                5
    //       E5     4                4
    //        E6    5                2
    //        E7    6                3
    // As can be seen, the post-order index has an unclear relationship to the
    // pre-order index (postOrderIndex === preOrderIndex - parentCount +
    // childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit
    // are stable (will be the same for the same view regardless of exceptions or
    // recursion) we just need to count them which will roughly correspond to the
    // post-order index (it skips elements and directives that do not have
    // lifecycle hooks).
    //
    // For example, if an exception is raised in the E6.onAfterViewInit() the
    // initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to
    // initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will
    // not have their ngAfterViewInit() called but, starting with E7, the rest of
    // the view will begin getting ngAfterViewInit() called until a check and
    // pass is complete.
    //
    // This algorthim also handles recursion. Consider if E4's ngAfterViewInit()
    // indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected
    // initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.
    // D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.
    // When the recursion returns the initIndex will be 7 so E1 is skipped as it
    // has already been called in the recursively called checkAnUpdateView().


    function callLifecycleHooksChildrenFirst(view, lifecycles) {
      if (!(view.def.nodeFlags & lifecycles)) {
        return;
      }

      var nodes = view.def.nodes;
      var initIndex = 0;

      for (var i = 0; i < nodes.length; i++) {
        var nodeDef = nodes[i];
        var parent = nodeDef.parent;

        if (!parent && nodeDef.flags & lifecycles) {
          // matching root node (e.g. a pipe)
          callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);
        }

        if ((nodeDef.childFlags & lifecycles) === 0) {
          // no child matches one of the lifecycles
          i += nodeDef.childCount;
        }

        while (parent && parent.flags & 1
        /* TypeElement */
        && i === parent.nodeIndex + parent.childCount) {
          // last child of an element
          if (parent.directChildFlags & lifecycles) {
            initIndex = callElementProvidersLifecycles(view, parent, lifecycles, initIndex);
          }

          parent = parent.parent;
        }
      }
    }

    function callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {
      for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {
        var nodeDef = view.def.nodes[i];

        if (nodeDef.flags & lifecycles) {
          callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);
        } // only visit direct children


        i += nodeDef.childCount;
      }

      return initIndex;
    }

    function callProviderLifecycles(view, index, lifecycles, initIndex) {
      var providerData = asProviderData(view, index);

      if (!providerData) {
        return;
      }

      var provider = providerData.instance;

      if (!provider) {
        return;
      }

      Services.setCurrentNode(view, index);

      if (lifecycles & 1048576
      /* AfterContentInit */
      && shouldCallLifecycleInitHook(view, 512
      /* InitState_CallingAfterContentInit */
      , initIndex)) {
        provider.ngAfterContentInit();
      }

      if (lifecycles & 2097152
      /* AfterContentChecked */
      ) {
          provider.ngAfterContentChecked();
        }

      if (lifecycles & 4194304
      /* AfterViewInit */
      && shouldCallLifecycleInitHook(view, 768
      /* InitState_CallingAfterViewInit */
      , initIndex)) {
        provider.ngAfterViewInit();
      }

      if (lifecycles & 8388608
      /* AfterViewChecked */
      ) {
          provider.ngAfterViewChecked();
        }

      if (lifecycles & 131072
      /* OnDestroy */
      ) {
          provider.ngOnDestroy();
        }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var ComponentFactoryResolver$1 = /*#__PURE__*/function (_ComponentFactoryReso) {
      _inherits(ComponentFactoryResolver$1, _ComponentFactoryReso);

      var _super18 = _createSuper(ComponentFactoryResolver$1);

      /**
       * @param ngModule The NgModuleRef to which all resolved factories are bound.
       */
      function ComponentFactoryResolver$1(ngModule) {
        var _this29;

        _classCallCheck(this, ComponentFactoryResolver$1);

        _this29 = _super18.call(this);
        _this29.ngModule = ngModule;
        return _this29;
      }

      _createClass2(ComponentFactoryResolver$1, [{
        key: "resolveComponentFactory",
        value: function resolveComponentFactory(component) {
          ngDevMode && assertComponentType(component);
          var componentDef = getComponentDef(component);
          return new ComponentFactory$1(componentDef, this.ngModule);
        }
      }]);

      return ComponentFactoryResolver$1;
    }(ComponentFactoryResolver);

    function toRefArray(map) {
      var array = [];

      for (var nonMinified in map) {
        if (map.hasOwnProperty(nonMinified)) {
          var minified = map[nonMinified];
          array.push({
            propName: minified,
            templateName: nonMinified
          });
        }
      }

      return array;
    }

    function getNamespace$1(elementName) {
      var name = elementName.toLowerCase();
      return name === 'svg' ? SVG_NAMESPACE : name === 'math' ? MATH_ML_NAMESPACE : null;
    }
    /**
     * A change detection scheduler token for {@link RootContext}. This token is the default value used
     * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.
     */


    var SCHEDULER = /*@__PURE__*/new InjectionToken('SCHEDULER_TOKEN', {
      providedIn: 'root',
      factory: function factory() {
        return defaultScheduler;
      }
    });

    function createChainedInjector(rootViewInjector, moduleInjector) {
      return {
        get: function get(token, notFoundValue, flags) {
          var value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);

          if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
            // Return the value from the root element injector when
            // - it provides it
            //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
            // - the module injector should not be checked
            //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
            return value;
          }

          return moduleInjector.get(token, notFoundValue, flags);
        }
      };
    }
    /**
     * Render3 implementation of {@link viewEngine_ComponentFactory}.
     */


    var ComponentFactory$1 = /*#__PURE__*/function (_ComponentFactory3) {
      _inherits(ComponentFactory$1, _ComponentFactory3);

      var _super19 = _createSuper(ComponentFactory$1);

      /**
       * @param componentDef The component definition.
       * @param ngModule The NgModuleRef to which the factory is bound.
       */
      function ComponentFactory$1(componentDef, ngModule) {
        var _this30;

        _classCallCheck(this, ComponentFactory$1);

        _this30 = _super19.call(this);
        _this30.componentDef = componentDef;
        _this30.ngModule = ngModule;
        _this30.componentType = componentDef.type;
        _this30.selector = stringifyCSSSelectorList(componentDef.selectors);
        _this30.ngContentSelectors = componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];
        _this30.isBoundToModule = !!ngModule;
        return _this30;
      }

      _createClass2(ComponentFactory$1, [{
        key: "create",
        value: function create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
          ngModule = ngModule || this.ngModule;
          var rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;
          var rendererFactory = rootViewInjector.get(RendererFactory2, domRendererFactory3);
          var sanitizer = rootViewInjector.get(Sanitizer, null);
          var hostRenderer = rendererFactory.createRenderer(null, this.componentDef); // Determine a tag name used for creating host elements when this component is created
          // dynamically. Default to 'div' if this component did not specify any tag name in its selector.

          var elementName = this.componentDef.selectors[0][0] || 'div';
          var hostRNode = rootSelectorOrNode ? locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation) : elementCreate(elementName, rendererFactory.createRenderer(null, this.componentDef), getNamespace$1(elementName));
          var rootFlags = this.componentDef.onPush ? 64
          /* Dirty */
          | 512
          /* IsRoot */
          : 16
          /* CheckAlways */
          | 512
          /* IsRoot */
          ;
          var rootContext = createRootContext(); // Create the root view. Uses empty TView and ContentTemplate.

          var rootTView = createTView(0
          /* Root */
          , -1, null, 1, 0, null, null, null, null, null);
          var rootLView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, hostRenderer, sanitizer, rootViewInjector); // rootView is the parent when bootstrapping
          // TODO(misko): it looks like we are entering view here but we don't really need to as
          // `renderView` does that. However as the code is written it is needed because
          // `createRootComponentView` and `createRootComponent` both read global state. Fixing those
          // issues would allow us to drop this.

          enterView(rootLView, null);
          var component;
          var tElementNode;

          try {
            var componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, hostRenderer);

            if (hostRNode) {
              if (rootSelectorOrNode) {
                setUpAttributes(hostRenderer, hostRNode, ['ng-version', VERSION.full]);
              } else {
                // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`
                // is not defined), also apply attributes and classes extracted from component selector.
                // Extract attributes and classes from the first selector only to match VE behavior.
                var _extractAttrsAndClass = extractAttrsAndClassesFromSelector(this.componentDef.selectors[0]),
                    attrs = _extractAttrsAndClass.attrs,
                    classes = _extractAttrsAndClass.classes;

                if (attrs) {
                  setUpAttributes(hostRenderer, hostRNode, attrs);
                }

                if (classes && classes.length > 0) {
                  writeDirectClass(hostRenderer, hostRNode, classes.join(' '));
                }
              }
            }

            tElementNode = getTNode(rootTView, 0);

            if (projectableNodes !== undefined) {
              var projection = tElementNode.projection = [];

              for (var i = 0; i < this.ngContentSelectors.length; i++) {
                var nodesforSlot = projectableNodes[i]; // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade
                // case). Here we do normalize passed data structure to be an array of arrays to avoid
                // complex checks down the line.
                // We also normalize the length of the passed in projectable nodes (to match the number of
                // <ng-container> slots defined by a component).

                projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);
              }
            } // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and
            // executed here?
            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref


            component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);
            renderView(rootTView, rootLView, null);
          } finally {
            leaveView();
          }

          var componentRef = new ComponentRef$1(this.componentType, component, createElementRef(ElementRef, tElementNode, rootLView), rootLView, tElementNode); // The host element of the internal root view is attached to the component's host view node.

          ngDevMode && assertNodeOfPossibleTypes(rootTView.node, [2
          /* View */
          ]);
          rootTView.node.child = tElementNode;
          return componentRef;
        }
      }, {
        key: "inputs",
        get: function get() {
          return toRefArray(this.componentDef.inputs);
        }
      }, {
        key: "outputs",
        get: function get() {
          return toRefArray(this.componentDef.outputs);
        }
      }]);

      return ComponentFactory$1;
    }(ComponentFactory);

    var componentFactoryResolver = /*@__PURE__*/new ComponentFactoryResolver$1();
    /**
     * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the
     * ComponentFactoryResolver
     * already exists, retrieves the existing ComponentFactoryResolver.
     *
     * @returns The ComponentFactoryResolver instance to use
     */

    function injectComponentFactoryResolver() {
      return componentFactoryResolver;
    }
    /**
     * Represents an instance of a Component created via a {@link ComponentFactory}.
     *
     * `ComponentRef` provides access to the Component Instance as well other objects related to this
     * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}
     * method.
     *
     */


    var ComponentRef$1 = /*#__PURE__*/function (_ComponentRef2) {
      _inherits(ComponentRef$1, _ComponentRef2);

      var _super20 = _createSuper(ComponentRef$1);

      function ComponentRef$1(componentType, instance, location, _rootLView, _tNode) {
        var _this31;

        _classCallCheck(this, ComponentRef$1);

        _this31 = _super20.call(this);
        _this31.location = location;
        _this31._rootLView = _rootLView;
        _this31._tNode = _tNode;
        _this31.destroyCbs = [];
        _this31.instance = instance;
        _this31.hostView = _this31.changeDetectorRef = new RootViewRef(_rootLView);
        assignTViewNodeToLView(_rootLView[TVIEW], null, -1, _rootLView);
        _this31.componentType = componentType;
        return _this31;
      }

      _createClass2(ComponentRef$1, [{
        key: "destroy",
        value: function destroy() {
          if (this.destroyCbs) {
            this.destroyCbs.forEach(function (fn) {
              return fn();
            });
            this.destroyCbs = null;
            !this.hostView.destroyed && this.hostView.destroy();
          }
        }
      }, {
        key: "onDestroy",
        value: function onDestroy(callback) {
          if (this.destroyCbs) {
            this.destroyCbs.push(callback);
          }
        }
      }, {
        key: "injector",
        get: function get() {
          return new NodeInjector(this._tNode, this._rootLView);
        }
      }]);

      return ComponentRef$1;
    }(ComponentRef);
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // THIS CODE IS GENERATED - DO NOT MODIFY
    // See angular/tools/gulp-tasks/cldr/extract.js


    var u = undefined;

    function plural(n) {
      var i = Math.floor(Math.abs(n)),
          v = n.toString().replace(/^[^.]*\.?/, '').length;
      if (i === 1 && v === 0) return 1;
      return 5;
    }

    var localeEn = ['en', [['a', 'p'], ['AM', 'PM'], u], [['AM', 'PM'], u, u], [['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']], u, [['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'], ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']], u, [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']], 0, [6, 0], ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'], ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'], ['{1}, {0}', u, '{1} \'at\' {0}', u], ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'], ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'], 'USD', '$', 'US Dollar', {}, 'ltr', plural];
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * This const is used to store the locale data registered with `registerLocaleData`
     */

    var LOCALE_DATA = {};
    /**
     * Register locale data to be used internally by Angular. See the
     * ["I18n guide"](guide/i18n#i18n-pipes) to know how to import additional locale data.
     *
     * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1
     */

    function registerLocaleData(data, localeId, extraData) {
      if (typeof localeId !== 'string') {
        extraData = localeId;
        localeId = data[LocaleDataIndex.LocaleId];
      }

      localeId = localeId.toLowerCase().replace(/_/g, '-');
      LOCALE_DATA[localeId] = data;

      if (extraData) {
        LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;
      }
    }
    /**
     * Finds the locale data for a given locale.
     *
     * @param locale The locale code.
     * @returns The locale data.
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     */


    function findLocaleData(locale) {
      var normalizedLocale = normalizeLocale(locale);
      var match = getLocaleData(normalizedLocale);

      if (match) {
        return match;
      } // let's try to find a parent locale


      var parentLocale = normalizedLocale.split('-')[0];
      match = getLocaleData(parentLocale);

      if (match) {
        return match;
      }

      if (parentLocale === 'en') {
        return localeEn;
      }

      throw new Error("Missing locale data for the locale \"".concat(locale, "\"."));
    }
    /**
     * Retrieves the default currency code for the given locale.
     *
     * The default is defined as the first currency which is still in use.
     *
     * @param locale The code of the locale whose currency code we want.
     * @returns The code of the default currency for the given locale.
     *
     */


    function getLocaleCurrencyCode(locale) {
      var data = findLocaleData(locale);
      return data[LocaleDataIndex.CurrencyCode] || null;
    }
    /**
     * Retrieves the plural function used by ICU expressions to determine the plural case to use
     * for a given locale.
     * @param locale A locale code for the locale format rules to use.
     * @returns The plural function for the locale.
     * @see `NgPlural`
     * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
     */


    function getLocalePluralCase(locale) {
      var data = findLocaleData(locale);
      return data[LocaleDataIndex.PluralCase];
    }
    /**
     * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`
     * or from the global `ng.common.locale`.
     */


    function getLocaleData(normalizedLocale) {
      if (!(normalizedLocale in LOCALE_DATA)) {
        LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales && _global.ng.common.locales[normalizedLocale];
      }

      return LOCALE_DATA[normalizedLocale];
    }
    /**
     * Helper function to remove all the locale data from `LOCALE_DATA`.
     */


    function unregisterAllLocaleData() {
      LOCALE_DATA = {};
    }
    /**
     * Index of each type of locale data from the locale data array
     */


    var LocaleDataIndex = /*@__PURE__*/function (LocaleDataIndex) {
      LocaleDataIndex[LocaleDataIndex["LocaleId"] = 0] = "LocaleId";
      LocaleDataIndex[LocaleDataIndex["DayPeriodsFormat"] = 1] = "DayPeriodsFormat";
      LocaleDataIndex[LocaleDataIndex["DayPeriodsStandalone"] = 2] = "DayPeriodsStandalone";
      LocaleDataIndex[LocaleDataIndex["DaysFormat"] = 3] = "DaysFormat";
      LocaleDataIndex[LocaleDataIndex["DaysStandalone"] = 4] = "DaysStandalone";
      LocaleDataIndex[LocaleDataIndex["MonthsFormat"] = 5] = "MonthsFormat";
      LocaleDataIndex[LocaleDataIndex["MonthsStandalone"] = 6] = "MonthsStandalone";
      LocaleDataIndex[LocaleDataIndex["Eras"] = 7] = "Eras";
      LocaleDataIndex[LocaleDataIndex["FirstDayOfWeek"] = 8] = "FirstDayOfWeek";
      LocaleDataIndex[LocaleDataIndex["WeekendRange"] = 9] = "WeekendRange";
      LocaleDataIndex[LocaleDataIndex["DateFormat"] = 10] = "DateFormat";
      LocaleDataIndex[LocaleDataIndex["TimeFormat"] = 11] = "TimeFormat";
      LocaleDataIndex[LocaleDataIndex["DateTimeFormat"] = 12] = "DateTimeFormat";
      LocaleDataIndex[LocaleDataIndex["NumberSymbols"] = 13] = "NumberSymbols";
      LocaleDataIndex[LocaleDataIndex["NumberFormats"] = 14] = "NumberFormats";
      LocaleDataIndex[LocaleDataIndex["CurrencyCode"] = 15] = "CurrencyCode";
      LocaleDataIndex[LocaleDataIndex["CurrencySymbol"] = 16] = "CurrencySymbol";
      LocaleDataIndex[LocaleDataIndex["CurrencyName"] = 17] = "CurrencyName";
      LocaleDataIndex[LocaleDataIndex["Currencies"] = 18] = "Currencies";
      LocaleDataIndex[LocaleDataIndex["Directionality"] = 19] = "Directionality";
      LocaleDataIndex[LocaleDataIndex["PluralCase"] = 20] = "PluralCase";
      LocaleDataIndex[LocaleDataIndex["ExtraData"] = 21] = "ExtraData";
      return LocaleDataIndex;
    }({});
    /**
     * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.
     */


    function normalizeLocale(locale) {
      return locale.toLowerCase().replace(/_/g, '-');
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var pluralMapping = ['zero', 'one', 'two', 'few', 'many'];
    /**
     * Returns the plural case based on the locale
     */

    function getPluralCase(value, locale) {
      var plural = getLocalePluralCase(locale)(parseInt(value, 10));
      var result = pluralMapping[plural];
      return result !== undefined ? result : 'other';
    }
    /**
     * The locale id that the application is using by default (for translations and ICU expressions).
     */


    var DEFAULT_LOCALE_ID = 'en-US';
    /**
     * USD currency code that the application uses by default for CurrencyPipe when no
     * DEFAULT_CURRENCY_CODE is provided.
     */

    var USD_CURRENCY_CODE = 'USD';
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * The locale id that the application is currently using (for translations and ICU expressions).
     * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
     * but is now defined as a global value.
     */

    var LOCALE_ID = DEFAULT_LOCALE_ID;
    /**
     * Sets the locale id that will be used for translations and ICU expressions.
     * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
     * but is now defined as a global value.
     *
     * @param localeId
     */

    function setLocaleId(localeId) {
      assertDefined(localeId, "Expected localeId to be defined");

      if (typeof localeId === 'string') {
        LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');
      }
    }
    /**
     * Gets the locale id that will be used for translations and ICU expressions.
     * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
     * but is now defined as a global value.
     */


    function getLocaleId() {
      return LOCALE_ID;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.
     */


    if (typeof ngI18nClosureMode === 'undefined') {
      // These property accesses can be ignored because ngI18nClosureMode will be set to false
      // when optimizing code and the whole if statement will be dropped.
      // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.
      // NOTE: we need to have it in IIFE so that the tree-shaker is happy.

      /*@__PURE__*/
      (function () {
        // tslint:disable-next-line:no-toplevel-property-access
        _global['ngI18nClosureMode'] = // TODO(FW-1250): validate that this actually, you know, works.
        // tslint:disable-next-line:no-toplevel-property-access
        typeof goog !== 'undefined' && typeof goog.getMsg === 'function';
      })();
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function getParentFromI18nMutateOpCode(mergedCode) {
      return mergedCode >>> 17
      /* SHIFT_PARENT */
      ;
    }

    function getRefFromI18nMutateOpCode(mergedCode) {
      return (mergedCode & 131064
      /* MASK_REF */
      ) >>> 3
      /* SHIFT_REF */
      ;
    }

    function getInstructionFromI18nMutateOpCode(mergedCode) {
      return mergedCode & 7
      /* MASK_INSTRUCTION */
      ;
    }
    /**
     * Marks that the next string is an element name.
     *
     * See `I18nMutateOpCodes` documentation.
     */


    var ELEMENT_MARKER = {
      marker: 'element'
    };
    /**
     * Marks that the next string is comment text.
     *
     * See `I18nMutateOpCodes` documentation.
     */

    var COMMENT_MARKER = {
      marker: 'comment'
    }; // Note: This hack is necessary so we don't erroneously get a circular dependency
    // failure based on types.

    var unusedValueExportToPlacateAjd$6 = 1;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    var i18nIndexStack = [];
    var i18nIndexStackPointer = -1;

    function popI18nIndex() {
      return i18nIndexStack[i18nIndexStackPointer--];
    }

    function pushI18nIndex(index) {
      i18nIndexStack[++i18nIndexStackPointer] = index;
    }

    var changeMask = 0;
    var shiftsCounter = 0;

    function setMaskBit(bit) {
      if (bit) {
        changeMask = changeMask | 1 << shiftsCounter;
      }

      shiftsCounter++;
    }

    function applyI18n(tView, lView, index) {
      if (shiftsCounter > 0) {
        ngDevMode && assertDefined(tView, "tView should be defined");
        var tI18n = tView.data[index + HEADER_OFFSET];
        var updateOpCodes;
        var tIcus = null;

        if (Array.isArray(tI18n)) {
          updateOpCodes = tI18n;
        } else {
          updateOpCodes = tI18n.update;
          tIcus = tI18n.icus;
        }

        var bindingsStartIndex = getBindingIndex() - shiftsCounter - 1;
        applyUpdateOpCodes(tView, tIcus, lView, updateOpCodes, bindingsStartIndex, changeMask); // Reset changeMask & maskBit to default for the next update cycle

        changeMask = 0;
        shiftsCounter = 0;
      }
    }
    /**
     * Apply `I18nMutateOpCodes` OpCodes.
     *
     * @param tView Current `TView`
     * @param rootIndex Pointer to the root (parent) tNode for the i18n.
     * @param createOpCodes OpCodes to process
     * @param lView Current `LView`
     */


    function applyCreateOpCodes(tView, rootindex, createOpCodes, lView) {
      var renderer = lView[RENDERER];
      var currentTNode = null;
      var previousTNode = null;
      var visitedNodes = [];

      for (var i = 0; i < createOpCodes.length; i++) {
        var opCode = createOpCodes[i];

        if (typeof opCode == 'string') {
          var textRNode = createTextNode(opCode, renderer);
          var textNodeIndex = createOpCodes[++i];
          ngDevMode && ngDevMode.rendererCreateTextNode++;
          previousTNode = currentTNode;
          currentTNode = createDynamicNodeAtIndex(tView, lView, textNodeIndex, 3
          /* Element */
          , textRNode, null);
          visitedNodes.push(textNodeIndex);
          setIsNotParent();
        } else if (typeof opCode == 'number') {
          switch (opCode & 7
          /* MASK_INSTRUCTION */
          ) {
            case 1
            /* AppendChild */
            :
              var destinationNodeIndex = opCode >>> 17
              /* SHIFT_PARENT */
              ;
              var destinationTNode = void 0;

              if (destinationNodeIndex === rootindex) {
                // If the destination node is `i18nStart`, we don't have a
                // top-level node and we should use the host node instead
                destinationTNode = lView[T_HOST];
              } else {
                destinationTNode = getTNode(tView, destinationNodeIndex);
              }

              ngDevMode && assertDefined(currentTNode, "You need to create or select a node before you can insert it into the DOM");
              previousTNode = appendI18nNode(tView, currentTNode, destinationTNode, previousTNode, lView);
              break;

            case 0
            /* Select */
            :
              // Negative indices indicate that a given TNode is a sibling node, not a parent node
              // (see `i18nStartFirstPass` for additional information).
              var isParent = opCode >= 0; // FIXME(misko): This SHIFT_REF looks suspect as it does not have mask.

              var nodeIndex = (isParent ? opCode : ~opCode) >>> 3
              /* SHIFT_REF */
              ;
              visitedNodes.push(nodeIndex);
              previousTNode = currentTNode;
              currentTNode = getTNode(tView, nodeIndex);

              if (currentTNode) {
                setPreviousOrParentTNode(currentTNode, isParent);
              }

              break;

            case 5
            /* ElementEnd */
            :
              var elementIndex = opCode >>> 3
              /* SHIFT_REF */
              ;
              previousTNode = currentTNode = getTNode(tView, elementIndex);
              setPreviousOrParentTNode(currentTNode, false);
              break;

            case 4
            /* Attr */
            :
              var elementNodeIndex = opCode >>> 3
              /* SHIFT_REF */
              ;
              var attrName = createOpCodes[++i];
              var attrValue = createOpCodes[++i]; // This code is used for ICU expressions only, since we don't support
              // directives/components in ICUs, we don't need to worry about inputs here

              elementAttributeInternal(getTNode(tView, elementNodeIndex), lView, attrName, attrValue, null, null);
              break;

            default:
              throw new Error("Unable to determine the type of mutate operation for \"".concat(opCode, "\""));
          }
        } else {
          switch (opCode) {
            case COMMENT_MARKER:
              var commentValue = createOpCodes[++i];
              var commentNodeIndex = createOpCodes[++i];
              ngDevMode && assertEqual(typeof commentValue, 'string', "Expected \"".concat(commentValue, "\" to be a comment node value"));
              var commentRNode = renderer.createComment(commentValue);
              ngDevMode && ngDevMode.rendererCreateComment++;
              previousTNode = currentTNode;
              currentTNode = createDynamicNodeAtIndex(tView, lView, commentNodeIndex, 5
              /* IcuContainer */
              , commentRNode, null);
              visitedNodes.push(commentNodeIndex);
              attachPatchData(commentRNode, lView); // We will add the case nodes later, during the update phase

              setIsNotParent();
              break;

            case ELEMENT_MARKER:
              var tagNameValue = createOpCodes[++i];
              var _elementNodeIndex = createOpCodes[++i];
              ngDevMode && assertEqual(typeof tagNameValue, 'string', "Expected \"".concat(tagNameValue, "\" to be an element node tag name"));
              var elementRNode = renderer.createElement(tagNameValue);
              ngDevMode && ngDevMode.rendererCreateElement++;
              previousTNode = currentTNode;
              currentTNode = createDynamicNodeAtIndex(tView, lView, _elementNodeIndex, 3
              /* Element */
              , elementRNode, tagNameValue);
              visitedNodes.push(_elementNodeIndex);
              break;

            default:
              throw new Error("Unable to determine the type of mutate operation for \"".concat(opCode, "\""));
          }
        }
      }

      setIsNotParent();
      return visitedNodes;
    }
    /**
     * Apply `I18nUpdateOpCodes` OpCodes
     *
     * @param tView Current `TView`
     * @param tIcus If ICUs present than this contains them.
     * @param lView Current `LView`
     * @param updateOpCodes OpCodes to process
     * @param bindingsStartIndex Location of the first `ɵɵi18nApply`
     * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from
     *     `bindingsStartIndex`)
     */


    function applyUpdateOpCodes(tView, tIcus, lView, updateOpCodes, bindingsStartIndex, changeMask) {
      var caseCreated = false;

      for (var i = 0; i < updateOpCodes.length; i++) {
        // bit code to check if we should apply the next update
        var checkBit = updateOpCodes[i]; // Number of opCodes to skip until next set of update codes

        var skipCodes = updateOpCodes[++i];

        if (checkBit & changeMask) {
          // The value has been updated since last checked
          var value = '';

          for (var j = i + 1; j <= i + skipCodes; j++) {
            var opCode = updateOpCodes[j];

            if (typeof opCode == 'string') {
              value += opCode;
            } else if (typeof opCode == 'number') {
              if (opCode < 0) {
                // Negative opCode represent `i18nExp` values offset.
                value += renderStringify(lView[bindingsStartIndex - opCode]);
              } else {
                var nodeIndex = opCode >>> 2
                /* SHIFT_REF */
                ;

                switch (opCode & 3
                /* MASK_OPCODE */
                ) {
                  case 1
                  /* Attr */
                  :
                    var propName = updateOpCodes[++j];
                    var sanitizeFn = updateOpCodes[++j];
                    elementPropertyInternal(tView, getTNode(tView, nodeIndex), lView, propName, value, lView[RENDERER], sanitizeFn, false);
                    break;

                  case 0
                  /* Text */
                  :
                    textBindingInternal(lView, nodeIndex, value);
                    break;

                  case 2
                  /* IcuSwitch */
                  :
                    caseCreated = applyIcuSwitchCase(tView, tIcus, updateOpCodes[++j], lView, value);
                    break;

                  case 3
                  /* IcuUpdate */
                  :
                    applyIcuUpdateCase(tView, tIcus, updateOpCodes[++j], bindingsStartIndex, lView, caseCreated);
                    break;
                }
              }
            }
          }
        }

        i += skipCodes;
      }
    }
    /**
     * Apply OpCodes associated with updating an existing ICU.
     *
     * @param tView Current `TView`
     * @param tIcus ICUs active at this location.
     * @param tIcuIndex Index into `tIcus` to process.
     * @param bindingsStartIndex Location of the first `ɵɵi18nApply`
     * @param lView Current `LView`
     * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from
     *     `bindingsStartIndex`)
     */


    function applyIcuUpdateCase(tView, tIcus, tIcuIndex, bindingsStartIndex, lView, caseCreated) {
      ngDevMode && assertIndexInRange(tIcus, tIcuIndex);
      var tIcu = tIcus[tIcuIndex];
      ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);
      var activeCaseIndex = lView[tIcu.currentCaseLViewIndex];

      if (activeCaseIndex !== null) {
        var mask = caseCreated ? -1 : // -1 is same as all bits on, which simulates creation since it marks all bits dirty
        changeMask;
        applyUpdateOpCodes(tView, tIcus, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);
      }
    }
    /**
     * Apply OpCodes associated with switching a case on ICU.
     *
     * This involves tearing down existing case and than building up a new case.
     *
     * @param tView Current `TView`
     * @param tIcus ICUs active at this location.
     * @param tICuIndex Index into `tIcus` to process.
     * @param lView Current `LView`
     * @param value Value of the case to update to.
     * @returns true if a new case was created (needed so that the update executes regardless of the
     *     bitmask)
     */


    function applyIcuSwitchCase(tView, tIcus, tICuIndex, lView, value) {
      applyIcuSwitchCaseRemove(tView, tIcus, tICuIndex, lView); // Rebuild a new case for this ICU

      var caseCreated = false;
      var tIcu = tIcus[tICuIndex];
      var caseIndex = getCaseIndex(tIcu, value);
      lView[tIcu.currentCaseLViewIndex] = caseIndex !== -1 ? caseIndex : null;

      if (caseIndex > -1) {
        // Add the nodes for the new case
        applyCreateOpCodes(tView, -1, // -1 means we don't have parent node
        tIcu.create[caseIndex], lView);
        caseCreated = true;
      }

      return caseCreated;
    }
    /**
     * Apply OpCodes associated with tearing down of DOM.
     *
     * This involves tearing down existing case and than building up a new case.
     *
     * @param tView Current `TView`
     * @param tIcus ICUs active at this location.
     * @param tIcuIndex Index into `tIcus` to process.
     * @param lView Current `LView`
     * @returns true if a new case was created (needed so that the update executes regardless of the
     *     bitmask)
     */


    function applyIcuSwitchCaseRemove(tView, tIcus, tIcuIndex, lView) {
      ngDevMode && assertIndexInRange(tIcus, tIcuIndex);
      var tIcu = tIcus[tIcuIndex];
      var activeCaseIndex = lView[tIcu.currentCaseLViewIndex];

      if (activeCaseIndex !== null) {
        var removeCodes = tIcu.remove[activeCaseIndex];

        for (var k = 0; k < removeCodes.length; k++) {
          var removeOpCode = removeCodes[k];
          var nodeOrIcuIndex = removeOpCode >>> 3
          /* SHIFT_REF */
          ;

          switch (removeOpCode & 7
          /* MASK_INSTRUCTION */
          ) {
            case 3
            /* Remove */
            :
              // FIXME(misko): this comment is wrong!
              // Remove DOM element, but do *not* mark TNode as detached, since we are
              // just switching ICU cases (while keeping the same TNode), so a DOM element
              // representing a new ICU case will be re-created.
              removeNode(tView, lView, nodeOrIcuIndex,
              /* markAsDetached */
              false);
              break;

            case 6
            /* RemoveNestedIcu */
            :
              applyIcuSwitchCaseRemove(tView, tIcus, nodeOrIcuIndex, lView);
              break;
          }
        }
      }
    }

    function appendI18nNode(tView, tNode, parentTNode, previousTNode, lView) {
      ngDevMode && ngDevMode.rendererMoveNode++;
      var nextNode = tNode.next;

      if (!previousTNode) {
        previousTNode = parentTNode;
      } // Re-organize node tree to put this node in the correct position.


      if (previousTNode === parentTNode && tNode !== parentTNode.child) {
        tNode.next = parentTNode.child;
        parentTNode.child = tNode;
      } else if (previousTNode !== parentTNode && tNode !== previousTNode.next) {
        tNode.next = previousTNode.next;
        previousTNode.next = tNode;
      } else {
        tNode.next = null;
      }

      if (parentTNode !== lView[T_HOST]) {
        tNode.parent = parentTNode;
      } // If tNode was moved around, we might need to fix a broken link.


      var cursor = tNode.next;

      while (cursor) {
        if (cursor.next === tNode) {
          cursor.next = nextNode;
        }

        cursor = cursor.next;
      } // If the placeholder to append is a projection, we need to move the projected nodes instead


      if (tNode.type === 1
      /* Projection */
      ) {
          applyProjection(tView, lView, tNode);
          return tNode;
        }

      appendChild(tView, lView, getNativeByTNode(tNode, lView), tNode);
      var slotValue = lView[tNode.index];

      if (tNode.type !== 0
      /* Container */
      && isLContainer(slotValue)) {
        // Nodes that inject ViewContainerRef also have a comment node that should be moved
        appendChild(tView, lView, slotValue[NATIVE], tNode);
      }

      return tNode;
    }
    /**
     * See `i18nEnd` above.
     */


    function i18nEndFirstPass(tView, lView) {
      ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'i18nEnd should be called before any binding');
      var rootIndex = popI18nIndex();
      var tI18n = tView.data[rootIndex + HEADER_OFFSET];
      ngDevMode && assertDefined(tI18n, "You should call i18nStart before i18nEnd"); // Find the last node that was added before `i18nEnd`

      var lastCreatedNode = getPreviousOrParentTNode(); // Read the instructions to insert/move/remove DOM elements

      var visitedNodes = applyCreateOpCodes(tView, rootIndex, tI18n.create, lView); // Remove deleted nodes

      var index = rootIndex + 1;

      while (index <= lastCreatedNode.index - HEADER_OFFSET) {
        if (visitedNodes.indexOf(index) === -1) {
          removeNode(tView, lView, index,
          /* markAsDetached */
          true);
        } // Check if an element has any local refs and skip them


        var tNode = getTNode(tView, index);

        if (tNode && (tNode.type === 0
        /* Container */
        || tNode.type === 3
        /* Element */
        || tNode.type === 4
        /* ElementContainer */
        ) && tNode.localNames !== null) {
          // Divide by 2 to get the number of local refs,
          // since they are stored as an array that also includes directive indexes,
          // i.e. ["localRef", directiveIndex, ...]
          index += tNode.localNames.length >> 1;
        }

        index++;
      }
    }

    function removeNode(tView, lView, index, markAsDetached) {
      var removedPhTNode = getTNode(tView, index);
      var removedPhRNode = getNativeByIndex(index, lView);

      if (removedPhRNode) {
        nativeRemoveNode(lView[RENDERER], removedPhRNode);
      }

      var slotValue = load(lView, index);

      if (isLContainer(slotValue)) {
        var lContainer = slotValue;

        if (removedPhTNode.type !== 0
        /* Container */
        ) {
            nativeRemoveNode(lView[RENDERER], lContainer[NATIVE]);
          }
      }

      if (markAsDetached) {
        // Define this node as detached to avoid projecting it later
        removedPhTNode.flags |= 64
        /* isDetached */
        ;
      }

      ngDevMode && ngDevMode.rendererRemoveNode++;
    }
    /**
     * Creates and stores the dynamic TNode, and unhooks it from the tree for now.
     */


    function createDynamicNodeAtIndex(tView, lView, index, type, _native16, name) {
      var previousOrParentTNode = getPreviousOrParentTNode();
      ngDevMode && assertIndexInRange(lView, index + HEADER_OFFSET);
      lView[index + HEADER_OFFSET] = _native16; // FIXME(misko): Why does this create A TNode??? I would not expect this to be here.

      var tNode = getOrCreateTNode(tView, lView[T_HOST], index, type, name, null); // We are creating a dynamic node, the previous tNode might not be pointing at this node.
      // We will link ourselves into the tree later with `appendI18nNode`.

      if (previousOrParentTNode && previousOrParentTNode.next === tNode) {
        previousOrParentTNode.next = null;
      }

      return tNode;
    }
    /**
     * Returns the index of the current case of an ICU expression depending on the main binding value
     *
     * @param icuExpression
     * @param bindingValue The value of the main binding used by this ICU expression
     */


    function getCaseIndex(icuExpression, bindingValue) {
      var index = icuExpression.cases.indexOf(bindingValue);

      if (index === -1) {
        switch (icuExpression.type) {
          case 1
          /* plural */
          :
            {
              var resolvedCase = getPluralCase(bindingValue, getLocaleId());
              index = icuExpression.cases.indexOf(resolvedCase);

              if (index === -1 && resolvedCase !== 'other') {
                index = icuExpression.cases.indexOf('other');
              }

              break;
            }

          case 0
          /* select */
          :
            {
              index = icuExpression.cases.indexOf('other');
              break;
            }
        }
      }

      return index;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Converts `I18nUpdateOpCodes` array into a human readable format.
     *
     * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.
     * This function provides a human readable view of the opcodes. This is useful when debugging the
     * application as well as writing more readable tests.
     *
     * @param this `I18nUpdateOpCodes` if attached as a method.
     * @param opcodes `I18nUpdateOpCodes` if invoked as a function.
     */


    function i18nUpdateOpCodesToString(opcodes) {
      var parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
      var lines = [];

      function consumeOpCode(value) {
        var ref = value >>> 2
        /* SHIFT_REF */
        ;
        var opCode = value & 3
        /* MASK_OPCODE */
        ;

        switch (opCode) {
          case 0
          /* Text */
          :
            return "(lView[".concat(ref, "] as Text).textContent = $$$");

          case 1
          /* Attr */
          :
            var attrName = parser.consumeString();
            var sanitizationFn = parser.consumeFunction();

            var _value3 = sanitizationFn ? "(".concat(sanitizationFn, ")($$$)") : '$$$';

            return "(lView[".concat(ref, "] as Element).setAttribute('").concat(attrName, "', ").concat(_value3, ")");

          case 2
          /* IcuSwitch */
          :
            return "icuSwitchCase(lView[".concat(ref, "] as Comment, ").concat(parser.consumeNumber(), ", $$$)");

          case 3
          /* IcuUpdate */
          :
            return "icuUpdateCase(lView[".concat(ref, "] as Comment, ").concat(parser.consumeNumber(), ")");
        }

        throw new Error('unexpected OpCode');
      }

      while (parser.hasMore()) {
        var mask = parser.consumeNumber();
        var size = parser.consumeNumber();
        var end = parser.i + size;
        var statements = [];
        var statement = '';

        while (parser.i < end) {
          var value = parser.consumeNumberOrString();

          if (typeof value === 'string') {
            statement += value;
          } else if (value < 0) {
            // Negative numbers are ref indexes
            statement += '${lView[' + (0 - value) + ']}';
          } else {
            // Positive numbers are operations.
            var opCodeText = consumeOpCode(value);
            statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');
            statement = '';
          }
        }

        lines.push("if (mask & 0b".concat(mask.toString(2), ") { ").concat(statements.join(' '), " }"));
      }

      return lines;
    }
    /**
     * Converts `I18nMutableOpCodes` array into a human readable format.
     *
     * This function is attached to the `I18nMutableOpCodes.debug` if `ngDevMode` is enabled. This
     * function provides a human readable view of the opcodes. This is useful when debugging the
     * application as well as writing more readable tests.
     *
     * @param this `I18nMutableOpCodes` if attached as a method.
     * @param opcodes `I18nMutableOpCodes` if invoked as a function.
     */


    function i18nMutateOpCodesToString(opcodes) {
      var parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
      var lines = [];

      function consumeOpCode(opCode) {
        var parent = getParentFromI18nMutateOpCode(opCode);
        var ref = getRefFromI18nMutateOpCode(opCode);

        switch (getInstructionFromI18nMutateOpCode(opCode)) {
          case 0
          /* Select */
          :
            lastRef = ref;
            return '';

          case 1
          /* AppendChild */
          :
            return "(lView[".concat(parent, "] as Element).appendChild(lView[").concat(lastRef, "])");

          case 3
          /* Remove */
          :
            return "(lView[".concat(parent, "] as Element).remove(lView[").concat(ref, "])");

          case 4
          /* Attr */
          :
            return "(lView[".concat(ref, "] as Element).setAttribute(\"").concat(parser.consumeString(), "\", \"").concat(parser.consumeString(), "\")");

          case 5
          /* ElementEnd */
          :
            return "setPreviousOrParentTNode(tView.data[".concat(ref, "] as TNode)");

          case 6
          /* RemoveNestedIcu */
          :
            return "removeNestedICU(".concat(ref, ")");
        }

        throw new Error('Unexpected OpCode');
      }

      var lastRef = -1;

      while (parser.hasMore()) {
        var value = parser.consumeNumberStringOrMarker();

        if (value === COMMENT_MARKER) {
          var text = parser.consumeString();
          lastRef = parser.consumeNumber();
          lines.push("lView[".concat(lastRef, "] = document.createComment(\"").concat(text, "\")"));
        } else if (value === ELEMENT_MARKER) {
          var _text = parser.consumeString();

          lastRef = parser.consumeNumber();
          lines.push("lView[".concat(lastRef, "] = document.createElement(\"").concat(_text, "\")"));
        } else if (typeof value === 'string') {
          lastRef = parser.consumeNumber();
          lines.push("lView[".concat(lastRef, "] = document.createTextNode(\"").concat(value, "\")"));
        } else if (typeof value === 'number') {
          var line = consumeOpCode(value);
          line && lines.push(line);
        } else {
          throw new Error('Unexpected value');
        }
      }

      return lines;
    }

    var OpCodeParser = /*#__PURE__*/function () {
      function OpCodeParser(codes) {
        _classCallCheck(this, OpCodeParser);

        this.i = 0;
        this.codes = codes;
      }

      _createClass2(OpCodeParser, [{
        key: "hasMore",
        value: function hasMore() {
          return this.i < this.codes.length;
        }
      }, {
        key: "consumeNumber",
        value: function consumeNumber() {
          var value = this.codes[this.i++];
          assertNumber(value, 'expecting number in OpCode');
          return value;
        }
      }, {
        key: "consumeString",
        value: function consumeString() {
          var value = this.codes[this.i++];
          assertString(value, 'expecting string in OpCode');
          return value;
        }
      }, {
        key: "consumeFunction",
        value: function consumeFunction() {
          var value = this.codes[this.i++];

          if (value === null || typeof value === 'function') {
            return value;
          }

          throw new Error('expecting function in OpCode');
        }
      }, {
        key: "consumeNumberOrString",
        value: function consumeNumberOrString() {
          var value = this.codes[this.i++];

          if (typeof value === 'string') {
            return value;
          }

          assertNumber(value, 'expecting number or string in OpCode');
          return value;
        }
      }, {
        key: "consumeNumberStringOrMarker",
        value: function consumeNumberStringOrMarker() {
          var value = this.codes[this.i++];

          if (typeof value === 'string' || typeof value === 'number' || value == COMMENT_MARKER || value == ELEMENT_MARKER) {
            return value;
          }

          assertNumber(value, 'expecting number, string, COMMENT_MARKER or ELEMENT_MARKER in OpCode');
          return value;
        }
      }]);

      return OpCodeParser;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var BINDING_REGEXP = /�(\d+):?\d*�/gi;
    var ICU_REGEXP = /({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi;
    var NESTED_ICU = /�(\d+)�/;
    var ICU_BLOCK_REGEXP = /^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/; // Count for the number of vars that will be allocated for each i18n block.
    // It is global because this is used in multiple functions that include loops and recursive calls.
    // This is reset to 0 when `i18nStartFirstPass` is called.

    var i18nVarsCount;
    var parentIndexStack = [];
    var MARKER = "\uFFFD";
    var SUBTEMPLATE_REGEXP = /�\/?\*(\d+:\d+)�/gi;
    var PH_REGEXP = /�(\/?[#*!]\d+):?\d*�/gi;
    /**
     * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:
     * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32
     * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character
     * and later on replaced by a space. We are re-implementing the same idea here, since translations
     * might contain this special character.
     */

    var NGSP_UNICODE_REGEXP = /\uE500/g;

    function replaceNgsp(value) {
      return value.replace(NGSP_UNICODE_REGEXP, ' ');
    }
    /**
     * See `i18nStart` above.
     */


    function i18nStartFirstPass(lView, tView, index, message, subTemplateIndex) {
      var startIndex = tView.blueprint.length - HEADER_OFFSET;
      i18nVarsCount = 0;
      var previousOrParentTNode = getPreviousOrParentTNode();
      var parentTNode = getIsParent() ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;
      var parentIndex = parentTNode && parentTNode !== lView[T_HOST] ? parentTNode.index - HEADER_OFFSET : index;
      var parentIndexPointer = 0;
      parentIndexStack[parentIndexPointer] = parentIndex;
      var createOpCodes = [];

      if (ngDevMode) {
        attachDebugGetter(createOpCodes, i18nMutateOpCodesToString);
      } // If the previous node wasn't the direct parent then we have a translation without top level
      // element and we need to keep a reference of the previous element if there is one. We should also
      // keep track whether an element was a parent node or not, so that the logic that consumes
      // the generated `I18nMutateOpCode`s can leverage this information to properly set TNode state
      // (whether it's a parent or sibling).


      if (index > 0 && previousOrParentTNode !== parentTNode) {
        var previousTNodeIndex = previousOrParentTNode.index - HEADER_OFFSET; // If current TNode is a sibling node, encode it using a negative index. This information is
        // required when the `Select` action is processed (see the `readCreateOpCodes` function).

        if (!getIsParent()) {
          previousTNodeIndex = ~previousTNodeIndex;
        } // Create an OpCode to select the previous TNode


        createOpCodes.push(previousTNodeIndex << 3
        /* SHIFT_REF */
        | 0
        /* Select */
        );
      }

      var updateOpCodes = [];

      if (ngDevMode) {
        attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
      }

      var icuExpressions = [];

      if (message === '' && isRootTemplateMessage(subTemplateIndex)) {
        // If top level translation is an empty string, do not invoke additional processing
        // and just create op codes for empty text node instead.
        createOpCodes.push(message, allocNodeIndex(startIndex), parentIndex << 17
        /* SHIFT_PARENT */
        | 1
        /* AppendChild */
        );
      } else {
        var templateTranslation = getTranslationForTemplate(message, subTemplateIndex);
        var msgParts = replaceNgsp(templateTranslation).split(PH_REGEXP);

        for (var i = 0; i < msgParts.length; i++) {
          var value = msgParts[i];

          if (i & 1) {
            // Odd indexes are placeholders (elements and sub-templates)
            if (value.charAt(0) === '/') {
              // It is a closing tag
              if (value.charAt(1) === "#"
              /* ELEMENT */
              ) {
                  var phIndex = parseInt(value.substr(2), 10);
                  parentIndex = parentIndexStack[--parentIndexPointer];
                  createOpCodes.push(phIndex << 3
                  /* SHIFT_REF */
                  | 5
                  /* ElementEnd */
                  );
                }
            } else {
              var _phIndex = parseInt(value.substr(1), 10);

              var isElement = value.charAt(0) === "#"
              /* ELEMENT */
              ; // The value represents a placeholder that we move to the designated index.
              // Note: positive indicies indicate that a TNode with a given index should also be marked
              // as parent while executing `Select` instruction.

              createOpCodes.push((isElement ? _phIndex : ~_phIndex) << 3
              /* SHIFT_REF */
              | 0
              /* Select */
              , parentIndex << 17
              /* SHIFT_PARENT */
              | 1
              /* AppendChild */
              );

              if (isElement) {
                parentIndexStack[++parentIndexPointer] = parentIndex = _phIndex;
              }
            }
          } else {
            // Even indexes are text (including bindings & ICU expressions)
            var parts = extractParts(value);

            for (var j = 0; j < parts.length; j++) {
              if (j & 1) {
                // Odd indexes are ICU expressions
                var icuExpression = parts[j]; // Verify that ICU expression has the right shape. Translations might contain invalid
                // constructions (while original messages were correct), so ICU parsing at runtime may
                // not succeed (thus `icuExpression` remains a string).

                if (typeof icuExpression !== 'object') {
                  throw new Error("Unable to parse ICU expression in \"".concat(templateTranslation, "\" message."));
                } // Create the comment node that will anchor the ICU expression


                var icuNodeIndex = allocNodeIndex(startIndex);
                createOpCodes.push(COMMENT_MARKER, ngDevMode ? "ICU ".concat(icuNodeIndex) : '', icuNodeIndex, parentIndex << 17
                /* SHIFT_PARENT */
                | 1
                /* AppendChild */
                ); // Update codes for the ICU expression

                var mask = getBindingMask(icuExpression);
                icuStart(icuExpressions, icuExpression, icuNodeIndex, icuNodeIndex); // Since this is recursive, the last TIcu that was pushed is the one we want

                var tIcuIndex = icuExpressions.length - 1;
                updateOpCodes.push(toMaskBit(icuExpression.mainBinding), // mask of the main binding
                3, // skip 3 opCodes if not changed
                -1 - icuExpression.mainBinding, icuNodeIndex << 2
                /* SHIFT_REF */
                | 2
                /* IcuSwitch */
                , tIcuIndex, mask, // mask of all the bindings of this ICU expression
                2, // skip 2 opCodes if not changed
                icuNodeIndex << 2
                /* SHIFT_REF */
                | 3
                /* IcuUpdate */
                , tIcuIndex);
              } else if (parts[j] !== '') {
                var text = parts[j]; // Even indexes are text (including bindings)

                var hasBinding = text.match(BINDING_REGEXP); // Create text nodes

                var textNodeIndex = allocNodeIndex(startIndex);
                createOpCodes.push( // If there is a binding, the value will be set during update
                hasBinding ? '' : text, textNodeIndex, parentIndex << 17
                /* SHIFT_PARENT */
                | 1
                /* AppendChild */
                );

                if (hasBinding) {
                  addAllToArray(generateBindingUpdateOpCodes(text, textNodeIndex), updateOpCodes);
                }
              }
            }
          }
        }
      }

      if (i18nVarsCount > 0) {
        allocExpando(tView, lView, i18nVarsCount);
      } // NOTE: local var needed to properly assert the type of `TI18n`.


      var tI18n = {
        vars: i18nVarsCount,
        create: createOpCodes,
        update: updateOpCodes,
        icus: icuExpressions.length ? icuExpressions : null
      };
      tView.data[index + HEADER_OFFSET] = tI18n;
    }
    /**
     * See `i18nAttributes` above.
     */


    function i18nAttributesFirstPass(lView, tView, index, values) {
      var previousElement = getPreviousOrParentTNode();
      var previousElementIndex = previousElement.index - HEADER_OFFSET;
      var updateOpCodes = [];

      if (ngDevMode) {
        attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
      }

      for (var i = 0; i < values.length; i += 2) {
        var attrName = values[i];
        var message = values[i + 1];
        var parts = message.split(ICU_REGEXP);

        for (var j = 0; j < parts.length; j++) {
          var value = parts[j];

          if (j & 1) {
            // Odd indexes are ICU expressions
            // TODO(ocombe): support ICU expressions in attributes
            throw new Error('ICU expressions are not yet supported in attributes');
          } else if (value !== '') {
            // Even indexes are text (including bindings)
            var hasBinding = !!value.match(BINDING_REGEXP);

            if (hasBinding) {
              if (tView.firstCreatePass && tView.data[index + HEADER_OFFSET] === null) {
                addAllToArray(generateBindingUpdateOpCodes(value, previousElementIndex, attrName), updateOpCodes);
              }
            } else {
              var tNode = getTNode(tView, previousElementIndex); // Set attributes for Elements only, for other types (like ElementContainer),
              // only set inputs below

              if (tNode.type === 3
              /* Element */
              ) {
                  elementAttributeInternal(tNode, lView, attrName, value, null, null);
                } // Check if that attribute is a directive input


              var dataValue = tNode.inputs !== null && tNode.inputs[attrName];

              if (dataValue) {
                setInputsForProperty(tView, lView, dataValue, attrName, value);

                if (ngDevMode) {
                  var element = getNativeByIndex(previousElementIndex, lView);
                  setNgReflectProperties(lView, element, tNode.type, dataValue, value);
                }
              }
            }
          }
        }
      }

      if (tView.firstCreatePass && tView.data[index + HEADER_OFFSET] === null) {
        tView.data[index + HEADER_OFFSET] = updateOpCodes;
      }
    }
    /**
     * Generate the OpCodes to update the bindings of a string.
     *
     * @param str The string containing the bindings.
     * @param destinationNode Index of the destination node which will receive the binding.
     * @param attrName Name of the attribute, if the string belongs to an attribute.
     * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.
     */


    function generateBindingUpdateOpCodes(str, destinationNode, attrName) {
      var sanitizeFn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var updateOpCodes = [null, null]; // Alloc space for mask and size

      if (ngDevMode) {
        attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
      }

      var textParts = str.split(BINDING_REGEXP);
      var mask = 0;

      for (var j = 0; j < textParts.length; j++) {
        var textValue = textParts[j];

        if (j & 1) {
          // Odd indexes are bindings
          var bindingIndex = parseInt(textValue, 10);
          updateOpCodes.push(-1 - bindingIndex);
          mask = mask | toMaskBit(bindingIndex);
        } else if (textValue !== '') {
          // Even indexes are text
          updateOpCodes.push(textValue);
        }
      }

      updateOpCodes.push(destinationNode << 2
      /* SHIFT_REF */
      | (attrName ? 1
      /* Attr */
      : 0
      /* Text */
      ));

      if (attrName) {
        updateOpCodes.push(attrName, sanitizeFn);
      }

      updateOpCodes[0] = mask;
      updateOpCodes[1] = updateOpCodes.length - 2;
      return updateOpCodes;
    }

    function getBindingMask(icuExpression) {
      var mask = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      mask = mask | toMaskBit(icuExpression.mainBinding);
      var match;

      for (var i = 0; i < icuExpression.values.length; i++) {
        var valueArr = icuExpression.values[i];

        for (var j = 0; j < valueArr.length; j++) {
          var value = valueArr[j];

          if (typeof value === 'string') {
            while (match = BINDING_REGEXP.exec(value)) {
              mask = mask | toMaskBit(parseInt(match[1], 10));
            }
          } else {
            mask = getBindingMask(value, mask);
          }
        }
      }

      return mask;
    }

    function allocNodeIndex(startIndex) {
      return startIndex + i18nVarsCount++;
    }
    /**
     * Convert binding index to mask bit.
     *
     * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make
     * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to have
     * more than 32 bindings this will be hit very rarely. The downside of hitting this corner case is
     * that we will execute binding code more often than necessary. (penalty of performance)
     */


    function toMaskBit(bindingIndex) {
      return 1 << Math.min(bindingIndex, 31);
    }

    function isRootTemplateMessage(subTemplateIndex) {
      return subTemplateIndex === undefined;
    }
    /**
     * Removes everything inside the sub-templates of a message.
     */


    function removeInnerTemplateTranslation(message) {
      var match;
      var res = '';
      var index = 0;
      var inTemplate = false;
      var tagMatched;

      while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {
        if (!inTemplate) {
          res += message.substring(index, match.index + match[0].length);
          tagMatched = match[1];
          inTemplate = true;
        } else {
          if (match[0] === "".concat(MARKER, "/*").concat(tagMatched).concat(MARKER)) {
            index = match.index;
            inTemplate = false;
          }
        }
      }

      ngDevMode && assertEqual(inTemplate, false, "Tag mismatch: unable to find the end of the sub-template in the translation \"".concat(message, "\""));
      res += message.substr(index);
      return res;
    }
    /**
     * Extracts a part of a message and removes the rest.
     *
     * This method is used for extracting a part of the message associated with a template. A translated
     * message can span multiple templates.
     *
     * Example:
     * ```
     * <div i18n>Translate <span *ngIf>me</span>!</div>
     * ```
     *
     * @param message The message to crop
     * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the
     * external template and removes all sub-templates.
     */


    function getTranslationForTemplate(message, subTemplateIndex) {
      if (isRootTemplateMessage(subTemplateIndex)) {
        // We want the root template message, ignore all sub-templates
        return removeInnerTemplateTranslation(message);
      } else {
        // We want a specific sub-template
        var start = message.indexOf(":".concat(subTemplateIndex).concat(MARKER)) + 2 + subTemplateIndex.toString().length;
        var end = message.search(new RegExp("".concat(MARKER, "\\/\\*\\d+:").concat(subTemplateIndex).concat(MARKER)));
        return removeInnerTemplateTranslation(message.substring(start, end));
      }
    }
    /**
     * Generate the OpCodes for ICU expressions.
     *
     * @param tIcus
     * @param icuExpression
     * @param startIndex
     * @param expandoStartIndex
     */


    function icuStart(tIcus, icuExpression, startIndex, expandoStartIndex) {
      var createCodes = [];
      var removeCodes = [];
      var updateCodes = [];
      var vars = [];
      var childIcus = [];
      var values = icuExpression.values;

      for (var i = 0; i < values.length; i++) {
        // Each value is an array of strings & other ICU expressions
        var valueArr = values[i];
        var nestedIcus = [];

        for (var j = 0; j < valueArr.length; j++) {
          var value = valueArr[j];

          if (typeof value !== 'string') {
            // It is an nested ICU expression
            var icuIndex = nestedIcus.push(value) - 1; // Replace nested ICU expression by a comment node

            valueArr[j] = "<!--\uFFFD".concat(icuIndex, "\uFFFD-->");
          }
        }

        var icuCase = parseIcuCase(valueArr.join(''), startIndex, nestedIcus, tIcus, expandoStartIndex);
        createCodes.push(icuCase.create);
        removeCodes.push(icuCase.remove);
        updateCodes.push(icuCase.update);
        vars.push(icuCase.vars);
        childIcus.push(icuCase.childIcus);
      }

      var tIcu = {
        type: icuExpression.type,
        vars: vars,
        currentCaseLViewIndex: HEADER_OFFSET + expandoStartIndex // expandoStartIndex does not include the header so add it.
        + 1,
        childIcus: childIcus,
        cases: icuExpression.cases,
        create: createCodes,
        remove: removeCodes,
        update: updateCodes
      };
      tIcus.push(tIcu); // Adding the maximum possible of vars needed (based on the cases with the most vars)

      i18nVarsCount += Math.max.apply(Math, vars);
    }
    /**
     * Parses text containing an ICU expression and produces a JSON object for it.
     * Original code from closure library, modified for Angular.
     *
     * @param pattern Text containing an ICU expression that needs to be parsed.
     *
     */


    function parseICUBlock(pattern) {
      var cases = [];
      var values = [];
      var icuType = 1
      /* plural */
      ;
      var mainBinding = 0;
      pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {
        if (type === 'select') {
          icuType = 0
          /* select */
          ;
        } else {
          icuType = 1
          /* plural */
          ;
        }

        mainBinding = parseInt(binding.substr(1), 10);
        return '';
      });
      var parts = extractParts(pattern); // Looking for (key block)+ sequence. One of the keys has to be "other".

      for (var pos = 0; pos < parts.length;) {
        var key = parts[pos++].trim();

        if (icuType === 1
        /* plural */
        ) {
            // Key can be "=x", we just want "x"
            key = key.replace(/\s*(?:=)?(\w+)\s*/, '$1');
          }

        if (key.length) {
          cases.push(key);
        }

        var blocks = extractParts(parts[pos++]);

        if (cases.length > values.length) {
          values.push(blocks);
        }
      } // TODO(ocombe): support ICU expressions in attributes, see #21615


      return {
        type: icuType,
        mainBinding: mainBinding,
        cases: cases,
        values: values
      };
    }
    /**
     * Transforms a string template into an HTML template and a list of instructions used to update
     * attributes or nodes that contain bindings.
     *
     * @param unsafeHtml The string to parse
     * @param parentIndex
     * @param nestedIcus
     * @param tIcus
     * @param expandoStartIndex
     */


    function parseIcuCase(unsafeHtml, parentIndex, nestedIcus, tIcus, expandoStartIndex) {
      var inertBodyHelper = getInertBodyHelper(getDocument());
      var inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);

      if (!inertBodyElement) {
        throw new Error('Unable to generate inert body element');
      }

      var wrapper = getTemplateContent(inertBodyElement) || inertBodyElement;
      var opCodes = {
        vars: 1,
        childIcus: [],
        create: [],
        remove: [],
        update: []
      };

      if (ngDevMode) {
        attachDebugGetter(opCodes.create, i18nMutateOpCodesToString);
        attachDebugGetter(opCodes.remove, i18nMutateOpCodesToString);
        attachDebugGetter(opCodes.update, i18nUpdateOpCodesToString);
      }

      parseNodes(wrapper.firstChild, opCodes, parentIndex, nestedIcus, tIcus, expandoStartIndex);
      return opCodes;
    }
    /**
     * Breaks pattern into strings and top level {...} blocks.
     * Can be used to break a message into text and ICU expressions, or to break an ICU expression into
     * keys and cases.
     * Original code from closure library, modified for Angular.
     *
     * @param pattern (sub)Pattern to be broken.
     *
     */


    function extractParts(pattern) {
      if (!pattern) {
        return [];
      }

      var prevPos = 0;
      var braceStack = [];
      var results = [];
      var braces = /[{}]/g; // lastIndex doesn't get set to 0 so we have to.

      braces.lastIndex = 0;
      var match;

      while (match = braces.exec(pattern)) {
        var pos = match.index;

        if (match[0] == '}') {
          braceStack.pop();

          if (braceStack.length == 0) {
            // End of the block.
            var block = pattern.substring(prevPos, pos);

            if (ICU_BLOCK_REGEXP.test(block)) {
              results.push(parseICUBlock(block));
            } else {
              results.push(block);
            }

            prevPos = pos + 1;
          }
        } else {
          if (braceStack.length == 0) {
            var _substring = pattern.substring(prevPos, pos);

            results.push(_substring);
            prevPos = pos + 1;
          }

          braceStack.push('{');
        }
      }

      var substring = pattern.substring(prevPos);
      results.push(substring);
      return results;
    }
    /**
     * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.
     *
     * @param currentNode The first node to parse
     * @param icuCase The data for the ICU expression case that contains those nodes
     * @param parentIndex Index of the current node's parent
     * @param nestedIcus Data for the nested ICU expressions that this case contains
     * @param tIcus Data for all ICU expressions of the current message
     * @param expandoStartIndex Expando start index for the current ICU expression
     */


    function parseNodes(currentNode, icuCase, parentIndex, nestedIcus, tIcus, expandoStartIndex) {
      if (currentNode) {
        var nestedIcusToCreate = [];

        while (currentNode) {
          var nextNode = currentNode.nextSibling;
          var newIndex = expandoStartIndex + ++icuCase.vars;

          switch (currentNode.nodeType) {
            case Node.ELEMENT_NODE:
              var element = currentNode;
              var tagName = element.tagName.toLowerCase();

              if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
                // This isn't a valid element, we won't create an element for it
                icuCase.vars--;
              } else {
                icuCase.create.push(ELEMENT_MARKER, tagName, newIndex, parentIndex << 17
                /* SHIFT_PARENT */
                | 1
                /* AppendChild */
                );
                var elAttrs = element.attributes;

                for (var i = 0; i < elAttrs.length; i++) {
                  var attr = elAttrs.item(i);
                  var lowerAttrName = attr.name.toLowerCase();

                  var _hasBinding = !!attr.value.match(BINDING_REGEXP); // we assume the input string is safe, unless it's using a binding


                  if (_hasBinding) {
                    if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {
                      if (URI_ATTRS[lowerAttrName]) {
                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, _sanitizeUrl), icuCase.update);
                      } else if (SRCSET_ATTRS[lowerAttrName]) {
                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, sanitizeSrcset), icuCase.update);
                      } else {
                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name), icuCase.update);
                      }
                    } else {
                      ngDevMode && console.warn("WARNING: ignoring unsafe attribute value ".concat(lowerAttrName, " on element ").concat(tagName, " (see http://g.co/ng/security#xss)"));
                    }
                  } else {
                    icuCase.create.push(newIndex << 3
                    /* SHIFT_REF */
                    | 4
                    /* Attr */
                    , attr.name, attr.value);
                  }
                } // Parse the children of this node (if any)


                parseNodes(currentNode.firstChild, icuCase, newIndex, nestedIcus, tIcus, expandoStartIndex); // Remove the parent node after the children

                icuCase.remove.push(newIndex << 3
                /* SHIFT_REF */
                | 3
                /* Remove */
                );
              }

              break;

            case Node.TEXT_NODE:
              var value = currentNode.textContent || '';
              var hasBinding = value.match(BINDING_REGEXP);
              icuCase.create.push(hasBinding ? '' : value, newIndex, parentIndex << 17
              /* SHIFT_PARENT */
              | 1
              /* AppendChild */
              );
              icuCase.remove.push(newIndex << 3
              /* SHIFT_REF */
              | 3
              /* Remove */
              );

              if (hasBinding) {
                addAllToArray(generateBindingUpdateOpCodes(value, newIndex), icuCase.update);
              }

              break;

            case Node.COMMENT_NODE:
              // Check if the comment node is a placeholder for a nested ICU
              var match = NESTED_ICU.exec(currentNode.textContent || '');

              if (match) {
                var nestedIcuIndex = parseInt(match[1], 10);
                var newLocal = ngDevMode ? "nested ICU ".concat(nestedIcuIndex) : ''; // Create the comment node that will anchor the ICU expression

                icuCase.create.push(COMMENT_MARKER, newLocal, newIndex, parentIndex << 17
                /* SHIFT_PARENT */
                | 1
                /* AppendChild */
                );
                var nestedIcu = nestedIcus[nestedIcuIndex];
                nestedIcusToCreate.push([nestedIcu, newIndex]);
              } else {
                // We do not handle any other type of comment
                icuCase.vars--;
              }

              break;

            default:
              // We do not handle any other type of element
              icuCase.vars--;
          }

          currentNode = nextNode;
        }

        for (var _i9 = 0; _i9 < nestedIcusToCreate.length; _i9++) {
          var _nestedIcu = nestedIcusToCreate[_i9][0];
          var nestedIcuNodeIndex = nestedIcusToCreate[_i9][1];
          icuStart(tIcus, _nestedIcu, nestedIcuNodeIndex, expandoStartIndex + icuCase.vars); // Since this is recursive, the last TIcu that was pushed is the one we want

          var nestTIcuIndex = tIcus.length - 1;
          icuCase.vars += Math.max.apply(Math, _toConsumableArray(tIcus[nestTIcuIndex].vars));
          icuCase.childIcus.push(nestTIcuIndex);
          var mask = getBindingMask(_nestedIcu);
          icuCase.update.push(toMaskBit(_nestedIcu.mainBinding), // mask of the main binding
          3, // skip 3 opCodes if not changed
          -1 - _nestedIcu.mainBinding, nestedIcuNodeIndex << 2
          /* SHIFT_REF */
          | 2
          /* IcuSwitch */
          , // FIXME(misko): Index should be part of the opcode
          nestTIcuIndex, mask, // mask of all the bindings of this ICU expression
          2, // skip 2 opCodes if not changed
          nestedIcuNodeIndex << 2
          /* SHIFT_REF */
          | 3
          /* IcuUpdate */
          , nestTIcuIndex);
          icuCase.remove.push(nestTIcuIndex << 3
          /* SHIFT_REF */
          | 6
          /* RemoveNestedIcu */
          , // FIXME(misko): Index should be part of the opcode
          nestedIcuNodeIndex << 3
          /* SHIFT_REF */
          | 3
          /* Remove */
          );
        }
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // i18nPostprocess consts


    var ROOT_TEMPLATE_ID = 0;
    var PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]/;
    var PP_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g;
    var PP_ICU_VARS_REGEXP = /({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g;
    var PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;
    var PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\d+)?)�/g;
    var PP_CLOSE_TEMPLATE_REGEXP = /\/\*/;
    var PP_TEMPLATE_ID_REGEXP = /\d+\:(\d+)/;
    /**
     * Handles message string post-processing for internationalization.
     *
     * Handles message string post-processing by transforming it from intermediate
     * format (that might contain some markers that we need to replace) to the final
     * form, consumable by i18nStart instruction. Post processing steps include:
     *
     * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])
     * 2. Replace all ICU vars (like "VAR_PLURAL")
     * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
     * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)
     *    in case multiple ICUs have the same placeholder name
     *
     * @param message Raw translation string for post processing
     * @param replacements Set of replacements that should be applied
     *
     * @returns Transformed string that can be consumed by i18nStart instruction
     *
     * @codeGenApi
     */

    function i18nPostprocess(message) {
      var replacements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      /**
       * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]
       *
       * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically
       * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root
       * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index
       * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in
       * front of �#6�. The post processing step restores the right order by keeping track of the
       * template id stack and looks for placeholders that belong to the currently active template.
       */
      var result = message;

      if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {
        var matches = {};
        var templateIdsStack = [ROOT_TEMPLATE_ID];
        result = result.replace(PP_PLACEHOLDERS_REGEXP, function (m, phs, tmpl) {
          var content = phs || tmpl;
          var placeholders = matches[content] || [];

          if (!placeholders.length) {
            content.split('|').forEach(function (placeholder) {
              var match = placeholder.match(PP_TEMPLATE_ID_REGEXP);
              var templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;
              var isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);
              placeholders.push([templateId, isCloseTemplateTag, placeholder]);
            });
            matches[content] = placeholders;
          }

          if (!placeholders.length) {
            throw new Error("i18n postprocess: unmatched placeholder - ".concat(content));
          }

          var currentTemplateId = templateIdsStack[templateIdsStack.length - 1];
          var idx = 0; // find placeholder index that matches current template id

          for (var i = 0; i < placeholders.length; i++) {
            if (placeholders[i][0] === currentTemplateId) {
              idx = i;
              break;
            }
          } // update template id stack based on the current tag extracted


          var _placeholders$idx = _slicedToArray(placeholders[idx], 3),
              templateId = _placeholders$idx[0],
              isCloseTemplateTag = _placeholders$idx[1],
              placeholder = _placeholders$idx[2];

          if (isCloseTemplateTag) {
            templateIdsStack.pop();
          } else if (currentTemplateId !== templateId) {
            templateIdsStack.push(templateId);
          } // remove processed tag from the list


          placeholders.splice(idx, 1);
          return placeholder;
        });
      } // return current result if no replacements specified


      if (!Object.keys(replacements).length) {
        return result;
      }
      /**
       * Step 2: replace all ICU vars (like "VAR_PLURAL")
       */


      result = result.replace(PP_ICU_VARS_REGEXP, function (match, start, key, _type, _idx, end) {
        return replacements.hasOwnProperty(key) ? "".concat(start).concat(replacements[key]).concat(end) : match;
      });
      /**
       * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
       */

      result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, function (match, key) {
        return replacements.hasOwnProperty(key) ? replacements[key] : match;
      });
      /**
       * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case
       * multiple ICUs have the same placeholder name
       */

      result = result.replace(PP_ICUS_REGEXP, function (match, key) {
        if (replacements.hasOwnProperty(key)) {
          var list = replacements[key];

          if (!list.length) {
            throw new Error("i18n postprocess: unmatched ICU - ".concat(match, " with key: ").concat(key));
          }

          return list.shift();
        }

        return match;
      });
      return result;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Marks a block of text as translatable.
     *
     * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.
     * The translation `message` is the value which is locale specific. The translation string may
     * contain placeholders which associate inner elements and sub-templates within the translation.
     *
     * The translation `message` placeholders are:
     * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be
     *   interpolated into. The placeholder `index` points to the expression binding index. An optional
     *   `block` that matches the sub-template in which it was declared.
     * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning
     *   and end of DOM element that were embedded in the original translation block. The placeholder
     *   `index` points to the element index in the template instructions set. An optional `block` that
     *   matches the sub-template in which it was declared.
     * - `�!{index}(:{block})�`/`�/!{index}(:{block})�`: *Projection Placeholder*:  Marks the
     *   beginning and end of <ng-content> that was embedded in the original translation block.
     *   The placeholder `index` points to the element index in the template instructions set.
     *   An optional `block` that matches the sub-template in which it was declared.
     * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be
     *   split up and translated separately in each angular template function. The `index` points to the
     *   `template` instruction index. A `block` that matches the sub-template in which it was declared.
     *
     * @param index A unique index of the translation in the static block.
     * @param message The translation message.
     * @param subTemplateIndex Optional sub-template index in the `message`.
     *
     * @codeGenApi
     */


    function ɵɵi18nStart(index, message, subTemplateIndex) {
      var tView = getTView();
      ngDevMode && assertDefined(tView, "tView should be defined");
      pushI18nIndex(index); // We need to delay projections until `i18nEnd`

      setDelayProjection(true);

      if (tView.firstCreatePass && tView.data[index + HEADER_OFFSET] === null) {
        i18nStartFirstPass(getLView(), tView, index, message, subTemplateIndex);
      }
    }
    /**
     * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes
     * into the render tree, moves the placeholder nodes and removes the deleted nodes.
     *
     * @codeGenApi
     */


    function ɵɵi18nEnd() {
      var lView = getLView();
      var tView = getTView();
      ngDevMode && assertDefined(tView, "tView should be defined");
      i18nEndFirstPass(tView, lView); // Stop delaying projections

      setDelayProjection(false);
    }
    /**
     *
     * Use this instruction to create a translation block that doesn't contain any placeholder.
     * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.
     *
     * The translation `message` is the value which is locale specific. The translation string may
     * contain placeholders which associate inner elements and sub-templates within the translation.
     *
     * The translation `message` placeholders are:
     * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be
     *   interpolated into. The placeholder `index` points to the expression binding index. An optional
     *   `block` that matches the sub-template in which it was declared.
     * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning
     *   and end of DOM element that were embedded in the original translation block. The placeholder
     *   `index` points to the element index in the template instructions set. An optional `block` that
     *   matches the sub-template in which it was declared.
     * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be
     *   split up and translated separately in each angular template function. The `index` points to the
     *   `template` instruction index. A `block` that matches the sub-template in which it was declared.
     *
     * @param index A unique index of the translation in the static block.
     * @param message The translation message.
     * @param subTemplateIndex Optional sub-template index in the `message`.
     *
     * @codeGenApi
     */


    function ɵɵi18n(index, message, subTemplateIndex) {
      ɵɵi18nStart(index, message, subTemplateIndex);
      ɵɵi18nEnd();
    }
    /**
     * Marks a list of attributes as translatable.
     *
     * @param index A unique index in the static block
     * @param values
     *
     * @codeGenApi
     */


    function ɵɵi18nAttributes(index, values) {
      var lView = getLView();
      var tView = getTView();
      ngDevMode && assertDefined(tView, "tView should be defined");
      i18nAttributesFirstPass(lView, tView, index, values);
    }
    /**
     * Stores the values of the bindings during each update cycle in order to determine if we need to
     * update the translated nodes.
     *
     * @param value The binding's value
     * @returns This function returns itself so that it may be chained
     * (e.g. `i18nExp(ctx.name)(ctx.title)`)
     *
     * @codeGenApi
     */


    function ɵɵi18nExp(value) {
      var lView = getLView();
      setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));
      return ɵɵi18nExp;
    }
    /**
     * Updates a translation block or an i18n attribute when the bindings have changed.
     *
     * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}
     * (i18n attribute) on which it should update the content.
     *
     * @codeGenApi
     */


    function ɵɵi18nApply(index) {
      applyI18n(getTView(), getLView(), index);
    }
    /**
     * Handles message string post-processing for internationalization.
     *
     * Handles message string post-processing by transforming it from intermediate
     * format (that might contain some markers that we need to replace) to the final
     * form, consumable by i18nStart instruction. Post processing steps include:
     *
     * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])
     * 2. Replace all ICU vars (like "VAR_PLURAL")
     * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
     * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)
     *    in case multiple ICUs have the same placeholder name
     *
     * @param message Raw translation string for post processing
     * @param replacements Set of replacements that should be applied
     *
     * @returns Transformed string that can be consumed by i18nStart instruction
     *
     * @codeGenApi
     */


    function ɵɵi18nPostprocess(message) {
      var replacements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return i18nPostprocess(message, replacements);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Adds decorator, constructor, and property metadata to a given type via static metadata fields
     * on the type.
     *
     * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.
     *
     * Calls to `setClassMetadata` can be marked as pure, resulting in the metadata assignments being
     * tree-shaken away during production builds.
     */


    function setClassMetadata(type, decorators, ctorParameters, propDecorators) {
      return noSideEffects(function () {
        var clazz = type; // We determine whether a class has its own metadata by taking the metadata from the
        // parent constructor and checking whether it's the same as the subclass metadata below.
        // We can't use `hasOwnProperty` here because it doesn't work correctly in IE10 for
        // static fields that are defined by TS. See
        // https://github.com/angular/angular/pull/28439#issuecomment-459349218.

        var parentPrototype = clazz.prototype ? Object.getPrototypeOf(clazz.prototype) : null;
        var parentConstructor = parentPrototype && parentPrototype.constructor;

        if (decorators !== null) {
          if (clazz.decorators !== undefined && (!parentConstructor || parentConstructor.decorators !== clazz.decorators)) {
            var _clazz$decorators;

            (_clazz$decorators = clazz.decorators).push.apply(_clazz$decorators, _toConsumableArray(decorators));
          } else {
            clazz.decorators = decorators;
          }
        }

        if (ctorParameters !== null) {
          // Rather than merging, clobber the existing parameters. If other projects exist which
          // use tsickle-style annotations and reflect over them in the same way, this could
          // cause issues, but that is vanishingly unlikely.
          clazz.ctorParameters = ctorParameters;
        }

        if (propDecorators !== null) {
          // The property decorator objects are merged as it is possible different fields have
          // different decorator types. Decorators on individual fields are not merged, as it's
          // also incredibly unlikely that a field will be decorated both with an Angular
          // decorator and a non-Angular decorator that's also been downleveled.
          if (clazz.propDecorators !== undefined && (!parentConstructor || parentConstructor.propDecorators !== clazz.propDecorators)) {
            clazz.propDecorators = Object.assign(Object.assign({}, clazz.propDecorators), propDecorators);
          } else {
            clazz.propDecorators = propDecorators;
          }
        }
      });
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Map of module-id to the corresponding NgModule.
     * - In pre Ivy we track NgModuleFactory,
     * - In post Ivy we track the NgModuleType
     */


    var modules = /*@__PURE__*/new Map();
    /**
     * Registers a loaded module. Should only be called from generated NgModuleFactory code.
     * @publicApi
     */

    function registerModuleFactory(id, factory) {
      var existing = modules.get(id);
      assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);
      modules.set(id, factory);
    }

    function assertSameOrNotExisting(id, type, incoming) {
      if (type && type !== incoming) {
        throw new Error("Duplicate module registered for ".concat(id, " - ").concat(stringify(type), " vs ").concat(stringify(type.name)));
      }
    }

    function registerNgModuleType(ngModuleType) {
      if (ngModuleType.ɵmod.id !== null) {
        var id = ngModuleType.ɵmod.id;
        var existing = modules.get(id);
        assertSameOrNotExisting(id, existing, ngModuleType);
        modules.set(id, ngModuleType);
      }

      var imports = ngModuleType.ɵmod.imports;

      if (imports instanceof Function) {
        imports = imports();
      }

      if (imports) {
        imports.forEach(function (i) {
          return registerNgModuleType(i);
        });
      }
    }

    function clearModulesForTest() {
      modules.clear();
    }

    function getRegisteredNgModuleType(id) {
      return modules.get(id) || autoRegisterModuleById[id];
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var NgModuleRef$1 = /*#__PURE__*/function (_NgModuleRef) {
      _inherits(NgModuleRef$1, _NgModuleRef);

      var _super21 = _createSuper(NgModuleRef$1);

      function NgModuleRef$1(ngModuleType, _parent) {
        var _this32;

        _classCallCheck(this, NgModuleRef$1);

        _this32 = _super21.call(this);
        _this32._parent = _parent; // tslint:disable-next-line:require-internal-with-underscore

        _this32._bootstrapComponents = [];
        _this32.injector = _assertThisInitialized(_this32);
        _this32.destroyCbs = []; // When bootstrapping a module we have a dependency graph that looks like this:
        // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the
        // module being resolved tries to inject the ComponentFactoryResolver, it'll create a
        // circular dependency which will result in a runtime error, because the injector doesn't
        // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves
        // and providing it, rather than letting the injector resolve it.

        _this32.componentFactoryResolver = new ComponentFactoryResolver$1(_assertThisInitialized(_this32));
        var ngModuleDef = getNgModuleDef(ngModuleType);
        ngDevMode && assertDefined(ngModuleDef, "NgModule '".concat(stringify(ngModuleType), "' is not a subtype of 'NgModuleType'."));
        var ngLocaleIdDef = getNgLocaleIdDef(ngModuleType);
        ngLocaleIdDef && setLocaleId(ngLocaleIdDef);
        _this32._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);
        _this32._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [{
          provide: NgModuleRef,
          useValue: _assertThisInitialized(_this32)
        }, {
          provide: ComponentFactoryResolver,
          useValue: _this32.componentFactoryResolver
        }], stringify(ngModuleType)); // We need to resolve the injector types separately from the injector creation, because
        // the module might be trying to use this ref in its contructor for DI which will cause a
        // circular error that will eventually error out, because the injector isn't created yet.

        _this32._r3Injector._resolveInjectorDefTypes();

        _this32.instance = _this32.get(ngModuleType);
        return _this32;
      }

      _createClass2(NgModuleRef$1, [{
        key: "get",
        value: function get(token) {
          var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.THROW_IF_NOT_FOUND;
          var injectFlags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InjectFlags.Default;

          if (token === Injector || token === NgModuleRef || token === INJECTOR) {
            return this;
          }

          return this._r3Injector.get(token, notFoundValue, injectFlags);
        }
      }, {
        key: "destroy",
        value: function destroy() {
          ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
          var injector = this._r3Injector;
          !injector.destroyed && injector.destroy();
          this.destroyCbs.forEach(function (fn) {
            return fn();
          });
          this.destroyCbs = null;
        }
      }, {
        key: "onDestroy",
        value: function onDestroy(callback) {
          ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
          this.destroyCbs.push(callback);
        }
      }]);

      return NgModuleRef$1;
    }(NgModuleRef);

    var NgModuleFactory$1 = /*#__PURE__*/function (_NgModuleFactory) {
      _inherits(NgModuleFactory$1, _NgModuleFactory);

      var _super22 = _createSuper(NgModuleFactory$1);

      function NgModuleFactory$1(moduleType) {
        var _this33;

        _classCallCheck(this, NgModuleFactory$1);

        _this33 = _super22.call(this);
        _this33.moduleType = moduleType;
        var ngModuleDef = getNgModuleDef(moduleType);

        if (ngModuleDef !== null) {
          // Register the NgModule with Angular's module registry. The location (and hence timing) of
          // this call is critical to ensure this works correctly (modules get registered when expected)
          // without bloating bundles (modules are registered when otherwise not referenced).
          //
          // In View Engine, registration occurs in the .ngfactory.js file as a side effect. This has
          // several practical consequences:
          //
          // - If an .ngfactory file is not imported from, the module won't be registered (and can be
          //   tree shaken).
          // - If an .ngfactory file is imported from, the module will be registered even if an instance
          //   is not actually created (via `create` below).
          // - Since an .ngfactory file in View Engine references the .ngfactory files of the NgModule's
          //   imports,
          //
          // In Ivy, things are a bit different. .ngfactory files still exist for compatibility, but are
          // not a required API to use - there are other ways to obtain an NgModuleFactory for a given
          // NgModule. Thus, relying on a side effect in the .ngfactory file is not sufficient. Instead,
          // the side effect of registration is added here, in the constructor of NgModuleFactory,
          // ensuring no matter how a factory is created, the module is registered correctly.
          //
          // An alternative would be to include the registration side effect inline following the actual
          // NgModule definition. This also has the correct timing, but breaks tree-shaking - modules
          // will be registered and retained even if they're otherwise never referenced.
          registerNgModuleType(moduleType);
        }

        return _this33;
      }

      _createClass2(NgModuleFactory$1, [{
        key: "create",
        value: function create(parentInjector) {
          return new NgModuleRef$1(this.moduleType, parentInjector);
        }
      }]);

      return NgModuleFactory$1;
    }(NgModuleFactory);
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Bindings for pure functions are stored after regular bindings.
     *
     * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|
     * ------------------------------------------------------------------------------------------
     * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |
     * ------------------------------------------------------------------------------------------
     *                    ^                      ^
     *      TView.bindingStartIndex      TView.expandoStartIndex
     *
     * Pure function instructions are given an offset from the binding root. Adding the offset to the
     * binding root gives the first index where the bindings are stored. In component views, the binding
     * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +
     * any directive instances + any hostVars in directives evaluated before it.
     *
     * See VIEW_DATA.md for more information about host binding resolution.
     */

    /**
     * If the value hasn't been saved, calls the pure function to store and return the
     * value. If it has been saved, returns the saved value.
     *
     * @param slotOffset the offset from binding root to the reserved slot
     * @param pureFn Function that returns a value
     * @param thisArg Optional calling context of pureFn
     * @returns value
     *
     * @codeGenApi
     */


    function ɵɵpureFunction0(slotOffset, pureFn, thisArg) {
      var bindingIndex = getBindingRoot() + slotOffset;
      var lView = getLView();
      return lView[bindingIndex] === NO_CHANGE ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);
    }
    /**
     * If the value of the provided exp has changed, calls the pure function to return
     * an updated value. Or if the value has not changed, returns cached value.
     *
     * @param slotOffset the offset from binding root to the reserved slot
     * @param pureFn Function that returns an updated value
     * @param exp Updated expression value
     * @param thisArg Optional calling context of pureFn
     * @returns Updated or cached value
     *
     * @codeGenApi
     */


    function ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {
      return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);
    }
    /**
     * If the value of any provided exp has changed, calls the pure function to return
     * an updated value. Or if no values have changed, returns cached value.
     *
     * @param slotOffset the offset from binding root to the reserved slot
     * @param pureFn
     * @param exp1
     * @param exp2
     * @param thisArg Optional calling context of pureFn
     * @returns Updated or cached value
     *
     * @codeGenApi
     */


    function ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {
      return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);
    }
    /**
     * If the value of any provided exp has changed, calls the pure function to return
     * an updated value. Or if no values have changed, returns cached value.
     *
     * @param slotOffset the offset from binding root to the reserved slot
     * @param pureFn
     * @param exp1
     * @param exp2
     * @param exp3
     * @param thisArg Optional calling context of pureFn
     * @returns Updated or cached value
     *
     * @codeGenApi
     */


    function ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
      return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);
    }
    /**
     * If the value of any provided exp has changed, calls the pure function to return
     * an updated value. Or if no values have changed, returns cached value.
     *
     * @param slotOffset the offset from binding root to the reserved slot
     * @param pureFn
     * @param exp1
     * @param exp2
     * @param exp3
     * @param exp4
     * @param thisArg Optional calling context of pureFn
     * @returns Updated or cached value
     *
     * @codeGenApi
     */


    function ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
      return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);
    }
    /**
     * If the value of any provided exp has changed, calls the pure function to return
     * an updated value. Or if no values have changed, returns cached value.
     *
     * @param slotOffset the offset from binding root to the reserved slot
     * @param pureFn
     * @param exp1
     * @param exp2
     * @param exp3
     * @param exp4
     * @param exp5
     * @param thisArg Optional calling context of pureFn
     * @returns Updated or cached value
     *
     * @codeGenApi
     */


    function ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {
      var bindingIndex = getBindingRoot() + slotOffset;
      var lView = getLView();
      var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
      return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);
    }
    /**
     * If the value of any provided exp has changed, calls the pure function to return
     * an updated value. Or if no values have changed, returns cached value.
     *
     * @param slotOffset the offset from binding root to the reserved slot
     * @param pureFn
     * @param exp1
     * @param exp2
     * @param exp3
     * @param exp4
     * @param exp5
     * @param exp6
     * @param thisArg Optional calling context of pureFn
     * @returns Updated or cached value
     *
     * @codeGenApi
     */


    function ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {
      var bindingIndex = getBindingRoot() + slotOffset;
      var lView = getLView();
      var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
      return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);
    }
    /**
     * If the value of any provided exp has changed, calls the pure function to return
     * an updated value. Or if no values have changed, returns cached value.
     *
     * @param slotOffset the offset from binding root to the reserved slot
     * @param pureFn
     * @param exp1
     * @param exp2
     * @param exp3
     * @param exp4
     * @param exp5
     * @param exp6
     * @param exp7
     * @param thisArg Optional calling context of pureFn
     * @returns Updated or cached value
     *
     * @codeGenApi
     */


    function ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {
      var bindingIndex = getBindingRoot() + slotOffset;
      var lView = getLView();
      var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
      return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);
    }
    /**
     * If the value of any provided exp has changed, calls the pure function to return
     * an updated value. Or if no values have changed, returns cached value.
     *
     * @param slotOffset the offset from binding root to the reserved slot
     * @param pureFn
     * @param exp1
     * @param exp2
     * @param exp3
     * @param exp4
     * @param exp5
     * @param exp6
     * @param exp7
     * @param exp8
     * @param thisArg Optional calling context of pureFn
     * @returns Updated or cached value
     *
     * @codeGenApi
     */


    function ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {
      var bindingIndex = getBindingRoot() + slotOffset;
      var lView = getLView();
      var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
      return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);
    }
    /**
     * pureFunction instruction that can support any number of bindings.
     *
     * If the value of any provided exp has changed, calls the pure function to return
     * an updated value. Or if no values have changed, returns cached value.
     *
     * @param slotOffset the offset from binding root to the reserved slot
     * @param pureFn A pure function that takes binding values and builds an object or array
     * containing those values.
     * @param exps An array of binding values
     * @param thisArg Optional calling context of pureFn
     * @returns Updated or cached value
     *
     * @codeGenApi
     */


    function ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {
      return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);
    }
    /**
     * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized
     * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first
     * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE
     * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert
     * it to `undefined`.
     */


    function getPureFunctionReturnValue(lView, returnValueIndex) {
      ngDevMode && assertIndexInRange(lView, returnValueIndex);
      var lastReturnValue = lView[returnValueIndex];
      return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;
    }
    /**
     * If the value of the provided exp has changed, calls the pure function to return
     * an updated value. Or if the value has not changed, returns cached value.
     *
     * @param lView LView in which the function is being executed.
     * @param bindingRoot Binding root index.
     * @param slotOffset the offset from binding root to the reserved slot
     * @param pureFn Function that returns an updated value
     * @param exp Updated expression value
     * @param thisArg Optional calling context of pureFn
     * @returns Updated or cached value
     */


    function pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {
      var bindingIndex = bindingRoot + slotOffset;
      return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getPureFunctionReturnValue(lView, bindingIndex + 1);
    }
    /**
     * If the value of any provided exp has changed, calls the pure function to return
     * an updated value. Or if no values have changed, returns cached value.
     *
     * @param lView LView in which the function is being executed.
     * @param bindingRoot Binding root index.
     * @param slotOffset the offset from binding root to the reserved slot
     * @param pureFn
     * @param exp1
     * @param exp2
     * @param thisArg Optional calling context of pureFn
     * @returns Updated or cached value
     */


    function pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {
      var bindingIndex = bindingRoot + slotOffset;
      return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getPureFunctionReturnValue(lView, bindingIndex + 2);
    }
    /**
     * If the value of any provided exp has changed, calls the pure function to return
     * an updated value. Or if no values have changed, returns cached value.
     *
     * @param lView LView in which the function is being executed.
     * @param bindingRoot Binding root index.
     * @param slotOffset the offset from binding root to the reserved slot
     * @param pureFn
     * @param exp1
     * @param exp2
     * @param exp3
     * @param thisArg Optional calling context of pureFn
     * @returns Updated or cached value
     */


    function pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
      var bindingIndex = bindingRoot + slotOffset;
      return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getPureFunctionReturnValue(lView, bindingIndex + 3);
    }
    /**
     * If the value of any provided exp has changed, calls the pure function to return
     * an updated value. Or if no values have changed, returns cached value.
     *
     * @param lView LView in which the function is being executed.
     * @param bindingRoot Binding root index.
     * @param slotOffset the offset from binding root to the reserved slot
     * @param pureFn
     * @param exp1
     * @param exp2
     * @param exp3
     * @param exp4
     * @param thisArg Optional calling context of pureFn
     * @returns Updated or cached value
     *
     */


    function pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
      var bindingIndex = bindingRoot + slotOffset;
      return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getPureFunctionReturnValue(lView, bindingIndex + 4);
    }
    /**
     * pureFunction instruction that can support any number of bindings.
     *
     * If the value of any provided exp has changed, calls the pure function to return
     * an updated value. Or if no values have changed, returns cached value.
     *
     * @param lView LView in which the function is being executed.
     * @param bindingRoot Binding root index.
     * @param slotOffset the offset from binding root to the reserved slot
     * @param pureFn A pure function that takes binding values and builds an object or array
     * containing those values.
     * @param exps An array of binding values
     * @param thisArg Optional calling context of pureFn
     * @returns Updated or cached value
     */


    function pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {
      var bindingIndex = bindingRoot + slotOffset;
      var different = false;

      for (var i = 0; i < exps.length; i++) {
        bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);
      }

      return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getPureFunctionReturnValue(lView, bindingIndex);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Create a pipe.
     *
     * @param index Pipe index where the pipe will be stored.
     * @param pipeName The name of the pipe
     * @returns T the instance of the pipe.
     *
     * @codeGenApi
     */


    function ɵɵpipe(index, pipeName) {
      var tView = getTView();
      var pipeDef;
      var adjustedIndex = index + HEADER_OFFSET;

      if (tView.firstCreatePass) {
        pipeDef = getPipeDef$1(pipeName, tView.pipeRegistry);
        tView.data[adjustedIndex] = pipeDef;

        if (pipeDef.onDestroy) {
          (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);
        }
      } else {
        pipeDef = tView.data[adjustedIndex];
      }

      var pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));
      var previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject); // DI for pipes is supposed to behave like directives when placed on a component
      // host node, which means that we have to disable access to `viewProviders`.

      var previousIncludeViewProviders = setIncludeViewProviders(false);
      var pipeInstance = pipeFactory();
      setIncludeViewProviders(previousIncludeViewProviders);
      setInjectImplementation(previousInjectImplementation);
      store(tView, getLView(), index, pipeInstance);
      return pipeInstance;
    }
    /**
     * Searches the pipe registry for a pipe with the given name. If one is found,
     * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.
     *
     * @param name Name of pipe to resolve
     * @param registry Full list of available pipes
     * @returns Matching PipeDef
     */


    function getPipeDef$1(name, registry) {
      if (registry) {
        for (var i = registry.length - 1; i >= 0; i--) {
          var _pipeDef = registry[i];

          if (name === _pipeDef.name) {
            return _pipeDef;
          }
        }
      }

      throw new Error("The pipe '".concat(name, "' could not be found!"));
    }
    /**
     * Invokes a pipe with 1 arguments.
     *
     * This instruction acts as a guard to {@link PipeTransform#transform} invoking
     * the pipe only when an input to the pipe changes.
     *
     * @param index Pipe index where the pipe was stored on creation.
     * @param slotOffset the offset in the reserved slot space
     * @param v1 1st argument to {@link PipeTransform#transform}.
     *
     * @codeGenApi
     */


    function ɵɵpipeBind1(index, slotOffset, v1) {
      var lView = getLView();
      var pipeInstance = load(lView, index);
      return unwrapValue$1(lView, isPure(lView, index) ? pureFunction1Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1));
    }
    /**
     * Invokes a pipe with 2 arguments.
     *
     * This instruction acts as a guard to {@link PipeTransform#transform} invoking
     * the pipe only when an input to the pipe changes.
     *
     * @param index Pipe index where the pipe was stored on creation.
     * @param slotOffset the offset in the reserved slot space
     * @param v1 1st argument to {@link PipeTransform#transform}.
     * @param v2 2nd argument to {@link PipeTransform#transform}.
     *
     * @codeGenApi
     */


    function ɵɵpipeBind2(index, slotOffset, v1, v2) {
      var lView = getLView();
      var pipeInstance = load(lView, index);
      return unwrapValue$1(lView, isPure(lView, index) ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2));
    }
    /**
     * Invokes a pipe with 3 arguments.
     *
     * This instruction acts as a guard to {@link PipeTransform#transform} invoking
     * the pipe only when an input to the pipe changes.
     *
     * @param index Pipe index where the pipe was stored on creation.
     * @param slotOffset the offset in the reserved slot space
     * @param v1 1st argument to {@link PipeTransform#transform}.
     * @param v2 2nd argument to {@link PipeTransform#transform}.
     * @param v3 4rd argument to {@link PipeTransform#transform}.
     *
     * @codeGenApi
     */


    function ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {
      var lView = getLView();
      var pipeInstance = load(lView, index);
      return unwrapValue$1(lView, isPure(lView, index) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3));
    }
    /**
     * Invokes a pipe with 4 arguments.
     *
     * This instruction acts as a guard to {@link PipeTransform#transform} invoking
     * the pipe only when an input to the pipe changes.
     *
     * @param index Pipe index where the pipe was stored on creation.
     * @param slotOffset the offset in the reserved slot space
     * @param v1 1st argument to {@link PipeTransform#transform}.
     * @param v2 2nd argument to {@link PipeTransform#transform}.
     * @param v3 3rd argument to {@link PipeTransform#transform}.
     * @param v4 4th argument to {@link PipeTransform#transform}.
     *
     * @codeGenApi
     */


    function ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {
      var lView = getLView();
      var pipeInstance = load(lView, index);
      return unwrapValue$1(lView, isPure(lView, index) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) : pipeInstance.transform(v1, v2, v3, v4));
    }
    /**
     * Invokes a pipe with variable number of arguments.
     *
     * This instruction acts as a guard to {@link PipeTransform#transform} invoking
     * the pipe only when an input to the pipe changes.
     *
     * @param index Pipe index where the pipe was stored on creation.
     * @param slotOffset the offset in the reserved slot space
     * @param values Array of arguments to pass to {@link PipeTransform#transform} method.
     *
     * @codeGenApi
     */


    function ɵɵpipeBindV(index, slotOffset, values) {
      var lView = getLView();
      var pipeInstance = load(lView, index);
      return unwrapValue$1(lView, isPure(lView, index) ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values));
    }

    function isPure(lView, index) {
      return lView[TVIEW].data[index + HEADER_OFFSET].pure;
    }
    /**
     * Unwrap the output of a pipe transformation.
     * In order to trick change detection into considering that the new value is always different from
     * the old one, the old value is overwritten by NO_CHANGE.
     *
     * @param newValue the pipe transformation output.
     */


    function unwrapValue$1(lView, newValue) {
      if (WrappedValue.isWrapped(newValue)) {
        newValue = WrappedValue.unwrap(newValue); // The NO_CHANGE value needs to be written at the index where the impacted binding value is
        // stored

        var bindingToInvalidateIdx = getBindingIndex();
        lView[bindingToInvalidateIdx] = NO_CHANGE;
      }

      return newValue;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var EventEmitter_ = /*#__PURE__*/function (_rxjs__WEBPACK_IMPORT) {
      _inherits(EventEmitter_, _rxjs__WEBPACK_IMPORT);

      var _super23 = _createSuper(EventEmitter_);

      function EventEmitter_() {
        var _this34;

        var isAsync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        _classCallCheck(this, EventEmitter_);

        _this34 = _super23.call(this);
        _this34.__isAsync = isAsync;
        return _this34;
      }

      _createClass2(EventEmitter_, [{
        key: "emit",
        value: function emit(value) {
          _get(_getPrototypeOf(EventEmitter_.prototype), "next", this).call(this, value);
        }
      }, {
        key: "subscribe",
        value: function subscribe(generatorOrNext, error, complete) {
          var schedulerFn;

          var errorFn = function errorFn(err) {
            return null;
          };

          var completeFn = function completeFn() {
            return null;
          };

          if (generatorOrNext && typeof generatorOrNext === 'object') {
            schedulerFn = this.__isAsync ? function (value) {
              setTimeout(function () {
                return generatorOrNext.next(value);
              });
            } : function (value) {
              generatorOrNext.next(value);
            };

            if (generatorOrNext.error) {
              errorFn = this.__isAsync ? function (err) {
                setTimeout(function () {
                  return generatorOrNext.error(err);
                });
              } : function (err) {
                generatorOrNext.error(err);
              };
            }

            if (generatorOrNext.complete) {
              completeFn = this.__isAsync ? function () {
                setTimeout(function () {
                  return generatorOrNext.complete();
                });
              } : function () {
                generatorOrNext.complete();
              };
            }
          } else {
            schedulerFn = this.__isAsync ? function (value) {
              setTimeout(function () {
                return generatorOrNext(value);
              });
            } : function (value) {
              generatorOrNext(value);
            };

            if (error) {
              errorFn = this.__isAsync ? function (err) {
                setTimeout(function () {
                  return error(err);
                });
              } : function (err) {
                error(err);
              };
            }

            if (complete) {
              completeFn = this.__isAsync ? function () {
                setTimeout(function () {
                  return complete();
                });
              } : function () {
                complete();
              };
            }
          }

          var sink = _get(_getPrototypeOf(EventEmitter_.prototype), "subscribe", this).call(this, schedulerFn, errorFn, completeFn);

          if (generatorOrNext instanceof rxjs__WEBPACK_IMPORTED_MODULE_0__["Subscription"]) {
            generatorOrNext.add(sink);
          }

          return sink;
        }
      }]);

      return EventEmitter_;
    }(rxjs__WEBPACK_IMPORTED_MODULE_0__["Subject"]);
    /**
     * @publicApi
     */


    var EventEmitter = EventEmitter_;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    function symbolIterator() {
      return this._results[getSymbolIterator()]();
    }
    /**
     * An unmodifiable list of items that Angular keeps up to date when the state
     * of the application changes.
     *
     * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}
     * provide.
     *
     * Implements an iterable interface, therefore it can be used in both ES6
     * javascript `for (var i of items)` loops as well as in Angular templates with
     * `*ngFor="let i of myList"`.
     *
     * Changes can be observed by subscribing to the changes `Observable`.
     *
     * NOTE: In the future this class will implement an `Observable` interface.
     *
     * @usageNotes
     * ### Example
     * ```typescript
     * @Component({...})
     * class Container {
     *   @ViewChildren(Item) items:QueryList<Item>;
     * }
     * ```
     *
     * @publicApi
     */


    var QueryList = /*#__PURE__*/function () {
      function QueryList() {
        _classCallCheck(this, QueryList);

        this.dirty = true;
        this._results = [];
        this.changes = new EventEmitter();
        this.length = 0; // This function should be declared on the prototype, but doing so there will cause the class
        // declaration to have side-effects and become not tree-shakable. For this reason we do it in
        // the constructor.
        // [getSymbolIterator()](): Iterator<T> { ... }

        var symbol = getSymbolIterator();
        var proto = QueryList.prototype;
        if (!proto[symbol]) proto[symbol] = symbolIterator;
      }
      /**
       * See
       * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
       */


      _createClass2(QueryList, [{
        key: "map",
        value: function map(fn) {
          return this._results.map(fn);
        }
        /**
         * See
         * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
         */

      }, {
        key: "filter",
        value: function filter(fn) {
          return this._results.filter(fn);
        }
        /**
         * See
         * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
         */

      }, {
        key: "find",
        value: function find(fn) {
          return this._results.find(fn);
        }
        /**
         * See
         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
         */

      }, {
        key: "reduce",
        value: function reduce(fn, init) {
          return this._results.reduce(fn, init);
        }
        /**
         * See
         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
         */

      }, {
        key: "forEach",
        value: function forEach(fn) {
          this._results.forEach(fn);
        }
        /**
         * See
         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
         */

      }, {
        key: "some",
        value: function some(fn) {
          return this._results.some(fn);
        }
        /**
         * Returns a copy of the internal results list as an Array.
         */

      }, {
        key: "toArray",
        value: function toArray() {
          return this._results.slice();
        }
      }, {
        key: "toString",
        value: function toString() {
          return this._results.toString();
        }
        /**
         * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that
         * on change detection, it will not notify of changes to the queries, unless a new change
         * occurs.
         *
         * @param resultsTree The query results to store
         */

      }, {
        key: "reset",
        value: function reset(resultsTree) {
          this._results = flatten(resultsTree);
          this.dirty = false;
          this.length = this._results.length;
          this.last = this._results[this.length - 1];
          this.first = this._results[0];
        }
        /**
         * Triggers a change event by emitting on the `changes` {@link EventEmitter}.
         */

      }, {
        key: "notifyOnChanges",
        value: function notifyOnChanges() {
          this.changes.emit(this);
        }
        /** internal */

      }, {
        key: "setDirty",
        value: function setDirty() {
          this.dirty = true;
        }
        /** internal */

      }, {
        key: "destroy",
        value: function destroy() {
          this.changes.complete();
          this.changes.unsubscribe();
        }
      }]);

      return QueryList;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // Note: This hack is necessary so we don't erroneously get a circular dependency
    // failure based on types.


    var unusedValueExportToPlacateAjd$7 = 1;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // Note: This hack is necessary so we don't erroneously get a circular dependency
    // failure based on types.

    var unusedValueExportToPlacateAjd$8 = 1;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    var unusedValueToPlacateAjd$2 = unusedValueExportToPlacateAjd$7 + unusedValueExportToPlacateAjd$3 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$8;

    var LQuery_ = /*#__PURE__*/function () {
      function LQuery_(queryList) {
        _classCallCheck(this, LQuery_);

        this.queryList = queryList;
        this.matches = null;
      }

      _createClass2(LQuery_, [{
        key: "clone",
        value: function clone() {
          return new LQuery_(this.queryList);
        }
      }, {
        key: "setDirty",
        value: function setDirty() {
          this.queryList.setDirty();
        }
      }]);

      return LQuery_;
    }();

    var LQueries_ = /*#__PURE__*/function () {
      function LQueries_() {
        var queries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        _classCallCheck(this, LQueries_);

        this.queries = queries;
      }

      _createClass2(LQueries_, [{
        key: "createEmbeddedView",
        value: function createEmbeddedView(tView) {
          var tQueries = tView.queries;

          if (tQueries !== null) {
            var noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;
            var viewLQueries = []; // An embedded view has queries propagated from a declaration view at the beginning of the
            // TQueries collection and up until a first content query declared in the embedded view. Only
            // propagated LQueries are created at this point (LQuery corresponding to declared content
            // queries will be instantiated from the content query instructions for each directive).

            for (var i = 0; i < noOfInheritedQueries; i++) {
              var tQuery = tQueries.getByIndex(i);
              var parentLQuery = this.queries[tQuery.indexInDeclarationView];
              viewLQueries.push(parentLQuery.clone());
            }

            return new LQueries_(viewLQueries);
          }

          return null;
        }
      }, {
        key: "insertView",
        value: function insertView(tView) {
          this.dirtyQueriesWithMatches(tView);
        }
      }, {
        key: "detachView",
        value: function detachView(tView) {
          this.dirtyQueriesWithMatches(tView);
        }
      }, {
        key: "dirtyQueriesWithMatches",
        value: function dirtyQueriesWithMatches(tView) {
          for (var i = 0; i < this.queries.length; i++) {
            if (getTQuery(tView, i).matches !== null) {
              this.queries[i].setDirty();
            }
          }
        }
      }]);

      return LQueries_;
    }();

    var TQueryMetadata_ = function TQueryMetadata_(predicate, descendants, isStatic) {
      var read = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      _classCallCheck(this, TQueryMetadata_);

      this.predicate = predicate;
      this.descendants = descendants;
      this.isStatic = isStatic;
      this.read = read;
    };

    var TQueries_ = /*#__PURE__*/function () {
      function TQueries_() {
        var queries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        _classCallCheck(this, TQueries_);

        this.queries = queries;
      }

      _createClass2(TQueries_, [{
        key: "elementStart",
        value: function elementStart(tView, tNode) {
          ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');

          for (var i = 0; i < this.queries.length; i++) {
            this.queries[i].elementStart(tView, tNode);
          }
        }
      }, {
        key: "elementEnd",
        value: function elementEnd(tNode) {
          for (var i = 0; i < this.queries.length; i++) {
            this.queries[i].elementEnd(tNode);
          }
        }
      }, {
        key: "embeddedTView",
        value: function embeddedTView(tNode) {
          var queriesForTemplateRef = null;

          for (var i = 0; i < this.length; i++) {
            var childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;
            var tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);

            if (tqueryClone) {
              tqueryClone.indexInDeclarationView = i;

              if (queriesForTemplateRef !== null) {
                queriesForTemplateRef.push(tqueryClone);
              } else {
                queriesForTemplateRef = [tqueryClone];
              }
            }
          }

          return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;
        }
      }, {
        key: "template",
        value: function template(tView, tNode) {
          ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');

          for (var i = 0; i < this.queries.length; i++) {
            this.queries[i].template(tView, tNode);
          }
        }
      }, {
        key: "getByIndex",
        value: function getByIndex(index) {
          ngDevMode && assertIndexInRange(this.queries, index);
          return this.queries[index];
        }
      }, {
        key: "track",
        value: function track(tquery) {
          this.queries.push(tquery);
        }
      }, {
        key: "length",
        get: function get() {
          return this.queries.length;
        }
      }]);

      return TQueries_;
    }();

    var TQuery_ = /*#__PURE__*/function () {
      function TQuery_(metadata) {
        var nodeIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

        _classCallCheck(this, TQuery_);

        this.metadata = metadata;
        this.matches = null;
        this.indexInDeclarationView = -1;
        this.crossesNgTemplate = false;
        /**
         * A flag indicating if a given query still applies to nodes it is crossing. We use this flag
         * (alongside with _declarationNodeIndex) to know when to stop applying content queries to
         * elements in a template.
         */

        this._appliesToNextNode = true;
        this._declarationNodeIndex = nodeIndex;
      }

      _createClass2(TQuery_, [{
        key: "elementStart",
        value: function elementStart(tView, tNode) {
          if (this.isApplyingToNode(tNode)) {
            this.matchTNode(tView, tNode);
          }
        }
      }, {
        key: "elementEnd",
        value: function elementEnd(tNode) {
          if (this._declarationNodeIndex === tNode.index) {
            this._appliesToNextNode = false;
          }
        }
      }, {
        key: "template",
        value: function template(tView, tNode) {
          this.elementStart(tView, tNode);
        }
      }, {
        key: "embeddedTView",
        value: function embeddedTView(tNode, childQueryIndex) {
          if (this.isApplyingToNode(tNode)) {
            this.crossesNgTemplate = true; // A marker indicating a `<ng-template>` element (a placeholder for query results from
            // embedded views created based on this `<ng-template>`).

            this.addMatch(-tNode.index, childQueryIndex);
            return new TQuery_(this.metadata);
          }

          return null;
        }
      }, {
        key: "isApplyingToNode",
        value: function isApplyingToNode(tNode) {
          if (this._appliesToNextNode && this.metadata.descendants === false) {
            var declarationNodeIdx = this._declarationNodeIndex;
            var parent = tNode.parent; // Determine if a given TNode is a "direct" child of a node on which a content query was
            // declared (only direct children of query's host node can match with the descendants: false
            // option). There are 3 main use-case / conditions to consider here:
            // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query
            // host node;
            // - <needs-target><ng-template [ngIf]="true"><i #target></i></ng-template></needs-target>:
            // here <i #target> parent node is null;
            // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need
            // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse
            // up past the query's host node!).

            while (parent !== null && parent.type === 4
            /* ElementContainer */
            && parent.index !== declarationNodeIdx) {
              parent = parent.parent;
            }

            return declarationNodeIdx === (parent !== null ? parent.index : -1);
          }

          return this._appliesToNextNode;
        }
      }, {
        key: "matchTNode",
        value: function matchTNode(tView, tNode) {
          var predicate = this.metadata.predicate;

          if (Array.isArray(predicate)) {
            for (var i = 0; i < predicate.length; i++) {
              var name = predicate[i];
              this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name)); // Also try matching the name to a provider since strings can be used as DI tokens too.

              this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));
            }
          } else {
            if (predicate === TemplateRef) {
              if (tNode.type === 0
              /* Container */
              ) {
                  this.matchTNodeWithReadOption(tView, tNode, -1);
                }
            } else {
              this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));
            }
          }
        }
      }, {
        key: "matchTNodeWithReadOption",
        value: function matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {
          if (nodeMatchIdx !== null) {
            var read = this.metadata.read;

            if (read !== null) {
              if (read === ElementRef || read === ViewContainerRef || read === TemplateRef && tNode.type === 0
              /* Container */
              ) {
                  this.addMatch(tNode.index, -2);
                } else {
                var directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);

                if (directiveOrProviderIdx !== null) {
                  this.addMatch(tNode.index, directiveOrProviderIdx);
                }
              }
            } else {
              this.addMatch(tNode.index, nodeMatchIdx);
            }
          }
        }
      }, {
        key: "addMatch",
        value: function addMatch(tNodeIdx, matchIdx) {
          if (this.matches === null) {
            this.matches = [tNodeIdx, matchIdx];
          } else {
            this.matches.push(tNodeIdx, matchIdx);
          }
        }
      }]);

      return TQuery_;
    }();
    /**
     * Iterates over local names for a given node and returns directive index
     * (or -1 if a local name points to an element).
     *
     * @param tNode static data of a node to check
     * @param selector selector to match
     * @returns directive index, -1 or null if a selector didn't match any of the local names
     */


    function getIdxOfMatchingSelector(tNode, selector) {
      var localNames = tNode.localNames;

      if (localNames !== null) {
        for (var i = 0; i < localNames.length; i += 2) {
          if (localNames[i] === selector) {
            return localNames[i + 1];
          }
        }
      }

      return null;
    }

    function createResultByTNodeType(tNode, currentView) {
      if (tNode.type === 3
      /* Element */
      || tNode.type === 4
      /* ElementContainer */
      ) {
          return createElementRef(ElementRef, tNode, currentView);
        } else if (tNode.type === 0
      /* Container */
      ) {
          return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);
        }

      return null;
    }

    function createResultForNode(lView, tNode, matchingIdx, read) {
      if (matchingIdx === -1) {
        // if read token and / or strategy is not specified, detect it using appropriate tNode type
        return createResultByTNodeType(tNode, lView);
      } else if (matchingIdx === -2) {
        // read a special token from a node injector
        return createSpecialToken(lView, tNode, read);
      } else {
        // read a token
        return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);
      }
    }

    function createSpecialToken(lView, tNode, read) {
      if (read === ElementRef) {
        return createElementRef(ElementRef, tNode, lView);
      } else if (read === TemplateRef) {
        return createTemplateRef(TemplateRef, ElementRef, tNode, lView);
      } else if (read === ViewContainerRef) {
        ngDevMode && assertNodeOfPossibleTypes(tNode, [3
        /* Element */
        , 0
        /* Container */
        , 4
        /* ElementContainer */
        ]);
        return createContainerRef(ViewContainerRef, ElementRef, tNode, lView);
      } else {
        ngDevMode && throwError("Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ".concat(stringify(read), "."));
      }
    }
    /**
     * A helper function that creates query results for a given view. This function is meant to do the
     * processing once and only once for a given view instance (a set of results for a given view
     * doesn't change).
     */


    function materializeViewResults(tView, lView, tQuery, queryIndex) {
      var lQuery = lView[QUERIES].queries[queryIndex];

      if (lQuery.matches === null) {
        var tViewData = tView.data;
        var tQueryMatches = tQuery.matches;
        var result = [];

        for (var i = 0; i < tQueryMatches.length; i += 2) {
          var matchedNodeIdx = tQueryMatches[i];

          if (matchedNodeIdx < 0) {
            // we at the <ng-template> marker which might have results in views created based on this
            // <ng-template> - those results will be in separate views though, so here we just leave
            // null as a placeholder
            result.push(null);
          } else {
            ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);
            var tNode = tViewData[matchedNodeIdx];
            result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));
          }
        }

        lQuery.matches = result;
      }

      return lQuery.matches;
    }
    /**
     * A helper function that collects (already materialized) query results from a tree of views,
     * starting with a provided LView.
     */


    function collectQueryResults(tView, lView, queryIndex, result) {
      var tQuery = tView.queries.getByIndex(queryIndex);
      var tQueryMatches = tQuery.matches;

      if (tQueryMatches !== null) {
        var lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);

        for (var i = 0; i < tQueryMatches.length; i += 2) {
          var tNodeIdx = tQueryMatches[i];

          if (tNodeIdx > 0) {
            result.push(lViewResults[i / 2]);
          } else {
            var childQueryIndex = tQueryMatches[i + 1];
            var declarationLContainer = lView[-tNodeIdx];
            ngDevMode && assertLContainer(declarationLContainer); // collect matches for views inserted in this container

            for (var _i10 = CONTAINER_HEADER_OFFSET; _i10 < declarationLContainer.length; _i10++) {
              var embeddedLView = declarationLContainer[_i10];

              if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {
                collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
              }
            } // collect matches for views created from this declaration container and inserted into
            // different containers


            if (declarationLContainer[MOVED_VIEWS] !== null) {
              var embeddedLViews = declarationLContainer[MOVED_VIEWS];

              for (var _i11 = 0; _i11 < embeddedLViews.length; _i11++) {
                var _embeddedLView = embeddedLViews[_i11];
                collectQueryResults(_embeddedLView[TVIEW], _embeddedLView, childQueryIndex, result);
              }
            }
          }
        }
      }

      return result;
    }
    /**
     * Refreshes a query by combining matches from all active views and removing matches from deleted
     * views.
     *
     * @returns `true` if a query got dirty during change detection or if this is a static query
     * resolving in creation mode, `false` otherwise.
     *
     * @codeGenApi
     */


    function ɵɵqueryRefresh(queryList) {
      var lView = getLView();
      var tView = getTView();
      var queryIndex = getCurrentQueryIndex();
      setCurrentQueryIndex(queryIndex + 1);
      var tQuery = getTQuery(tView, queryIndex);

      if (queryList.dirty && isCreationMode(lView) === tQuery.metadata.isStatic) {
        if (tQuery.matches === null) {
          queryList.reset([]);
        } else {
          var result = tQuery.crossesNgTemplate ? collectQueryResults(tView, lView, queryIndex, []) : materializeViewResults(tView, lView, tQuery, queryIndex);
          queryList.reset(result);
          queryList.notifyOnChanges();
        }

        return true;
      }

      return false;
    }
    /**
     * Creates new QueryList for a static view query.
     *
     * @param predicate The type for which the query will search
     * @param descend Whether or not to descend into children
     * @param read What to save in the query
     *
     * @codeGenApi
     */


    function ɵɵstaticViewQuery(predicate, descend, read) {
      viewQueryInternal(getTView(), getLView(), predicate, descend, read, true);
    }
    /**
     * Creates new QueryList, stores the reference in LView and returns QueryList.
     *
     * @param predicate The type for which the query will search
     * @param descend Whether or not to descend into children
     * @param read What to save in the query
     *
     * @codeGenApi
     */


    function ɵɵviewQuery(predicate, descend, read) {
      viewQueryInternal(getTView(), getLView(), predicate, descend, read, false);
    }

    function viewQueryInternal(tView, lView, predicate, descend, read, isStatic) {
      if (tView.firstCreatePass) {
        createTQuery(tView, new TQueryMetadata_(predicate, descend, isStatic, read), -1);

        if (isStatic) {
          tView.staticViewQueries = true;
        }
      }

      createLQuery(tView, lView);
    }
    /**
     * Registers a QueryList, associated with a content query, for later refresh (part of a view
     * refresh).
     *
     * @param directiveIndex Current directive index
     * @param predicate The type for which the query will search
     * @param descend Whether or not to descend into children
     * @param read What to save in the query
     * @returns QueryList<T>
     *
     * @codeGenApi
     */


    function ɵɵcontentQuery(directiveIndex, predicate, descend, read) {
      contentQueryInternal(getTView(), getLView(), predicate, descend, read, false, getPreviousOrParentTNode(), directiveIndex);
    }
    /**
     * Registers a QueryList, associated with a static content query, for later refresh
     * (part of a view refresh).
     *
     * @param directiveIndex Current directive index
     * @param predicate The type for which the query will search
     * @param descend Whether or not to descend into children
     * @param read What to save in the query
     * @returns QueryList<T>
     *
     * @codeGenApi
     */


    function ɵɵstaticContentQuery(directiveIndex, predicate, descend, read) {
      contentQueryInternal(getTView(), getLView(), predicate, descend, read, true, getPreviousOrParentTNode(), directiveIndex);
    }

    function contentQueryInternal(tView, lView, predicate, descend, read, isStatic, tNode, directiveIndex) {
      if (tView.firstCreatePass) {
        createTQuery(tView, new TQueryMetadata_(predicate, descend, isStatic, read), tNode.index);
        saveContentQueryAndDirectiveIndex(tView, directiveIndex);

        if (isStatic) {
          tView.staticContentQueries = true;
        }
      }

      createLQuery(tView, lView);
    }
    /**
     * Loads a QueryList corresponding to the current view or content query.
     *
     * @codeGenApi
     */


    function ɵɵloadQuery() {
      return loadQueryInternal(getLView(), getCurrentQueryIndex());
    }

    function loadQueryInternal(lView, queryIndex) {
      ngDevMode && assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');
      ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);
      return lView[QUERIES].queries[queryIndex].queryList;
    }

    function createLQuery(tView, lView) {
      var queryList = new QueryList();
      storeCleanupWithContext(tView, lView, queryList, queryList.destroy);
      if (lView[QUERIES] === null) lView[QUERIES] = new LQueries_();
      lView[QUERIES].queries.push(new LQuery_(queryList));
    }

    function createTQuery(tView, metadata, nodeIndex) {
      if (tView.queries === null) tView.queries = new TQueries_();
      tView.queries.track(new TQuery_(metadata, nodeIndex));
    }

    function saveContentQueryAndDirectiveIndex(tView, directiveIndex) {
      var tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);
      var lastSavedDirectiveIndex = tView.contentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;

      if (directiveIndex !== lastSavedDirectiveIndex) {
        tViewContentQueries.push(tView.queries.length - 1, directiveIndex);
      }
    }

    function getTQuery(tView, index) {
      ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');
      return tView.queries.getByIndex(index);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the
     * `<ng-template>` element.
     *
     * @codeGenApi
     */


    function ɵɵtemplateRefExtractor(tNode, currentView) {
      return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);
    }
    /**
     * Returns the appropriate `ChangeDetectorRef` for a pipe.
     *
     * @codeGenApi
     */


    function ɵɵinjectPipeChangeDetectorRef() {
      var flags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : InjectFlags.Default;
      var value = injectChangeDetectorRef(true);

      if (value == null && !(flags & InjectFlags.Optional)) {
        throw new Error("No provider for ChangeDetectorRef!");
      } else {
        return value;
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var ɵ0$d = function ɵ0$d() {
      return {
        'ɵɵattribute': ɵɵattribute,
        'ɵɵattributeInterpolate1': ɵɵattributeInterpolate1,
        'ɵɵattributeInterpolate2': ɵɵattributeInterpolate2,
        'ɵɵattributeInterpolate3': ɵɵattributeInterpolate3,
        'ɵɵattributeInterpolate4': ɵɵattributeInterpolate4,
        'ɵɵattributeInterpolate5': ɵɵattributeInterpolate5,
        'ɵɵattributeInterpolate6': ɵɵattributeInterpolate6,
        'ɵɵattributeInterpolate7': ɵɵattributeInterpolate7,
        'ɵɵattributeInterpolate8': ɵɵattributeInterpolate8,
        'ɵɵattributeInterpolateV': ɵɵattributeInterpolateV,
        'ɵɵdefineComponent': ɵɵdefineComponent,
        'ɵɵdefineDirective': ɵɵdefineDirective,
        'ɵɵdefineInjectable': ɵɵdefineInjectable,
        'ɵɵdefineInjector': ɵɵdefineInjector,
        'ɵɵdefineNgModule': ɵɵdefineNgModule,
        'ɵɵdefinePipe': ɵɵdefinePipe,
        'ɵɵdirectiveInject': ɵɵdirectiveInject,
        'ɵɵgetFactoryOf': ɵɵgetFactoryOf,
        'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,
        'ɵɵinject': ɵɵinject,
        'ɵɵinjectAttribute': ɵɵinjectAttribute,
        'ɵɵinvalidFactory': ɵɵinvalidFactory,
        'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,
        'ɵɵinjectPipeChangeDetectorRef': ɵɵinjectPipeChangeDetectorRef,
        'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,
        'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,
        'ɵɵProvidersFeature': ɵɵProvidersFeature,
        'ɵɵCopyDefinitionFeature': ɵɵCopyDefinitionFeature,
        'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,
        'ɵɵnextContext': ɵɵnextContext,
        'ɵɵnamespaceHTML': ɵɵnamespaceHTML,
        'ɵɵnamespaceMathML': ɵɵnamespaceMathML,
        'ɵɵnamespaceSVG': ɵɵnamespaceSVG,
        'ɵɵenableBindings': ɵɵenableBindings,
        'ɵɵdisableBindings': ɵɵdisableBindings,
        'ɵɵelementStart': ɵɵelementStart,
        'ɵɵelementEnd': ɵɵelementEnd,
        'ɵɵelement': ɵɵelement,
        'ɵɵelementContainerStart': ɵɵelementContainerStart,
        'ɵɵelementContainerEnd': ɵɵelementContainerEnd,
        'ɵɵelementContainer': ɵɵelementContainer,
        'ɵɵpureFunction0': ɵɵpureFunction0,
        'ɵɵpureFunction1': ɵɵpureFunction1,
        'ɵɵpureFunction2': ɵɵpureFunction2,
        'ɵɵpureFunction3': ɵɵpureFunction3,
        'ɵɵpureFunction4': ɵɵpureFunction4,
        'ɵɵpureFunction5': ɵɵpureFunction5,
        'ɵɵpureFunction6': ɵɵpureFunction6,
        'ɵɵpureFunction7': ɵɵpureFunction7,
        'ɵɵpureFunction8': ɵɵpureFunction8,
        'ɵɵpureFunctionV': ɵɵpureFunctionV,
        'ɵɵgetCurrentView': ɵɵgetCurrentView,
        'ɵɵrestoreView': ɵɵrestoreView,
        'ɵɵlistener': ɵɵlistener,
        'ɵɵprojection': ɵɵprojection,
        'ɵɵsyntheticHostProperty': ɵɵsyntheticHostProperty,
        'ɵɵsyntheticHostListener': ɵɵsyntheticHostListener,
        'ɵɵpipeBind1': ɵɵpipeBind1,
        'ɵɵpipeBind2': ɵɵpipeBind2,
        'ɵɵpipeBind3': ɵɵpipeBind3,
        'ɵɵpipeBind4': ɵɵpipeBind4,
        'ɵɵpipeBindV': ɵɵpipeBindV,
        'ɵɵprojectionDef': ɵɵprojectionDef,
        'ɵɵhostProperty': ɵɵhostProperty,
        'ɵɵproperty': ɵɵproperty,
        'ɵɵpropertyInterpolate': ɵɵpropertyInterpolate,
        'ɵɵpropertyInterpolate1': ɵɵpropertyInterpolate1,
        'ɵɵpropertyInterpolate2': ɵɵpropertyInterpolate2,
        'ɵɵpropertyInterpolate3': ɵɵpropertyInterpolate3,
        'ɵɵpropertyInterpolate4': ɵɵpropertyInterpolate4,
        'ɵɵpropertyInterpolate5': ɵɵpropertyInterpolate5,
        'ɵɵpropertyInterpolate6': ɵɵpropertyInterpolate6,
        'ɵɵpropertyInterpolate7': ɵɵpropertyInterpolate7,
        'ɵɵpropertyInterpolate8': ɵɵpropertyInterpolate8,
        'ɵɵpropertyInterpolateV': ɵɵpropertyInterpolateV,
        'ɵɵpipe': ɵɵpipe,
        'ɵɵqueryRefresh': ɵɵqueryRefresh,
        'ɵɵviewQuery': ɵɵviewQuery,
        'ɵɵstaticViewQuery': ɵɵstaticViewQuery,
        'ɵɵstaticContentQuery': ɵɵstaticContentQuery,
        'ɵɵloadQuery': ɵɵloadQuery,
        'ɵɵcontentQuery': ɵɵcontentQuery,
        'ɵɵreference': ɵɵreference,
        'ɵɵclassMap': ɵɵclassMap,
        'ɵɵclassMapInterpolate1': ɵɵclassMapInterpolate1,
        'ɵɵclassMapInterpolate2': ɵɵclassMapInterpolate2,
        'ɵɵclassMapInterpolate3': ɵɵclassMapInterpolate3,
        'ɵɵclassMapInterpolate4': ɵɵclassMapInterpolate4,
        'ɵɵclassMapInterpolate5': ɵɵclassMapInterpolate5,
        'ɵɵclassMapInterpolate6': ɵɵclassMapInterpolate6,
        'ɵɵclassMapInterpolate7': ɵɵclassMapInterpolate7,
        'ɵɵclassMapInterpolate8': ɵɵclassMapInterpolate8,
        'ɵɵclassMapInterpolateV': ɵɵclassMapInterpolateV,
        'ɵɵstyleMap': ɵɵstyleMap,
        'ɵɵstyleMapInterpolate1': ɵɵstyleMapInterpolate1,
        'ɵɵstyleMapInterpolate2': ɵɵstyleMapInterpolate2,
        'ɵɵstyleMapInterpolate3': ɵɵstyleMapInterpolate3,
        'ɵɵstyleMapInterpolate4': ɵɵstyleMapInterpolate4,
        'ɵɵstyleMapInterpolate5': ɵɵstyleMapInterpolate5,
        'ɵɵstyleMapInterpolate6': ɵɵstyleMapInterpolate6,
        'ɵɵstyleMapInterpolate7': ɵɵstyleMapInterpolate7,
        'ɵɵstyleMapInterpolate8': ɵɵstyleMapInterpolate8,
        'ɵɵstyleMapInterpolateV': ɵɵstyleMapInterpolateV,
        'ɵɵstyleProp': ɵɵstyleProp,
        'ɵɵstylePropInterpolate1': ɵɵstylePropInterpolate1,
        'ɵɵstylePropInterpolate2': ɵɵstylePropInterpolate2,
        'ɵɵstylePropInterpolate3': ɵɵstylePropInterpolate3,
        'ɵɵstylePropInterpolate4': ɵɵstylePropInterpolate4,
        'ɵɵstylePropInterpolate5': ɵɵstylePropInterpolate5,
        'ɵɵstylePropInterpolate6': ɵɵstylePropInterpolate6,
        'ɵɵstylePropInterpolate7': ɵɵstylePropInterpolate7,
        'ɵɵstylePropInterpolate8': ɵɵstylePropInterpolate8,
        'ɵɵstylePropInterpolateV': ɵɵstylePropInterpolateV,
        'ɵɵclassProp': ɵɵclassProp,
        'ɵɵselect': ɵɵselect,
        'ɵɵadvance': ɵɵadvance,
        'ɵɵtemplate': ɵɵtemplate,
        'ɵɵtext': ɵɵtext,
        'ɵɵtextInterpolate': ɵɵtextInterpolate,
        'ɵɵtextInterpolate1': ɵɵtextInterpolate1,
        'ɵɵtextInterpolate2': ɵɵtextInterpolate2,
        'ɵɵtextInterpolate3': ɵɵtextInterpolate3,
        'ɵɵtextInterpolate4': ɵɵtextInterpolate4,
        'ɵɵtextInterpolate5': ɵɵtextInterpolate5,
        'ɵɵtextInterpolate6': ɵɵtextInterpolate6,
        'ɵɵtextInterpolate7': ɵɵtextInterpolate7,
        'ɵɵtextInterpolate8': ɵɵtextInterpolate8,
        'ɵɵtextInterpolateV': ɵɵtextInterpolateV,
        'ɵɵi18n': ɵɵi18n,
        'ɵɵi18nAttributes': ɵɵi18nAttributes,
        'ɵɵi18nExp': ɵɵi18nExp,
        'ɵɵi18nStart': ɵɵi18nStart,
        'ɵɵi18nEnd': ɵɵi18nEnd,
        'ɵɵi18nApply': ɵɵi18nApply,
        'ɵɵi18nPostprocess': ɵɵi18nPostprocess,
        'ɵɵresolveWindow': ɵɵresolveWindow,
        'ɵɵresolveDocument': ɵɵresolveDocument,
        'ɵɵresolveBody': ɵɵresolveBody,
        'ɵɵsetComponentScope': ɵɵsetComponentScope,
        'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,
        'ɵɵsanitizeHtml': ɵɵsanitizeHtml,
        'ɵɵsanitizeStyle': ɵɵsanitizeStyle,
        'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,
        'ɵɵsanitizeScript': ɵɵsanitizeScript,
        'ɵɵsanitizeUrl': ɵɵsanitizeUrl,
        'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl
      };
    };
    /**
     * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.
     *
     * This should be kept up to date with the public exports of @angular/core.
     */


    var angularCoreEnv = /*@__PURE__*/ɵ0$d();
    var jitOptions = null;

    function setJitOptions(options) {
      if (jitOptions !== null) {
        if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {
          ngDevMode && console.error('Provided value for `defaultEncapsulation` can not be changed once it has been set.');
          return;
        }

        if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {
          ngDevMode && console.error('Provided value for `preserveWhitespaces` can not be changed once it has been set.');
          return;
        }
      }

      jitOptions = options;
    }

    function getJitOptions() {
      return jitOptions;
    }

    function resetJitOptions() {
      jitOptions = null;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var EMPTY_ARRAY$5 = [];
    var moduleQueue = [];
    /**
     * Enqueues moduleDef to be checked later to see if scope can be set on its
     * component declarations.
     */

    function enqueueModuleForDelayedScoping(moduleType, ngModule) {
      moduleQueue.push({
        moduleType: moduleType,
        ngModule: ngModule
      });
    }

    var flushingModuleQueue = false;
    /**
     * Loops over queued module definitions, if a given module definition has all of its
     * declarations resolved, it dequeues that module definition and sets the scope on
     * its declarations.
     */

    function flushModuleScopingQueueAsMuchAsPossible() {
      if (!flushingModuleQueue) {
        flushingModuleQueue = true;

        try {
          for (var i = moduleQueue.length - 1; i >= 0; i--) {
            var _moduleQueue$i = moduleQueue[i],
                moduleType = _moduleQueue$i.moduleType,
                ngModule = _moduleQueue$i.ngModule;

            if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {
              // dequeue
              moduleQueue.splice(i, 1);
              setScopeOnDeclaredComponents(moduleType, ngModule);
            }
          }
        } finally {
          flushingModuleQueue = false;
        }
      }
    }
    /**
     * Returns truthy if a declaration has resolved. If the declaration happens to be
     * an array of declarations, it will recurse to check each declaration in that array
     * (which may also be arrays).
     */


    function isResolvedDeclaration(declaration) {
      if (Array.isArray(declaration)) {
        return declaration.every(isResolvedDeclaration);
      }

      return !!resolveForwardRef(declaration);
    }
    /**
     * Compiles a module in JIT mode.
     *
     * This function automatically gets called when a class has a `@NgModule` decorator.
     */


    function compileNgModule(moduleType) {
      var ngModule = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      compileNgModuleDefs(moduleType, ngModule); // Because we don't know if all declarations have resolved yet at the moment the
      // NgModule decorator is executing, we're enqueueing the setting of module scope
      // on its declarations to be run at a later time when all declarations for the module,
      // including forward refs, have resolved.

      enqueueModuleForDelayedScoping(moduleType, ngModule);
    }
    /**
     * Compiles and adds the `ɵmod` and `ɵinj` properties to the module class.
     *
     * It's possible to compile a module via this API which will allow duplicate declarations in its
     * root.
     */


    function compileNgModuleDefs(moduleType, ngModule) {
      var allowDuplicateDeclarationsInRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      ngDevMode && assertDefined(moduleType, 'Required value moduleType');
      ngDevMode && assertDefined(ngModule, 'Required value ngModule');
      var declarations = flatten(ngModule.declarations || EMPTY_ARRAY$5);
      var ngModuleDef = null;
      Object.defineProperty(moduleType, NG_MOD_DEF, {
        configurable: true,
        get: function get() {
          if (ngModuleDef === null) {
            if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {
              // We need to assert this immediately, because allowing it to continue will cause it to
              // go into an infinite loop before we've reached the point where we throw all the errors.
              throw new Error("'".concat(stringifyForError(moduleType), "' module can't import itself"));
            }

            ngModuleDef = getCompilerFacade().compileNgModule(angularCoreEnv, "ng:///".concat(moduleType.name, "/\u0275mod.js"), {
              type: moduleType,
              bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY$5).map(resolveForwardRef),
              declarations: declarations.map(resolveForwardRef),
              imports: flatten(ngModule.imports || EMPTY_ARRAY$5).map(resolveForwardRef).map(expandModuleWithProviders),
              exports: flatten(ngModule.exports || EMPTY_ARRAY$5).map(resolveForwardRef).map(expandModuleWithProviders),
              schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,
              id: ngModule.id || null
            }); // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime
            // should verify that there are no unknown elements in a template. In AOT mode, that check
            // happens at compile time and `schemas` information is not present on Component and Module
            // defs after compilation (so the check doesn't happen the second time at runtime).

            if (!ngModuleDef.schemas) {
              ngModuleDef.schemas = [];
            }
          }

          return ngModuleDef;
        }
      });
      var ngInjectorDef = null;
      Object.defineProperty(moduleType, NG_INJ_DEF, {
        get: function get() {
          if (ngInjectorDef === null) {
            ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);
            var meta = {
              name: moduleType.name,
              type: moduleType,
              deps: reflectDependencies(moduleType),
              providers: ngModule.providers || EMPTY_ARRAY$5,
              imports: [(ngModule.imports || EMPTY_ARRAY$5).map(resolveForwardRef), (ngModule.exports || EMPTY_ARRAY$5).map(resolveForwardRef)]
            };
            ngInjectorDef = getCompilerFacade().compileInjector(angularCoreEnv, "ng:///".concat(moduleType.name, "/\u0275inj.js"), meta);
          }

          return ngInjectorDef;
        },
        // Make the property configurable in dev mode to allow overriding in tests
        configurable: !!ngDevMode
      });
    }

    function verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {
      if (verifiedNgModule.get(moduleType)) return;
      verifiedNgModule.set(moduleType, true);
      moduleType = resolveForwardRef(moduleType);
      var ngModuleDef;

      if (importingModule) {
        ngModuleDef = getNgModuleDef(moduleType);

        if (!ngModuleDef) {
          throw new Error("Unexpected value '".concat(moduleType.name, "' imported by the module '").concat(importingModule.name, "'. Please add an @NgModule annotation."));
        }
      } else {
        ngModuleDef = getNgModuleDef(moduleType, true);
      }

      var errors = [];
      var declarations = maybeUnwrapFn(ngModuleDef.declarations);
      var imports = maybeUnwrapFn(ngModuleDef.imports);
      flatten(imports).map(unwrapModuleWithProvidersImports).forEach(function (mod) {
        verifySemanticsOfNgModuleImport(mod, moduleType);
        verifySemanticsOfNgModuleDef(mod, false, moduleType);
      });
      var exports = maybeUnwrapFn(ngModuleDef.exports);
      declarations.forEach(verifyDeclarationsHaveDefinitions);
      declarations.forEach(verifyDirectivesHaveSelector);
      var combinedDeclarations = [].concat(_toConsumableArray(declarations.map(resolveForwardRef)), _toConsumableArray(flatten(imports.map(computeCombinedExports)).map(resolveForwardRef)));
      exports.forEach(verifyExportsAreDeclaredOrReExported);
      declarations.forEach(function (decl) {
        return verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot);
      });
      declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);
      var ngModule = getAnnotation(moduleType, 'NgModule');

      if (ngModule) {
        ngModule.imports && flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(function (mod) {
          verifySemanticsOfNgModuleImport(mod, moduleType);
          verifySemanticsOfNgModuleDef(mod, false, moduleType);
        });
        ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);
        ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);
        ngModule.entryComponents && deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);
      } // Throw Error if any errors were detected.


      if (errors.length) {
        throw new Error(errors.join('\n'));
      } ////////////////////////////////////////////////////////////////////////////////////////////////


      function verifyDeclarationsHaveDefinitions(type) {
        type = resolveForwardRef(type);
        var def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);

        if (!def) {
          errors.push("Unexpected value '".concat(stringifyForError(type), "' declared by the module '").concat(stringifyForError(moduleType), "'. Please add a @Pipe/@Directive/@Component annotation."));
        }
      }

      function verifyDirectivesHaveSelector(type) {
        type = resolveForwardRef(type);
        var def = getDirectiveDef(type);

        if (!getComponentDef(type) && def && def.selectors.length == 0) {
          errors.push("Directive ".concat(stringifyForError(type), " has no selector, please add it!"));
        }
      }

      function verifyExportsAreDeclaredOrReExported(type) {
        type = resolveForwardRef(type);
        var kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' || getPipeDef(type) && 'pipe';

        if (kind) {
          // only checked if we are declared as Component, Directive, or Pipe
          // Modules don't need to be declared or imported.
          if (combinedDeclarations.lastIndexOf(type) === -1) {
            // We are exporting something which we don't explicitly declare or import.
            errors.push("Can't export ".concat(kind, " ").concat(stringifyForError(type), " from ").concat(stringifyForError(moduleType), " as it was neither declared nor imported!"));
          }
        }
      }

      function verifyDeclarationIsUnique(type, suppressErrors) {
        type = resolveForwardRef(type);
        var existingModule = ownerNgModule.get(type);

        if (existingModule && existingModule !== moduleType) {
          if (!suppressErrors) {
            var _modules = [existingModule, moduleType].map(stringifyForError).sort();

            errors.push("Type ".concat(stringifyForError(type), " is part of the declarations of 2 modules: ").concat(_modules[0], " and ").concat(_modules[1], "! ") + "Please consider moving ".concat(stringifyForError(type), " to a higher module that imports ").concat(_modules[0], " and ").concat(_modules[1], ". ") + "You can also create a new NgModule that exports and includes ".concat(stringifyForError(type), " then import that NgModule in ").concat(_modules[0], " and ").concat(_modules[1], "."));
          }
        } else {
          // Mark type as having owner.
          ownerNgModule.set(type, moduleType);
        }
      }

      function verifyComponentIsPartOfNgModule(type) {
        type = resolveForwardRef(type);
        var existingModule = ownerNgModule.get(type);

        if (!existingModule) {
          errors.push("Component ".concat(stringifyForError(type), " is not part of any NgModule or the module has not been imported into your module."));
        }
      }

      function verifyCorrectBootstrapType(type) {
        type = resolveForwardRef(type);

        if (!getComponentDef(type)) {
          errors.push("".concat(stringifyForError(type), " cannot be used as an entry component."));
        }
      }

      function verifyComponentEntryComponentsIsPartOfNgModule(type) {
        type = resolveForwardRef(type);

        if (getComponentDef(type)) {
          // We know we are component
          var component = getAnnotation(type, 'Component');

          if (component && component.entryComponents) {
            deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);
          }
        }
      }

      function verifySemanticsOfNgModuleImport(type, importingModule) {
        type = resolveForwardRef(type);

        if (getComponentDef(type) || getDirectiveDef(type)) {
          throw new Error("Unexpected directive '".concat(type.name, "' imported by the module '").concat(importingModule.name, "'. Please add an @NgModule annotation."));
        }

        if (getPipeDef(type)) {
          throw new Error("Unexpected pipe '".concat(type.name, "' imported by the module '").concat(importingModule.name, "'. Please add an @NgModule annotation."));
        }
      }
    }

    function unwrapModuleWithProvidersImports(typeOrWithProviders) {
      typeOrWithProviders = resolveForwardRef(typeOrWithProviders);
      return typeOrWithProviders.ngModule || typeOrWithProviders;
    }

    function getAnnotation(type, name) {
      var annotation = null;
      collect(type.__annotations__);
      collect(type.decorators);
      return annotation;

      function collect(annotations) {
        if (annotations) {
          annotations.forEach(readAnnotation);
        }
      }

      function readAnnotation(decorator) {
        if (!annotation) {
          var proto = Object.getPrototypeOf(decorator);

          if (proto.ngMetadataName == name) {
            annotation = decorator;
          } else if (decorator.type) {
            var _proto = Object.getPrototypeOf(decorator.type);

            if (_proto.ngMetadataName == name) {
              annotation = decorator.args[0];
            }
          }
        }
      }
    }
    /**
     * Keep track of compiled components. This is needed because in tests we often want to compile the
     * same component with more than one NgModule. This would cause an error unless we reset which
     * NgModule the component belongs to. We keep the list of compiled components here so that the
     * TestBed can reset it later.
     */


    var ownerNgModule = /*@__PURE__*/new Map();
    var verifiedNgModule = /*@__PURE__*/new Map();

    function resetCompiledComponents() {
      ownerNgModule = new Map();
      verifiedNgModule = new Map();
      moduleQueue.length = 0;
    }
    /**
     * Computes the combined declarations of explicit declarations, as well as declarations inherited by
     * traversing the exports of imported modules.
     * @param type
     */


    function computeCombinedExports(type) {
      type = resolveForwardRef(type);
      var ngModuleDef = getNgModuleDef(type, true);
      return _toConsumableArray(flatten(maybeUnwrapFn(ngModuleDef.exports).map(function (type) {
        var ngModuleDef = getNgModuleDef(type);

        if (ngModuleDef) {
          verifySemanticsOfNgModuleDef(type, false);
          return computeCombinedExports(type);
        } else {
          return type;
        }
      })));
    }
    /**
     * Some declared components may be compiled asynchronously, and thus may not have their
     * ɵcmp set yet. If this is the case, then a reference to the module is written into
     * the `ngSelectorScope` property of the declared type.
     */


    function setScopeOnDeclaredComponents(moduleType, ngModule) {
      var declarations = flatten(ngModule.declarations || EMPTY_ARRAY$5);
      var transitiveScopes = transitiveScopesFor(moduleType);
      declarations.forEach(function (declaration) {
        if (declaration.hasOwnProperty(NG_COMP_DEF)) {
          // A `ɵcmp` field exists - go ahead and patch the component directly.
          var component = declaration;
          var componentDef = getComponentDef(component);
          patchComponentDefWithScope(componentDef, transitiveScopes);
        } else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {
          // Set `ngSelectorScope` for future reference when the component compilation finishes.
          declaration.ngSelectorScope = moduleType;
        }
      });
    }
    /**
     * Patch the definition of a component with directives and pipes from the compilation scope of
     * a given module.
     */


    function patchComponentDefWithScope(componentDef, transitiveScopes) {
      componentDef.directiveDefs = function () {
        return Array.from(transitiveScopes.compilation.directives).map(function (dir) {
          return dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir);
        }).filter(function (def) {
          return !!def;
        });
      };

      componentDef.pipeDefs = function () {
        return Array.from(transitiveScopes.compilation.pipes).map(function (pipe) {
          return getPipeDef(pipe);
        });
      };

      componentDef.schemas = transitiveScopes.schemas; // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we
      // may face a problem where previously compiled defs available to a given Component/Directive
      // are cached in TView and may become stale (in case any of these defs gets recompiled). In
      // order to avoid this problem, we force fresh TView to be created.

      componentDef.tView = null;
    }
    /**
     * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.
     *
     * This operation is memoized and the result is cached on the module's definition. This function can
     * be called on modules with components that have not fully compiled yet, but the result should not
     * be used until they have.
     *
     * @param moduleType module that transitive scope should be calculated for.
     */


    function transitiveScopesFor(moduleType) {
      if (!isNgModule(moduleType)) {
        throw new Error("".concat(moduleType.name, " does not have a module def (\u0275mod property)"));
      }

      var def = getNgModuleDef(moduleType);

      if (def.transitiveCompileScopes !== null) {
        return def.transitiveCompileScopes;
      }

      var scopes = {
        schemas: def.schemas || null,
        compilation: {
          directives: new Set(),
          pipes: new Set()
        },
        exported: {
          directives: new Set(),
          pipes: new Set()
        }
      };
      maybeUnwrapFn(def.imports).forEach(function (imported) {
        var importedType = imported;

        if (!isNgModule(importedType)) {
          throw new Error("Importing ".concat(importedType.name, " which does not have a \u0275mod property"));
        } // When this module imports another, the imported module's exported directives and pipes are
        // added to the compilation scope of this module.


        var importedScope = transitiveScopesFor(importedType);
        importedScope.exported.directives.forEach(function (entry) {
          return scopes.compilation.directives.add(entry);
        });
        importedScope.exported.pipes.forEach(function (entry) {
          return scopes.compilation.pipes.add(entry);
        });
      });
      maybeUnwrapFn(def.declarations).forEach(function (declared) {
        var declaredWithDefs = declared;

        if (getPipeDef(declaredWithDefs)) {
          scopes.compilation.pipes.add(declared);
        } else {
          // Either declared has a ɵcmp or ɵdir, or it's a component which hasn't
          // had its template compiled yet. In either case, it gets added to the compilation's
          // directives.
          scopes.compilation.directives.add(declared);
        }
      });
      maybeUnwrapFn(def.exports).forEach(function (exported) {
        var exportedType = exported; // Either the type is a module, a pipe, or a component/directive (which may not have a
        // ɵcmp as it might be compiled asynchronously).

        if (isNgModule(exportedType)) {
          // When this module exports another, the exported module's exported directives and pipes are
          // added to both the compilation and exported scopes of this module.
          var exportedScope = transitiveScopesFor(exportedType);
          exportedScope.exported.directives.forEach(function (entry) {
            scopes.compilation.directives.add(entry);
            scopes.exported.directives.add(entry);
          });
          exportedScope.exported.pipes.forEach(function (entry) {
            scopes.compilation.pipes.add(entry);
            scopes.exported.pipes.add(entry);
          });
        } else if (getPipeDef(exportedType)) {
          scopes.exported.pipes.add(exportedType);
        } else {
          scopes.exported.directives.add(exportedType);
        }
      });
      def.transitiveCompileScopes = scopes;
      return scopes;
    }

    function expandModuleWithProviders(value) {
      if (isModuleWithProviders(value)) {
        return value.ngModule;
      }

      return value;
    }

    function isModuleWithProviders(value) {
      return value.ngModule !== undefined;
    }

    function isNgModule(value) {
      return !!getNgModuleDef(value);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Keep track of the compilation depth to avoid reentrancy issues during JIT compilation. This
     * matters in the following scenario:
     *
     * Consider a component 'A' that extends component 'B', both declared in module 'M'. During
     * the compilation of 'A' the definition of 'B' is requested to capture the inheritance chain,
     * potentially triggering compilation of 'B'. If this nested compilation were to trigger
     * `flushModuleScopingQueueAsMuchAsPossible` it may happen that module 'M' is still pending in the
     * queue, resulting in 'A' and 'B' to be patched with the NgModule scope. As the compilation of
     * 'A' is still in progress, this would introduce a circular dependency on its compilation. To avoid
     * this issue, the module scope queue is only flushed for compilations at the depth 0, to ensure
     * all compilations have finished.
     */


    var compilationDepth = 0;
    /**
     * Compile an Angular component according to its decorator metadata, and patch the resulting
     * component def (ɵcmp) onto the component type.
     *
     * Compilation may be asynchronous (due to the need to resolve URLs for the component template or
     * other resources, for example). In the event that compilation is not immediate, `compileComponent`
     * will enqueue resource resolution into a global queue and will fail to return the `ɵcmp`
     * until the global queue has been resolved with a call to `resolveComponentResources`.
     */

    function compileComponent(type, metadata) {
      // Initialize ngDevMode. This must be the first statement in compileComponent.
      // See the `initNgDevMode` docstring for more information.
      (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();
      var ngComponentDef = null; // Metadata may have resources which need to be resolved.

      maybeQueueResolutionOfComponentResources(type, metadata); // Note that we're using the same function as `Directive`, because that's only subset of metadata
      // that we need to create the ngFactoryDef. We're avoiding using the component metadata
      // because we'd have to resolve the asynchronous templates.

      addDirectiveFactoryDef(type, metadata);
      Object.defineProperty(type, NG_COMP_DEF, {
        get: function get() {
          if (ngComponentDef === null) {
            var compiler = getCompilerFacade();

            if (componentNeedsResolution(metadata)) {
              var error = ["Component '".concat(type.name, "' is not resolved:")];

              if (metadata.templateUrl) {
                error.push(" - templateUrl: ".concat(metadata.templateUrl));
              }

              if (metadata.styleUrls && metadata.styleUrls.length) {
                error.push(" - styleUrls: ".concat(JSON.stringify(metadata.styleUrls)));
              }

              error.push("Did you run and wait for 'resolveComponentResources()'?");
              throw new Error(error.join('\n'));
            } // This const was called `jitOptions` previously but had to be renamed to `options` because
            // of a bug with Terser that caused optimized JIT builds to throw a `ReferenceError`.
            // This bug was investigated in https://github.com/angular/angular-cli/issues/17264.
            // We should not rename it back until https://github.com/terser/terser/issues/615 is fixed.


            var options = getJitOptions();
            var preserveWhitespaces = metadata.preserveWhitespaces;

            if (preserveWhitespaces === undefined) {
              if (options !== null && options.preserveWhitespaces !== undefined) {
                preserveWhitespaces = options.preserveWhitespaces;
              } else {
                preserveWhitespaces = false;
              }
            }

            var encapsulation = metadata.encapsulation;

            if (encapsulation === undefined) {
              if (options !== null && options.defaultEncapsulation !== undefined) {
                encapsulation = options.defaultEncapsulation;
              } else {
                encapsulation = ViewEncapsulation$1.Emulated;
              }
            }

            var templateUrl = metadata.templateUrl || "ng:///".concat(type.name, "/template.html");
            var meta = Object.assign(Object.assign({}, directiveMetadata(type, metadata)), {
              typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl),
              template: metadata.template || '',
              preserveWhitespaces: preserveWhitespaces,
              styles: metadata.styles || EMPTY_ARRAY,
              animations: metadata.animations,
              directives: [],
              changeDetection: metadata.changeDetection,
              pipes: new Map(),
              encapsulation: encapsulation,
              interpolation: metadata.interpolation,
              viewProviders: metadata.viewProviders || null
            });
            compilationDepth++;

            try {
              if (meta.usesInheritance) {
                addDirectiveDefToUndecoratedParents(type);
              }

              ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);
            } finally {
              // Ensure that the compilation depth is decremented even when the compilation failed.
              compilationDepth--;
            }

            if (compilationDepth === 0) {
              // When NgModule decorator executed, we enqueued the module definition such that
              // it would only dequeue and add itself as module scope to all of its declarations,
              // but only if  if all of its declarations had resolved. This call runs the check
              // to see if any modules that are in the queue can be dequeued and add scope to
              // their declarations.
              flushModuleScopingQueueAsMuchAsPossible();
            } // If component compilation is async, then the @NgModule annotation which declares the
            // component may execute and set an ngSelectorScope property on the component type. This
            // allows the component to patch itself with directiveDefs from the module after it
            // finishes compiling.


            if (hasSelectorScope(type)) {
              var scopes = transitiveScopesFor(type.ngSelectorScope);
              patchComponentDefWithScope(ngComponentDef, scopes);
            }
          }

          return ngComponentDef;
        },
        // Make the property configurable in dev mode to allow overriding in tests
        configurable: !!ngDevMode
      });
    }

    function hasSelectorScope(component) {
      return component.ngSelectorScope !== undefined;
    }
    /**
     * Compile an Angular directive according to its decorator metadata, and patch the resulting
     * directive def onto the component type.
     *
     * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which
     * will resolve when compilation completes and the directive becomes usable.
     */


    function compileDirective(type, directive) {
      var ngDirectiveDef = null;
      addDirectiveFactoryDef(type, directive || {});
      Object.defineProperty(type, NG_DIR_DEF, {
        get: function get() {
          if (ngDirectiveDef === null) {
            // `directive` can be null in the case of abstract directives as a base class
            // that use `@Directive()` with no selector. In that case, pass empty object to the
            // `directiveMetadata` function instead of null.
            var meta = getDirectiveMetadata(type, directive || {});
            ngDirectiveDef = getCompilerFacade().compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);
          }

          return ngDirectiveDef;
        },
        // Make the property configurable in dev mode to allow overriding in tests
        configurable: !!ngDevMode
      });
    }

    function getDirectiveMetadata(type, metadata) {
      var name = type && type.name;
      var sourceMapUrl = "ng:///".concat(name, "/\u0275dir.js");
      var compiler = getCompilerFacade();
      var facade = directiveMetadata(type, metadata);
      facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);

      if (facade.usesInheritance) {
        addDirectiveDefToUndecoratedParents(type);
      }

      return {
        metadata: facade,
        sourceMapUrl: sourceMapUrl
      };
    }

    function addDirectiveFactoryDef(type, metadata) {
      var ngFactoryDef = null;
      Object.defineProperty(type, NG_FACTORY_DEF, {
        get: function get() {
          if (ngFactoryDef === null) {
            var meta = getDirectiveMetadata(type, metadata);
            var compiler = getCompilerFacade();
            ngFactoryDef = compiler.compileFactory(angularCoreEnv, "ng:///".concat(type.name, "/\u0275fac.js"), Object.assign(Object.assign({}, meta.metadata), {
              injectFn: 'directiveInject',
              target: compiler.R3FactoryTarget.Directive
            }));
          }

          return ngFactoryDef;
        },
        // Make the property configurable in dev mode to allow overriding in tests
        configurable: !!ngDevMode
      });
    }

    function extendsDirectlyFromObject(type) {
      return Object.getPrototypeOf(type.prototype) === Object.prototype;
    }
    /**
     * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a
     * `Component`).
     */


    function directiveMetadata(type, metadata) {
      // Reflect inputs and outputs.
      var reflect = getReflect();
      var propMetadata = reflect.ownPropMetadata(type);
      return {
        name: type.name,
        type: type,
        typeArgumentCount: 0,
        selector: metadata.selector !== undefined ? metadata.selector : null,
        deps: reflectDependencies(type),
        host: metadata.host || EMPTY_OBJ,
        propMetadata: propMetadata,
        inputs: metadata.inputs || EMPTY_ARRAY,
        outputs: metadata.outputs || EMPTY_ARRAY,
        queries: extractQueriesMetadata(type, propMetadata, isContentQuery),
        lifecycle: {
          usesOnChanges: reflect.hasLifecycleHook(type, 'ngOnChanges')
        },
        typeSourceSpan: null,
        usesInheritance: !extendsDirectlyFromObject(type),
        exportAs: extractExportAs(metadata.exportAs),
        providers: metadata.providers || null,
        viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery)
      };
    }
    /**
     * Adds a directive definition to all parent classes of a type that don't have an Angular decorator.
     */


    function addDirectiveDefToUndecoratedParents(type) {
      var objPrototype = Object.prototype;
      var parent = Object.getPrototypeOf(type.prototype).constructor; // Go up the prototype until we hit `Object`.

      while (parent && parent !== objPrototype) {
        // Since inheritance works if the class was annotated already, we only need to add
        // the def if there are no annotations and the def hasn't been created already.
        if (!getDirectiveDef(parent) && !getComponentDef(parent) && shouldAddAbstractDirective(parent)) {
          compileDirective(parent, null);
        }

        parent = Object.getPrototypeOf(parent);
      }
    }

    function convertToR3QueryPredicate(selector) {
      return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);
    }

    function convertToR3QueryMetadata(propertyName, ann) {
      return {
        propertyName: propertyName,
        predicate: convertToR3QueryPredicate(ann.selector),
        descendants: ann.descendants,
        first: ann.first,
        read: ann.read ? ann.read : null,
        "static": !!ann["static"]
      };
    }

    function extractQueriesMetadata(type, propMetadata, isQueryAnn) {
      var queriesMeta = [];

      var _loop2 = function _loop2(field) {
        if (propMetadata.hasOwnProperty(field)) {
          var annotations = propMetadata[field];
          annotations.forEach(function (ann) {
            if (isQueryAnn(ann)) {
              if (!ann.selector) {
                throw new Error("Can't construct a query for the property \"".concat(field, "\" of ") + "\"".concat(stringifyForError(type), "\" since the query selector wasn't defined."));
              }

              if (annotations.some(isInputAnnotation)) {
                throw new Error("Cannot combine @Input decorators with query decorators");
              }

              queriesMeta.push(convertToR3QueryMetadata(field, ann));
            }
          });
        }
      };

      for (var field in propMetadata) {
        _loop2(field);
      }

      return queriesMeta;
    }

    function extractExportAs(exportAs) {
      return exportAs === undefined ? null : splitByComma(exportAs);
    }

    function isContentQuery(value) {
      var name = value.ngMetadataName;
      return name === 'ContentChild' || name === 'ContentChildren';
    }

    function isViewQuery(value) {
      var name = value.ngMetadataName;
      return name === 'ViewChild' || name === 'ViewChildren';
    }

    function isInputAnnotation(value) {
      return value.ngMetadataName === 'Input';
    }

    function splitByComma(value) {
      return value.split(',').map(function (piece) {
        return piece.trim();
      });
    }

    var LIFECYCLE_HOOKS = ['ngOnChanges', 'ngOnInit', 'ngOnDestroy', 'ngDoCheck', 'ngAfterViewInit', 'ngAfterViewChecked', 'ngAfterContentInit', 'ngAfterContentChecked'];

    function shouldAddAbstractDirective(type) {
      var reflect = getReflect();

      if (LIFECYCLE_HOOKS.some(function (hookName) {
        return reflect.hasLifecycleHook(type, hookName);
      })) {
        return true;
      }

      var propMetadata = reflect.propMetadata(type);

      for (var field in propMetadata) {
        var annotations = propMetadata[field];

        for (var i = 0; i < annotations.length; i++) {
          var current = annotations[i];
          var metadataName = current.ngMetadataName;

          if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) || metadataName === 'Output' || metadataName === 'HostBinding' || metadataName === 'HostListener') {
            return true;
          }
        }
      }

      return false;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function compilePipe(type, meta) {
      var ngPipeDef = null;
      var ngFactoryDef = null;
      Object.defineProperty(type, NG_FACTORY_DEF, {
        get: function get() {
          if (ngFactoryDef === null) {
            var metadata = getPipeMetadata(type, meta);
            var compiler = getCompilerFacade();
            ngFactoryDef = compiler.compileFactory(angularCoreEnv, "ng:///".concat(metadata.name, "/\u0275fac.js"), Object.assign(Object.assign({}, metadata), {
              injectFn: 'directiveInject',
              target: compiler.R3FactoryTarget.Pipe
            }));
          }

          return ngFactoryDef;
        },
        // Make the property configurable in dev mode to allow overriding in tests
        configurable: !!ngDevMode
      });
      Object.defineProperty(type, NG_PIPE_DEF, {
        get: function get() {
          if (ngPipeDef === null) {
            var metadata = getPipeMetadata(type, meta);
            ngPipeDef = getCompilerFacade().compilePipe(angularCoreEnv, "ng:///".concat(metadata.name, "/\u0275pipe.js"), metadata);
          }

          return ngPipeDef;
        },
        // Make the property configurable in dev mode to allow overriding in tests
        configurable: !!ngDevMode
      });
    }

    function getPipeMetadata(type, meta) {
      return {
        type: type,
        typeArgumentCount: 0,
        name: type.name,
        deps: reflectDependencies(type),
        pipeName: meta.name,
        pure: meta.pure !== undefined ? meta.pure : true
      };
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var ɵ0$e = function ɵ0$e() {
      var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return dir;
    },
        ɵ1$3 = function ɵ1$3(type, meta) {
      return SWITCH_COMPILE_DIRECTIVE(type, meta);
    };
    /**
     * Type of the Directive metadata.
     *
     * @publicApi
     */


    var Directive = /*@__PURE__*/makeDecorator('Directive', ɵ0$e, undefined, undefined, ɵ1$3);

    var ɵ2$1 = function ɵ2$1() {
      var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return Object.assign({
        changeDetection: ChangeDetectionStrategy.Default
      }, c);
    },
        ɵ3$1 = function ɵ3$1(type, meta) {
      return SWITCH_COMPILE_COMPONENT(type, meta);
    };
    /**
     * Component decorator and metadata.
     *
     * @Annotation
     * @publicApi
     */


    var Component = /*@__PURE__*/makeDecorator('Component', ɵ2$1, Directive, undefined, ɵ3$1);

    var ɵ4 = function ɵ4(p) {
      return Object.assign({
        pure: true
      }, p);
    },
        ɵ5 = function ɵ5(type, meta) {
      return SWITCH_COMPILE_PIPE(type, meta);
    };
    /**
     * @Annotation
     * @publicApi
     */


    var Pipe = /*@__PURE__*/makeDecorator('Pipe', ɵ4, undefined, undefined, ɵ5);

    var ɵ6 = function ɵ6(bindingPropertyName) {
      return {
        bindingPropertyName: bindingPropertyName
      };
    };
    /**
     * @Annotation
     * @publicApi
     */


    var Input = /*@__PURE__*/makePropDecorator('Input', ɵ6);

    var ɵ7 = function ɵ7(bindingPropertyName) {
      return {
        bindingPropertyName: bindingPropertyName
      };
    };
    /**
     * @Annotation
     * @publicApi
     */


    var Output = /*@__PURE__*/makePropDecorator('Output', ɵ7);

    var ɵ8 = function ɵ8(hostPropertyName) {
      return {
        hostPropertyName: hostPropertyName
      };
    };
    /**
     * @Annotation
     * @publicApi
     */


    var HostBinding = /*@__PURE__*/makePropDecorator('HostBinding', ɵ8);

    var ɵ9 = function ɵ9(eventName, args) {
      return {
        eventName: eventName,
        args: args
      };
    };
    /**
     * Decorator that binds a DOM event to a host listener and supplies configuration metadata.
     * Angular invokes the supplied handler method when the host element emits the specified event,
     * and updates the bound element with the result.
     *
     * If the handler method returns false, applies `preventDefault` on the bound element.
     *
     * @usageNotes
     *
     * The following example declares a directive
     * that attaches a click listener to a button and counts clicks.
     *
     * ```ts
     * @Directive({selector: 'button[counting]'})
     * class CountClicks {
     *   numberOfClicks = 0;
     *
     *   @HostListener('click', ['$event.target'])
     *   onClick(btn) {
     *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);
     *  }
     * }
     *
     * @Component({
     *   selector: 'app',
     *   template: '<button counting>Increment</button>',
     * })
     * class App {}
     *
     * ```
     *
     * The following example registers another DOM event handler that listens for key-press events.
     * ``` ts
     * import { HostListener, Component } from "@angular/core";
     *
     * @Component({
     *   selector: 'app',
     *   template: `<h1>Hello, you have pressed keys {{counter}} number of times!</h1> Press any key to
     * increment the counter.
     *   <button (click)="resetCounter()">Reset Counter</button>`
     * })
     * class AppComponent {
     *   counter = 0;
     *   @HostListener('window:keydown', ['$event'])
     *   handleKeyDown(event: KeyboardEvent) {
     *     this.counter++;
     *   }
     *   resetCounter() {
     *     this.counter = 0;
     *   }
     * }
     * ```
     *
     * @Annotation
     * @publicApi
     */


    var HostListener = /*@__PURE__*/makePropDecorator('HostListener', ɵ9);
    var SWITCH_COMPILE_COMPONENT__POST_R3__ = compileComponent;
    var SWITCH_COMPILE_DIRECTIVE__POST_R3__ = compileDirective;
    var SWITCH_COMPILE_PIPE__POST_R3__ = compilePipe;
    var SWITCH_COMPILE_COMPONENT__PRE_R3__ = noop;
    var SWITCH_COMPILE_DIRECTIVE__PRE_R3__ = noop;
    var SWITCH_COMPILE_PIPE__PRE_R3__ = noop;
    var SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__POST_R3__;
    var SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__POST_R3__;
    var SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__POST_R3__;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    var ɵ0$f = function ɵ0$f(ngModule) {
      return ngModule;
    },
        ɵ1$4 =
    /**
     * Decorator that marks the following class as an NgModule, and supplies
     * configuration metadata for it.
     *
     * * The `declarations` and `entryComponents` options configure the compiler
     * with information about what belongs to the NgModule.
     * * The `providers` options configures the NgModule's injector to provide
     * dependencies the NgModule members.
     * * The `imports` and `exports` options bring in members from other modules, and make
     * this module's members available to others.
     */
    function ɵ1$4(type, meta) {
      return SWITCH_COMPILE_NGMODULE(type, meta);
    };
    /**
     * @Annotation
     * @publicApi
     */


    var NgModule = /*@__PURE__*/makeDecorator('NgModule', ɵ0$f, undefined, undefined, ɵ1$4);

    function preR3NgModuleCompile(moduleType, metadata) {
      var imports = metadata && metadata.imports || [];

      if (metadata && metadata.exports) {
        imports = [].concat(_toConsumableArray(imports), [metadata.exports]);
      }

      moduleType.ɵinj = ɵɵdefineInjector({
        factory: convertInjectableProviderToFactory(moduleType, {
          useClass: moduleType
        }),
        providers: metadata && metadata.providers,
        imports: imports
      });
    }

    var SWITCH_COMPILE_NGMODULE__POST_R3__ = compileNgModule;
    var SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;
    var SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__POST_R3__;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * A [DI token](guide/glossary#di-token "DI token definition") that you can use to provide
     * one or more initialization functions.
     *
     * The provided functions are injected at application startup and executed during
     * app initialization. If any of these functions returns a Promise, initialization
     * does not complete until the Promise is resolved.
     *
     * You can, for example, create a factory function that loads language data
     * or an external configuration, and provide that function to the `APP_INITIALIZER` token.
     * The function is executed during the application bootstrap process,
     * and the needed data is available on startup.
     *
     * @see `ApplicationInitStatus`
     *
     * @publicApi
     */

    var APP_INITIALIZER = /*@__PURE__*/new InjectionToken('Application Initializer');

    var ApplicationInitStatus = /*@__PURE__*/function () {
      var ApplicationInitStatus = /*#__PURE__*/function () {
        function ApplicationInitStatus(appInits) {
          var _this35 = this;

          _classCallCheck(this, ApplicationInitStatus);

          this.appInits = appInits;
          this.initialized = false;
          this.done = false;
          this.donePromise = new Promise(function (res, rej) {
            _this35.resolve = res;
            _this35.reject = rej;
          });
        }
        /** @internal */


        _createClass2(ApplicationInitStatus, [{
          key: "runInitializers",
          value: function runInitializers() {
            var _this36 = this;

            if (this.initialized) {
              return;
            }

            var asyncInitPromises = [];

            var complete = function complete() {
              _this36.done = true;

              _this36.resolve();
            };

            if (this.appInits) {
              for (var i = 0; i < this.appInits.length; i++) {
                var initResult = this.appInits[i]();

                if (isPromise(initResult)) {
                  asyncInitPromises.push(initResult);
                }
              }
            }

            Promise.all(asyncInitPromises).then(function () {
              complete();
            })["catch"](function (e) {
              _this36.reject(e);
            });

            if (asyncInitPromises.length === 0) {
              complete();
            }

            this.initialized = true;
          }
        }]);

        return ApplicationInitStatus;
      }();

      ApplicationInitStatus.ɵfac = function ApplicationInitStatus_Factory(t) {
        return new (t || ApplicationInitStatus)(ɵɵinject(APP_INITIALIZER, 8));
      };

      ApplicationInitStatus.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
        token: ApplicationInitStatus,
        factory: ApplicationInitStatus.ɵfac
      });
      return ApplicationInitStatus;
    }();
    /*@__PURE__*/

    /*@__PURE__*/


    (function () {
      setClassMetadata(ApplicationInitStatus, [{
        type: Injectable
      }], function () {
        return [{
          type: Array,
          decorators: [{
            type: Inject,
            args: [APP_INITIALIZER]
          }, {
            type: Optional
          }]
        }];
      }, null);
    })();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * A [DI token](guide/glossary#di-token "DI token definition") representing a unique string ID, used
     * primarily for prefixing application attributes and CSS styles when
     * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.
     *
     * BY default, the value is randomly generated and assigned to the application by Angular.
     * To provide a custom ID value, use a DI provider <!-- TODO: provider --> to configure
     * the root {@link Injector} that uses this token.
     *
     * @publicApi
     */


    var APP_ID = /*@__PURE__*/new InjectionToken('AppId');

    function _appIdRandomProviderFactory() {
      return "".concat(_randomChar()).concat(_randomChar()).concat(_randomChar());
    }
    /**
     * Providers that generate a random `APP_ID_TOKEN`.
     * @publicApi
     */


    var APP_ID_RANDOM_PROVIDER = {
      provide: APP_ID,
      useFactory: _appIdRandomProviderFactory,
      deps: []
    };

    function _randomChar() {
      return String.fromCharCode(97 + Math.floor(Math.random() * 25));
    }
    /**
     * A function that is executed when a platform is initialized.
     * @publicApi
     */


    var PLATFORM_INITIALIZER = /*@__PURE__*/new InjectionToken('Platform Initializer');
    /**
     * A token that indicates an opaque platform ID.
     * @publicApi
     */

    var PLATFORM_ID = /*@__PURE__*/new InjectionToken('Platform ID');
    /**
     * A [DI token](guide/glossary#di-token "DI token definition") that provides a set of callbacks to
     * be called for every component that is bootstrapped.
     *
     * Each callback must take a `ComponentRef` instance and return nothing.
     *
     * `(componentRef: ComponentRef) => void`
     *
     * @publicApi
     */

    var APP_BOOTSTRAP_LISTENER = /*@__PURE__*/new InjectionToken('appBootstrapListener');
    /**
     * A [DI token](guide/glossary#di-token "DI token definition") that indicates the root directory of
     * the application
     * @publicApi
     */

    var PACKAGE_ROOT_URL = /*@__PURE__*/new InjectionToken('Application Packages Root URL');

    var Console = /*@__PURE__*/function () {
      var Console = /*#__PURE__*/function () {
        function Console() {
          _classCallCheck(this, Console);
        }

        _createClass2(Console, [{
          key: "log",
          value: function log(message) {
            // tslint:disable-next-line:no-console
            console.log(message);
          } // Note: for reporting errors use `DOM.logError()` as it is platform specific

        }, {
          key: "warn",
          value: function warn(message) {
            // tslint:disable-next-line:no-console
            console.warn(message);
          }
        }]);

        return Console;
      }();

      Console.ɵfac = function Console_Factory(t) {
        return new (t || Console)();
      };

      Console.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
        token: Console,
        factory: Console.ɵfac
      });
      return Console;
    }();
    /*@__PURE__*/

    /*@__PURE__*/


    (function () {
      setClassMetadata(Console, [{
        type: Injectable
      }], null, null);
    })();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Provide this token to set the locale of your application.
     * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,
     * DecimalPipe and PercentPipe) and by ICU expressions.
     *
     * See the [i18n guide](guide/i18n#setting-up-locale) for more information.
     *
     * @usageNotes
     * ### Example
     *
     * ```typescript
     * import { LOCALE_ID } from '@angular/core';
     * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
     * import { AppModule } from './app/app.module';
     *
     * platformBrowserDynamic().bootstrapModule(AppModule, {
     *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]
     * });
     * ```
     *
     * @publicApi
     */


    var LOCALE_ID$1 = /*@__PURE__*/new InjectionToken('LocaleId');
    /**
     * Provide this token to set the default currency code your application uses for
     * CurrencyPipe when there is no currency code passed into it. This is only used by
     * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.
     *
     * See the [i18n guide](guide/i18n#setting-up-locale) for more information.
     *
     * <div class="alert is-helpful">
     *
     * **Deprecation notice:**
     *
     * The default currency code is currently always `USD` but this is deprecated from v9.
     *
     * **In v10 the default currency code will be taken from the current locale.**
     *
     * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in
     * your application `NgModule`:
     *
     * ```ts
     * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}
     * ```
     *
     * </div>
     *
     * @usageNotes
     * ### Example
     *
     * ```typescript
     * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
     * import { AppModule } from './app/app.module';
     *
     * platformBrowserDynamic().bootstrapModule(AppModule, {
     *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]
     * });
     * ```
     *
     * @publicApi
     */

    var DEFAULT_CURRENCY_CODE = /*@__PURE__*/new InjectionToken('DefaultCurrencyCode');
    /**
     * Use this token at bootstrap to provide the content of your translation file (`xtb`,
     * `xlf` or `xlf2`) when you want to translate your application in another language.
     *
     * See the [i18n guide](guide/i18n#merge) for more information.
     *
     * @usageNotes
     * ### Example
     *
     * ```typescript
     * import { TRANSLATIONS } from '@angular/core';
     * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
     * import { AppModule } from './app/app.module';
     *
     * // content of your translation file
     * const translations = '....';
     *
     * platformBrowserDynamic().bootstrapModule(AppModule, {
     *   providers: [{provide: TRANSLATIONS, useValue: translations }]
     * });
     * ```
     *
     * @publicApi
     */

    var TRANSLATIONS = /*@__PURE__*/new InjectionToken('Translations');
    /**
     * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,
     * `xlf` or `xlf2`.
     *
     * See the [i18n guide](guide/i18n#merge) for more information.
     *
     * @usageNotes
     * ### Example
     *
     * ```typescript
     * import { TRANSLATIONS_FORMAT } from '@angular/core';
     * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
     * import { AppModule } from './app/app.module';
     *
     * platformBrowserDynamic().bootstrapModule(AppModule, {
     *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]
     * });
     * ```
     *
     * @publicApi
     */

    var TRANSLATIONS_FORMAT = /*@__PURE__*/new InjectionToken('TranslationsFormat');
    /**
     * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy
     * that the compiler should use in case of missing translations:
     * - Error: throw if you have missing translations.
     * - Warning (default): show a warning in the console and/or shell.
     * - Ignore: do nothing.
     *
     * See the [i18n guide](guide/i18n#missing-translation) for more information.
     *
     * @usageNotes
     * ### Example
     * ```typescript
     * import { MissingTranslationStrategy } from '@angular/core';
     * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
     * import { AppModule } from './app/app.module';
     *
     * platformBrowserDynamic().bootstrapModule(AppModule, {
     *   missingTranslation: MissingTranslationStrategy.Error
     * });
     * ```
     *
     * @publicApi
     */

    var MissingTranslationStrategy = /*@__PURE__*/function (MissingTranslationStrategy) {
      MissingTranslationStrategy[MissingTranslationStrategy["Error"] = 0] = "Error";
      MissingTranslationStrategy[MissingTranslationStrategy["Warning"] = 1] = "Warning";
      MissingTranslationStrategy[MissingTranslationStrategy["Ignore"] = 2] = "Ignore";
      return MissingTranslationStrategy;
    }({});
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var SWITCH_IVY_ENABLED__POST_R3__ = true;
    var SWITCH_IVY_ENABLED__PRE_R3__ = false;
    var ivyEnabled = SWITCH_IVY_ENABLED__POST_R3__;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Combination of NgModuleFactory and ComponentFactorys.
     *
     * @publicApi
     */

    var ModuleWithComponentFactories = function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
      _classCallCheck(this, ModuleWithComponentFactories);

      this.ngModuleFactory = ngModuleFactory;
      this.componentFactories = componentFactories;
    };

    function _throwError() {
      throw new Error("Runtime compiler is not loaded");
    }

    var Compiler_compileModuleSync__PRE_R3__ = _throwError;

    var Compiler_compileModuleSync__POST_R3__ = function Compiler_compileModuleSync__POST_R3__(moduleType) {
      return new NgModuleFactory$1(moduleType);
    };

    var Compiler_compileModuleSync = Compiler_compileModuleSync__POST_R3__;
    var Compiler_compileModuleAsync__PRE_R3__ = _throwError;

    var Compiler_compileModuleAsync__POST_R3__ = function Compiler_compileModuleAsync__POST_R3__(moduleType) {
      return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));
    };

    var Compiler_compileModuleAsync = Compiler_compileModuleAsync__POST_R3__;
    var Compiler_compileModuleAndAllComponentsSync__PRE_R3__ = _throwError;

    var Compiler_compileModuleAndAllComponentsSync__POST_R3__ = function Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType) {
      var ngModuleFactory = Compiler_compileModuleSync__POST_R3__(moduleType);
      var moduleDef = getNgModuleDef(moduleType);
      var componentFactories = maybeUnwrapFn(moduleDef.declarations).reduce(function (factories, declaration) {
        var componentDef = getComponentDef(declaration);
        componentDef && factories.push(new ComponentFactory$1(componentDef));
        return factories;
      }, []);
      return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);
    };

    var Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__POST_R3__;
    var Compiler_compileModuleAndAllComponentsAsync__PRE_R3__ = _throwError;

    var Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = function Compiler_compileModuleAndAllComponentsAsync__POST_R3__(moduleType) {
      return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));
    };

    var Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__POST_R3__;

    var Compiler = /*@__PURE__*/function () {
      var Compiler = /*#__PURE__*/function () {
        function Compiler() {
          _classCallCheck(this, Compiler);

          /**
           * Compiles the given NgModule and all of its components. All templates of the components listed
           * in `entryComponents` have to be inlined.
           */
          this.compileModuleSync = Compiler_compileModuleSync;
          /**
           * Compiles the given NgModule and all of its components
           */

          this.compileModuleAsync = Compiler_compileModuleAsync;
          /**
           * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.
           */

          this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;
          /**
           * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.
           */

          this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;
        }
        /**
         * Clears all caches.
         */


        _createClass2(Compiler, [{
          key: "clearCache",
          value: function clearCache() {}
          /**
           * Clears the cache for the given component/ngModule.
           */

        }, {
          key: "clearCacheFor",
          value: function clearCacheFor(type) {}
          /**
           * Returns the id for a given NgModule, if one is defined and known to the compiler.
           */

        }, {
          key: "getModuleId",
          value: function getModuleId(moduleType) {
            return undefined;
          }
        }]);

        return Compiler;
      }();

      Compiler.ɵfac = function Compiler_Factory(t) {
        return new (t || Compiler)();
      };

      Compiler.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
        token: Compiler,
        factory: Compiler.ɵfac
      });
      return Compiler;
    }();
    /*@__PURE__*/

    /*@__PURE__*/


    (function () {
      setClassMetadata(Compiler, [{
        type: Injectable
      }], function () {
        return [];
      }, null);
    })();
    /**
     * Token to provide CompilerOptions in the platform injector.
     *
     * @publicApi
     */


    var COMPILER_OPTIONS = /*@__PURE__*/new InjectionToken('compilerOptions');
    /**
     * A factory for creating a Compiler
     *
     * @publicApi
     */

    var CompilerFactory = function CompilerFactory() {
      _classCallCheck(this, CompilerFactory);
    };
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var promise = /*@__PURE__*/function () {
      return Promise.resolve(0);
    }();

    function scheduleMicroTask(fn) {
      if (typeof Zone === 'undefined') {
        // use promise to schedule microTask instead of use Zone
        promise.then(function () {
          fn && fn.apply(null, null);
        });
      } else {
        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function getNativeRequestAnimationFrame() {
      var nativeRequestAnimationFrame = _global['requestAnimationFrame'];
      var nativeCancelAnimationFrame = _global['cancelAnimationFrame'];

      if (typeof Zone !== 'undefined' && nativeRequestAnimationFrame && nativeCancelAnimationFrame) {
        // use unpatched version of requestAnimationFrame(native delegate) if possible
        // to avoid another Change detection
        var unpatchedRequestAnimationFrame = nativeRequestAnimationFrame[Zone.__symbol__('OriginalDelegate')];

        if (unpatchedRequestAnimationFrame) {
          nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;
        }

        var unpatchedCancelAnimationFrame = nativeCancelAnimationFrame[Zone.__symbol__('OriginalDelegate')];

        if (unpatchedCancelAnimationFrame) {
          nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;
        }
      }

      return {
        nativeRequestAnimationFrame: nativeRequestAnimationFrame,
        nativeCancelAnimationFrame: nativeCancelAnimationFrame
      };
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * An injectable service for executing work inside or outside of the Angular zone.
     *
     * The most common use of this service is to optimize performance when starting a work consisting of
     * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
     * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks
     * can reenter the Angular zone via {@link #run}.
     *
     * <!-- TODO: add/fix links to:
     *   - docs explaining zones and the use of zones in Angular and change-detection
     *   - link to runOutsideAngular/run (throughout this file!)
     *   -->
     *
     * @usageNotes
     * ### Example
     *
     * ```
     * import {Component, NgZone} from '@angular/core';
     * import {NgIf} from '@angular/common';
     *
     * @Component({
     *   selector: 'ng-zone-demo',
     *   template: `
     *     <h2>Demo: NgZone</h2>
     *
     *     <p>Progress: {{progress}}%</p>
     *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
     *
     *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
     *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
     *   `,
     * })
     * export class NgZoneDemo {
     *   progress: number = 0;
     *   label: string;
     *
     *   constructor(private _ngZone: NgZone) {}
     *
     *   // Loop inside the Angular zone
     *   // so the UI DOES refresh after each setTimeout cycle
     *   processWithinAngularZone() {
     *     this.label = 'inside';
     *     this.progress = 0;
     *     this._increaseProgress(() => console.log('Inside Done!'));
     *   }
     *
     *   // Loop outside of the Angular zone
     *   // so the UI DOES NOT refresh after each setTimeout cycle
     *   processOutsideOfAngularZone() {
     *     this.label = 'outside';
     *     this.progress = 0;
     *     this._ngZone.runOutsideAngular(() => {
     *       this._increaseProgress(() => {
     *         // reenter the Angular zone and display done
     *         this._ngZone.run(() => { console.log('Outside Done!'); });
     *       });
     *     });
     *   }
     *
     *   _increaseProgress(doneCallback: () => void) {
     *     this.progress += 1;
     *     console.log(`Current progress: ${this.progress}%`);
     *
     *     if (this.progress < 100) {
     *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);
     *     } else {
     *       doneCallback();
     *     }
     *   }
     * }
     * ```
     *
     * @publicApi
     */


    var NgZone = /*#__PURE__*/function () {
      function NgZone(_ref6) {
        var _ref6$enableLongStack = _ref6.enableLongStackTrace,
            enableLongStackTrace = _ref6$enableLongStack === void 0 ? false : _ref6$enableLongStack,
            _ref6$shouldCoalesceE = _ref6.shouldCoalesceEventChangeDetection,
            shouldCoalesceEventChangeDetection = _ref6$shouldCoalesceE === void 0 ? false : _ref6$shouldCoalesceE;

        _classCallCheck(this, NgZone);

        this.hasPendingMacrotasks = false;
        this.hasPendingMicrotasks = false;
        /**
         * Whether there are no outstanding microtasks or macrotasks.
         */

        this.isStable = true;
        /**
         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
         */

        this.onUnstable = new EventEmitter(false);
        /**
         * Notifies when there is no more microtasks enqueued in the current VM Turn.
         * This is a hint for Angular to do change detection, which may enqueue more microtasks.
         * For this reason this event can fire multiple times per VM Turn.
         */

        this.onMicrotaskEmpty = new EventEmitter(false);
        /**
         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
         * implies we are about to relinquish VM turn.
         * This event gets called just once.
         */

        this.onStable = new EventEmitter(false);
        /**
         * Notifies that an error has been delivered.
         */

        this.onError = new EventEmitter(false);

        if (typeof Zone == 'undefined') {
          throw new Error("In this configuration Angular requires Zone.js");
        }

        Zone.assertZonePatched();
        var self = this;
        self._nesting = 0;
        self._outer = self._inner = Zone.current;

        if (Zone['wtfZoneSpec']) {
          self._inner = self._inner.fork(Zone['wtfZoneSpec']);
        }

        if (Zone['TaskTrackingZoneSpec']) {
          self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']());
        }

        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
          self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);
        }

        self.shouldCoalesceEventChangeDetection = shouldCoalesceEventChangeDetection;
        self.lastRequestAnimationFrameId = -1;
        self.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;
        forkInnerZoneWithAngularBehavior(self);
      }

      _createClass2(NgZone, [{
        key: "run",

        /**
         * Executes the `fn` function synchronously within the Angular zone and returns value returned by
         * the function.
         *
         * Running functions via `run` allows you to reenter Angular zone from a task that was executed
         * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
         *
         * Any future tasks or microtasks scheduled from within this function will continue executing from
         * within the Angular zone.
         *
         * If a synchronous error happens it will be rethrown and not reported via `onError`.
         */
        value: function run(fn, applyThis, applyArgs) {
          return this._inner.run(fn, applyThis, applyArgs);
        }
        /**
         * Executes the `fn` function synchronously within the Angular zone as a task and returns value
         * returned by the function.
         *
         * Running functions via `run` allows you to reenter Angular zone from a task that was executed
         * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
         *
         * Any future tasks or microtasks scheduled from within this function will continue executing from
         * within the Angular zone.
         *
         * If a synchronous error happens it will be rethrown and not reported via `onError`.
         */

      }, {
        key: "runTask",
        value: function runTask(fn, applyThis, applyArgs, name) {
          var zone = this._inner;
          var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop$1, noop$1);

          try {
            return zone.runTask(task, applyThis, applyArgs);
          } finally {
            zone.cancelTask(task);
          }
        }
        /**
         * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
         * rethrown.
         */

      }, {
        key: "runGuarded",
        value: function runGuarded(fn, applyThis, applyArgs) {
          return this._inner.runGuarded(fn, applyThis, applyArgs);
        }
        /**
         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
         * the function.
         *
         * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do
         * work that
         * doesn't trigger Angular change-detection or is subject to Angular's error handling.
         *
         * Any future tasks or microtasks scheduled from within this function will continue executing from
         * outside of the Angular zone.
         *
         * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
         */

      }, {
        key: "runOutsideAngular",
        value: function runOutsideAngular(fn) {
          return this._outer.run(fn);
        }
      }], [{
        key: "isInAngularZone",
        value: function isInAngularZone() {
          return Zone.current.get('isAngularZone') === true;
        }
      }, {
        key: "assertInAngularZone",
        value: function assertInAngularZone() {
          if (!NgZone.isInAngularZone()) {
            throw new Error('Expected to be in Angular Zone, but it is not!');
          }
        }
      }, {
        key: "assertNotInAngularZone",
        value: function assertNotInAngularZone() {
          if (NgZone.isInAngularZone()) {
            throw new Error('Expected to not be in Angular Zone, but it is!');
          }
        }
      }]);

      return NgZone;
    }();

    function noop$1() {}

    var EMPTY_PAYLOAD = {};

    function checkStable(zone) {
      if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
        try {
          zone._nesting++;
          zone.onMicrotaskEmpty.emit(null);
        } finally {
          zone._nesting--;

          if (!zone.hasPendingMicrotasks) {
            try {
              zone.runOutsideAngular(function () {
                return zone.onStable.emit(null);
              });
            } finally {
              zone.isStable = true;
            }
          }
        }
      }
    }

    function delayChangeDetectionForEvents(zone) {
      if (zone.lastRequestAnimationFrameId !== -1) {
        return;
      }

      zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(_global, function () {
        // This is a work around for https://github.com/angular/angular/issues/36839.
        // The core issue is that when event coalescing is enabled it is possible for microtasks
        // to get flushed too early (As is the case with `Promise.then`) between the
        // coalescing eventTasks.
        //
        // To workaround this we schedule a "fake" eventTask before we process the
        // coalescing eventTasks. The benefit of this is that the "fake" container eventTask
        //  will prevent the microtasks queue from getting drained in between the coalescing
        // eventTask execution.
        if (!zone.fakeTopEventTask) {
          zone.fakeTopEventTask = Zone.root.scheduleEventTask('fakeTopEventTask', function () {
            zone.lastRequestAnimationFrameId = -1;
            updateMicroTaskStatus(zone);
            checkStable(zone);
          }, undefined, function () {}, function () {});
        }

        zone.fakeTopEventTask.invoke();
      });
      updateMicroTaskStatus(zone);
    }

    function forkInnerZoneWithAngularBehavior(zone) {
      var delayChangeDetectionForEventsDelegate = function delayChangeDetectionForEventsDelegate() {
        delayChangeDetectionForEvents(zone);
      };

      var maybeDelayChangeDetection = !!zone.shouldCoalesceEventChangeDetection && zone.nativeRequestAnimationFrame && delayChangeDetectionForEventsDelegate;
      zone._inner = zone._inner.fork({
        name: 'angular',
        properties: {
          'isAngularZone': true,
          'maybeDelayChangeDetection': maybeDelayChangeDetection
        },
        onInvokeTask: function onInvokeTask(delegate, current, target, task, applyThis, applyArgs) {
          try {
            onEnter(zone);
            return delegate.invokeTask(target, task, applyThis, applyArgs);
          } finally {
            if (maybeDelayChangeDetection && task.type === 'eventTask') {
              maybeDelayChangeDetection();
            }

            onLeave(zone);
          }
        },
        onInvoke: function onInvoke(delegate, current, target, callback, applyThis, applyArgs, source) {
          try {
            onEnter(zone);
            return delegate.invoke(target, callback, applyThis, applyArgs, source);
          } finally {
            onLeave(zone);
          }
        },
        onHasTask: function onHasTask(delegate, current, target, hasTaskState) {
          delegate.hasTask(target, hasTaskState);

          if (current === target) {
            // We are only interested in hasTask events which originate from our zone
            // (A child hasTask event is not interesting to us)
            if (hasTaskState.change == 'microTask') {
              zone._hasPendingMicrotasks = hasTaskState.microTask;
              updateMicroTaskStatus(zone);
              checkStable(zone);
            } else if (hasTaskState.change == 'macroTask') {
              zone.hasPendingMacrotasks = hasTaskState.macroTask;
            }
          }
        },
        onHandleError: function onHandleError(delegate, current, target, error) {
          delegate.handleError(target, error);
          zone.runOutsideAngular(function () {
            return zone.onError.emit(error);
          });
          return false;
        }
      });
    }

    function updateMicroTaskStatus(zone) {
      if (zone._hasPendingMicrotasks || zone.shouldCoalesceEventChangeDetection && zone.lastRequestAnimationFrameId !== -1) {
        zone.hasPendingMicrotasks = true;
      } else {
        zone.hasPendingMicrotasks = false;
      }
    }

    function onEnter(zone) {
      zone._nesting++;

      if (zone.isStable) {
        zone.isStable = false;
        zone.onUnstable.emit(null);
      }
    }

    function onLeave(zone) {
      zone._nesting--;
      checkStable(zone);
    }
    /**
     * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls
     * to framework to perform rendering.
     */


    var NoopNgZone = /*#__PURE__*/function () {
      function NoopNgZone() {
        _classCallCheck(this, NoopNgZone);

        this.hasPendingMicrotasks = false;
        this.hasPendingMacrotasks = false;
        this.isStable = true;
        this.onUnstable = new EventEmitter();
        this.onMicrotaskEmpty = new EventEmitter();
        this.onStable = new EventEmitter();
        this.onError = new EventEmitter();
      }

      _createClass2(NoopNgZone, [{
        key: "run",
        value: function run(fn, applyThis, applyArgs) {
          return fn.apply(applyThis, applyArgs);
        }
      }, {
        key: "runGuarded",
        value: function runGuarded(fn, applyThis, applyArgs) {
          return fn.apply(applyThis, applyArgs);
        }
      }, {
        key: "runOutsideAngular",
        value: function runOutsideAngular(fn) {
          return fn();
        }
      }, {
        key: "runTask",
        value: function runTask(fn, applyThis, applyArgs, name) {
          return fn.apply(applyThis, applyArgs);
        }
      }]);

      return NoopNgZone;
    }();

    var Testability = /*@__PURE__*/function () {
      var Testability = /*#__PURE__*/function () {
        function Testability(_ngZone) {
          var _this37 = this;

          _classCallCheck(this, Testability);

          this._ngZone = _ngZone;
          this._pendingCount = 0;
          this._isZoneStable = true;
          /**
           * Whether any work was done since the last 'whenStable' callback. This is
           * useful to detect if this could have potentially destabilized another
           * component while it is stabilizing.
           * @internal
           */

          this._didWork = false;
          this._callbacks = [];
          this.taskTrackingZone = null;

          this._watchAngularEvents();

          _ngZone.run(function () {
            _this37.taskTrackingZone = typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');
          });
        }

        _createClass2(Testability, [{
          key: "_watchAngularEvents",
          value: function _watchAngularEvents() {
            var _this38 = this;

            this._ngZone.onUnstable.subscribe({
              next: function next() {
                _this38._didWork = true;
                _this38._isZoneStable = false;
              }
            });

            this._ngZone.runOutsideAngular(function () {
              _this38._ngZone.onStable.subscribe({
                next: function next() {
                  NgZone.assertNotInAngularZone();
                  scheduleMicroTask(function () {
                    _this38._isZoneStable = true;

                    _this38._runCallbacksIfReady();
                  });
                }
              });
            });
          }
          /**
           * Increases the number of pending request
           * @deprecated pending requests are now tracked with zones.
           */

        }, {
          key: "increasePendingRequestCount",
          value: function increasePendingRequestCount() {
            this._pendingCount += 1;
            this._didWork = true;
            return this._pendingCount;
          }
          /**
           * Decreases the number of pending request
           * @deprecated pending requests are now tracked with zones
           */

        }, {
          key: "decreasePendingRequestCount",
          value: function decreasePendingRequestCount() {
            this._pendingCount -= 1;

            if (this._pendingCount < 0) {
              throw new Error('pending async requests below zero');
            }

            this._runCallbacksIfReady();

            return this._pendingCount;
          }
          /**
           * Whether an associated application is stable
           */

        }, {
          key: "isStable",
          value: function isStable() {
            return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;
          }
        }, {
          key: "_runCallbacksIfReady",
          value: function _runCallbacksIfReady() {
            var _this39 = this;

            if (this.isStable()) {
              // Schedules the call backs in a new frame so that it is always async.
              scheduleMicroTask(function () {
                while (_this39._callbacks.length !== 0) {
                  var cb = _this39._callbacks.pop();

                  clearTimeout(cb.timeoutId);
                  cb.doneCb(_this39._didWork);
                }

                _this39._didWork = false;
              });
            } else {
              // Still not stable, send updates.
              var pending = this.getPendingTasks();
              this._callbacks = this._callbacks.filter(function (cb) {
                if (cb.updateCb && cb.updateCb(pending)) {
                  clearTimeout(cb.timeoutId);
                  return false;
                }

                return true;
              });
              this._didWork = true;
            }
          }
        }, {
          key: "getPendingTasks",
          value: function getPendingTasks() {
            if (!this.taskTrackingZone) {
              return [];
            } // Copy the tasks data so that we don't leak tasks.


            return this.taskTrackingZone.macroTasks.map(function (t) {
              return {
                source: t.source,
                // From TaskTrackingZone:
                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40
                creationLocation: t.creationLocation,
                data: t.data
              };
            });
          }
        }, {
          key: "addCallback",
          value: function addCallback(cb, timeout, updateCb) {
            var _this40 = this;

            var timeoutId = -1;

            if (timeout && timeout > 0) {
              timeoutId = setTimeout(function () {
                _this40._callbacks = _this40._callbacks.filter(function (cb) {
                  return cb.timeoutId !== timeoutId;
                });
                cb(_this40._didWork, _this40.getPendingTasks());
              }, timeout);
            }

            this._callbacks.push({
              doneCb: cb,
              timeoutId: timeoutId,
              updateCb: updateCb
            });
          }
          /**
           * Wait for the application to be stable with a timeout. If the timeout is reached before that
           * happens, the callback receives a list of the macro tasks that were pending, otherwise null.
           *
           * @param doneCb The callback to invoke when Angular is stable or the timeout expires
           *    whichever comes first.
           * @param timeout Optional. The maximum time to wait for Angular to become stable. If not
           *    specified, whenStable() will wait forever.
           * @param updateCb Optional. If specified, this callback will be invoked whenever the set of
           *    pending macrotasks changes. If this callback returns true doneCb will not be invoked
           *    and no further updates will be issued.
           */

        }, {
          key: "whenStable",
          value: function whenStable(doneCb, timeout, updateCb) {
            if (updateCb && !this.taskTrackingZone) {
              throw new Error('Task tracking zone is required when passing an update callback to ' + 'whenStable(). Is "zone.js/dist/task-tracking.js" loaded?');
            } // These arguments are 'Function' above to keep the public API simple.


            this.addCallback(doneCb, timeout, updateCb);

            this._runCallbacksIfReady();
          }
          /**
           * Get the number of pending requests
           * @deprecated pending requests are now tracked with zones
           */

        }, {
          key: "getPendingRequestCount",
          value: function getPendingRequestCount() {
            return this._pendingCount;
          }
          /**
           * Find providers by name
           * @param using The root element to search from
           * @param provider The name of binding variable
           * @param exactMatch Whether using exactMatch
           */

        }, {
          key: "findProviders",
          value: function findProviders(using, provider, exactMatch) {
            // TODO(juliemr): implement.
            return [];
          }
        }]);

        return Testability;
      }();

      Testability.ɵfac = function Testability_Factory(t) {
        return new (t || Testability)(ɵɵinject(NgZone));
      };

      Testability.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
        token: Testability,
        factory: Testability.ɵfac
      });
      return Testability;
    }();
    /*@__PURE__*/

    /*@__PURE__*/


    (function () {
      setClassMetadata(Testability, [{
        type: Injectable
      }], function () {
        return [{
          type: NgZone
        }];
      }, null);
    })();

    var TestabilityRegistry = /*@__PURE__*/function () {
      var TestabilityRegistry = /*#__PURE__*/function () {
        function TestabilityRegistry() {
          _classCallCheck(this, TestabilityRegistry);

          /** @internal */
          this._applications = new Map();

          _testabilityGetter.addToWindow(this);
        }
        /**
         * Registers an application with a testability hook so that it can be tracked
         * @param token token of application, root element
         * @param testability Testability hook
         */


        _createClass2(TestabilityRegistry, [{
          key: "registerApplication",
          value: function registerApplication(token, testability) {
            this._applications.set(token, testability);
          }
          /**
           * Unregisters an application.
           * @param token token of application, root element
           */

        }, {
          key: "unregisterApplication",
          value: function unregisterApplication(token) {
            this._applications["delete"](token);
          }
          /**
           * Unregisters all applications
           */

        }, {
          key: "unregisterAllApplications",
          value: function unregisterAllApplications() {
            this._applications.clear();
          }
          /**
           * Get a testability hook associated with the application
           * @param elem root element
           */

        }, {
          key: "getTestability",
          value: function getTestability(elem) {
            return this._applications.get(elem) || null;
          }
          /**
           * Get all registered testabilities
           */

        }, {
          key: "getAllTestabilities",
          value: function getAllTestabilities() {
            return Array.from(this._applications.values());
          }
          /**
           * Get all registered applications(root elements)
           */

        }, {
          key: "getAllRootElements",
          value: function getAllRootElements() {
            return Array.from(this._applications.keys());
          }
          /**
           * Find testability of a node in the Tree
           * @param elem node
           * @param findInAncestors whether finding testability in ancestors if testability was not found in
           * current node
           */

        }, {
          key: "findTestabilityInTree",
          value: function findTestabilityInTree(elem) {
            var findInAncestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
          }
        }]);

        return TestabilityRegistry;
      }();

      TestabilityRegistry.ɵfac = function TestabilityRegistry_Factory(t) {
        return new (t || TestabilityRegistry)();
      };

      TestabilityRegistry.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
        token: TestabilityRegistry,
        factory: TestabilityRegistry.ɵfac
      });
      return TestabilityRegistry;
    }();
    /*@__PURE__*/

    /*@__PURE__*/


    (function () {
      setClassMetadata(TestabilityRegistry, [{
        type: Injectable
      }], function () {
        return [];
      }, null);
    })();

    var _NoopGetTestability = /*#__PURE__*/function () {
      function _NoopGetTestability() {
        _classCallCheck(this, _NoopGetTestability);
      }

      _createClass2(_NoopGetTestability, [{
        key: "addToWindow",
        value: function addToWindow(registry) {}
      }, {
        key: "findTestabilityInTree",
        value: function findTestabilityInTree(registry, elem, findInAncestors) {
          return null;
        }
      }]);

      return _NoopGetTestability;
    }();
    /**
     * Set the {@link GetTestability} implementation used by the Angular testing framework.
     * @publicApi
     */


    function setTestabilityGetter(getter) {
      _testabilityGetter = getter;
    }

    var _testabilityGetter = /*@__PURE__*/new _NoopGetTestability();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var _platform;

    var compileNgModuleFactory = compileNgModuleFactory__POST_R3__;

    function compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {
      var compilerFactory = injector.get(CompilerFactory);
      var compiler = compilerFactory.createCompiler([options]);
      return compiler.compileModuleAsync(moduleType);
    }

    function compileNgModuleFactory__POST_R3__(injector, options, moduleType) {
      ngDevMode && assertNgModuleType(moduleType);
      var moduleFactory = new NgModuleFactory$1(moduleType); // All of the logic below is irrelevant for AOT-compiled code.

      if (typeof ngJitMode !== 'undefined' && !ngJitMode) {
        return Promise.resolve(moduleFactory);
      }

      var compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options); // Configure the compiler to use the provided options. This call may fail when multiple modules
      // are bootstrapped with incompatible options, as a component can only be compiled according to
      // a single set of options.

      setJitOptions({
        defaultEncapsulation: _lastDefined(compilerOptions.map(function (opts) {
          return opts.defaultEncapsulation;
        })),
        preserveWhitespaces: _lastDefined(compilerOptions.map(function (opts) {
          return opts.preserveWhitespaces;
        }))
      });

      if (isComponentResourceResolutionQueueEmpty()) {
        return Promise.resolve(moduleFactory);
      }

      var compilerProviders = _mergeArrays(compilerOptions.map(function (o) {
        return o.providers;
      })); // In case there are no compiler providers, we just return the module factory as
      // there won't be any resource loader. This can happen with Ivy, because AOT compiled
      // modules can be still passed through "bootstrapModule". In that case we shouldn't
      // unnecessarily require the JIT compiler.


      if (compilerProviders.length === 0) {
        return Promise.resolve(moduleFactory);
      }

      var compiler = getCompilerFacade();
      var compilerInjector = Injector.create({
        providers: compilerProviders
      });
      var resourceLoader = compilerInjector.get(compiler.ResourceLoader); // The resource loader can also return a string while the "resolveComponentResources"
      // always expects a promise. Therefore we need to wrap the returned value in a promise.

      return resolveComponentResources(function (url) {
        return Promise.resolve(resourceLoader.get(url));
      }).then(function () {
        return moduleFactory;
      });
    } // the `window.ng` global utilities are only available in non-VE versions of
    // Angular. The function switch below will make sure that the code is not
    // included into Angular when PRE mode is active.


    function publishDefaultGlobalUtils__PRE_R3__() {}

    function publishDefaultGlobalUtils__POST_R3__() {
      ngDevMode && publishDefaultGlobalUtils();
    }

    var publishDefaultGlobalUtils$1 = publishDefaultGlobalUtils__POST_R3__;
    var isBoundToModule = isBoundToModule__POST_R3__;

    function isBoundToModule__PRE_R3__(cf) {
      return cf instanceof ComponentFactoryBoundToModule;
    }

    function isBoundToModule__POST_R3__(cf) {
      return cf.isBoundToModule;
    }

    var ALLOW_MULTIPLE_PLATFORMS = /*@__PURE__*/new InjectionToken('AllowMultipleToken');
    /**
     * A token for third-party components that can register themselves with NgProbe.
     *
     * @publicApi
     */

    var NgProbeToken = function NgProbeToken(name, token) {
      _classCallCheck(this, NgProbeToken);

      this.name = name;
      this.token = token;
    };
    /**
     * Creates a platform.
     * Platforms must be created on launch using this function.
     *
     * @publicApi
     */


    function createPlatform(injector) {
      if (_platform && !_platform.destroyed && !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
      }

      publishDefaultGlobalUtils$1();
      _platform = injector.get(PlatformRef);
      var inits = injector.get(PLATFORM_INITIALIZER, null);
      if (inits) inits.forEach(function (init) {
        return init();
      });
      return _platform;
    }
    /**
     * Creates a factory for a platform. Can be used to provide or override `Providers` specific to
     * your applciation's runtime needs, such as `PLATFORM_INITIALIZER` and `PLATFORM_ID`.
     * @param parentPlatformFactory Another platform factory to modify. Allows you to compose factories
     * to build up configurations that might be required by different libraries or parts of the
     * application.
     * @param name Identifies the new platform factory.
     * @param providers A set of dependency providers for platforms created with the new factory.
     *
     * @publicApi
     */


    function createPlatformFactory(parentPlatformFactory, name) {
      var providers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var desc = "Platform: ".concat(name);
      var marker = new InjectionToken(desc);
      return function () {
        var extraProviders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var platform = getPlatform();

        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
          if (parentPlatformFactory) {
            parentPlatformFactory(providers.concat(extraProviders).concat({
              provide: marker,
              useValue: true
            }));
          } else {
            var injectedProviders = providers.concat(extraProviders).concat({
              provide: marker,
              useValue: true
            }, {
              provide: INJECTOR_SCOPE,
              useValue: 'platform'
            });
            createPlatform(Injector.create({
              providers: injectedProviders,
              name: desc
            }));
          }
        }

        return assertPlatform(marker);
      };
    }
    /**
     * Checks that there is currently a platform that contains the given token as a provider.
     *
     * @publicApi
     */


    function assertPlatform(requiredToken) {
      var platform = getPlatform();

      if (!platform) {
        throw new Error('No platform exists!');
      }

      if (!platform.injector.get(requiredToken, null)) {
        throw new Error('A platform with a different configuration has been created. Please destroy it first.');
      }

      return platform;
    }
    /**
     * Destroys the current Angular platform and all Angular applications on the page.
     * Destroys all modules and listeners registered with the platform.
     *
     * @publicApi
     */


    function destroyPlatform() {
      if (_platform && !_platform.destroyed) {
        _platform.destroy();
      }
    }
    /**
     * Returns the current platform.
     *
     * @publicApi
     */


    function getPlatform() {
      return _platform && !_platform.destroyed ? _platform : null;
    }

    var PlatformRef = /*@__PURE__*/function () {
      var PlatformRef = /*#__PURE__*/function () {
        /** @internal */
        function PlatformRef(_injector) {
          _classCallCheck(this, PlatformRef);

          this._injector = _injector;
          this._modules = [];
          this._destroyListeners = [];
          this._destroyed = false;
        }
        /**
         * Creates an instance of an `@NgModule` for the given platform for offline compilation.
         *
         * @usageNotes
         *
         * The following example creates the NgModule for a browser platform.
         *
         * ```typescript
         * my_module.ts:
         *
         * @NgModule({
         *   imports: [BrowserModule]
         * })
         * class MyModule {}
         *
         * main.ts:
         * import {MyModuleNgFactory} from './my_module.ngfactory';
         * import {platformBrowser} from '@angular/platform-browser';
         *
         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
         * ```
         */


        _createClass2(PlatformRef, [{
          key: "bootstrapModuleFactory",
          value: function bootstrapModuleFactory(moduleFactory, options) {
            var _this41 = this;

            // Note: We need to create the NgZone _before_ we instantiate the module,
            // as instantiating the module creates some providers eagerly.
            // So we create a mini parent injector that just contains the new NgZone and
            // pass that as parent to the NgModuleFactory.
            var ngZoneOption = options ? options.ngZone : undefined;
            var ngZoneEventCoalescing = options && options.ngZoneEventCoalescing || false;
            var ngZone = getNgZone(ngZoneOption, ngZoneEventCoalescing);
            var providers = [{
              provide: NgZone,
              useValue: ngZone
            }]; // Attention: Don't use ApplicationRef.run here,
            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!

            return ngZone.run(function () {
              var ngZoneInjector = Injector.create({
                providers: providers,
                parent: _this41.injector,
                name: moduleFactory.moduleType.name
              });
              var moduleRef = moduleFactory.create(ngZoneInjector);
              var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);

              if (!exceptionHandler) {
                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
              }

              moduleRef.onDestroy(function () {
                return remove(_this41._modules, moduleRef);
              });
              ngZone.runOutsideAngular(function () {
                return ngZone.onError.subscribe({
                  next: function next(error) {
                    exceptionHandler.handleError(error);
                  }
                });
              });
              return _callAndReportToErrorHandler(exceptionHandler, ngZone, function () {
                var initStatus = moduleRef.injector.get(ApplicationInitStatus);
                initStatus.runInitializers();
                return initStatus.donePromise.then(function () {
                  if (ivyEnabled) {
                    // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy
                    var localeId = moduleRef.injector.get(LOCALE_ID$1, DEFAULT_LOCALE_ID);
                    setLocaleId(localeId || DEFAULT_LOCALE_ID);
                  }

                  _this41._moduleDoBootstrap(moduleRef);

                  return moduleRef;
                });
              });
            });
          }
          /**
           * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.
           *
           * @usageNotes
           * ### Simple Example
           *
           * ```typescript
           * @NgModule({
           *   imports: [BrowserModule]
           * })
           * class MyModule {}
           *
           * let moduleRef = platformBrowser().bootstrapModule(MyModule);
           * ```
           *
           */

        }, {
          key: "bootstrapModule",
          value: function bootstrapModule(moduleType) {
            var _this42 = this;

            var compilerOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var options = optionsReducer({}, compilerOptions);
            return compileNgModuleFactory(this.injector, options, moduleType).then(function (moduleFactory) {
              return _this42.bootstrapModuleFactory(moduleFactory, options);
            });
          }
        }, {
          key: "_moduleDoBootstrap",
          value: function _moduleDoBootstrap(moduleRef) {
            var appRef = moduleRef.injector.get(ApplicationRef);

            if (moduleRef._bootstrapComponents.length > 0) {
              moduleRef._bootstrapComponents.forEach(function (f) {
                return appRef.bootstrap(f);
              });
            } else if (moduleRef.instance.ngDoBootstrap) {
              moduleRef.instance.ngDoBootstrap(appRef);
            } else {
              throw new Error("The module ".concat(stringify(moduleRef.instance.constructor), " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ") + "Please define one of these.");
            }

            this._modules.push(moduleRef);
          }
          /**
           * Registers a listener to be called when the platform is destroyed.
           */

        }, {
          key: "onDestroy",
          value: function onDestroy(callback) {
            this._destroyListeners.push(callback);
          }
          /**
           * Retrieves the platform {@link Injector}, which is the parent injector for
           * every Angular application on the page and provides singleton providers.
           */

        }, {
          key: "destroy",

          /**
           * Destroys the current Angular platform and all Angular applications on the page.
           * Destroys all modules and listeners registered with the platform.
           */
          value: function destroy() {
            if (this._destroyed) {
              throw new Error('The platform has already been destroyed!');
            }

            this._modules.slice().forEach(function (module) {
              return module.destroy();
            });

            this._destroyListeners.forEach(function (listener) {
              return listener();
            });

            this._destroyed = true;
          }
        }, {
          key: "injector",
          get: function get() {
            return this._injector;
          }
        }, {
          key: "destroyed",
          get: function get() {
            return this._destroyed;
          }
        }]);

        return PlatformRef;
      }();

      PlatformRef.ɵfac = function PlatformRef_Factory(t) {
        return new (t || PlatformRef)(ɵɵinject(Injector));
      };

      PlatformRef.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
        token: PlatformRef,
        factory: PlatformRef.ɵfac
      });
      return PlatformRef;
    }();
    /*@__PURE__*/

    /*@__PURE__*/


    (function () {
      setClassMetadata(PlatformRef, [{
        type: Injectable
      }], function () {
        return [{
          type: Injector
        }];
      }, null);
    })();

    function getNgZone(ngZoneOption, ngZoneEventCoalescing) {
      var ngZone;

      if (ngZoneOption === 'noop') {
        ngZone = new NoopNgZone();
      } else {
        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) || new NgZone({
          enableLongStackTrace: isDevMode(),
          shouldCoalesceEventChangeDetection: ngZoneEventCoalescing
        });
      }

      return ngZone;
    }

    function _callAndReportToErrorHandler(errorHandler, ngZone, callback) {
      try {
        var result = callback();

        if (isPromise(result)) {
          return result["catch"](function (e) {
            ngZone.runOutsideAngular(function () {
              return errorHandler.handleError(e);
            }); // rethrow as the exception handler might not do it

            throw e;
          });
        }

        return result;
      } catch (e) {
        ngZone.runOutsideAngular(function () {
          return errorHandler.handleError(e);
        }); // rethrow as the exception handler might not do it

        throw e;
      }
    }

    function optionsReducer(dst, objs) {
      if (Array.isArray(objs)) {
        dst = objs.reduce(optionsReducer, dst);
      } else {
        dst = Object.assign(Object.assign({}, dst), objs);
      }

      return dst;
    }

    var ApplicationRef = /*@__PURE__*/function () {
      var ApplicationRef = /*#__PURE__*/function () {
        /** @internal */
        function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
          var _this43 = this;

          _classCallCheck(this, ApplicationRef);

          this._zone = _zone;
          this._console = _console;
          this._injector = _injector;
          this._exceptionHandler = _exceptionHandler;
          this._componentFactoryResolver = _componentFactoryResolver;
          this._initStatus = _initStatus;
          /** @internal */

          this._bootstrapListeners = [];
          this._views = [];
          this._runningTick = false;
          this._enforceNoNewChanges = false;
          this._stable = true;
          /**
           * Get a list of component types registered to this application.
           * This list is populated even before the component is created.
           */

          this.componentTypes = [];
          /**
           * Get a list of components registered to this application.
           */

          this.components = [];
          this._enforceNoNewChanges = isDevMode();

          this._zone.onMicrotaskEmpty.subscribe({
            next: function next() {
              _this43._zone.run(function () {
                _this43.tick();
              });
            }
          });

          var isCurrentlyStable = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (observer) {
            _this43._stable = _this43._zone.isStable && !_this43._zone.hasPendingMacrotasks && !_this43._zone.hasPendingMicrotasks;

            _this43._zone.runOutsideAngular(function () {
              observer.next(_this43._stable);
              observer.complete();
            });
          });
          var isStable = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (observer) {
            // Create the subscription to onStable outside the Angular Zone so that
            // the callback is run outside the Angular Zone.
            var stableSub;

            _this43._zone.runOutsideAngular(function () {
              stableSub = _this43._zone.onStable.subscribe(function () {
                NgZone.assertNotInAngularZone(); // Check whether there are no pending macro/micro tasks in the next tick
                // to allow for NgZone to update the state.

                scheduleMicroTask(function () {
                  if (!_this43._stable && !_this43._zone.hasPendingMacrotasks && !_this43._zone.hasPendingMicrotasks) {
                    _this43._stable = true;
                    observer.next(true);
                  }
                });
              });
            });

            var unstableSub = _this43._zone.onUnstable.subscribe(function () {
              NgZone.assertInAngularZone();

              if (_this43._stable) {
                _this43._stable = false;

                _this43._zone.runOutsideAngular(function () {
                  observer.next(false);
                });
              }
            });

            return function () {
              stableSub.unsubscribe();
              unstableSub.unsubscribe();
            };
          });
          this.isStable = Object(rxjs__WEBPACK_IMPORTED_MODULE_0__["merge"])(isCurrentlyStable, isStable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["share"])()));
        }
        /**
         * Bootstrap a new component at the root level of the application.
         *
         * @usageNotes
         * ### Bootstrap process
         *
         * When bootstrapping a new root component into an application, Angular mounts the
         * specified application component onto DOM elements identified by the componentType's
         * selector and kicks off automatic change detection to finish initializing the component.
         *
         * Optionally, a component can be mounted onto a DOM element that does not match the
         * componentType's selector.
         *
         * ### Example
         * {@example core/ts/platform/platform.ts region='longform'}
         */


        _createClass2(ApplicationRef, [{
          key: "bootstrap",
          value: function bootstrap(componentOrFactory, rootSelectorOrNode) {
            var _this44 = this;

            if (!this._initStatus.done) {
              throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
            }

            var componentFactory;

            if (componentOrFactory instanceof ComponentFactory) {
              componentFactory = componentOrFactory;
            } else {
              componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
            }

            this.componentTypes.push(componentFactory.componentType); // Create a factory associated with the current module if it's not bound to some other

            var ngModule = isBoundToModule(componentFactory) ? undefined : this._injector.get(NgModuleRef);
            var selectorOrNode = rootSelectorOrNode || componentFactory.selector;
            var compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);
            compRef.onDestroy(function () {
              _this44._unloadComponent(compRef);
            });
            var testability = compRef.injector.get(Testability, null);

            if (testability) {
              compRef.injector.get(TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability);
            }

            this._loadComponent(compRef);

            if (isDevMode()) {
              this._console.log("Angular is running in development mode. Call enableProdMode() to enable production mode.");
            }

            return compRef;
          }
          /**
           * Invoke this method to explicitly process change detection and its side-effects.
           *
           * In development mode, `tick()` also performs a second change detection cycle to ensure that no
           * further changes are detected. If additional changes are picked up during this second cycle,
           * bindings in the app have side-effects that cannot be resolved in a single change detection
           * pass.
           * In this case, Angular throws an error, since an Angular application can only have one change
           * detection pass during which all change detection must complete.
           */

        }, {
          key: "tick",
          value: function tick() {
            var _this45 = this;

            if (this._runningTick) {
              throw new Error('ApplicationRef.tick is called recursively');
            }

            try {
              this._runningTick = true;

              var _iterator6 = _createForOfIteratorHelper(this._views),
                  _step6;

              try {
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                  var _view3 = _step6.value;

                  _view3.detectChanges();
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }

              if (this._enforceNoNewChanges) {
                var _iterator7 = _createForOfIteratorHelper(this._views),
                    _step7;

                try {
                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                    var view = _step7.value;
                    view.checkNoChanges();
                  }
                } catch (err) {
                  _iterator7.e(err);
                } finally {
                  _iterator7.f();
                }
              }
            } catch (e) {
              // Attention: Don't rethrow as it could cancel subscriptions to Observables!
              this._zone.runOutsideAngular(function () {
                return _this45._exceptionHandler.handleError(e);
              });
            } finally {
              this._runningTick = false;
            }
          }
          /**
           * Attaches a view so that it will be dirty checked.
           * The view will be automatically detached when it is destroyed.
           * This will throw if the view is already attached to a ViewContainer.
           */

        }, {
          key: "attachView",
          value: function attachView(viewRef) {
            var view = viewRef;

            this._views.push(view);

            view.attachToAppRef(this);
          }
          /**
           * Detaches a view from dirty checking again.
           */

        }, {
          key: "detachView",
          value: function detachView(viewRef) {
            var view = viewRef;
            remove(this._views, view);
            view.detachFromAppRef();
          }
        }, {
          key: "_loadComponent",
          value: function _loadComponent(componentRef) {
            this.attachView(componentRef.hostView);
            this.tick();
            this.components.push(componentRef); // Get the listeners lazily to prevent DI cycles.

            var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);

            listeners.forEach(function (listener) {
              return listener(componentRef);
            });
          }
        }, {
          key: "_unloadComponent",
          value: function _unloadComponent(componentRef) {
            this.detachView(componentRef.hostView);
            remove(this.components, componentRef);
          }
          /** @internal */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            // TODO(alxhub): Dispose of the NgZone.
            this._views.slice().forEach(function (view) {
              return view.destroy();
            });
          }
          /**
           * Returns the number of attached views.
           */

        }, {
          key: "viewCount",
          get: function get() {
            return this._views.length;
          }
        }]);

        return ApplicationRef;
      }();

      ApplicationRef.ɵfac = function ApplicationRef_Factory(t) {
        return new (t || ApplicationRef)(ɵɵinject(NgZone), ɵɵinject(Console), ɵɵinject(Injector), ɵɵinject(ErrorHandler), ɵɵinject(ComponentFactoryResolver), ɵɵinject(ApplicationInitStatus));
      };

      ApplicationRef.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
        token: ApplicationRef,
        factory: ApplicationRef.ɵfac
      });
      return ApplicationRef;
    }();
    /*@__PURE__*/

    /*@__PURE__*/


    (function () {
      setClassMetadata(ApplicationRef, [{
        type: Injectable
      }], function () {
        return [{
          type: NgZone
        }, {
          type: Console
        }, {
          type: Injector
        }, {
          type: ErrorHandler
        }, {
          type: ComponentFactoryResolver
        }, {
          type: ApplicationInitStatus
        }];
      }, null);
    })();

    function remove(list, el) {
      var index = list.indexOf(el);

      if (index > -1) {
        list.splice(index, 1);
      }
    }

    function _lastDefined(args) {
      for (var i = args.length - 1; i >= 0; i--) {
        if (args[i] !== undefined) {
          return args[i];
        }
      }

      return undefined;
    }

    function _mergeArrays(parts) {
      var result = [];
      parts.forEach(function (part) {
        return part && result.push.apply(result, _toConsumableArray(part));
      });
      return result;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Used to load ng module factories.
     *
     * @publicApi
     * @deprecated the `string` form of `loadChildren` is deprecated, and `NgModuleFactoryLoader` is
     * part of its implementation. See `LoadChildren` for more details.
     */


    var NgModuleFactoryLoader = function NgModuleFactoryLoader() {
      _classCallCheck(this, NgModuleFactoryLoader);
    };

    function getModuleFactory__PRE_R3__(id) {
      var factory = getRegisteredNgModuleType(id);
      if (!factory) throw noModuleError(id);
      return factory;
    }

    function getModuleFactory__POST_R3__(id) {
      var type = getRegisteredNgModuleType(id);
      if (!type) throw noModuleError(id);
      return new NgModuleFactory$1(type);
    }
    /**
     * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
     * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
     * cannot be found.
     * @publicApi
     */


    var getModuleFactory = getModuleFactory__POST_R3__;

    function noModuleError(id) {
      return new Error("No module with ID ".concat(id, " loaded"));
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var _SEPARATOR = '#';
    var FACTORY_CLASS_SUFFIX = 'NgFactory';
    /**
     * Configuration for SystemJsNgModuleLoader.
     * token.
     *
     * @publicApi
     * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoaderConfig`
     * is part of its implementation. See `LoadChildren` for more details.
     */

    var SystemJsNgModuleLoaderConfig = function SystemJsNgModuleLoaderConfig() {
      _classCallCheck(this, SystemJsNgModuleLoaderConfig);
    };

    var DEFAULT_CONFIG = {
      factoryPathPrefix: '',
      factoryPathSuffix: '.ngfactory'
    };

    var SystemJsNgModuleLoader = /*@__PURE__*/function () {
      var SystemJsNgModuleLoader = /*#__PURE__*/function () {
        function SystemJsNgModuleLoader(_compiler, config) {
          _classCallCheck(this, SystemJsNgModuleLoader);

          this._compiler = _compiler;
          this._config = config || DEFAULT_CONFIG;
        }

        _createClass2(SystemJsNgModuleLoader, [{
          key: "load",
          value: function load(path) {
            var legacyOfflineMode = !ivyEnabled && this._compiler instanceof Compiler;
            return legacyOfflineMode ? this.loadFactory(path) : this.loadAndCompile(path);
          }
        }, {
          key: "loadAndCompile",
          value: function loadAndCompile(path) {
            var _this46 = this;

            var _path$split = path.split(_SEPARATOR),
                _path$split2 = _slicedToArray(_path$split, 2),
                module = _path$split2[0],
                exportName = _path$split2[1];

            if (exportName === undefined) {
              exportName = 'default';
            }

            return __webpack_require__("./$$_lazy_route_resource lazy recursive")(module).then(function (module) {
              return module[exportName];
            }).then(function (type) {
              return checkNotEmpty(type, module, exportName);
            }).then(function (type) {
              return _this46._compiler.compileModuleAsync(type);
            });
          }
        }, {
          key: "loadFactory",
          value: function loadFactory(path) {
            var _path$split3 = path.split(_SEPARATOR),
                _path$split4 = _slicedToArray(_path$split3, 2),
                module = _path$split4[0],
                exportName = _path$split4[1];

            var factoryClassSuffix = FACTORY_CLASS_SUFFIX;

            if (exportName === undefined) {
              exportName = 'default';
              factoryClassSuffix = '';
            }

            return __webpack_require__("./$$_lazy_route_resource lazy recursive")(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix).then(function (module) {
              return module[exportName + factoryClassSuffix];
            }).then(function (factory) {
              return checkNotEmpty(factory, module, exportName);
            });
          }
        }]);

        return SystemJsNgModuleLoader;
      }();

      SystemJsNgModuleLoader.ɵfac = function SystemJsNgModuleLoader_Factory(t) {
        return new (t || SystemJsNgModuleLoader)(ɵɵinject(Compiler), ɵɵinject(SystemJsNgModuleLoaderConfig, 8));
      };

      SystemJsNgModuleLoader.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({
        token: SystemJsNgModuleLoader,
        factory: SystemJsNgModuleLoader.ɵfac
      });
      return SystemJsNgModuleLoader;
    }();
    /*@__PURE__*/

    /*@__PURE__*/


    (function () {
      setClassMetadata(SystemJsNgModuleLoader, [{
        type: Injectable
      }], function () {
        return [{
          type: Compiler
        }, {
          type: SystemJsNgModuleLoaderConfig,
          decorators: [{
            type: Optional
          }]
        }];
      }, null);
    })();

    function checkNotEmpty(value, modulePath, exportName) {
      if (!value) {
        throw new Error("Cannot find '".concat(exportName, "' in '").concat(modulePath, "'"));
      }

      return value;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Represents an Angular [view](guide/glossary#view "Definition").
     *
     * @see {@link ChangeDetectorRef#usage-notes Change detection usage}
     *
     * @publicApi
     */


    var ViewRef$1 = /*#__PURE__*/function (_ChangeDetectorRef) {
      _inherits(ViewRef$1, _ChangeDetectorRef);

      var _super24 = _createSuper(ViewRef$1);

      function ViewRef$1() {
        _classCallCheck(this, ViewRef$1);

        return _super24.apply(this, arguments);
      }

      return ViewRef$1;
    }(ChangeDetectorRef);
    /**
     * Represents an Angular [view](guide/glossary#view) in a view container.
     * An [embedded view](guide/glossary#view-tree) can be referenced from a component
     * other than the hosting component whose template defines it, or it can be defined
     * independently by a `TemplateRef`.
     *
     * Properties of elements in a view can change, but the structure (number and order) of elements in
     * a view cannot. Change the structure of elements by inserting, moving, or
     * removing nested views in a view container.
     *
     * @see `ViewContainerRef`
     *
     * @usageNotes
     *
     * The following template breaks down into two separate `TemplateRef` instances,
     * an outer one and an inner one.
     *
     * ```
     * Count: {{items.length}}
     * <ul>
     *   <li *ngFor="let  item of items">{{item}}</li>
     * </ul>
     * ```
     *
     * This is the outer `TemplateRef`:
     *
     * ```
     * Count: {{items.length}}
     * <ul>
     *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
     * </ul>
     * ```
     *
     * This is the inner `TemplateRef`:
     *
     * ```
     *   <li>{{item}}</li>
     * ```
     *
     * The outer and inner `TemplateRef` instances are assembled into views as follows:
     *
     * ```
     * <!-- ViewRef: outer-0 -->
     * Count: 2
     * <ul>
     *   <ng-template view-container-ref></ng-template>
     *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
     *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
     * </ul>
     * <!-- /ViewRef: outer-0 -->
     * ```
     * @publicApi
     */


    var EmbeddedViewRef = /*#__PURE__*/function (_ViewRef$) {
      _inherits(EmbeddedViewRef, _ViewRef$);

      var _super25 = _createSuper(EmbeddedViewRef);

      function EmbeddedViewRef() {
        _classCallCheck(this, EmbeddedViewRef);

        return _super25.apply(this, arguments);
      }

      return EmbeddedViewRef;
    }(ViewRef$1);
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @publicApi
     */


    var DebugEventListener = function DebugEventListener(name, callback) {
      _classCallCheck(this, DebugEventListener);

      this.name = name;
      this.callback = callback;
    };

    var DebugNode__PRE_R3__ = /*#__PURE__*/function () {
      function DebugNode__PRE_R3__(nativeNode, parent, _debugContext) {
        _classCallCheck(this, DebugNode__PRE_R3__);

        this.listeners = [];
        this.parent = null;
        this._debugContext = _debugContext;
        this.nativeNode = nativeNode;

        if (parent && parent instanceof DebugElement__PRE_R3__) {
          parent.addChild(this);
        }
      }

      _createClass2(DebugNode__PRE_R3__, [{
        key: "injector",
        get: function get() {
          return this._debugContext.injector;
        }
      }, {
        key: "componentInstance",
        get: function get() {
          return this._debugContext.component;
        }
      }, {
        key: "context",
        get: function get() {
          return this._debugContext.context;
        }
      }, {
        key: "references",
        get: function get() {
          return this._debugContext.references;
        }
      }, {
        key: "providerTokens",
        get: function get() {
          return this._debugContext.providerTokens;
        }
      }]);

      return DebugNode__PRE_R3__;
    }();

    var DebugElement__PRE_R3__ = /*#__PURE__*/function (_DebugNode__PRE_R3__) {
      _inherits(DebugElement__PRE_R3__, _DebugNode__PRE_R3__);

      var _super26 = _createSuper(DebugElement__PRE_R3__);

      function DebugElement__PRE_R3__(nativeNode, parent, _debugContext) {
        var _this47;

        _classCallCheck(this, DebugElement__PRE_R3__);

        _this47 = _super26.call(this, nativeNode, parent, _debugContext);
        _this47.properties = {};
        _this47.attributes = {};
        _this47.classes = {};
        _this47.styles = {};
        _this47.childNodes = [];
        _this47.nativeElement = nativeNode;
        return _this47;
      }

      _createClass2(DebugElement__PRE_R3__, [{
        key: "addChild",
        value: function addChild(child) {
          if (child) {
            this.childNodes.push(child);
            child.parent = this;
          }
        }
      }, {
        key: "removeChild",
        value: function removeChild(child) {
          var childIndex = this.childNodes.indexOf(child);

          if (childIndex !== -1) {
            child.parent = null;
            this.childNodes.splice(childIndex, 1);
          }
        }
      }, {
        key: "insertChildrenAfter",
        value: function insertChildrenAfter(child, newChildren) {
          var _this48 = this;

          var siblingIndex = this.childNodes.indexOf(child);

          if (siblingIndex !== -1) {
            var _this$childNodes;

            (_this$childNodes = this.childNodes).splice.apply(_this$childNodes, [siblingIndex + 1, 0].concat(_toConsumableArray(newChildren)));

            newChildren.forEach(function (c) {
              if (c.parent) {
                c.parent.removeChild(c);
              }

              child.parent = _this48;
            });
          }
        }
      }, {
        key: "insertBefore",
        value: function insertBefore(refChild, newChild) {
          var refIndex = this.childNodes.indexOf(refChild);

          if (refIndex === -1) {
            this.addChild(newChild);
          } else {
            if (newChild.parent) {
              newChild.parent.removeChild(newChild);
            }

            newChild.parent = this;
            this.childNodes.splice(refIndex, 0, newChild);
          }
        }
      }, {
        key: "query",
        value: function query(predicate) {
          var results = this.queryAll(predicate);
          return results[0] || null;
        }
      }, {
        key: "queryAll",
        value: function queryAll(predicate) {
          var matches = [];

          _queryElementChildren(this, predicate, matches);

          return matches;
        }
      }, {
        key: "queryAllNodes",
        value: function queryAllNodes(predicate) {
          var matches = [];

          _queryNodeChildren(this, predicate, matches);

          return matches;
        }
      }, {
        key: "triggerEventHandler",
        value: function triggerEventHandler(eventName, eventObj) {
          this.listeners.forEach(function (listener) {
            if (listener.name == eventName) {
              listener.callback(eventObj);
            }
          });
        }
      }, {
        key: "children",
        get: function get() {
          return this.childNodes //
          .filter(function (node) {
            return node instanceof DebugElement__PRE_R3__;
          });
        }
      }]);

      return DebugElement__PRE_R3__;
    }(DebugNode__PRE_R3__);
    /**
     * @publicApi
     */


    function asNativeElements(debugEls) {
      return debugEls.map(function (el) {
        return el.nativeElement;
      });
    }

    function _queryElementChildren(element, predicate, matches) {
      element.childNodes.forEach(function (node) {
        if (node instanceof DebugElement__PRE_R3__) {
          if (predicate(node)) {
            matches.push(node);
          }

          _queryElementChildren(node, predicate, matches);
        }
      });
    }

    function _queryNodeChildren(parentNode, predicate, matches) {
      if (parentNode instanceof DebugElement__PRE_R3__) {
        parentNode.childNodes.forEach(function (node) {
          if (predicate(node)) {
            matches.push(node);
          }

          if (node instanceof DebugElement__PRE_R3__) {
            _queryNodeChildren(node, predicate, matches);
          }
        });
      }
    }

    var DebugNode__POST_R3__ = /*#__PURE__*/function () {
      function DebugNode__POST_R3__(nativeNode) {
        _classCallCheck(this, DebugNode__POST_R3__);

        this.nativeNode = nativeNode;
      }

      _createClass2(DebugNode__POST_R3__, [{
        key: "parent",
        get: function get() {
          var parent = this.nativeNode.parentNode;
          return parent ? new DebugElement__POST_R3__(parent) : null;
        }
      }, {
        key: "injector",
        get: function get() {
          return getInjector(this.nativeNode);
        }
      }, {
        key: "componentInstance",
        get: function get() {
          var nativeElement = this.nativeNode;
          return nativeElement && (getComponent(nativeElement) || getOwningComponent(nativeElement));
        }
      }, {
        key: "context",
        get: function get() {
          return getComponent(this.nativeNode) || getContext(this.nativeNode);
        }
      }, {
        key: "listeners",
        get: function get() {
          return getListeners(this.nativeNode).filter(function (listener) {
            return listener.type === 'dom';
          });
        }
      }, {
        key: "references",
        get: function get() {
          return getLocalRefs(this.nativeNode);
        }
      }, {
        key: "providerTokens",
        get: function get() {
          return getInjectionTokens(this.nativeNode);
        }
      }]);

      return DebugNode__POST_R3__;
    }();

    var DebugElement__POST_R3__ = /*#__PURE__*/function (_DebugNode__POST_R3__) {
      _inherits(DebugElement__POST_R3__, _DebugNode__POST_R3__);

      var _super27 = _createSuper(DebugElement__POST_R3__);

      function DebugElement__POST_R3__(nativeNode) {
        _classCallCheck(this, DebugElement__POST_R3__);

        ngDevMode && assertDomNode(nativeNode);
        return _super27.call(this, nativeNode);
      }

      _createClass2(DebugElement__POST_R3__, [{
        key: "query",
        value: function query(predicate) {
          var results = this.queryAll(predicate);
          return results[0] || null;
        }
      }, {
        key: "queryAll",
        value: function queryAll(predicate) {
          var matches = [];

          _queryAllR3(this, predicate, matches, true);

          return matches;
        }
      }, {
        key: "queryAllNodes",
        value: function queryAllNodes(predicate) {
          var matches = [];

          _queryAllR3(this, predicate, matches, false);

          return matches;
        }
      }, {
        key: "triggerEventHandler",
        value: function triggerEventHandler(eventName, eventObj) {
          var node = this.nativeNode;
          var invokedListeners = [];
          this.listeners.forEach(function (listener) {
            if (listener.name === eventName) {
              var callback = listener.callback;
              callback.call(node, eventObj);
              invokedListeners.push(callback);
            }
          }); // We need to check whether `eventListeners` exists, because it's something
          // that Zone.js only adds to `EventTarget` in browser environments.

          if (typeof node.eventListeners === 'function') {
            // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some
            // cases. We use '__ngUnwrap__' as a special token that gives us access to the actual event
            // listener.
            node.eventListeners(eventName).forEach(function (listener) {
              // In order to ensure that we can detect the special __ngUnwrap__ token described above, we
              // use `toString` on the listener and see if it contains the token. We use this approach to
              // ensure that it still worked with compiled code since it cannot remove or rename string
              // literals. We also considered using a special function name (i.e. if(listener.name ===
              // special)) but that was more cumbersome and we were also concerned the compiled code could
              // strip the name, turning the condition in to ("" === "") and always returning true.
              if (listener.toString().indexOf('__ngUnwrap__') !== -1) {
                var unwrappedListener = listener('__ngUnwrap__');
                return invokedListeners.indexOf(unwrappedListener) === -1 && unwrappedListener.call(node, eventObj);
              }
            });
          }
        }
      }, {
        key: "nativeElement",
        get: function get() {
          return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;
        }
      }, {
        key: "name",
        get: function get() {
          try {
            var context = loadLContext(this.nativeNode);
            var lView = context.lView;
            var tData = lView[TVIEW].data;
            var tNode = tData[context.nodeIndex];
            return tNode.tagName;
          } catch (e) {
            return this.nativeNode.nodeName;
          }
        }
        /**
         *  Gets a map of property names to property values for an element.
         *
         *  This map includes:
         *  - Regular property bindings (e.g. `[id]="id"`)
         *  - Host property bindings (e.g. `host: { '[id]': "id" }`)
         *  - Interpolated property bindings (e.g. `id="{{ value }}")
         *
         *  It does not include:
         *  - input property bindings (e.g. `[myCustomInput]="value"`)
         *  - attribute bindings (e.g. `[attr.role]="menu"`)
         */

      }, {
        key: "properties",
        get: function get() {
          var context = loadLContext(this.nativeNode, false);

          if (context == null) {
            return {};
          }

          var lView = context.lView;
          var tData = lView[TVIEW].data;
          var tNode = tData[context.nodeIndex];
          var properties = {}; // Collect properties from the DOM.

          copyDomProperties(this.nativeElement, properties); // Collect properties from the bindings. This is needed for animation renderer which has
          // synthetic properties which don't get reflected into the DOM.

          collectPropertyBindings(properties, tNode, lView, tData);
          return properties;
        }
      }, {
        key: "attributes",
        get: function get() {
          var attributes = {};
          var element = this.nativeElement;

          if (!element) {
            return attributes;
          }

          var context = loadLContext(element, false);

          if (context == null) {
            return {};
          }

          var lView = context.lView;
          var tNodeAttrs = lView[TVIEW].data[context.nodeIndex].attrs;
          var lowercaseTNodeAttrs = []; // For debug nodes we take the element's attribute directly from the DOM since it allows us
          // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones
          // that are set through `Renderer2`). The problem is that the browser will lowercase all names,
          // however since we have the attributes already on the TNode, we can preserve the case by going
          // through them once, adding them to the `attributes` map and putting their lower-cased name
          // into an array. Afterwards when we're going through the native DOM attributes, we can check
          // whether we haven't run into an attribute already through the TNode.

          if (tNodeAttrs) {
            var i = 0;

            while (i < tNodeAttrs.length) {
              var attrName = tNodeAttrs[i]; // Stop as soon as we hit a marker. We only care about the regular attributes. Everything
              // else will be handled below when we read the final attributes off the DOM.

              if (typeof attrName !== 'string') break;
              var attrValue = tNodeAttrs[i + 1];
              attributes[attrName] = attrValue;
              lowercaseTNodeAttrs.push(attrName.toLowerCase());
              i += 2;
            }
          }

          var eAttrs = element.attributes;

          for (var _i12 = 0; _i12 < eAttrs.length; _i12++) {
            var attr = eAttrs[_i12];
            var lowercaseName = attr.name.toLowerCase(); // Make sure that we don't assign the same attribute both in its
            // case-sensitive form and the lower-cased one from the browser.

            if (lowercaseTNodeAttrs.indexOf(lowercaseName) === -1) {
              // Save the lowercase name to align the behavior between browsers.
              // IE preserves the case, while all other browser convert it to lower case.
              attributes[lowercaseName] = attr.value;
            }
          }

          return attributes;
        }
      }, {
        key: "styles",
        get: function get() {
          if (this.nativeElement && this.nativeElement.style) {
            return this.nativeElement.style;
          }

          return {};
        }
      }, {
        key: "classes",
        get: function get() {
          var result = {};
          var element = this.nativeElement; // SVG elements return an `SVGAnimatedString` instead of a plain string for the `className`.

          var className = element.className;
          var classes = className && typeof className !== 'string' ? className.baseVal.split(' ') : className.split(' ');
          classes.forEach(function (value) {
            return result[value] = true;
          });
          return result;
        }
      }, {
        key: "childNodes",
        get: function get() {
          var childNodes = this.nativeNode.childNodes;
          var children = [];

          for (var i = 0; i < childNodes.length; i++) {
            var element = childNodes[i];
            children.push(getDebugNode__POST_R3__(element));
          }

          return children;
        }
      }, {
        key: "children",
        get: function get() {
          var nativeElement = this.nativeElement;
          if (!nativeElement) return [];
          var childNodes = nativeElement.children;
          var children = [];

          for (var i = 0; i < childNodes.length; i++) {
            var element = childNodes[i];
            children.push(getDebugNode__POST_R3__(element));
          }

          return children;
        }
      }]);

      return DebugElement__POST_R3__;
    }(DebugNode__POST_R3__);

    function copyDomProperties(element, properties) {
      if (element) {
        // Skip own properties (as those are patched)
        var obj = Object.getPrototypeOf(element);
        var NodePrototype = Node.prototype;

        while (obj !== null && obj !== NodePrototype) {
          var descriptors = Object.getOwnPropertyDescriptors(obj);

          for (var key in descriptors) {
            if (!key.startsWith('__') && !key.startsWith('on')) {
              // don't include properties starting with `__` and `on`.
              // `__` are patched values which should not be included.
              // `on` are listeners which also should not be included.
              var value = element[key];

              if (isPrimitiveValue(value)) {
                properties[key] = value;
              }
            }
          }

          obj = Object.getPrototypeOf(obj);
        }
      }
    }

    function isPrimitiveValue(value) {
      return typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number' || value === null;
    }

    function _queryAllR3(parentElement, predicate, matches, elementsOnly) {
      var context = loadLContext(parentElement.nativeNode, false);

      if (context !== null) {
        var parentTNode = context.lView[TVIEW].data[context.nodeIndex];

        _queryNodeChildrenR3(parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);
      } else {
        // If the context is null, then `parentElement` was either created with Renderer2 or native DOM
        // APIs.
        _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);
      }
    }
    /**
     * Recursively match the current TNode against the predicate, and goes on with the next ones.
     *
     * @param tNode the current TNode
     * @param lView the LView of this TNode
     * @param predicate the predicate to match
     * @param matches the list of positive matches
     * @param elementsOnly whether only elements should be searched
     * @param rootNativeNode the root native node on which predicate should not be matched
     */


    function _queryNodeChildrenR3(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {
      var nativeNode = getNativeByTNodeOrNull(tNode, lView); // For each type of TNode, specific logic is executed.

      if (tNode.type === 3
      /* Element */
      || tNode.type === 4
      /* ElementContainer */
      ) {
          // Case 1: the TNode is an element
          // The native node has to be checked.
          _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);

          if (isComponentHost(tNode)) {
            // If the element is the host of a component, then all nodes in its view have to be processed.
            // Note: the component's content (tNode.child) will be processed from the insertion points.
            var componentView = getComponentLViewByIndex(tNode.index, lView);

            if (componentView && componentView[TVIEW].firstChild) {
              _queryNodeChildrenR3(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);
            }
          } else {
            if (tNode.child) {
              // Otherwise, its children have to be processed.
              _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
            } // We also have to query the DOM directly in order to catch elements inserted through
            // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple
            // times. ViewEngine could do it more efficiently, because all the insertions go through
            // Renderer2, however that's not the case in Ivy. This approach is being used because:
            // 1. Matching the ViewEngine behavior would mean potentially introducing a depedency
            //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.
            // 2. We would have to make `Renderer3` "know" about debug nodes.
            // 3. It allows us to capture nodes that were inserted directly via the DOM.


            nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);
          } // In all cases, if a dynamic container exists for this node, each view inside it has to be
          // processed.


          var nodeOrContainer = lView[tNode.index];

          if (isLContainer(nodeOrContainer)) {
            _queryNodeChildrenInContainerR3(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);
          }
        } else if (tNode.type === 0
      /* Container */
      ) {
          // Case 2: the TNode is a container
          // The native node has to be checked.
          var lContainer = lView[tNode.index];

          _addQueryMatchR3(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode); // Each view inside the container has to be processed.


          _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode);
        } else if (tNode.type === 1
      /* Projection */
      ) {
          // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).
          // The nodes projected at this location all need to be processed.
          var _componentView = lView[DECLARATION_COMPONENT_VIEW];
          var componentHost = _componentView[T_HOST];
          var head = componentHost.projection[tNode.projection];

          if (Array.isArray(head)) {
            var _iterator8 = _createForOfIteratorHelper(head),
                _step8;

            try {
              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                var _nativeNode2 = _step8.value;

                _addQueryMatchR3(_nativeNode2, predicate, matches, elementsOnly, rootNativeNode);
              }
            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }
          } else if (head) {
            var nextLView = _componentView[PARENT];
            var nextTNode = nextLView[TVIEW].data[head.index];

            _queryNodeChildrenR3(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);
          }
        } else if (tNode.child) {
        // Case 4: the TNode is a view.
        _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
      } // We don't want to go to the next sibling of the root node.


      if (rootNativeNode !== nativeNode) {
        // To determine the next node to be processed, we need to use the next or the projectionNext
        // link, depending on whether the current node has been projected.
        var _nextTNode = tNode.flags & 4
        /* isProjected */
        ? tNode.projectionNext : tNode.next;

        if (_nextTNode) {
          _queryNodeChildrenR3(_nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);
        }
      }
    }
    /**
     * Process all TNodes in a given container.
     *
     * @param lContainer the container to be processed
     * @param predicate the predicate to match
     * @param matches the list of positive matches
     * @param elementsOnly whether only elements should be searched
     * @param rootNativeNode the root native node on which predicate should not be matched
     */


    function _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode) {
      for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
        var childView = lContainer[i];

        _queryNodeChildrenR3(childView[TVIEW].node, childView, predicate, matches, elementsOnly, rootNativeNode);
      }
    }
    /**
     * Match the current native node against the predicate.
     *
     * @param nativeNode the current native node
     * @param predicate the predicate to match
     * @param matches the list of positive matches
     * @param elementsOnly whether only elements should be searched
     * @param rootNativeNode the root native node on which predicate should not be matched
     */


    function _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {
      if (rootNativeNode !== nativeNode) {
        var debugNode = getDebugNode$1(nativeNode);

        if (!debugNode) {
          return;
        } // Type of the "predicate and "matches" array are set based on the value of
        // the "elementsOnly" parameter. TypeScript is not able to properly infer these
        // types with generics, so we manually cast the parameters accordingly.


        if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
          matches.push(debugNode);
        } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
          matches.push(debugNode);
        }
      }
    }
    /**
     * Match all the descendants of a DOM node against a predicate.
     *
     * @param nativeNode the current native node
     * @param predicate the predicate to match
     * @param matches the list of positive matches
     * @param elementsOnly whether only elements should be searched
     */


    function _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {
      var nodes = parentNode.childNodes;
      var length = nodes.length;

      for (var i = 0; i < length; i++) {
        var node = nodes[i];
        var debugNode = getDebugNode$1(node);

        if (debugNode) {
          if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
            matches.push(debugNode);
          } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {
            matches.push(debugNode);
          }

          _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);
        }
      }
    }
    /**
     * Iterates through the property bindings for a given node and generates
     * a map of property names to values. This map only contains property bindings
     * defined in templates, not in host bindings.
     */


    function collectPropertyBindings(properties, tNode, lView, tData) {
      var bindingIndexes = tNode.propertyBindings;

      if (bindingIndexes !== null) {
        for (var i = 0; i < bindingIndexes.length; i++) {
          var bindingIndex = bindingIndexes[i];
          var propMetadata = tData[bindingIndex];
          var metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);
          var propertyName = metadataParts[0];

          if (metadataParts.length > 1) {
            var value = metadataParts[1];

            for (var j = 1; j < metadataParts.length - 1; j++) {
              value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];
            }

            properties[propertyName] = value;
          } else {
            properties[propertyName] = lView[bindingIndex];
          }
        }
      }
    } // Need to keep the nodes in a global Map so that multiple angular apps are supported.


    var _nativeNodeToDebugNode = /*@__PURE__*/new Map();

    function getDebugNode__PRE_R3__(nativeNode) {
      return _nativeNodeToDebugNode.get(nativeNode) || null;
    }

    var NG_DEBUG_PROPERTY = '__ng_debug__';

    function getDebugNode__POST_R3__(nativeNode) {
      if (nativeNode instanceof Node) {
        if (!nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY)) {
          nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ? new DebugElement__POST_R3__(nativeNode) : new DebugNode__POST_R3__(nativeNode);
        }

        return nativeNode[NG_DEBUG_PROPERTY];
      }

      return null;
    }
    /**
     * @publicApi
     */


    var getDebugNode$1 = getDebugNode__POST_R3__;

    function getDebugNodeR2__PRE_R3__(nativeNode) {
      return getDebugNode__PRE_R3__(nativeNode);
    }

    function getDebugNodeR2__POST_R3__(_nativeNode) {
      return null;
    }

    var getDebugNodeR2 = getDebugNodeR2__POST_R3__;

    function getAllDebugNodes() {
      return Array.from(_nativeNodeToDebugNode.values());
    }

    function indexDebugNode(node) {
      _nativeNodeToDebugNode.set(node.nativeNode, node);
    }

    function removeDebugNodeFromIndex(node) {
      _nativeNodeToDebugNode["delete"](node.nativeNode);
    }
    /**
     * @publicApi
     */


    var DebugNode = DebugNode__POST_R3__;
    /**
     * @publicApi
     */

    var DebugElement = DebugElement__POST_R3__;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    var _CORE_PLATFORM_PROVIDERS = [// Set a default platform name for platforms that don't set it explicitly.
    {
      provide: PLATFORM_ID,
      useValue: 'unknown'
    }, {
      provide: PlatformRef,
      deps: [Injector]
    }, {
      provide: TestabilityRegistry,
      deps: []
    }, {
      provide: Console,
      deps: []
    }];
    /**
     * This platform has to be included in any other platform
     *
     * @publicApi
     */

    var platformCore = /*@__PURE__*/createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    function _iterableDiffersFactory() {
      return defaultIterableDiffers;
    }

    function _keyValueDiffersFactory() {
      return defaultKeyValueDiffers;
    }

    function _localeFactory(locale) {
      locale = locale || getGlobalLocale();

      if (ivyEnabled) {
        setLocaleId(locale);
      }

      return locale;
    }
    /**
     * Work out the locale from the potential global properties.
     *
     * * Closure Compiler: use `goog.LOCALE`.
     * * Ivy enabled: use `$localize.locale`
     */


    function getGlobalLocale() {
      if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode && typeof goog !== 'undefined' && goog.LOCALE !== 'en') {
        // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.
        // * In order to preserve backwards compatibility, we use Angular default value over
        //   Closure Compiler's one.
        return goog.LOCALE;
      } else {
        // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE
        // COMPILE-TIME INLINER.
        //
        // * During compile time inlining of translations the expression will be replaced
        //   with a string literal that is the current locale. Other forms of this expression are not
        //   guaranteed to be replaced.
        //
        // * During runtime translation evaluation, the developer is required to set `$localize.locale`
        //   if required, or just to provide their own `LOCALE_ID` provider.
        return ivyEnabled && typeof $localize !== 'undefined' && $localize.locale || DEFAULT_LOCALE_ID;
      }
    }

    var ɵ0$g = USD_CURRENCY_CODE;
    /**
     * A built-in [dependency injection token](guide/glossary#di-token)
     * that is used to configure the root injector for bootstrapping.
     */

    var APPLICATION_MODULE_PROVIDERS = [{
      provide: ApplicationRef,
      useClass: ApplicationRef,
      deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]
    }, {
      provide: SCHEDULER,
      deps: [NgZone],
      useFactory: zoneSchedulerFactory
    }, {
      provide: ApplicationInitStatus,
      useClass: ApplicationInitStatus,
      deps: [[/*@__PURE__*/new Optional(), APP_INITIALIZER]]
    }, {
      provide: Compiler,
      useClass: Compiler,
      deps: []
    }, APP_ID_RANDOM_PROVIDER, {
      provide: IterableDiffers,
      useFactory: _iterableDiffersFactory,
      deps: []
    }, {
      provide: KeyValueDiffers,
      useFactory: _keyValueDiffersFactory,
      deps: []
    }, {
      provide: LOCALE_ID$1,
      useFactory: _localeFactory,
      deps: [[/*@__PURE__*/new Inject(LOCALE_ID$1), /*@__PURE__*/new Optional(), /*@__PURE__*/new SkipSelf()]]
    }, {
      provide: DEFAULT_CURRENCY_CODE,
      useValue: ɵ0$g
    }];
    /**
     * Schedule work at next available slot.
     *
     * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped
     * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.
     * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.
     *
     * @param ngZone NgZone to use for scheduling.
     */

    function zoneSchedulerFactory(ngZone) {
      var queue = [];
      ngZone.onStable.subscribe(function () {
        while (queue.length) {
          queue.pop()();
        }
      });
      return function (fn) {
        queue.push(fn);
      };
    }

    var ApplicationModule = /*@__PURE__*/function () {
      var ApplicationModule = // Inject ApplicationRef to make it eager...
      function ApplicationModule(appRef) {
        _classCallCheck(this, ApplicationModule);
      };

      ApplicationModule.ɵmod = /*@__PURE__*/ɵɵdefineNgModule({
        type: ApplicationModule
      });
      ApplicationModule.ɵinj = /*@__PURE__*/ɵɵdefineInjector({
        factory: function ApplicationModule_Factory(t) {
          return new (t || ApplicationModule)(ɵɵinject(ApplicationRef));
        },
        providers: APPLICATION_MODULE_PROVIDERS
      });
      return ApplicationModule;
    }();
    /*@__PURE__*/

    /*@__PURE__*/


    (function () {
      setClassMetadata(ApplicationModule, [{
        type: NgModule,
        args: [{
          providers: APPLICATION_MODULE_PROVIDERS
        }]
      }], function () {
        return [{
          type: ApplicationRef
        }];
      }, null);
    })();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
      flags |= 1
      /* TypeElement */
      ;

      var _splitMatchedQueriesD2 = splitMatchedQueriesDsl(matchedQueriesDsl),
          matchedQueries = _splitMatchedQueriesD2.matchedQueries,
          references = _splitMatchedQueriesD2.references,
          matchedQueryIds = _splitMatchedQueriesD2.matchedQueryIds;

      var template = templateFactory ? resolveDefinition(templateFactory) : null;
      return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        flags: flags,
        checkIndex: -1,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: matchedQueries,
        matchedQueryIds: matchedQueryIds,
        references: references,
        ngContentIndex: ngContentIndex,
        childCount: childCount,
        bindings: [],
        bindingFlags: 0,
        outputs: [],
        element: {
          ns: null,
          name: null,
          attrs: null,
          template: template,
          componentProvider: null,
          componentView: null,
          componentRendererType: null,
          publicProviders: null,
          allProviders: null,
          handleEvent: handleEvent || NOOP
        },
        provider: null,
        text: null,
        query: null,
        ngContent: null
      };
    }

    function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName) {
      var fixedAttrs = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];
      var bindings = arguments.length > 7 ? arguments[7] : undefined;
      var outputs = arguments.length > 8 ? arguments[8] : undefined;
      var handleEvent = arguments.length > 9 ? arguments[9] : undefined;
      var componentView = arguments.length > 10 ? arguments[10] : undefined;
      var componentRendererType = arguments.length > 11 ? arguments[11] : undefined;

      if (!handleEvent) {
        handleEvent = NOOP;
      }

      var _splitMatchedQueriesD3 = splitMatchedQueriesDsl(matchedQueriesDsl),
          matchedQueries = _splitMatchedQueriesD3.matchedQueries,
          references = _splitMatchedQueriesD3.references,
          matchedQueryIds = _splitMatchedQueriesD3.matchedQueryIds;

      var ns = null;
      var name = null;

      if (namespaceAndName) {
        var _splitNamespace = splitNamespace(namespaceAndName);

        var _splitNamespace2 = _slicedToArray(_splitNamespace, 2);

        ns = _splitNamespace2[0];
        name = _splitNamespace2[1];
      }

      bindings = bindings || [];
      var bindingDefs = [];

      for (var i = 0; i < bindings.length; i++) {
        var _bindings$i = _slicedToArray(bindings[i], 3),
            bindingFlags = _bindings$i[0],
            _namespaceAndName = _bindings$i[1],
            suffixOrSecurityContext = _bindings$i[2];

        var _splitNamespace3 = splitNamespace(_namespaceAndName),
            _splitNamespace4 = _slicedToArray(_splitNamespace3, 2),
            _ns = _splitNamespace4[0],
            _name = _splitNamespace4[1];

        var securityContext = undefined;
        var suffix = undefined;

        switch (bindingFlags & 15
        /* Types */
        ) {
          case 4
          /* TypeElementStyle */
          :
            suffix = suffixOrSecurityContext;
            break;

          case 1
          /* TypeElementAttribute */
          :
          case 8
          /* TypeProperty */
          :
            securityContext = suffixOrSecurityContext;
            break;
        }

        bindingDefs[i] = {
          flags: bindingFlags,
          ns: _ns,
          name: _name,
          nonMinifiedName: _name,
          securityContext: securityContext,
          suffix: suffix
        };
      }

      outputs = outputs || [];
      var outputDefs = [];

      for (var _i13 = 0; _i13 < outputs.length; _i13++) {
        var _outputs$_i = _slicedToArray(outputs[_i13], 2),
            target = _outputs$_i[0],
            eventName = _outputs$_i[1];

        outputDefs[_i13] = {
          type: 0
          /* ElementOutput */
          ,
          target: target,
          eventName: eventName,
          propName: null
        };
      }

      fixedAttrs = fixedAttrs || [];
      var attrs = fixedAttrs.map(function (_ref7) {
        var _ref8 = _slicedToArray(_ref7, 2),
            namespaceAndName = _ref8[0],
            value = _ref8[1];

        var _splitNamespace5 = splitNamespace(namespaceAndName),
            _splitNamespace6 = _slicedToArray(_splitNamespace5, 2),
            ns = _splitNamespace6[0],
            name = _splitNamespace6[1];

        return [ns, name, value];
      });
      componentRendererType = resolveRendererType2(componentRendererType);

      if (componentView) {
        flags |= 33554432
        /* ComponentView */
        ;
      }

      flags |= 1
      /* TypeElement */
      ;
      return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        checkIndex: checkIndex,
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: matchedQueries,
        matchedQueryIds: matchedQueryIds,
        references: references,
        ngContentIndex: ngContentIndex,
        childCount: childCount,
        bindings: bindingDefs,
        bindingFlags: calcBindingFlags(bindingDefs),
        outputs: outputDefs,
        element: {
          ns: ns,
          name: name,
          attrs: attrs,
          template: null,
          // will bet set by the view definition
          componentProvider: null,
          componentView: componentView || null,
          componentRendererType: componentRendererType,
          publicProviders: null,
          allProviders: null,
          handleEvent: handleEvent || NOOP
        },
        provider: null,
        text: null,
        query: null,
        ngContent: null
      };
    }

    function createElement(view, renderHost, def) {
      var elDef = def.element;
      var rootSelectorOrNode = view.root.selectorOrNode;
      var renderer = view.renderer;
      var el;

      if (view.parent || !rootSelectorOrNode) {
        if (elDef.name) {
          el = renderer.createElement(elDef.name, elDef.ns);
        } else {
          el = renderer.createComment('');
        }

        var parentEl = getParentRenderElement(view, renderHost, def);

        if (parentEl) {
          renderer.appendChild(parentEl, el);
        }
      } else {
        // when using native Shadow DOM, do not clear the root element contents to allow slot projection
        var preserveContent = !!elDef.componentRendererType && elDef.componentRendererType.encapsulation === ViewEncapsulation$1.ShadowDom;
        el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);
      }

      if (elDef.attrs) {
        for (var i = 0; i < elDef.attrs.length; i++) {
          var _elDef$attrs$i = _slicedToArray(elDef.attrs[i], 3),
              ns = _elDef$attrs$i[0],
              name = _elDef$attrs$i[1],
              value = _elDef$attrs$i[2];

          renderer.setAttribute(el, name, value, ns);
        }
      }

      return el;
    }

    function listenToElementOutputs(view, compView, def, el) {
      for (var i = 0; i < def.outputs.length; i++) {
        var output = def.outputs[i];
        var handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));
        var listenTarget = output.target;
        var listenerView = view;

        if (output.target === 'component') {
          listenTarget = null;
          listenerView = compView;
        }

        var disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);
        view.disposables[def.outputIndex + i] = disposable;
      }
    }

    function renderEventHandlerClosure(view, index, eventName) {
      return function (event) {
        return dispatchEvent(view, index, eventName, event);
      };
    }

    function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      var bindLen = def.bindings.length;
      var changed = false;
      if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0)) changed = true;
      if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1)) changed = true;
      if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2)) changed = true;
      if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3)) changed = true;
      if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4)) changed = true;
      if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5)) changed = true;
      if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6)) changed = true;
      if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7)) changed = true;
      if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8)) changed = true;
      if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9)) changed = true;
      return changed;
    }

    function checkAndUpdateElementDynamic(view, def, values) {
      var changed = false;

      for (var i = 0; i < values.length; i++) {
        if (checkAndUpdateElementValue(view, def, i, values[i])) changed = true;
      }

      return changed;
    }

    function checkAndUpdateElementValue(view, def, bindingIdx, value) {
      if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
        return false;
      }

      var binding = def.bindings[bindingIdx];
      var elData = asElementData(view, def.nodeIndex);
      var renderNode = elData.renderElement;
      var name = binding.name;

      switch (binding.flags & 15
      /* Types */
      ) {
        case 1
        /* TypeElementAttribute */
        :
          setElementAttribute(view, binding, renderNode, binding.ns, name, value);
          break;

        case 2
        /* TypeElementClass */
        :
          setElementClass(view, renderNode, name, value);
          break;

        case 4
        /* TypeElementStyle */
        :
          setElementStyle(view, binding, renderNode, name, value);
          break;

        case 8
        /* TypeProperty */
        :
          var bindView = def.flags & 33554432
          /* ComponentView */
          && binding.flags & 32
          /* SyntheticHostProperty */
          ? elData.componentView : view;
          setElementProperty(bindView, binding, renderNode, name, value);
          break;
      }

      return true;
    }

    function setElementAttribute(view, binding, renderNode, ns, name, value) {
      var securityContext = binding.securityContext;
      var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
      renderValue = renderValue != null ? renderValue.toString() : null;
      var renderer = view.renderer;

      if (value != null) {
        renderer.setAttribute(renderNode, name, renderValue, ns);
      } else {
        renderer.removeAttribute(renderNode, name, ns);
      }
    }

    function setElementClass(view, renderNode, name, value) {
      var renderer = view.renderer;

      if (value) {
        renderer.addClass(renderNode, name);
      } else {
        renderer.removeClass(renderNode, name);
      }
    }

    function setElementStyle(view, binding, renderNode, name, value) {
      var renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, value);

      if (renderValue != null) {
        renderValue = renderValue.toString();
        var unit = binding.suffix;

        if (unit != null) {
          renderValue = renderValue + unit;
        }
      } else {
        renderValue = null;
      }

      var renderer = view.renderer;

      if (renderValue != null) {
        renderer.setStyle(renderNode, name, renderValue);
      } else {
        renderer.removeStyle(renderNode, name);
      }
    }

    function setElementProperty(view, binding, renderNode, name, value) {
      var securityContext = binding.securityContext;
      var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
      view.renderer.setProperty(renderNode, name, renderValue);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function queryDef(flags, id, bindings) {
      var bindingDefs = [];

      for (var propName in bindings) {
        var bindingType = bindings[propName];
        bindingDefs.push({
          propName: propName,
          bindingType: bindingType
        });
      }

      return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        // TODO(vicb): check
        checkIndex: -1,
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        ngContentIndex: -1,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {},
        childCount: 0,
        bindings: [],
        bindingFlags: 0,
        outputs: [],
        element: null,
        provider: null,
        text: null,
        query: {
          id: id,
          filterId: filterQueryId(id),
          bindings: bindingDefs
        },
        ngContent: null
      };
    }

    function createQuery() {
      return new QueryList();
    }

    function dirtyParentQueries(view) {
      var queryIds = view.def.nodeMatchedQueries;

      while (view.parent && isEmbeddedView(view)) {
        var tplDef = view.parentNodeDef;
        view = view.parent; // content queries

        var end = tplDef.nodeIndex + tplDef.childCount;

        for (var i = 0; i <= end; i++) {
          var nodeDef = view.def.nodes[i];

          if (nodeDef.flags & 67108864
          /* TypeContentQuery */
          && nodeDef.flags & 536870912
          /* DynamicQuery */
          && (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {
            asQueryList(view, i).setDirty();
          }

          if (nodeDef.flags & 1
          /* TypeElement */
          && i + nodeDef.childCount < tplDef.nodeIndex || !(nodeDef.childFlags & 67108864
          /* TypeContentQuery */
          ) || !(nodeDef.childFlags & 536870912
          /* DynamicQuery */
          )) {
            // skip elements that don't contain the template element or no query.
            i += nodeDef.childCount;
          }
        }
      } // view queries


      if (view.def.nodeFlags & 134217728
      /* TypeViewQuery */
      ) {
          for (var _i14 = 0; _i14 < view.def.nodes.length; _i14++) {
            var _nodeDef = view.def.nodes[_i14];

            if (_nodeDef.flags & 134217728
            /* TypeViewQuery */
            && _nodeDef.flags & 536870912
            /* DynamicQuery */
            ) {
              asQueryList(view, _i14).setDirty();
            } // only visit the root nodes


            _i14 += _nodeDef.childCount;
          }
        }
    }

    function checkAndUpdateQuery(view, nodeDef) {
      var queryList = asQueryList(view, nodeDef.nodeIndex);

      if (!queryList.dirty) {
        return;
      }

      var directiveInstance;
      var newValues = undefined;

      if (nodeDef.flags & 67108864
      /* TypeContentQuery */
      ) {
          var _elementDef = nodeDef.parent.parent;
          newValues = calcQueryValues(view, _elementDef.nodeIndex, _elementDef.nodeIndex + _elementDef.childCount, nodeDef.query, []);
          directiveInstance = asProviderData(view, nodeDef.parent.nodeIndex).instance;
        } else if (nodeDef.flags & 134217728
      /* TypeViewQuery */
      ) {
          newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);
          directiveInstance = view.component;
        }

      queryList.reset(newValues);
      var bindings = nodeDef.query.bindings;
      var notify = false;

      for (var i = 0; i < bindings.length; i++) {
        var binding = bindings[i];
        var boundValue = void 0;

        switch (binding.bindingType) {
          case 0
          /* First */
          :
            boundValue = queryList.first;
            break;

          case 1
          /* All */
          :
            boundValue = queryList;
            notify = true;
            break;
        }

        directiveInstance[binding.propName] = boundValue;
      }

      if (notify) {
        queryList.notifyOnChanges();
      }
    }

    function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
      for (var i = startIndex; i <= endIndex; i++) {
        var nodeDef = view.def.nodes[i];
        var valueType = nodeDef.matchedQueries[queryDef.id];

        if (valueType != null) {
          values.push(getQueryValue(view, nodeDef, valueType));
        }

        if (nodeDef.flags & 1
        /* TypeElement */
        && nodeDef.element.template && (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) === queryDef.filterId) {
          var elementData = asElementData(view, i); // check embedded views that were attached at the place of their template,
          // but process child nodes first if some match the query (see issue #16568)

          if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {
            calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);
            i += nodeDef.childCount;
          }

          if (nodeDef.flags & 16777216
          /* EmbeddedViews */
          ) {
              var embeddedViews = elementData.viewContainer._embeddedViews;

              for (var k = 0; k < embeddedViews.length; k++) {
                var embeddedView = embeddedViews[k];
                var dvc = declaredViewContainer(embeddedView);

                if (dvc && dvc === elementData) {
                  calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
                }
              }
            }

          var projectedViews = elementData.template._projectedViews;

          if (projectedViews) {
            for (var _k = 0; _k < projectedViews.length; _k++) {
              var projectedView = projectedViews[_k];
              calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
            }
          }
        }

        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
          // if no child matches the query, skip the children.
          i += nodeDef.childCount;
        }
      }

      return values;
    }

    function getQueryValue(view, nodeDef, queryValueType) {
      if (queryValueType != null) {
        // a match
        switch (queryValueType) {
          case 1
          /* RenderElement */
          :
            return asElementData(view, nodeDef.nodeIndex).renderElement;

          case 0
          /* ElementRef */
          :
            return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);

          case 2
          /* TemplateRef */
          :
            return asElementData(view, nodeDef.nodeIndex).template;

          case 3
          /* ViewContainerRef */
          :
            return asElementData(view, nodeDef.nodeIndex).viewContainer;

          case 4
          /* Provider */
          :
            return asProviderData(view, nodeDef.nodeIndex).instance;
        }
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function ngContentDef(ngContentIndex, index) {
      return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        checkIndex: -1,
        flags: 8
        /* TypeNgContent */
        ,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {},
        ngContentIndex: ngContentIndex,
        childCount: 0,
        bindings: [],
        bindingFlags: 0,
        outputs: [],
        element: null,
        provider: null,
        text: null,
        query: null,
        ngContent: {
          index: index
        }
      };
    }

    function appendNgContent(view, renderHost, def) {
      var parentEl = getParentRenderElement(view, renderHost, def);

      if (!parentEl) {
        // Nothing to do if there is no parent element.
        return;
      }

      var ngContentIndex = def.ngContent.index;
      visitProjectedRenderNodes(view, ngContentIndex, 1
      /* AppendChild */
      , parentEl, null, undefined);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function purePipeDef(checkIndex, argCount) {
      // argCount + 1 to include the pipe as first arg
      return _pureExpressionDef(128
      /* TypePurePipe */
      , checkIndex, newArray(argCount + 1));
    }

    function pureArrayDef(checkIndex, argCount) {
      return _pureExpressionDef(32
      /* TypePureArray */
      , checkIndex, newArray(argCount));
    }

    function pureObjectDef(checkIndex, propToIndex) {
      var keys = Object.keys(propToIndex);
      var nbKeys = keys.length;
      var propertyNames = [];

      for (var i = 0; i < nbKeys; i++) {
        var key = keys[i];
        var index = propToIndex[key];
        propertyNames.push(key);
      }

      return _pureExpressionDef(64
      /* TypePureObject */
      , checkIndex, propertyNames);
    }

    function _pureExpressionDef(flags, checkIndex, propertyNames) {
      var bindings = [];

      for (var i = 0; i < propertyNames.length; i++) {
        var prop = propertyNames[i];
        bindings.push({
          flags: 8
          /* TypeProperty */
          ,
          name: prop,
          ns: null,
          nonMinifiedName: prop,
          securityContext: null,
          suffix: null
        });
      }

      return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        checkIndex: checkIndex,
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {},
        ngContentIndex: -1,
        childCount: 0,
        bindings: bindings,
        bindingFlags: calcBindingFlags(bindings),
        outputs: [],
        element: null,
        provider: null,
        text: null,
        query: null,
        ngContent: null
      };
    }

    function createPureExpression(view, def) {
      return {
        value: undefined
      };
    }

    function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      var bindings = def.bindings;
      var changed = false;
      var bindLen = bindings.length;
      if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;
      if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;
      if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;
      if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;
      if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;
      if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;
      if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;
      if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;
      if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;
      if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;

      if (changed) {
        var data = asPureExpressionData(view, def.nodeIndex);
        var value;

        switch (def.flags & 201347067
        /* Types */
        ) {
          case 32
          /* TypePureArray */
          :
            value = [];
            if (bindLen > 0) value.push(v0);
            if (bindLen > 1) value.push(v1);
            if (bindLen > 2) value.push(v2);
            if (bindLen > 3) value.push(v3);
            if (bindLen > 4) value.push(v4);
            if (bindLen > 5) value.push(v5);
            if (bindLen > 6) value.push(v6);
            if (bindLen > 7) value.push(v7);
            if (bindLen > 8) value.push(v8);
            if (bindLen > 9) value.push(v9);
            break;

          case 64
          /* TypePureObject */
          :
            value = {};
            if (bindLen > 0) value[bindings[0].name] = v0;
            if (bindLen > 1) value[bindings[1].name] = v1;
            if (bindLen > 2) value[bindings[2].name] = v2;
            if (bindLen > 3) value[bindings[3].name] = v3;
            if (bindLen > 4) value[bindings[4].name] = v4;
            if (bindLen > 5) value[bindings[5].name] = v5;
            if (bindLen > 6) value[bindings[6].name] = v6;
            if (bindLen > 7) value[bindings[7].name] = v7;
            if (bindLen > 8) value[bindings[8].name] = v8;
            if (bindLen > 9) value[bindings[9].name] = v9;
            break;

          case 128
          /* TypePurePipe */
          :
            var pipe = v0;

            switch (bindLen) {
              case 1:
                value = pipe.transform(v0);
                break;

              case 2:
                value = pipe.transform(v1);
                break;

              case 3:
                value = pipe.transform(v1, v2);
                break;

              case 4:
                value = pipe.transform(v1, v2, v3);
                break;

              case 5:
                value = pipe.transform(v1, v2, v3, v4);
                break;

              case 6:
                value = pipe.transform(v1, v2, v3, v4, v5);
                break;

              case 7:
                value = pipe.transform(v1, v2, v3, v4, v5, v6);
                break;

              case 8:
                value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);
                break;

              case 9:
                value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);
                break;

              case 10:
                value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
                break;
            }

            break;
        }

        data.value = value;
      }

      return changed;
    }

    function checkAndUpdatePureExpressionDynamic(view, def, values) {
      var bindings = def.bindings;
      var changed = false;

      for (var i = 0; i < values.length; i++) {
        // Note: We need to loop over all values, so that
        // the old values are updates as well!
        if (checkAndUpdateBinding(view, def, i, values[i])) {
          changed = true;
        }
      }

      if (changed) {
        var data = asPureExpressionData(view, def.nodeIndex);
        var value;

        switch (def.flags & 201347067
        /* Types */
        ) {
          case 32
          /* TypePureArray */
          :
            value = values;
            break;

          case 64
          /* TypePureObject */
          :
            value = {};

            for (var _i15 = 0; _i15 < values.length; _i15++) {
              value[bindings[_i15].name] = values[_i15];
            }

            break;

          case 128
          /* TypePurePipe */
          :
            var pipe = values[0];
            var params = values.slice(1);
            value = pipe.transform.apply(pipe, _toConsumableArray(params));
            break;
        }

        data.value = value;
      }

      return changed;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function textDef(checkIndex, ngContentIndex, staticText) {
      var bindings = [];

      for (var i = 1; i < staticText.length; i++) {
        bindings[i - 1] = {
          flags: 8
          /* TypeProperty */
          ,
          name: null,
          ns: null,
          nonMinifiedName: null,
          securityContext: null,
          suffix: staticText[i]
        };
      }

      return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        checkIndex: checkIndex,
        flags: 2
        /* TypeText */
        ,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {},
        ngContentIndex: ngContentIndex,
        childCount: 0,
        bindings: bindings,
        bindingFlags: 8
        /* TypeProperty */
        ,
        outputs: [],
        element: null,
        provider: null,
        text: {
          prefix: staticText[0]
        },
        query: null,
        ngContent: null
      };
    }

    function createText(view, renderHost, def) {
      var renderNode;
      var renderer = view.renderer;
      renderNode = renderer.createText(def.text.prefix);
      var parentEl = getParentRenderElement(view, renderHost, def);

      if (parentEl) {
        renderer.appendChild(parentEl, renderNode);
      }

      return {
        renderText: renderNode
      };
    }

    function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      var changed = false;
      var bindings = def.bindings;
      var bindLen = bindings.length;
      if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;
      if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;
      if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;
      if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;
      if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;
      if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;
      if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;
      if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;
      if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;
      if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;

      if (changed) {
        var value = def.text.prefix;
        if (bindLen > 0) value += _addInterpolationPart(v0, bindings[0]);
        if (bindLen > 1) value += _addInterpolationPart(v1, bindings[1]);
        if (bindLen > 2) value += _addInterpolationPart(v2, bindings[2]);
        if (bindLen > 3) value += _addInterpolationPart(v3, bindings[3]);
        if (bindLen > 4) value += _addInterpolationPart(v4, bindings[4]);
        if (bindLen > 5) value += _addInterpolationPart(v5, bindings[5]);
        if (bindLen > 6) value += _addInterpolationPart(v6, bindings[6]);
        if (bindLen > 7) value += _addInterpolationPart(v7, bindings[7]);
        if (bindLen > 8) value += _addInterpolationPart(v8, bindings[8]);
        if (bindLen > 9) value += _addInterpolationPart(v9, bindings[9]);
        var _renderNode = asTextData(view, def.nodeIndex).renderText;
        view.renderer.setValue(_renderNode, value);
      }

      return changed;
    }

    function checkAndUpdateTextDynamic(view, def, values) {
      var bindings = def.bindings;
      var changed = false;

      for (var i = 0; i < values.length; i++) {
        // Note: We need to loop over all values, so that
        // the old values are updates as well!
        if (checkAndUpdateBinding(view, def, i, values[i])) {
          changed = true;
        }
      }

      if (changed) {
        var value = '';

        for (var _i16 = 0; _i16 < values.length; _i16++) {
          value = value + _addInterpolationPart(values[_i16], bindings[_i16]);
        }

        value = def.text.prefix + value;
        var _renderNode2 = asTextData(view, def.nodeIndex).renderText;
        view.renderer.setValue(_renderNode2, value);
      }

      return changed;
    }

    function _addInterpolationPart(value, binding) {
      var valueStr = value != null ? value.toString() : '';
      return valueStr + binding.suffix;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function viewDef(flags, nodes, updateDirectives, updateRenderer) {
      // clone nodes and set auto calculated values
      var viewBindingCount = 0;
      var viewDisposableCount = 0;
      var viewNodeFlags = 0;
      var viewRootNodeFlags = 0;
      var viewMatchedQueries = 0;
      var currentParent = null;
      var currentRenderParent = null;
      var currentElementHasPublicProviders = false;
      var currentElementHasPrivateProviders = false;
      var lastRenderRootNode = null;

      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        node.nodeIndex = i;
        node.parent = currentParent;
        node.bindingIndex = viewBindingCount;
        node.outputIndex = viewDisposableCount;
        node.renderParent = currentRenderParent;
        viewNodeFlags |= node.flags;
        viewMatchedQueries |= node.matchedQueryIds;

        if (node.element) {
          var elDef = node.element;
          elDef.publicProviders = currentParent ? currentParent.element.publicProviders : Object.create(null);
          elDef.allProviders = elDef.publicProviders; // Note: We assume that all providers of an element are before any child element!

          currentElementHasPublicProviders = false;
          currentElementHasPrivateProviders = false;

          if (node.element.template) {
            viewMatchedQueries |= node.element.template.nodeMatchedQueries;
          }
        }

        validateNode(currentParent, node, nodes.length);
        viewBindingCount += node.bindings.length;
        viewDisposableCount += node.outputs.length;

        if (!currentRenderParent && node.flags & 3
        /* CatRenderNode */
        ) {
          lastRenderRootNode = node;
        }

        if (node.flags & 20224
        /* CatProvider */
        ) {
            if (!currentElementHasPublicProviders) {
              currentElementHasPublicProviders = true; // Use prototypical inheritance to not get O(n^2) complexity...

              currentParent.element.publicProviders = Object.create(currentParent.element.publicProviders);
              currentParent.element.allProviders = currentParent.element.publicProviders;
            }

            var isPrivateService = (node.flags & 8192
            /* PrivateProvider */
            ) !== 0;
            var isComponent = (node.flags & 32768
            /* Component */
            ) !== 0;

            if (!isPrivateService || isComponent) {
              currentParent.element.publicProviders[tokenKey(node.provider.token)] = node;
            } else {
              if (!currentElementHasPrivateProviders) {
                currentElementHasPrivateProviders = true; // Use prototypical inheritance to not get O(n^2) complexity...

                currentParent.element.allProviders = Object.create(currentParent.element.publicProviders);
              }

              currentParent.element.allProviders[tokenKey(node.provider.token)] = node;
            }

            if (isComponent) {
              currentParent.element.componentProvider = node;
            }
          }

        if (currentParent) {
          currentParent.childFlags |= node.flags;
          currentParent.directChildFlags |= node.flags;
          currentParent.childMatchedQueries |= node.matchedQueryIds;

          if (node.element && node.element.template) {
            currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
          }
        } else {
          viewRootNodeFlags |= node.flags;
        }

        if (node.childCount > 0) {
          currentParent = node;

          if (!isNgContainer(node)) {
            currentRenderParent = node;
          }
        } else {
          // When the current node has no children, check if it is the last children of its parent.
          // When it is, propagate the flags up.
          // The loop is required because an element could be the last transitive children of several
          // elements. We loop to either the root or the highest opened element (= with remaining
          // children)
          while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {
            var newParent = currentParent.parent;

            if (newParent) {
              newParent.childFlags |= currentParent.childFlags;
              newParent.childMatchedQueries |= currentParent.childMatchedQueries;
            }

            currentParent = newParent; // We also need to update the render parent & account for ng-container

            if (currentParent && isNgContainer(currentParent)) {
              currentRenderParent = currentParent.renderParent;
            } else {
              currentRenderParent = currentParent;
            }
          }
        }
      }

      var handleEvent = function handleEvent(view, nodeIndex, eventName, event) {
        return nodes[nodeIndex].element.handleEvent(view, eventName, event);
      };

      return {
        // Will be filled later...
        factory: null,
        nodeFlags: viewNodeFlags,
        rootNodeFlags: viewRootNodeFlags,
        nodeMatchedQueries: viewMatchedQueries,
        flags: flags,
        nodes: nodes,
        updateDirectives: updateDirectives || NOOP,
        updateRenderer: updateRenderer || NOOP,
        handleEvent: handleEvent,
        bindingCount: viewBindingCount,
        outputCount: viewDisposableCount,
        lastRenderRootNode: lastRenderRootNode
      };
    }

    function isNgContainer(node) {
      return (node.flags & 1
      /* TypeElement */
      ) !== 0 && node.element.name === null;
    }

    function validateNode(parent, node, nodeCount) {
      var template = node.element && node.element.template;

      if (template) {
        if (!template.lastRenderRootNode) {
          throw new Error("Illegal State: Embedded templates without nodes are not allowed!");
        }

        if (template.lastRenderRootNode && template.lastRenderRootNode.flags & 16777216
        /* EmbeddedViews */
        ) {
            throw new Error("Illegal State: Last root node of a template can't have embedded views, at index ".concat(node.nodeIndex, "!"));
          }
      }

      if (node.flags & 20224
      /* CatProvider */
      ) {
          var parentFlags = parent ? parent.flags : 0;

          if ((parentFlags & 1
          /* TypeElement */
          ) === 0) {
            throw new Error("Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index ".concat(node.nodeIndex, "!"));
          }
        }

      if (node.query) {
        if (node.flags & 67108864
        /* TypeContentQuery */
        && (!parent || (parent.flags & 16384
        /* TypeDirective */
        ) === 0)) {
          throw new Error("Illegal State: Content Query nodes need to be children of directives, at index ".concat(node.nodeIndex, "!"));
        }

        if (node.flags & 134217728
        /* TypeViewQuery */
        && parent) {
          throw new Error("Illegal State: View Query nodes have to be top level nodes, at index ".concat(node.nodeIndex, "!"));
        }
      }

      if (node.childCount) {
        var parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;

        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {
          throw new Error("Illegal State: childCount of node leads outside of parent, at index ".concat(node.nodeIndex, "!"));
        }
      }
    }

    function createEmbeddedView(parent, anchorDef, viewDef, context) {
      // embedded views are seen as siblings to the anchor, so we need
      // to get the parent of the anchor and use it as parentIndex.
      var view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);
      initView(view, parent.component, context);
      createViewNodes(view);
      return view;
    }

    function createRootView(root, def, context) {
      var view = createView(root, root.renderer, null, null, def);
      initView(view, context, context);
      createViewNodes(view);
      return view;
    }

    function createComponentView(parentView, nodeDef, viewDef, hostElement) {
      var rendererType = nodeDef.element.componentRendererType;
      var compRenderer;

      if (!rendererType) {
        compRenderer = parentView.root.renderer;
      } else {
        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);
      }

      return createView(parentView.root, compRenderer, parentView, nodeDef.element.componentProvider, viewDef);
    }

    function createView(root, renderer, parent, parentNodeDef, def) {
      var nodes = new Array(def.nodes.length);
      var disposables = def.outputCount ? new Array(def.outputCount) : null;
      var view = {
        def: def,
        parent: parent,
        viewContainerParent: null,
        parentNodeDef: parentNodeDef,
        context: null,
        component: null,
        nodes: nodes,
        state: 13
        /* CatInit */
        ,
        root: root,
        renderer: renderer,
        oldValues: new Array(def.bindingCount),
        disposables: disposables,
        initIndex: -1
      };
      return view;
    }

    function initView(view, component, context) {
      view.component = component;
      view.context = context;
    }

    function createViewNodes(view) {
      var renderHost;

      if (isComponentView(view)) {
        var hostDef = view.parentNodeDef;
        renderHost = asElementData(view.parent, hostDef.parent.nodeIndex).renderElement;
      }

      var def = view.def;
      var nodes = view.nodes;

      for (var i = 0; i < def.nodes.length; i++) {
        var nodeDef = def.nodes[i];
        Services.setCurrentNode(view, i);
        var nodeData = void 0;

        switch (nodeDef.flags & 201347067
        /* Types */
        ) {
          case 1
          /* TypeElement */
          :
            var el = createElement(view, renderHost, nodeDef);
            var componentView = undefined;

            if (nodeDef.flags & 33554432
            /* ComponentView */
            ) {
                var compViewDef = resolveDefinition(nodeDef.element.componentView);
                componentView = Services.createComponentView(view, nodeDef, compViewDef, el);
              }

            listenToElementOutputs(view, componentView, nodeDef, el);
            nodeData = {
              renderElement: el,
              componentView: componentView,
              viewContainer: null,
              template: nodeDef.element.template ? createTemplateData(view, nodeDef) : undefined
            };

            if (nodeDef.flags & 16777216
            /* EmbeddedViews */
            ) {
                nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);
              }

            break;

          case 2
          /* TypeText */
          :
            nodeData = createText(view, renderHost, nodeDef);
            break;

          case 512
          /* TypeClassProvider */
          :
          case 1024
          /* TypeFactoryProvider */
          :
          case 2048
          /* TypeUseExistingProvider */
          :
          case 256
          /* TypeValueProvider */
          :
            {
              nodeData = nodes[i];

              if (!nodeData && !(nodeDef.flags & 4096
              /* LazyProvider */
              )) {
                var instance = createProviderInstance(view, nodeDef);
                nodeData = {
                  instance: instance
                };
              }

              break;
            }

          case 16
          /* TypePipe */
          :
            {
              var _instance = createPipeInstance(view, nodeDef);

              nodeData = {
                instance: _instance
              };
              break;
            }

          case 16384
          /* TypeDirective */
          :
            {
              nodeData = nodes[i];

              if (!nodeData) {
                var _instance2 = createDirectiveInstance(view, nodeDef);

                nodeData = {
                  instance: _instance2
                };
              }

              if (nodeDef.flags & 32768
              /* Component */
              ) {
                  var compView = asElementData(view, nodeDef.parent.nodeIndex).componentView;
                  initView(compView, nodeData.instance, nodeData.instance);
                }

              break;
            }

          case 32
          /* TypePureArray */
          :
          case 64
          /* TypePureObject */
          :
          case 128
          /* TypePurePipe */
          :
            nodeData = createPureExpression(view, nodeDef);
            break;

          case 67108864
          /* TypeContentQuery */
          :
          case 134217728
          /* TypeViewQuery */
          :
            nodeData = createQuery();
            break;

          case 8
          /* TypeNgContent */
          :
            appendNgContent(view, renderHost, nodeDef); // no runtime data needed for NgContent...

            nodeData = undefined;
            break;
        }

        nodes[i] = nodeData;
      } // Create the ViewData.nodes of component views after we created everything else,
      // so that e.g. ng-content works


      execComponentViewsAction(view, ViewAction.CreateViewNodes); // fill static content and view queries

      execQueriesAction(view, 67108864
      /* TypeContentQuery */
      | 134217728
      /* TypeViewQuery */
      , 268435456
      /* StaticQuery */
      , 0
      /* CheckAndUpdate */
      );
    }

    function checkNoChangesView(view) {
      markProjectedViewsForCheck(view);
      Services.updateDirectives(view, 1
      /* CheckNoChanges */
      );
      execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
      Services.updateRenderer(view, 1
      /* CheckNoChanges */
      );
      execComponentViewsAction(view, ViewAction.CheckNoChanges); // Note: We don't check queries for changes as we didn't do this in v2.x.
      // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.

      view.state &= ~(64
      /* CheckProjectedViews */
      | 32
      /* CheckProjectedView */
      );
    }

    function checkAndUpdateView(view) {
      if (view.state & 1
      /* BeforeFirstCheck */
      ) {
          view.state &= ~1
          /* BeforeFirstCheck */
          ;
          view.state |= 2
          /* FirstCheck */
          ;
        } else {
        view.state &= ~2
        /* FirstCheck */
        ;
      }

      shiftInitState(view, 0
      /* InitState_BeforeInit */
      , 256
      /* InitState_CallingOnInit */
      );
      markProjectedViewsForCheck(view);
      Services.updateDirectives(view, 0
      /* CheckAndUpdate */
      );
      execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
      execQueriesAction(view, 67108864
      /* TypeContentQuery */
      , 536870912
      /* DynamicQuery */
      , 0
      /* CheckAndUpdate */
      );
      var callInit = shiftInitState(view, 256
      /* InitState_CallingOnInit */
      , 512
      /* InitState_CallingAfterContentInit */
      );
      callLifecycleHooksChildrenFirst(view, 2097152
      /* AfterContentChecked */
      | (callInit ? 1048576
      /* AfterContentInit */
      : 0));
      Services.updateRenderer(view, 0
      /* CheckAndUpdate */
      );
      execComponentViewsAction(view, ViewAction.CheckAndUpdate);
      execQueriesAction(view, 134217728
      /* TypeViewQuery */
      , 536870912
      /* DynamicQuery */
      , 0
      /* CheckAndUpdate */
      );
      callInit = shiftInitState(view, 512
      /* InitState_CallingAfterContentInit */
      , 768
      /* InitState_CallingAfterViewInit */
      );
      callLifecycleHooksChildrenFirst(view, 8388608
      /* AfterViewChecked */
      | (callInit ? 4194304
      /* AfterViewInit */
      : 0));

      if (view.def.flags & 2
      /* OnPush */
      ) {
          view.state &= ~8
          /* ChecksEnabled */
          ;
        }

      view.state &= ~(64
      /* CheckProjectedViews */
      | 32
      /* CheckProjectedView */
      );
      shiftInitState(view, 768
      /* InitState_CallingAfterViewInit */
      , 1024
      /* InitState_AfterInit */
      );
    }

    function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      if (argStyle === 0
      /* Inline */
      ) {
          return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        } else {
        return checkAndUpdateNodeDynamic(view, nodeDef, v0);
      }
    }

    function markProjectedViewsForCheck(view) {
      var def = view.def;

      if (!(def.nodeFlags & 4
      /* ProjectedTemplate */
      )) {
        return;
      }

      for (var i = 0; i < def.nodes.length; i++) {
        var nodeDef = def.nodes[i];

        if (nodeDef.flags & 4
        /* ProjectedTemplate */
        ) {
            var projectedViews = asElementData(view, i).template._projectedViews;

            if (projectedViews) {
              for (var _i17 = 0; _i17 < projectedViews.length; _i17++) {
                var projectedView = projectedViews[_i17];
                projectedView.state |= 32
                /* CheckProjectedView */
                ;
                markParentViewsForCheckProjectedViews(projectedView, view);
              }
            }
          } else if ((nodeDef.childFlags & 4
        /* ProjectedTemplate */
        ) === 0) {
          // a parent with leafs
          // no child is a component,
          // then skip the children
          i += nodeDef.childCount;
        }
      }
    }

    function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      switch (nodeDef.flags & 201347067
      /* Types */
      ) {
        case 1
        /* TypeElement */
        :
          return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);

        case 2
        /* TypeText */
        :
          return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);

        case 16384
        /* TypeDirective */
        :
          return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);

        case 32
        /* TypePureArray */
        :
        case 64
        /* TypePureObject */
        :
        case 128
        /* TypePurePipe */
        :
          return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);

        default:
          throw 'unreachable';
      }
    }

    function checkAndUpdateNodeDynamic(view, nodeDef, values) {
      switch (nodeDef.flags & 201347067
      /* Types */
      ) {
        case 1
        /* TypeElement */
        :
          return checkAndUpdateElementDynamic(view, nodeDef, values);

        case 2
        /* TypeText */
        :
          return checkAndUpdateTextDynamic(view, nodeDef, values);

        case 16384
        /* TypeDirective */
        :
          return checkAndUpdateDirectiveDynamic(view, nodeDef, values);

        case 32
        /* TypePureArray */
        :
        case 64
        /* TypePureObject */
        :
        case 128
        /* TypePurePipe */
        :
          return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);

        default:
          throw 'unreachable';
      }
    }

    function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      if (argStyle === 0
      /* Inline */
      ) {
          checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        } else {
        checkNoChangesNodeDynamic(view, nodeDef, v0);
      } // Returning false is ok here as we would have thrown in case of a change.


      return false;
    }

    function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      var bindLen = nodeDef.bindings.length;
      if (bindLen > 0) checkBindingNoChanges(view, nodeDef, 0, v0);
      if (bindLen > 1) checkBindingNoChanges(view, nodeDef, 1, v1);
      if (bindLen > 2) checkBindingNoChanges(view, nodeDef, 2, v2);
      if (bindLen > 3) checkBindingNoChanges(view, nodeDef, 3, v3);
      if (bindLen > 4) checkBindingNoChanges(view, nodeDef, 4, v4);
      if (bindLen > 5) checkBindingNoChanges(view, nodeDef, 5, v5);
      if (bindLen > 6) checkBindingNoChanges(view, nodeDef, 6, v6);
      if (bindLen > 7) checkBindingNoChanges(view, nodeDef, 7, v7);
      if (bindLen > 8) checkBindingNoChanges(view, nodeDef, 8, v8);
      if (bindLen > 9) checkBindingNoChanges(view, nodeDef, 9, v9);
    }

    function checkNoChangesNodeDynamic(view, nodeDef, values) {
      for (var i = 0; i < values.length; i++) {
        checkBindingNoChanges(view, nodeDef, i, values[i]);
      }
    }
    /**
     * Workaround https://github.com/angular/tsickle/issues/497
     * @suppress {misplacedTypeAnnotation}
     */


    function checkNoChangesQuery(view, nodeDef) {
      var queryList = asQueryList(view, nodeDef.nodeIndex);

      if (queryList.dirty) {
        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), "Query ".concat(nodeDef.query.id, " not dirty"), "Query ".concat(nodeDef.query.id, " dirty"), (view.state & 1
        /* BeforeFirstCheck */
        ) !== 0);
      }
    }

    function destroyView(view) {
      if (view.state & 128
      /* Destroyed */
      ) {
          return;
        }

      execEmbeddedViewsAction(view, ViewAction.Destroy);
      execComponentViewsAction(view, ViewAction.Destroy);
      callLifecycleHooksChildrenFirst(view, 131072
      /* OnDestroy */
      );

      if (view.disposables) {
        for (var i = 0; i < view.disposables.length; i++) {
          view.disposables[i]();
        }
      }

      detachProjectedView(view);

      if (view.renderer.destroyNode) {
        destroyViewNodes(view);
      }

      if (isComponentView(view)) {
        view.renderer.destroy();
      }

      view.state |= 128
      /* Destroyed */
      ;
    }

    function destroyViewNodes(view) {
      var len = view.def.nodes.length;

      for (var i = 0; i < len; i++) {
        var def = view.def.nodes[i];

        if (def.flags & 1
        /* TypeElement */
        ) {
            view.renderer.destroyNode(asElementData(view, i).renderElement);
          } else if (def.flags & 2
        /* TypeText */
        ) {
            view.renderer.destroyNode(asTextData(view, i).renderText);
          } else if (def.flags & 67108864
        /* TypeContentQuery */
        || def.flags & 134217728
        /* TypeViewQuery */
        ) {
            asQueryList(view, i).destroy();
          }
      }
    }

    var ViewAction = /*@__PURE__*/function (ViewAction) {
      ViewAction[ViewAction["CreateViewNodes"] = 0] = "CreateViewNodes";
      ViewAction[ViewAction["CheckNoChanges"] = 1] = "CheckNoChanges";
      ViewAction[ViewAction["CheckNoChangesProjectedViews"] = 2] = "CheckNoChangesProjectedViews";
      ViewAction[ViewAction["CheckAndUpdate"] = 3] = "CheckAndUpdate";
      ViewAction[ViewAction["CheckAndUpdateProjectedViews"] = 4] = "CheckAndUpdateProjectedViews";
      ViewAction[ViewAction["Destroy"] = 5] = "Destroy";
      return ViewAction;
    }({});

    function execComponentViewsAction(view, action) {
      var def = view.def;

      if (!(def.nodeFlags & 33554432
      /* ComponentView */
      )) {
        return;
      }

      for (var i = 0; i < def.nodes.length; i++) {
        var nodeDef = def.nodes[i];

        if (nodeDef.flags & 33554432
        /* ComponentView */
        ) {
            // a leaf
            callViewAction(asElementData(view, i).componentView, action);
          } else if ((nodeDef.childFlags & 33554432
        /* ComponentView */
        ) === 0) {
          // a parent with leafs
          // no child is a component,
          // then skip the children
          i += nodeDef.childCount;
        }
      }
    }

    function execEmbeddedViewsAction(view, action) {
      var def = view.def;

      if (!(def.nodeFlags & 16777216
      /* EmbeddedViews */
      )) {
        return;
      }

      for (var i = 0; i < def.nodes.length; i++) {
        var nodeDef = def.nodes[i];

        if (nodeDef.flags & 16777216
        /* EmbeddedViews */
        ) {
            // a leaf
            var embeddedViews = asElementData(view, i).viewContainer._embeddedViews;

            for (var k = 0; k < embeddedViews.length; k++) {
              callViewAction(embeddedViews[k], action);
            }
          } else if ((nodeDef.childFlags & 16777216
        /* EmbeddedViews */
        ) === 0) {
          // a parent with leafs
          // no child is a component,
          // then skip the children
          i += nodeDef.childCount;
        }
      }
    }

    function callViewAction(view, action) {
      var viewState = view.state;

      switch (action) {
        case ViewAction.CheckNoChanges:
          if ((viewState & 128
          /* Destroyed */
          ) === 0) {
            if ((viewState & 12
            /* CatDetectChanges */
            ) === 12
            /* CatDetectChanges */
            ) {
                checkNoChangesView(view);
              } else if (viewState & 64
            /* CheckProjectedViews */
            ) {
                execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);
              }
          }

          break;

        case ViewAction.CheckNoChangesProjectedViews:
          if ((viewState & 128
          /* Destroyed */
          ) === 0) {
            if (viewState & 32
            /* CheckProjectedView */
            ) {
                checkNoChangesView(view);
              } else if (viewState & 64
            /* CheckProjectedViews */
            ) {
                execProjectedViewsAction(view, action);
              }
          }

          break;

        case ViewAction.CheckAndUpdate:
          if ((viewState & 128
          /* Destroyed */
          ) === 0) {
            if ((viewState & 12
            /* CatDetectChanges */
            ) === 12
            /* CatDetectChanges */
            ) {
                checkAndUpdateView(view);
              } else if (viewState & 64
            /* CheckProjectedViews */
            ) {
                execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);
              }
          }

          break;

        case ViewAction.CheckAndUpdateProjectedViews:
          if ((viewState & 128
          /* Destroyed */
          ) === 0) {
            if (viewState & 32
            /* CheckProjectedView */
            ) {
                checkAndUpdateView(view);
              } else if (viewState & 64
            /* CheckProjectedViews */
            ) {
                execProjectedViewsAction(view, action);
              }
          }

          break;

        case ViewAction.Destroy:
          // Note: destroyView recurses over all views,
          // so we don't need to special case projected views here.
          destroyView(view);
          break;

        case ViewAction.CreateViewNodes:
          createViewNodes(view);
          break;
      }
    }

    function execProjectedViewsAction(view, action) {
      execEmbeddedViewsAction(view, action);
      execComponentViewsAction(view, action);
    }

    function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
      if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
        return;
      }

      var nodeCount = view.def.nodes.length;

      for (var i = 0; i < nodeCount; i++) {
        var nodeDef = view.def.nodes[i];

        if (nodeDef.flags & queryFlags && nodeDef.flags & staticDynamicQueryFlag) {
          Services.setCurrentNode(view, nodeDef.nodeIndex);

          switch (checkType) {
            case 0
            /* CheckAndUpdate */
            :
              checkAndUpdateQuery(view, nodeDef);
              break;

            case 1
            /* CheckNoChanges */
            :
              checkNoChangesQuery(view, nodeDef);
              break;
          }
        }

        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
          // no child has a matching query
          // then skip the children
          i += nodeDef.childCount;
        }
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var initialized = false;

    function initServicesIfNeeded() {
      if (initialized) {
        return;
      }

      initialized = true;
      var services = isDevMode() ? createDebugServices() : createProdServices();
      Services.setCurrentNode = services.setCurrentNode;
      Services.createRootView = services.createRootView;
      Services.createEmbeddedView = services.createEmbeddedView;
      Services.createComponentView = services.createComponentView;
      Services.createNgModuleRef = services.createNgModuleRef;
      Services.overrideProvider = services.overrideProvider;
      Services.overrideComponentView = services.overrideComponentView;
      Services.clearOverrides = services.clearOverrides;
      Services.checkAndUpdateView = services.checkAndUpdateView;
      Services.checkNoChangesView = services.checkNoChangesView;
      Services.destroyView = services.destroyView;
      Services.resolveDep = resolveDep;
      Services.createDebugContext = services.createDebugContext;
      Services.handleEvent = services.handleEvent;
      Services.updateDirectives = services.updateDirectives;
      Services.updateRenderer = services.updateRenderer;
      Services.dirtyParentQueries = dirtyParentQueries;
    }

    function createProdServices() {
      return {
        setCurrentNode: function setCurrentNode() {},
        createRootView: createProdRootView,
        createEmbeddedView: createEmbeddedView,
        createComponentView: createComponentView,
        createNgModuleRef: createNgModuleRef,
        overrideProvider: NOOP,
        overrideComponentView: NOOP,
        clearOverrides: NOOP,
        checkAndUpdateView: checkAndUpdateView,
        checkNoChangesView: checkNoChangesView,
        destroyView: destroyView,
        createDebugContext: function createDebugContext(view, nodeIndex) {
          return new DebugContext_(view, nodeIndex);
        },
        handleEvent: function handleEvent(view, nodeIndex, eventName, event) {
          return view.def.handleEvent(view, nodeIndex, eventName, event);
        },
        updateDirectives: function updateDirectives(view, checkType) {
          return view.def.updateDirectives(checkType === 0
          /* CheckAndUpdate */
          ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view);
        },
        updateRenderer: function updateRenderer(view, checkType) {
          return view.def.updateRenderer(checkType === 0
          /* CheckAndUpdate */
          ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view);
        }
      };
    }

    function createDebugServices() {
      return {
        setCurrentNode: debugSetCurrentNode,
        createRootView: debugCreateRootView,
        createEmbeddedView: debugCreateEmbeddedView,
        createComponentView: debugCreateComponentView,
        createNgModuleRef: debugCreateNgModuleRef,
        overrideProvider: debugOverrideProvider,
        overrideComponentView: debugOverrideComponentView,
        clearOverrides: debugClearOverrides,
        checkAndUpdateView: debugCheckAndUpdateView,
        checkNoChangesView: debugCheckNoChangesView,
        destroyView: debugDestroyView,
        createDebugContext: function createDebugContext(view, nodeIndex) {
          return new DebugContext_(view, nodeIndex);
        },
        handleEvent: debugHandleEvent,
        updateDirectives: debugUpdateDirectives,
        updateRenderer: debugUpdateRenderer
      };
    }

    function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
      var rendererFactory = ngModule.injector.get(RendererFactory2);
      return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
    }

    function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
      var rendererFactory = ngModule.injector.get(RendererFactory2);
      var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);
      var defWithOverride = applyProviderOverridesToView(def);
      return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);
    }

    function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {
      var sanitizer = ngModule.injector.get(Sanitizer);
      var errorHandler = ngModule.injector.get(ErrorHandler);
      var renderer = rendererFactory.createRenderer(null, null);
      return {
        ngModule: ngModule,
        injector: elInjector,
        projectableNodes: projectableNodes,
        selectorOrNode: rootSelectorOrNode,
        sanitizer: sanitizer,
        rendererFactory: rendererFactory,
        renderer: renderer,
        errorHandler: errorHandler
      };
    }

    function debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {
      var defWithOverride = applyProviderOverridesToView(viewDef);
      return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);
    }

    function debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {
      var overrideComponentView = viewDefOverrides.get(nodeDef.element.componentProvider.provider.token);

      if (overrideComponentView) {
        viewDef = overrideComponentView;
      } else {
        viewDef = applyProviderOverridesToView(viewDef);
      }

      return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);
    }

    function debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {
      var defWithOverride = applyProviderOverridesToNgModule(def);
      return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);
    }

    var providerOverrides = /*@__PURE__*/new Map();
    var providerOverridesWithScope = /*@__PURE__*/new Map();
    var viewDefOverrides = /*@__PURE__*/new Map();

    function debugOverrideProvider(override) {
      providerOverrides.set(override.token, override);
      var injectableDef;

      if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) && typeof injectableDef.providedIn === 'function') {
        providerOverridesWithScope.set(override.token, override);
      }
    }

    function debugOverrideComponentView(comp, compFactory) {
      var hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));
      var compViewDef = resolveDefinition(hostViewDef.nodes[0].element.componentView);
      viewDefOverrides.set(comp, compViewDef);
    }

    function debugClearOverrides() {
      providerOverrides.clear();
      providerOverridesWithScope.clear();
      viewDefOverrides.clear();
    } // Notes about the algorithm:
    // 1) Locate the providers of an element and check if one of them was overwritten
    // 2) Change the providers of that element
    //
    // We only create new datastructures if we need to, to keep perf impact
    // reasonable.


    function applyProviderOverridesToView(def) {
      if (providerOverrides.size === 0) {
        return def;
      }

      var elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);

      if (elementIndicesWithOverwrittenProviders.length === 0) {
        return def;
      } // clone the whole view definition,
      // as it maintains references between the nodes that are hard to update.


      def = def.factory(function () {
        return NOOP;
      });

      for (var i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {
        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);
      }

      return def;

      function findElementIndicesWithOverwrittenProviders(def) {
        var elIndicesWithOverwrittenProviders = [];
        var lastElementDef = null;

        for (var _i18 = 0; _i18 < def.nodes.length; _i18++) {
          var nodeDef = def.nodes[_i18];

          if (nodeDef.flags & 1
          /* TypeElement */
          ) {
              lastElementDef = nodeDef;
            }

          if (lastElementDef && nodeDef.flags & 3840
          /* CatProviderNoDirective */
          && providerOverrides.has(nodeDef.provider.token)) {
            elIndicesWithOverwrittenProviders.push(lastElementDef.nodeIndex);
            lastElementDef = null;
          }
        }

        return elIndicesWithOverwrittenProviders;
      }

      function applyProviderOverridesToElement(viewDef, elIndex) {
        for (var _i19 = elIndex + 1; _i19 < viewDef.nodes.length; _i19++) {
          var nodeDef = viewDef.nodes[_i19];

          if (nodeDef.flags & 1
          /* TypeElement */
          ) {
              // stop at the next element
              return;
            }

          if (nodeDef.flags & 3840
          /* CatProviderNoDirective */
          ) {
              var provider = nodeDef.provider;
              var override = providerOverrides.get(provider.token);

              if (override) {
                nodeDef.flags = nodeDef.flags & ~3840
                /* CatProviderNoDirective */
                | override.flags;
                provider.deps = splitDepsDsl(override.deps);
                provider.value = override.value;
              }
            }
        }
      }
    } // Notes about the algorithm:
    // We only create new datastructures if we need to, to keep perf impact
    // reasonable.


    function applyProviderOverridesToNgModule(def) {
      var _calcHasOverrides = calcHasOverrides(def),
          hasOverrides = _calcHasOverrides.hasOverrides,
          hasDeprecatedOverrides = _calcHasOverrides.hasDeprecatedOverrides;

      if (!hasOverrides) {
        return def;
      } // clone the whole view definition,
      // as it maintains references between the nodes that are hard to update.


      def = def.factory(function () {
        return NOOP;
      });
      applyProviderOverrides(def);
      return def;

      function calcHasOverrides(def) {
        var hasOverrides = false;
        var hasDeprecatedOverrides = false;

        if (providerOverrides.size === 0) {
          return {
            hasOverrides: hasOverrides,
            hasDeprecatedOverrides: hasDeprecatedOverrides
          };
        }

        def.providers.forEach(function (node) {
          var override = providerOverrides.get(node.token);

          if (node.flags & 3840
          /* CatProviderNoDirective */
          && override) {
            hasOverrides = true;
            hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;
          }
        });
        def.modules.forEach(function (module) {
          providerOverridesWithScope.forEach(function (override, token) {
            if (getInjectableDef(token).providedIn === module) {
              hasOverrides = true;
              hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;
            }
          });
        });
        return {
          hasOverrides: hasOverrides,
          hasDeprecatedOverrides: hasDeprecatedOverrides
        };
      }

      function applyProviderOverrides(def) {
        for (var i = 0; i < def.providers.length; i++) {
          var provider = def.providers[i];

          if (hasDeprecatedOverrides) {
            // We had a bug where me made
            // all providers lazy. Keep this logic behind a flag
            // for migrating existing users.
            provider.flags |= 4096
            /* LazyProvider */
            ;
          }

          var override = providerOverrides.get(provider.token);

          if (override) {
            provider.flags = provider.flags & ~3840
            /* CatProviderNoDirective */
            | override.flags;
            provider.deps = splitDepsDsl(override.deps);
            provider.value = override.value;
          }
        }

        if (providerOverridesWithScope.size > 0) {
          var moduleSet = new Set(def.modules);
          providerOverridesWithScope.forEach(function (override, token) {
            if (moduleSet.has(getInjectableDef(token).providedIn)) {
              var _provider = {
                token: token,
                flags: override.flags | (hasDeprecatedOverrides ? 4096
                /* LazyProvider */
                : 0
                /* None */
                ),
                deps: splitDepsDsl(override.deps),
                value: override.value,
                index: def.providers.length
              };
              def.providers.push(_provider);
              def.providersByKey[tokenKey(token)] = _provider;
            }
          });
        }
      }
    }

    function prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      var nodeDef = view.def.nodes[checkIndex];
      checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
      return nodeDef.flags & 224
      /* CatPureExpression */
      ? asPureExpressionData(view, checkIndex).value : undefined;
    }

    function prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      var nodeDef = view.def.nodes[checkIndex];
      checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
      return nodeDef.flags & 224
      /* CatPureExpression */
      ? asPureExpressionData(view, checkIndex).value : undefined;
    }

    function debugCheckAndUpdateView(view) {
      return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
    }

    function debugCheckNoChangesView(view) {
      return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
    }

    function debugDestroyView(view) {
      return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
    }

    var DebugAction = /*@__PURE__*/function (DebugAction) {
      DebugAction[DebugAction["create"] = 0] = "create";
      DebugAction[DebugAction["detectChanges"] = 1] = "detectChanges";
      DebugAction[DebugAction["checkNoChanges"] = 2] = "checkNoChanges";
      DebugAction[DebugAction["destroy"] = 3] = "destroy";
      DebugAction[DebugAction["handleEvent"] = 4] = "handleEvent";
      return DebugAction;
    }({});

    var _currentAction;

    var _currentView;

    var _currentNodeIndex;

    function debugSetCurrentNode(view, nodeIndex) {
      _currentView = view;
      _currentNodeIndex = nodeIndex;
    }

    function debugHandleEvent(view, nodeIndex, eventName, event) {
      debugSetCurrentNode(view, nodeIndex);
      return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
    }

    function debugUpdateDirectives(view, checkType) {
      if (view.state & 128
      /* Destroyed */
      ) {
          throw viewDestroyedError(DebugAction[_currentAction]);
        }

      debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
      return view.def.updateDirectives(debugCheckDirectivesFn, view);

      function debugCheckDirectivesFn(view, nodeIndex, argStyle) {
        var nodeDef = view.def.nodes[nodeIndex];

        for (var _len9 = arguments.length, values = new Array(_len9 > 3 ? _len9 - 3 : 0), _key9 = 3; _key9 < _len9; _key9++) {
          values[_key9 - 3] = arguments[_key9];
        }

        if (checkType === 0
        /* CheckAndUpdate */
        ) {
            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
          } else {
          debugCheckNoChangesNode(view, nodeDef, argStyle, values);
        }

        if (nodeDef.flags & 16384
        /* TypeDirective */
        ) {
            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
          }

        return nodeDef.flags & 224
        /* CatPureExpression */
        ? asPureExpressionData(view, nodeDef.nodeIndex).value : undefined;
      }
    }

    function debugUpdateRenderer(view, checkType) {
      if (view.state & 128
      /* Destroyed */
      ) {
          throw viewDestroyedError(DebugAction[_currentAction]);
        }

      debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
      return view.def.updateRenderer(debugCheckRenderNodeFn, view);

      function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {
        var nodeDef = view.def.nodes[nodeIndex];

        for (var _len10 = arguments.length, values = new Array(_len10 > 3 ? _len10 - 3 : 0), _key10 = 3; _key10 < _len10; _key10++) {
          values[_key10 - 3] = arguments[_key10];
        }

        if (checkType === 0
        /* CheckAndUpdate */
        ) {
            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
          } else {
          debugCheckNoChangesNode(view, nodeDef, argStyle, values);
        }

        if (nodeDef.flags & 3
        /* CatRenderNode */
        ) {
            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
          }

        return nodeDef.flags & 224
        /* CatPureExpression */
        ? asPureExpressionData(view, nodeDef.nodeIndex).value : undefined;
      }
    }

    function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
      var changed = checkAndUpdateNode.apply(void 0, [view, nodeDef, argStyle].concat(_toConsumableArray(givenValues)));

      if (changed) {
        var values = argStyle === 1
        /* Dynamic */
        ? givenValues[0] : givenValues;

        if (nodeDef.flags & 16384
        /* TypeDirective */
        ) {
            var bindingValues = {};

            for (var i = 0; i < nodeDef.bindings.length; i++) {
              var binding = nodeDef.bindings[i];
              var value = values[i];

              if (binding.flags & 8
              /* TypeProperty */
              ) {
                  bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] = normalizeDebugBindingValue(value);
                }
            }

            var elDef = nodeDef.parent;
            var el = asElementData(view, elDef.nodeIndex).renderElement;

            if (!elDef.element.name) {
              // a comment.
              view.renderer.setValue(el, "bindings=".concat(JSON.stringify(bindingValues, null, 2)));
            } else {
              // a regular element.
              for (var attr in bindingValues) {
                var _value4 = bindingValues[attr];

                if (_value4 != null) {
                  view.renderer.setAttribute(el, attr, _value4);
                } else {
                  view.renderer.removeAttribute(el, attr);
                }
              }
            }
          }
      }
    }

    function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
      checkNoChangesNode.apply(void 0, [view, nodeDef, argStyle].concat(_toConsumableArray(values)));
    }

    function nextDirectiveWithBinding(view, nodeIndex) {
      for (var i = nodeIndex; i < view.def.nodes.length; i++) {
        var nodeDef = view.def.nodes[i];

        if (nodeDef.flags & 16384
        /* TypeDirective */
        && nodeDef.bindings && nodeDef.bindings.length) {
          return i;
        }
      }

      return null;
    }

    function nextRenderNodeWithBinding(view, nodeIndex) {
      for (var i = nodeIndex; i < view.def.nodes.length; i++) {
        var nodeDef = view.def.nodes[i];

        if (nodeDef.flags & 3
        /* CatRenderNode */
        && nodeDef.bindings && nodeDef.bindings.length) {
          return i;
        }
      }

      return null;
    }

    var DebugContext_ = /*#__PURE__*/function () {
      function DebugContext_(view, nodeIndex) {
        _classCallCheck(this, DebugContext_);

        this.view = view;
        this.nodeIndex = nodeIndex;

        if (nodeIndex == null) {
          this.nodeIndex = nodeIndex = 0;
        }

        this.nodeDef = view.def.nodes[nodeIndex];
        var elDef = this.nodeDef;
        var elView = view;

        while (elDef && (elDef.flags & 1
        /* TypeElement */
        ) === 0) {
          elDef = elDef.parent;
        }

        if (!elDef) {
          while (!elDef && elView) {
            elDef = viewParentEl(elView);
            elView = elView.parent;
          }
        }

        this.elDef = elDef;
        this.elView = elView;
      }

      _createClass2(DebugContext_, [{
        key: "logError",
        value: function logError(console) {
          for (var _len11 = arguments.length, values = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {
            values[_key11 - 1] = arguments[_key11];
          }

          var logViewDef;
          var logNodeIndex;

          if (this.nodeDef.flags & 2
          /* TypeText */
          ) {
              logViewDef = this.view.def;
              logNodeIndex = this.nodeDef.nodeIndex;
            } else {
            logViewDef = this.elView.def;
            logNodeIndex = this.elDef.nodeIndex;
          } // Note: we only generate a log function for text and element nodes
          // to make the generated code as small as possible.


          var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);
          var currRenderNodeIndex = -1;

          var nodeLogger = function nodeLogger() {
            currRenderNodeIndex++;

            if (currRenderNodeIndex === renderNodeIndex) {
              var _console$error;

              return (_console$error = console.error).bind.apply(_console$error, [console].concat(values));
            } else {
              return NOOP;
            }
          };

          logViewDef.factory(nodeLogger);

          if (currRenderNodeIndex < renderNodeIndex) {
            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');
            console.error.apply(console, values);
          }
        }
      }, {
        key: "elOrCompView",
        get: function get() {
          // Has to be done lazily as we use the DebugContext also during creation of elements...
          return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;
        }
      }, {
        key: "injector",
        get: function get() {
          return createInjector$1(this.elView, this.elDef);
        }
      }, {
        key: "component",
        get: function get() {
          return this.elOrCompView.component;
        }
      }, {
        key: "context",
        get: function get() {
          return this.elOrCompView.context;
        }
      }, {
        key: "providerTokens",
        get: function get() {
          var tokens = [];

          if (this.elDef) {
            for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
              var childDef = this.elView.def.nodes[i];

              if (childDef.flags & 20224
              /* CatProvider */
              ) {
                  tokens.push(childDef.provider.token);
                }

              i += childDef.childCount;
            }
          }

          return tokens;
        }
      }, {
        key: "references",
        get: function get() {
          var references = {};

          if (this.elDef) {
            collectReferences(this.elView, this.elDef, references);

            for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
              var childDef = this.elView.def.nodes[i];

              if (childDef.flags & 20224
              /* CatProvider */
              ) {
                  collectReferences(this.elView, childDef, references);
                }

              i += childDef.childCount;
            }
          }

          return references;
        }
      }, {
        key: "componentRenderElement",
        get: function get() {
          var elData = findHostElement(this.elOrCompView);
          return elData ? elData.renderElement : undefined;
        }
      }, {
        key: "renderNode",
        get: function get() {
          return this.nodeDef.flags & 2
          /* TypeText */
          ? renderNode(this.view, this.nodeDef) : renderNode(this.elView, this.elDef);
        }
      }]);

      return DebugContext_;
    }();

    function getRenderNodeIndex(viewDef, nodeIndex) {
      var renderNodeIndex = -1;

      for (var i = 0; i <= nodeIndex; i++) {
        var nodeDef = viewDef.nodes[i];

        if (nodeDef.flags & 3
        /* CatRenderNode */
        ) {
            renderNodeIndex++;
          }
      }

      return renderNodeIndex;
    }

    function findHostElement(view) {
      while (view && !isComponentView(view)) {
        view = view.parent;
      }

      if (view.parent) {
        return asElementData(view.parent, viewParentEl(view).nodeIndex);
      }

      return null;
    }

    function collectReferences(view, nodeDef, references) {
      for (var refName in nodeDef.references) {
        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
      }
    }

    function callWithDebugContext(action, fn, self, args) {
      var oldAction = _currentAction;
      var oldView = _currentView;
      var oldNodeIndex = _currentNodeIndex;

      try {
        _currentAction = action;
        var result = fn.apply(self, args);
        _currentView = oldView;
        _currentNodeIndex = oldNodeIndex;
        _currentAction = oldAction;
        return result;
      } catch (e) {
        if (isViewDebugError(e) || !_currentView) {
          throw e;
        }

        throw viewWrappedDebugError(e, getCurrentDebugContext());
      }
    }

    function getCurrentDebugContext() {
      return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;
    }

    var DebugRendererFactory2 = /*#__PURE__*/function () {
      function DebugRendererFactory2(delegate) {
        _classCallCheck(this, DebugRendererFactory2);

        this.delegate = delegate;
      }

      _createClass2(DebugRendererFactory2, [{
        key: "createRenderer",
        value: function createRenderer(element, renderData) {
          return new DebugRenderer2(this.delegate.createRenderer(element, renderData));
        }
      }, {
        key: "begin",
        value: function begin() {
          if (this.delegate.begin) {
            this.delegate.begin();
          }
        }
      }, {
        key: "end",
        value: function end() {
          if (this.delegate.end) {
            this.delegate.end();
          }
        }
      }, {
        key: "whenRenderingDone",
        value: function whenRenderingDone() {
          if (this.delegate.whenRenderingDone) {
            return this.delegate.whenRenderingDone();
          }

          return Promise.resolve(null);
        }
      }]);

      return DebugRendererFactory2;
    }();

    var DebugRenderer2 = /*#__PURE__*/function () {
      function DebugRenderer2(delegate) {
        _classCallCheck(this, DebugRenderer2);

        this.delegate = delegate;
        /**
         * Factory function used to create a `DebugContext` when a node is created.
         *
         * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.
         *
         * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine
         * or a Render context.
         */

        this.debugContextFactory = getCurrentDebugContext;
        this.data = this.delegate.data;
      }

      _createClass2(DebugRenderer2, [{
        key: "createDebugContext",
        value: function createDebugContext(nativeElement) {
          return this.debugContextFactory(nativeElement);
        }
      }, {
        key: "destroyNode",
        value: function destroyNode(node) {
          var debugNode = getDebugNode$1(node);
          removeDebugNodeFromIndex(debugNode);

          if (debugNode instanceof DebugNode__PRE_R3__) {
            debugNode.listeners.length = 0;
          }

          if (this.delegate.destroyNode) {
            this.delegate.destroyNode(node);
          }
        }
      }, {
        key: "destroy",
        value: function destroy() {
          this.delegate.destroy();
        }
      }, {
        key: "createElement",
        value: function createElement(name, namespace) {
          var el = this.delegate.createElement(name, namespace);
          var debugCtx = this.createDebugContext(el);

          if (debugCtx) {
            var debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);
            debugEl.name = name;
            indexDebugNode(debugEl);
          }

          return el;
        }
      }, {
        key: "createComment",
        value: function createComment(value) {
          var comment = this.delegate.createComment(value);
          var debugCtx = this.createDebugContext(comment);

          if (debugCtx) {
            indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));
          }

          return comment;
        }
      }, {
        key: "createText",
        value: function createText(value) {
          var text = this.delegate.createText(value);
          var debugCtx = this.createDebugContext(text);

          if (debugCtx) {
            indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));
          }

          return text;
        }
      }, {
        key: "appendChild",
        value: function appendChild(parent, newChild) {
          var debugEl = getDebugNode$1(parent);
          var debugChildEl = getDebugNode$1(newChild);

          if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
            debugEl.addChild(debugChildEl);
          }

          this.delegate.appendChild(parent, newChild);
        }
      }, {
        key: "insertBefore",
        value: function insertBefore(parent, newChild, refChild) {
          var debugEl = getDebugNode$1(parent);
          var debugChildEl = getDebugNode$1(newChild);
          var debugRefEl = getDebugNode$1(refChild);

          if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
            debugEl.insertBefore(debugRefEl, debugChildEl);
          }

          this.delegate.insertBefore(parent, newChild, refChild);
        }
      }, {
        key: "removeChild",
        value: function removeChild(parent, oldChild) {
          var debugEl = getDebugNode$1(parent);
          var debugChildEl = getDebugNode$1(oldChild);

          if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
            debugEl.removeChild(debugChildEl);
          }

          this.delegate.removeChild(parent, oldChild);
        }
      }, {
        key: "selectRootElement",
        value: function selectRootElement(selectorOrNode, preserveContent) {
          var el = this.delegate.selectRootElement(selectorOrNode, preserveContent);
          var debugCtx = getCurrentDebugContext();

          if (debugCtx) {
            indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));
          }

          return el;
        }
      }, {
        key: "setAttribute",
        value: function setAttribute(el, name, value, namespace) {
          var debugEl = getDebugNode$1(el);

          if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
            var fullName = namespace ? namespace + ':' + name : name;
            debugEl.attributes[fullName] = value;
          }

          this.delegate.setAttribute(el, name, value, namespace);
        }
      }, {
        key: "removeAttribute",
        value: function removeAttribute(el, name, namespace) {
          var debugEl = getDebugNode$1(el);

          if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
            var fullName = namespace ? namespace + ':' + name : name;
            debugEl.attributes[fullName] = null;
          }

          this.delegate.removeAttribute(el, name, namespace);
        }
      }, {
        key: "addClass",
        value: function addClass(el, name) {
          var debugEl = getDebugNode$1(el);

          if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
            debugEl.classes[name] = true;
          }

          this.delegate.addClass(el, name);
        }
      }, {
        key: "removeClass",
        value: function removeClass(el, name) {
          var debugEl = getDebugNode$1(el);

          if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
            debugEl.classes[name] = false;
          }

          this.delegate.removeClass(el, name);
        }
      }, {
        key: "setStyle",
        value: function setStyle(el, style, value, flags) {
          var debugEl = getDebugNode$1(el);

          if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
            debugEl.styles[style] = value;
          }

          this.delegate.setStyle(el, style, value, flags);
        }
      }, {
        key: "removeStyle",
        value: function removeStyle(el, style, flags) {
          var debugEl = getDebugNode$1(el);

          if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
            debugEl.styles[style] = null;
          }

          this.delegate.removeStyle(el, style, flags);
        }
      }, {
        key: "setProperty",
        value: function setProperty(el, name, value) {
          var debugEl = getDebugNode$1(el);

          if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
            debugEl.properties[name] = value;
          }

          this.delegate.setProperty(el, name, value);
        }
      }, {
        key: "listen",
        value: function listen(target, eventName, callback) {
          if (typeof target !== 'string') {
            var debugEl = getDebugNode$1(target);

            if (debugEl) {
              debugEl.listeners.push(new DebugEventListener(eventName, callback));
            }
          }

          return this.delegate.listen(target, eventName, callback);
        }
      }, {
        key: "parentNode",
        value: function parentNode(node) {
          return this.delegate.parentNode(node);
        }
      }, {
        key: "nextSibling",
        value: function nextSibling(node) {
          return this.delegate.nextSibling(node);
        }
      }, {
        key: "setValue",
        value: function setValue(node, value) {
          return this.delegate.setValue(node, value);
        }
      }]);

      return DebugRenderer2;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function overrideProvider(override) {
      initServicesIfNeeded();
      return Services.overrideProvider(override);
    }

    function overrideComponentView(comp, componentFactory) {
      initServicesIfNeeded();
      return Services.overrideComponentView(comp, componentFactory);
    }

    function clearOverrides() {
      initServicesIfNeeded();
      return Services.clearOverrides();
    } // Attention: this function is called as top level function.
    // Putting any logic in here will destroy closure tree shaking!


    function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {
      return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);
    }

    function cloneNgModuleDefinition(def) {
      var providers = Array.from(def.providers);
      var modules = Array.from(def.modules);
      var providersByKey = {};

      for (var key in def.providersByKey) {
        providersByKey[key] = def.providersByKey[key];
      }

      return {
        factory: def.factory,
        scope: def.scope,
        providers: providers,
        modules: modules,
        providersByKey: providersByKey
      };
    }

    var NgModuleFactory_ = /*#__PURE__*/function (_NgModuleFactory2) {
      _inherits(NgModuleFactory_, _NgModuleFactory2);

      var _super28 = _createSuper(NgModuleFactory_);

      function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {
        var _this49;

        _classCallCheck(this, NgModuleFactory_);

        // Attention: this ctor is called as top level function.
        // Putting any logic in here will destroy closure tree shaking!
        _this49 = _super28.call(this);
        _this49.moduleType = moduleType;
        _this49._bootstrapComponents = _bootstrapComponents;
        _this49._ngModuleDefFactory = _ngModuleDefFactory;
        return _this49;
      }

      _createClass2(NgModuleFactory_, [{
        key: "create",
        value: function create(parentInjector) {
          initServicesIfNeeded(); // Clone the NgModuleDefinition so that any tree shakeable provider definition
          // added to this instance of the NgModuleRef doesn't affect the cached copy.
          // See https://github.com/angular/angular/issues/25018.

          var def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));
          return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);
        }
      }]);

      return NgModuleFactory_;
    }(NgModuleFactory);
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // clang-format on

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    if (ngDevMode) {
      // This helper is to give a reasonable error message to people upgrading to v9 that have not yet
      // installed `@angular/localize` in their app.
      // tslint:disable-next-line: no-toplevel-property-access
      _global.$localize = _global.$localize || function () {
        throw new Error('It looks like your application or one of its dependencies is using i18n.\n' + 'Angular 9 introduced a global `$localize()` function that needs to be loaded.\n' + 'Please run `ng add @angular/localize` from the Angular CLI.\n' + '(For non-CLI projects, add `import \'@angular/localize/init\';` to your `polyfills.ts` file.\n' + 'For server-side rendering applications add the import to your `main.server.ts` file.)');
      };
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // This file only reexports content of the `src` folder. Keep it that way.

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Generated bundle index. Do not edit.
     */
    //# sourceMappingURL=core.js.map

    /***/

  },

  /***/
  "./node_modules/@angular/elements/__ivy_ngcc__/fesm2015/elements.js":
  /*!**************************************************************************!*\
    !*** ./node_modules/@angular/elements/__ivy_ngcc__/fesm2015/elements.js ***!
    \**************************************************************************/

  /*! exports provided: NgElement, VERSION, createCustomElement */

  /***/
  function node_modulesAngularElements__ivy_ngcc__Fesm2015ElementsJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgElement", function () {
      return NgElement;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "VERSION", function () {
      return VERSION;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "createCustomElement", function () {
      return createCustomElement;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /**
     * @license Angular v10.0.9
     * (c) 2010-2020 Google LLC. https://angular.io/
     * License: MIT
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var ɵ0 = function ɵ0() {
      var elProto = Element.prototype;
      return elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector || elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;
    };

    var matches = ɵ0();
    /**
     * Provide methods for scheduling the execution of a callback.
     */

    var scheduler = {
      /**
       * Schedule a callback to be called after some delay.
       *
       * Returns a function that when executed will cancel the scheduled function.
       */
      schedule: function schedule(taskFn, delay) {
        var id = setTimeout(taskFn, delay);
        return function () {
          return clearTimeout(id);
        };
      },

      /**
       * Schedule a callback to be called before the next render.
       * (If `window.requestAnimationFrame()` is not available, use `scheduler.schedule()` instead.)
       *
       * Returns a function that when executed will cancel the scheduled function.
       */
      scheduleBeforeRender: function scheduleBeforeRender(taskFn) {
        // TODO(gkalpak): Implement a better way of accessing `requestAnimationFrame()`
        //                (e.g. accounting for vendor prefix, SSR-compatibility, etc).
        if (typeof window === 'undefined') {
          // For SSR just schedule immediately.
          return scheduler.schedule(taskFn, 0);
        }

        if (typeof window.requestAnimationFrame === 'undefined') {
          var frameMs = 16;
          return scheduler.schedule(taskFn, frameMs);
        }

        var id = window.requestAnimationFrame(taskFn);
        return function () {
          return window.cancelAnimationFrame(id);
        };
      }
    };
    /**
     * Convert a camelCased string to kebab-cased.
     */

    function camelToDashCase(input) {
      return input.replace(/[A-Z]/g, function (_char) {
        return "-".concat(_char.toLowerCase());
      });
    }
    /**
     * Create a `CustomEvent` (even on browsers where `CustomEvent` is not a constructor).
     */


    function createCustomEvent(doc, name, detail) {
      var bubbles = false;
      var cancelable = false; // On IE9-11, `CustomEvent` is not a constructor.

      if (typeof CustomEvent !== 'function') {
        var event = doc.createEvent('CustomEvent');
        event.initCustomEvent(name, bubbles, cancelable, detail);
        return event;
      }

      return new CustomEvent(name, {
        bubbles: bubbles,
        cancelable: cancelable,
        detail: detail
      });
    }
    /**
     * Check whether the input is an `Element`.
     */


    function isElement(node) {
      return !!node && node.nodeType === Node.ELEMENT_NODE;
    }
    /**
     * Check whether the input is a function.
     */


    function isFunction(value) {
      return typeof value === 'function';
    }
    /**
     * Convert a kebab-cased string to camelCased.
     */


    function kebabToCamelCase(input) {
      return input.replace(/-([a-z\d])/g, function (_, _char2) {
        return _char2.toUpperCase();
      });
    }
    /**
     * Check whether an `Element` matches a CSS selector.
     */


    function matchesSelector(element, selector) {
      return matches.call(element, selector);
    }
    /**
     * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.
     */


    function strictEquals(value1, value2) {
      return value1 === value2 || value1 !== value1 && value2 !== value2;
    }
    /** Gets a map of default set of attributes to observe and the properties they affect. */


    function getDefaultAttributeToPropertyInputs(inputs) {
      var attributeToPropertyInputs = {};
      inputs.forEach(function (_ref9) {
        var propName = _ref9.propName,
            templateName = _ref9.templateName;
        attributeToPropertyInputs[camelToDashCase(templateName)] = propName;
      });
      return attributeToPropertyInputs;
    }
    /**
     * Gets a component's set of inputs. Uses the injector to get the component factory where the inputs
     * are defined.
     */


    function getComponentInputs(component, injector) {
      var componentFactoryResolver = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]);
      var componentFactory = componentFactoryResolver.resolveComponentFactory(component);
      return componentFactory.inputs;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function extractProjectableNodes(host, ngContentSelectors) {
      var nodes = host.childNodes;
      var projectableNodes = ngContentSelectors.map(function () {
        return [];
      });
      var wildcardIndex = -1;
      ngContentSelectors.some(function (selector, i) {
        if (selector === '*') {
          wildcardIndex = i;
          return true;
        }

        return false;
      });

      for (var i = 0, ii = nodes.length; i < ii; ++i) {
        var node = nodes[i];
        var ngContentIndex = findMatchingIndex(node, ngContentSelectors, wildcardIndex);

        if (ngContentIndex !== -1) {
          projectableNodes[ngContentIndex].push(node);
        }
      }

      return projectableNodes;
    }

    function findMatchingIndex(node, selectors, defaultIndex) {
      var matchingIndex = defaultIndex;

      if (isElement(node)) {
        selectors.some(function (selector, i) {
          if (selector !== '*' && matchesSelector(node, selector)) {
            matchingIndex = i;
            return true;
          }

          return false;
        });
      }

      return matchingIndex;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /** Time in milliseconds to wait before destroying the component ref when disconnected. */


    var DESTROY_DELAY = 10;
    /**
     * Factory that creates new ComponentNgElementStrategy instance. Gets the component factory with the
     * constructor's injector's factory resolver and passes that factory to each strategy.
     *
     * @publicApi
     */

    var ComponentNgElementStrategyFactory = /*#__PURE__*/function () {
      function ComponentNgElementStrategyFactory(component, injector) {
        _classCallCheck(this, ComponentNgElementStrategyFactory);

        this.componentFactory = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]).resolveComponentFactory(component);
      }

      _createClass2(ComponentNgElementStrategyFactory, [{
        key: "create",
        value: function create(injector) {
          return new ComponentNgElementStrategy(this.componentFactory, injector);
        }
      }]);

      return ComponentNgElementStrategyFactory;
    }();
    /**
     * Creates and destroys a component ref using a component factory and handles change detection
     * in response to input changes.
     *
     * @publicApi
     */


    var ComponentNgElementStrategy = /*#__PURE__*/function () {
      function ComponentNgElementStrategy(componentFactory, injector) {
        _classCallCheck(this, ComponentNgElementStrategy);

        this.componentFactory = componentFactory;
        this.injector = injector; // Subject of `NgElementStrategyEvent` observables corresponding to the component's outputs.

        this.eventEmitters = new rxjs__WEBPACK_IMPORTED_MODULE_1__["ReplaySubject"](1);
        /** Merged stream of the component's output events. */

        this.events = this.eventEmitters.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["switchMap"])(function (emitters) {
          return Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["merge"]).apply(void 0, _toConsumableArray(emitters));
        }));
        /** Reference to the component that was created on connect. */

        this.componentRef = null;
        /** Changes that have been made to the component ref since the last time onChanges was called. */

        this.inputChanges = null;
        /** Whether the created component implements the onChanges function. */

        this.implementsOnChanges = false;
        /** Whether a change detection has been scheduled to run on the component. */

        this.scheduledChangeDetectionFn = null;
        /** Callback function that when called will cancel a scheduled destruction on the component. */

        this.scheduledDestroyFn = null;
        /** Initial input values that were set before the component was created. */

        this.initialInputValues = new Map();
        /**
         * Set of component inputs that have not yet changed, i.e. for which `ngOnChanges()` has not
         * fired. (This is used to determine the value of `fistChange` in `SimpleChange` instances.)
         */

        this.unchangedInputs = new Set();
      }
      /**
       * Initializes a new component if one has not yet been created and cancels any scheduled
       * destruction.
       */


      _createClass2(ComponentNgElementStrategy, [{
        key: "connect",
        value: function connect(element) {
          // If the element is marked to be destroyed, cancel the task since the component was reconnected
          if (this.scheduledDestroyFn !== null) {
            this.scheduledDestroyFn();
            this.scheduledDestroyFn = null;
            return;
          }

          if (this.componentRef === null) {
            this.initializeComponent(element);
          }
        }
        /**
         * Schedules the component to be destroyed after some small delay in case the element is just
         * being moved across the DOM.
         */

      }, {
        key: "disconnect",
        value: function disconnect() {
          var _this50 = this;

          // Return if there is no componentRef or the component is already scheduled for destruction
          if (this.componentRef === null || this.scheduledDestroyFn !== null) {
            return;
          } // Schedule the component to be destroyed after a small timeout in case it is being
          // moved elsewhere in the DOM


          this.scheduledDestroyFn = scheduler.schedule(function () {
            if (_this50.componentRef !== null) {
              _this50.componentRef.destroy();

              _this50.componentRef = null;
            }
          }, DESTROY_DELAY);
        }
        /**
         * Returns the component property value. If the component has not yet been created, the value is
         * retrieved from the cached initialization values.
         */

      }, {
        key: "getInputValue",
        value: function getInputValue(property) {
          if (this.componentRef === null) {
            return this.initialInputValues.get(property);
          }

          return this.componentRef.instance[property];
        }
        /**
         * Sets the input value for the property. If the component has not yet been created, the value is
         * cached and set when the component is created.
         */

      }, {
        key: "setInputValue",
        value: function setInputValue(property, value) {
          if (this.componentRef === null) {
            this.initialInputValues.set(property, value);
            return;
          } // Ignore the value if it is strictly equal to the current value, except if it is `undefined`
          // and this is the first change to the value (because an explicit `undefined` _is_ strictly
          // equal to not having a value set at all, but we still need to record this as a change).


          if (strictEquals(value, this.getInputValue(property)) && !(value === undefined && this.unchangedInputs.has(property))) {
            return;
          }

          this.recordInputChange(property, value);
          this.componentRef.instance[property] = value;
          this.scheduleDetectChanges();
        }
        /**
         * Creates a new component through the component factory with the provided element host and
         * sets up its initial inputs, listens for outputs changes, and runs an initial change detection.
         */

      }, {
        key: "initializeComponent",
        value: function initializeComponent(element) {
          var childInjector = _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"].create({
            providers: [],
            parent: this.injector
          });

          var projectableNodes = extractProjectableNodes(element, this.componentFactory.ngContentSelectors);
          this.componentRef = this.componentFactory.create(childInjector, projectableNodes, element);
          this.implementsOnChanges = isFunction(this.componentRef.instance.ngOnChanges);
          this.initializeInputs();
          this.initializeOutputs(this.componentRef);
          this.detectChanges();
          var applicationRef = this.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ApplicationRef"]);
          applicationRef.attachView(this.componentRef.hostView);
        }
        /** Set any stored initial inputs on the component's properties. */

      }, {
        key: "initializeInputs",
        value: function initializeInputs() {
          var _this51 = this;

          this.componentFactory.inputs.forEach(function (_ref10) {
            var propName = _ref10.propName;

            if (_this51.implementsOnChanges) {
              // If the component implements `ngOnChanges()`, keep track of which inputs have never
              // changed so far.
              _this51.unchangedInputs.add(propName);
            }

            if (_this51.initialInputValues.has(propName)) {
              // Call `setInputValue()` now that the component has been instantiated to update its
              // properties and fire `ngOnChanges()`.
              _this51.setInputValue(propName, _this51.initialInputValues.get(propName));
            }
          });
          this.initialInputValues.clear();
        }
        /** Sets up listeners for the component's outputs so that the events stream emits the events. */

      }, {
        key: "initializeOutputs",
        value: function initializeOutputs(componentRef) {
          var eventEmitters = this.componentFactory.outputs.map(function (_ref11) {
            var propName = _ref11.propName,
                templateName = _ref11.templateName;
            var emitter = componentRef.instance[propName];
            return emitter.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (value) {
              return {
                name: templateName,
                value: value
              };
            }));
          });
          this.eventEmitters.next(eventEmitters);
        }
        /** Calls ngOnChanges with all the inputs that have changed since the last call. */

      }, {
        key: "callNgOnChanges",
        value: function callNgOnChanges(componentRef) {
          if (!this.implementsOnChanges || this.inputChanges === null) {
            return;
          } // Cache the changes and set inputChanges to null to capture any changes that might occur
          // during ngOnChanges.


          var inputChanges = this.inputChanges;
          this.inputChanges = null;
          componentRef.instance.ngOnChanges(inputChanges);
        }
        /**
         * Schedules change detection to run on the component.
         * Ignores subsequent calls if already scheduled.
         */

      }, {
        key: "scheduleDetectChanges",
        value: function scheduleDetectChanges() {
          var _this52 = this;

          if (this.scheduledChangeDetectionFn) {
            return;
          }

          this.scheduledChangeDetectionFn = scheduler.scheduleBeforeRender(function () {
            _this52.scheduledChangeDetectionFn = null;

            _this52.detectChanges();
          });
        }
        /**
         * Records input changes so that the component receives SimpleChanges in its onChanges function.
         */

      }, {
        key: "recordInputChange",
        value: function recordInputChange(property, currentValue) {
          // Do not record the change if the component does not implement `OnChanges`.
          // (We can only determine that after the component has been instantiated.)
          if (this.componentRef !== null && !this.implementsOnChanges) {
            return;
          }

          if (this.inputChanges === null) {
            this.inputChanges = {};
          } // If there already is a change, modify the current value to match but leave the values for
          // previousValue and isFirstChange.


          var pendingChange = this.inputChanges[property];

          if (pendingChange) {
            pendingChange.currentValue = currentValue;
            return;
          }

          var isFirstChange = this.unchangedInputs.has(property);
          this.unchangedInputs["delete"](property);
          var previousValue = isFirstChange ? undefined : this.getInputValue(property);
          this.inputChanges[property] = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["SimpleChange"](previousValue, currentValue, isFirstChange);
        }
        /** Runs change detection on the component. */

      }, {
        key: "detectChanges",
        value: function detectChanges() {
          if (this.componentRef === null) {
            return;
          }

          this.callNgOnChanges(this.componentRef);
          this.componentRef.changeDetectorRef.detectChanges();
        }
      }]);

      return ComponentNgElementStrategy;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Implements the functionality needed for a custom element.
     *
     * @publicApi
     */


    var NgElement = /*#__PURE__*/function (_HTMLElement) {
      _inherits(NgElement, _HTMLElement);

      var _super29 = _createSuper(NgElement);

      function NgElement() {
        var _this53;

        _classCallCheck(this, NgElement);

        _this53 = _super29.apply(this, arguments);
        /**
         * A subscription to change, connect, and disconnect events in the custom element.
         */

        _this53.ngElementEventsSubscription = null;
        return _this53;
      }

      return NgElement;
    }( /*#__PURE__*/_wrapNativeSuper(HTMLElement));
    /**
     *  @description Creates a custom element class based on an Angular component.
     *
     * Builds a class that encapsulates the functionality of the provided component and
     * uses the configuration information to provide more context to the class.
     * Takes the component factory's inputs and outputs to convert them to the proper
     * custom element API and add hooks to input changes.
     *
     * The configuration's injector is the initial injector set on the class,
     * and used by default for each created instance.This behavior can be overridden with the
     * static property to affect all newly created instances, or as a constructor argument for
     * one-off creations.
     *
     * @see [Angular Elements Overview](guide/elements "Turning Angular components into custom elements")
     *
     * @param component The component to transform.
     * @param config A configuration that provides initialization information to the created class.
     * @returns The custom-element construction class, which can be registered with
     * a browser's `CustomElementRegistry`.
     *
     * @publicApi
     */


    function createCustomElement(component, config) {
      var inputs = getComponentInputs(component, config.injector);
      var strategyFactory = config.strategyFactory || new ComponentNgElementStrategyFactory(component, config.injector);
      var attributeToPropertyInputs = getDefaultAttributeToPropertyInputs(inputs);

      var NgElementImpl = /*#__PURE__*/function (_NgElement) {
        _inherits(NgElementImpl, _NgElement);

        var _super30 = _createSuper(NgElementImpl);

        function NgElementImpl(injector) {
          var _this54;

          _classCallCheck(this, NgElementImpl);

          _this54 = _super30.call(this);
          _this54.injector = injector;
          return _this54;
        }

        _createClass2(NgElementImpl, [{
          key: "attributeChangedCallback",
          value: function attributeChangedCallback(attrName, oldValue, newValue, namespace) {
            var propName = attributeToPropertyInputs[attrName];
            this.ngElementStrategy.setInputValue(propName, newValue);
          }
        }, {
          key: "connectedCallback",
          value: function connectedCallback() {
            // For historical reasons, some strategies may not have initialized the `events` property
            // until after `connect()` is run. Subscribe to `events` if it is available before running
            // `connect()` (in order to capture events emitted suring inittialization), otherwise
            // subscribe afterwards.
            //
            // TODO: Consider deprecating/removing the post-connect subscription in a future major version
            //       (e.g. v11).
            var subscribedToEvents = false;

            if (this.ngElementStrategy.events) {
              // `events` are already available: Subscribe to it asap.
              this.subscribeToEvents();
              subscribedToEvents = true;
            }

            this.ngElementStrategy.connect(this);

            if (!subscribedToEvents) {
              // `events` were not initialized before running `connect()`: Subscribe to them now.
              // The events emitted during the component initialization have been missed, but at least
              // future events will be captured.
              this.subscribeToEvents();
            }
          }
        }, {
          key: "disconnectedCallback",
          value: function disconnectedCallback() {
            // Not using `this.ngElementStrategy` to avoid unnecessarily creating the `NgElementStrategy`.
            if (this._ngElementStrategy) {
              this._ngElementStrategy.disconnect();
            }

            if (this.ngElementEventsSubscription) {
              this.ngElementEventsSubscription.unsubscribe();
              this.ngElementEventsSubscription = null;
            }
          }
        }, {
          key: "subscribeToEvents",
          value: function subscribeToEvents() {
            var _this55 = this;

            // Listen for events from the strategy and dispatch them as custom events.
            this.ngElementEventsSubscription = this.ngElementStrategy.events.subscribe(function (e) {
              var customEvent = createCustomEvent(_this55.ownerDocument, e.name, e.value);

              _this55.dispatchEvent(customEvent);
            });
          }
        }, {
          key: "ngElementStrategy",
          get: function get() {
            var _this56 = this;

            // NOTE:
            // Some polyfills (e.g. `document-register-element`) do not call the constructor, therefore
            // it is not safe to set `ngElementStrategy` in the constructor and assume it will be
            // available inside the methods.
            //
            // TODO(andrewseguin): Add e2e tests that cover cases where the constructor isn't called. For
            // now this is tested using a Google internal test suite.
            if (!this._ngElementStrategy) {
              var strategy = this._ngElementStrategy = strategyFactory.create(this.injector || config.injector); // Collect pre-existing values on the element to re-apply through the strategy.

              var preExistingValues = inputs.filter(function (_ref12) {
                var propName = _ref12.propName;
                return _this56.hasOwnProperty(propName);
              }).map(function (_ref13) {
                var propName = _ref13.propName;
                return [propName, _this56[propName]];
              }); // In some browsers (e.g. IE10), `Object.setPrototypeOf()` (which is required by some Custom
              // Elements polyfills) is not defined and is thus polyfilled in a way that does not preserve
              // the prototype chain. In such cases, `this` will not be an instance of `NgElementImpl` and
              // thus not have the component input getters/setters defined on `NgElementImpl.prototype`.

              if (!(this instanceof NgElementImpl)) {
                // Add getters and setters to the instance itself for each property input.
                defineInputGettersSetters(inputs, this);
              } else {
                // Delete the property from the instance, so that it can go through the getters/setters
                // set on `NgElementImpl.prototype`.
                preExistingValues.forEach(function (_ref14) {
                  var _ref15 = _slicedToArray(_ref14, 1),
                      propName = _ref15[0];

                  return delete _this56[propName];
                });
              } // Re-apply pre-existing values through the strategy.


              preExistingValues.forEach(function (_ref16) {
                var _ref17 = _slicedToArray(_ref16, 2),
                    propName = _ref17[0],
                    value = _ref17[1];

                return strategy.setInputValue(propName, value);
              });
            }

            return this._ngElementStrategy;
          }
        }]);

        return NgElementImpl;
      }(NgElement); // Work around a bug in closure typed optimizations(b/79557487) where it is not honoring static
      // field externs. So using quoted access to explicitly prevent renaming.


      NgElementImpl['observedAttributes'] = Object.keys(attributeToPropertyInputs); // TypeScript 3.9+ defines getters/setters as configurable but non-enumerable properties (in
      // compliance with the spec). This breaks emulated inheritance in ES5 on environments that do not
      // natively support `Object.setPrototypeOf()` (such as IE 9-10).
      // Update the property descriptor of `NgElementImpl#ngElementStrategy` to make it enumerable.
      // The below 'const', shouldn't be needed but currently this breaks build-optimizer
      // Build-optimizer currently uses TypeScript 3.6 which is unable to resolve an 'accessor'
      // in 'getTypeOfVariableOrParameterOrPropertyWorker'.

      var getterName = 'ngElementStrategy';
      Object.defineProperty(NgElementImpl.prototype, getterName, {
        enumerable: true
      }); // Add getters and setters to the prototype for each property input.

      defineInputGettersSetters(inputs, NgElementImpl.prototype);
      return NgElementImpl;
    } // Helpers


    function defineInputGettersSetters(inputs, target) {
      // Add getters and setters for each property input.
      inputs.forEach(function (_ref18) {
        var propName = _ref18.propName;
        Object.defineProperty(target, propName, {
          get: function get() {
            return this.ngElementStrategy.getInputValue(propName);
          },
          set: function set(newValue) {
            this.ngElementStrategy.setInputValue(propName, newValue);
          },
          configurable: true,
          enumerable: true
        });
      });
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @publicApi
     */


    var VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('10.0.9');
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // This file only reexports content of the `src` folder. Keep it that way.

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Generated bundle index. Do not edit.
     */
    //# sourceMappingURL=elements.js.map

    /***/
  },

  /***/
  "./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/platform-browser.js":
  /*!******************************************************************************************!*\
    !*** ./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/platform-browser.js ***!
    \******************************************************************************************/

  /*! exports provided: ɵgetDOM, BrowserModule, BrowserTransferStateModule, By, DomSanitizer, EVENT_MANAGER_PLUGINS, EventManager, HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerModule, Meta, Title, TransferState, VERSION, disableDebugTools, enableDebugTools, makeStateKey, platformBrowser, ɵBROWSER_SANITIZATION_PROVIDERS, ɵBROWSER_SANITIZATION_PROVIDERS__POST_R3__, ɵBrowserDomAdapter, ɵBrowserGetTestability, ɵDomEventsPlugin, ɵDomRendererFactory2, ɵDomSanitizerImpl, ɵDomSharedStylesHost, ɵELEMENT_PROBE_PROVIDERS, ɵELEMENT_PROBE_PROVIDERS__POST_R3__, ɵHAMMER_PROVIDERS__POST_R3__, ɵHammerGesturesPlugin, ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS, ɵKeyEventsPlugin, ɵNAMESPACE_URIS, ɵSharedStylesHost, ɵTRANSITION_ID, ɵangular_packages_platform_browser_platform_browser_a, ɵangular_packages_platform_browser_platform_browser_b, ɵangular_packages_platform_browser_platform_browser_c, ɵangular_packages_platform_browser_platform_browser_d, ɵangular_packages_platform_browser_platform_browser_e, ɵangular_packages_platform_browser_platform_browser_f, ɵangular_packages_platform_browser_platform_browser_g, ɵangular_packages_platform_browser_platform_browser_h, ɵangular_packages_platform_browser_platform_browser_i, ɵangular_packages_platform_browser_platform_browser_j, ɵangular_packages_platform_browser_platform_browser_k, ɵangular_packages_platform_browser_platform_browser_l, ɵangular_packages_platform_browser_platform_browser_m, ɵangular_packages_platform_browser_platform_browser_n, ɵangular_packages_platform_browser_platform_browser_o, ɵescapeHtml, ɵflattenStyles, ɵinitDomAdapter, ɵshimContentAttribute, ɵshimHostAttribute */

  /***/
  function node_modulesAngularPlatformBrowser__ivy_ngcc__Fesm2015PlatformBrowserJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "BrowserModule", function () {
      return BrowserModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "BrowserTransferStateModule", function () {
      return BrowserTransferStateModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "By", function () {
      return By;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DomSanitizer", function () {
      return DomSanitizer;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "EVENT_MANAGER_PLUGINS", function () {
      return EVENT_MANAGER_PLUGINS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "EventManager", function () {
      return EventManager;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "HAMMER_GESTURE_CONFIG", function () {
      return HAMMER_GESTURE_CONFIG;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "HAMMER_LOADER", function () {
      return HAMMER_LOADER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "HammerGestureConfig", function () {
      return HammerGestureConfig;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "HammerModule", function () {
      return HammerModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Meta", function () {
      return Meta;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Title", function () {
      return Title;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TransferState", function () {
      return TransferState;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "VERSION", function () {
      return VERSION;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "disableDebugTools", function () {
      return disableDebugTools;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "enableDebugTools", function () {
      return enableDebugTools;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "makeStateKey", function () {
      return makeStateKey;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "platformBrowser", function () {
      return platformBrowser;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵBROWSER_SANITIZATION_PROVIDERS", function () {
      return BROWSER_SANITIZATION_PROVIDERS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵBROWSER_SANITIZATION_PROVIDERS__POST_R3__", function () {
      return BROWSER_SANITIZATION_PROVIDERS__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵBrowserDomAdapter", function () {
      return BrowserDomAdapter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵBrowserGetTestability", function () {
      return BrowserGetTestability;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵDomEventsPlugin", function () {
      return DomEventsPlugin;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵDomRendererFactory2", function () {
      return DomRendererFactory2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵDomSanitizerImpl", function () {
      return DomSanitizerImpl;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵDomSharedStylesHost", function () {
      return DomSharedStylesHost;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵELEMENT_PROBE_PROVIDERS", function () {
      return ELEMENT_PROBE_PROVIDERS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵELEMENT_PROBE_PROVIDERS__POST_R3__", function () {
      return ELEMENT_PROBE_PROVIDERS__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵHAMMER_PROVIDERS__POST_R3__", function () {
      return HAMMER_PROVIDERS__POST_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵHammerGesturesPlugin", function () {
      return HammerGesturesPlugin;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS", function () {
      return INTERNAL_BROWSER_PLATFORM_PROVIDERS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵKeyEventsPlugin", function () {
      return KeyEventsPlugin;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵNAMESPACE_URIS", function () {
      return NAMESPACE_URIS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵSharedStylesHost", function () {
      return SharedStylesHost;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵTRANSITION_ID", function () {
      return TRANSITION_ID;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_a", function () {
      return errorHandler;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_b", function () {
      return _document;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_c", function () {
      return BROWSER_MODULE_PROVIDERS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_d", function () {
      return createMeta;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_e", function () {
      return createTitle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_f", function () {
      return initTransferState;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_g", function () {
      return EventManagerPlugin;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_h", function () {
      return HAMMER_PROVIDERS__PRE_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_i", function () {
      return HAMMER_PROVIDERS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_j", function () {
      return domSanitizerImplFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_k", function () {
      return appInitializerFactory;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_l", function () {
      return SERVER_TRANSITION_PROVIDERS;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_m", function () {
      return _createNgProbeR2;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_n", function () {
      return ELEMENT_PROBE_PROVIDERS__PRE_R3__;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_o", function () {
      return GenericBrowserDomAdapter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵescapeHtml", function () {
      return escapeHtml;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵflattenStyles", function () {
      return flattenStyles;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵinitDomAdapter", function () {
      return initDomAdapter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵshimContentAttribute", function () {
      return shimContentAttribute;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ɵshimHostAttribute", function () {
      return shimHostAttribute;
    });
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ɵgetDOM", function () {
      return _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"];
    });
    /**
     * @license Angular v10.0.9
     * (c) 2010-2020 Google LLC. https://angular.io/
     * License: MIT
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Provides DOM operations in any browser environment.
     *
     * @security Tread carefully! Interacting with the DOM directly is dangerous and
     * can introduce XSS risks.
     */


    var GenericBrowserDomAdapter = /*#__PURE__*/function (_angular_common__WEBP) {
      _inherits(GenericBrowserDomAdapter, _angular_common__WEBP);

      var _super31 = _createSuper(GenericBrowserDomAdapter);

      function GenericBrowserDomAdapter() {
        _classCallCheck(this, GenericBrowserDomAdapter);

        return _super31.call(this);
      }

      _createClass2(GenericBrowserDomAdapter, [{
        key: "supportsDOMEvents",
        value: function supportsDOMEvents() {
          return true;
        }
      }]);

      return GenericBrowserDomAdapter;
    }(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵDomAdapter"]);
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var ɵ0 = function ɵ0() {
      if (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['Node']) {
        return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['Node'].prototype.contains || function (node) {
          return !!(this.compareDocumentPosition(node) & 16);
        };
      }

      return undefined;
    };

    var nodeContains = /*@__PURE__*/ɵ0();
    /**
     * A `DomAdapter` powered by full browser DOM APIs.
     *
     * @security Tread carefully! Interacting with the DOM directly is dangerous and
     * can introduce XSS risks.
     */

    /* tslint:disable:requireParameterType no-console */

    var BrowserDomAdapter = /*#__PURE__*/function (_GenericBrowserDomAda) {
      _inherits(BrowserDomAdapter, _GenericBrowserDomAda);

      var _super32 = _createSuper(BrowserDomAdapter);

      function BrowserDomAdapter() {
        _classCallCheck(this, BrowserDomAdapter);

        return _super32.apply(this, arguments);
      }

      _createClass2(BrowserDomAdapter, [{
        key: "getProperty",
        value: function getProperty(el, name) {
          return el[name];
        }
      }, {
        key: "log",
        value: function log(error) {
          if (window.console) {
            window.console.log && window.console.log(error);
          }
        }
      }, {
        key: "logGroup",
        value: function logGroup(error) {
          if (window.console) {
            window.console.group && window.console.group(error);
          }
        }
      }, {
        key: "logGroupEnd",
        value: function logGroupEnd() {
          if (window.console) {
            window.console.groupEnd && window.console.groupEnd();
          }
        }
      }, {
        key: "onAndCancel",
        value: function onAndCancel(el, evt, listener) {
          el.addEventListener(evt, listener, false); // Needed to follow Dart's subscription semantic, until fix of
          // https://code.google.com/p/dart/issues/detail?id=17406

          return function () {
            el.removeEventListener(evt, listener, false);
          };
        }
      }, {
        key: "dispatchEvent",
        value: function dispatchEvent(el, evt) {
          el.dispatchEvent(evt);
        }
      }, {
        key: "remove",
        value: function remove(node) {
          if (node.parentNode) {
            node.parentNode.removeChild(node);
          }

          return node;
        }
      }, {
        key: "getValue",
        value: function getValue(el) {
          return el.value;
        }
      }, {
        key: "createElement",
        value: function createElement(tagName, doc) {
          doc = doc || this.getDefaultDocument();
          return doc.createElement(tagName);
        }
      }, {
        key: "createHtmlDocument",
        value: function createHtmlDocument() {
          return document.implementation.createHTMLDocument('fakeTitle');
        }
      }, {
        key: "getDefaultDocument",
        value: function getDefaultDocument() {
          return document;
        }
      }, {
        key: "isElementNode",
        value: function isElementNode(node) {
          return node.nodeType === Node.ELEMENT_NODE;
        }
      }, {
        key: "isShadowRoot",
        value: function isShadowRoot(node) {
          return node instanceof DocumentFragment;
        }
      }, {
        key: "getGlobalEventTarget",
        value: function getGlobalEventTarget(doc, target) {
          if (target === 'window') {
            return window;
          }

          if (target === 'document') {
            return doc;
          }

          if (target === 'body') {
            return doc.body;
          }

          return null;
        }
      }, {
        key: "getHistory",
        value: function getHistory() {
          return window.history;
        }
      }, {
        key: "getLocation",
        value: function getLocation() {
          return window.location;
        }
      }, {
        key: "getBaseHref",
        value: function getBaseHref(doc) {
          var href = getBaseElementHref();
          return href == null ? null : relativePath(href);
        }
      }, {
        key: "resetBaseElement",
        value: function resetBaseElement() {
          baseElement = null;
        }
      }, {
        key: "getUserAgent",
        value: function getUserAgent() {
          return window.navigator.userAgent;
        }
      }, {
        key: "performanceNow",
        value: function performanceNow() {
          // performance.now() is not available in all browsers, see
          // http://caniuse.com/#search=performance.now
          return window.performance && window.performance.now ? window.performance.now() : new Date().getTime();
        }
      }, {
        key: "supportsCookies",
        value: function supportsCookies() {
          return true;
        }
      }, {
        key: "getCookie",
        value: function getCookie(name) {
          return Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵparseCookieValue"])(document.cookie, name);
        }
      }], [{
        key: "makeCurrent",
        value: function makeCurrent() {
          Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵsetRootDomAdapter"])(new BrowserDomAdapter());
        }
      }]);

      return BrowserDomAdapter;
    }(GenericBrowserDomAdapter);

    var baseElement = null;

    function getBaseElementHref() {
      if (!baseElement) {
        baseElement = document.querySelector('base');

        if (!baseElement) {
          return null;
        }
      }

      return baseElement.getAttribute('href');
    } // based on urlUtils.js in AngularJS 1


    var urlParsingNode;

    function relativePath(url) {
      if (!urlParsingNode) {
        urlParsingNode = document.createElement('a');
      }

      urlParsingNode.setAttribute('href', url);
      return urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * An id that identifies a particular application being bootstrapped, that should
     * match across the client/server boundary.
     */


    var TRANSITION_ID = /*@__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('TRANSITION_ID');

    function appInitializerFactory(transitionId, document, injector) {
      return function () {
        // Wait for all application initializers to be completed before removing the styles set by
        // the server.
        injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationInitStatus"]).donePromise.then(function () {
          var dom = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])();
          var styles = Array.prototype.slice.apply(document.querySelectorAll("style[ng-transition]"));
          styles.filter(function (el) {
            return el.getAttribute('ng-transition') === transitionId;
          }).forEach(function (el) {
            return dom.remove(el);
          });
        });
      };
    }

    var SERVER_TRANSITION_PROVIDERS = [{
      provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_INITIALIZER"],
      useFactory: appInitializerFactory,
      deps: [TRANSITION_ID, _angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]],
      multi: true
    }];
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    var BrowserGetTestability = /*#__PURE__*/function () {
      function BrowserGetTestability() {
        _classCallCheck(this, BrowserGetTestability);
      }

      _createClass2(BrowserGetTestability, [{
        key: "addToWindow",
        value: function addToWindow(registry) {
          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['getAngularTestability'] = function (elem) {
            var findInAncestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            var testability = registry.findTestabilityInTree(elem, findInAncestors);

            if (testability == null) {
              throw new Error('Could not find testability for element.');
            }

            return testability;
          };

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['getAllAngularTestabilities'] = function () {
            return registry.getAllTestabilities();
          };

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['getAllAngularRootElements'] = function () {
            return registry.getAllRootElements();
          };

          var whenAllStable = function whenAllStable(callback
          /** TODO #9100 */
          ) {
            var testabilities = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['getAllAngularTestabilities']();

            var count = testabilities.length;
            var didWork = false;

            var decrement = function decrement(didWork_
            /** TODO #9100 */
            ) {
              didWork = didWork || didWork_;
              count--;

              if (count == 0) {
                callback(didWork);
              }
            };

            testabilities.forEach(function (testability
            /** TODO #9100 */
            ) {
              testability.whenStable(decrement);
            });
          };

          if (!_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['frameworkStabilizers']) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['frameworkStabilizers'] = [];
          }

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['frameworkStabilizers'].push(whenAllStable);
        }
      }, {
        key: "findTestabilityInTree",
        value: function findTestabilityInTree(registry, elem, findInAncestors) {
          if (elem == null) {
            return null;
          }

          var t = registry.getTestability(elem);

          if (t != null) {
            return t;
          } else if (!findInAncestors) {
            return null;
          }

          if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().isShadowRoot(elem)) {
            return this.findTestabilityInTree(registry, elem.host, true);
          }

          return this.findTestabilityInTree(registry, elem.parentElement, true);
        }
      }], [{
        key: "init",
        value: function init() {
          Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["setTestabilityGetter"])(new BrowserGetTestability());
        }
      }]);

      return BrowserGetTestability;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var CAMEL_CASE_REGEXP = /([A-Z])/g;
    var DASH_CASE_REGEXP = /-([a-z])/g;

    function camelCaseToDashCase(input) {
      return input.replace(CAMEL_CASE_REGEXP, function () {
        for (var _len12 = arguments.length, m = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
          m[_key12] = arguments[_key12];
        }

        return '-' + m[1].toLowerCase();
      });
    }

    function dashCaseToCamelCase(input) {
      return input.replace(DASH_CASE_REGEXP, function () {
        for (var _len13 = arguments.length, m = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
          m[_key13] = arguments[_key13];
        }

        return m[1].toUpperCase();
      });
    }
    /**
     * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if
     * `name` is `'probe'`.
     * @param name Name under which it will be exported. Keep in mind this will be a property of the
     * global `ng` object.
     * @param value The value to export.
     */


    function exportNgVar(name, value) {
      if (typeof COMPILED === 'undefined' || !COMPILED) {
        // Note: we can't export `ng` when using closure enhanced optimization as:
        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global
        // - we can't declare a closure extern as the namespace `ng` is already used within Google
        //   for typings for angularJS (via `goog.provide('ng....')`).
        var ng = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['ng'] = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['ng'] || {};
        ng[name] = value;
      }
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var ɵ0$1 = function ɵ0$1() {
      return {
        'ApplicationRef': _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"],
        'NgZone': _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]
      };
    };

    var CORE_TOKENS = /*@__PURE__*/ɵ0$1();
    var INSPECT_GLOBAL_NAME = 'probe';
    var CORE_TOKENS_GLOBAL_NAME = 'coreTokens';
    /**
     * Returns a {@link DebugElement} for the given native DOM element, or
     * null if the given native element does not have an Angular view associated
     * with it.
     */

    function inspectNativeElementR2(element) {
      return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵgetDebugNodeR2"])(element);
    }

    function _createNgProbeR2(coreTokens) {
      exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElementR2);
      exportNgVar(CORE_TOKENS_GLOBAL_NAME, Object.assign(Object.assign({}, CORE_TOKENS), _ngProbeTokensToMap(coreTokens || [])));
      return function () {
        return inspectNativeElementR2;
      };
    }

    function _ngProbeTokensToMap(tokens) {
      return tokens.reduce(function (prev, t) {
        return prev[t.name] = t.token, prev;
      }, {});
    }
    /**
     * In Ivy, we don't support NgProbe because we have our own set of testing utilities
     * with more robust functionality.
     *
     * We shouldn't bring in NgProbe because it prevents DebugNode and friends from
     * tree-shaking properly.
     */


    var ELEMENT_PROBE_PROVIDERS__POST_R3__ = [];
    /**
     * Providers which support debugging Angular applications (e.g. via `ng.probe`).
     */

    var ELEMENT_PROBE_PROVIDERS__PRE_R3__ = [{
      provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_INITIALIZER"],
      useFactory: _createNgProbeR2,
      deps: [[_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgProbeToken"], /*@__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]()]],
      multi: true
    }];
    var ELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS__POST_R3__;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * The injection token for the event-manager plug-in service.
     *
     * @publicApi
     */

    var EVENT_MANAGER_PLUGINS = /*@__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('EventManagerPlugins');

    var EventManager = /*@__PURE__*/function () {
      var EventManager = /*#__PURE__*/function () {
        /**
         * Initializes an instance of the event-manager service.
         */
        function EventManager(plugins, _zone) {
          var _this57 = this;

          _classCallCheck(this, EventManager);

          this._zone = _zone;
          this._eventNameToPlugin = new Map();
          plugins.forEach(function (p) {
            return p.manager = _this57;
          });
          this._plugins = plugins.slice().reverse();
        }
        /**
         * Registers a handler for a specific element and event.
         *
         * @param element The HTML element to receive event notifications.
         * @param eventName The name of the event to listen for.
         * @param handler A function to call when the notification occurs. Receives the
         * event object as an argument.
         * @returns  A callback function that can be used to remove the handler.
         */


        _createClass2(EventManager, [{
          key: "addEventListener",
          value: function addEventListener(element, eventName, handler) {
            var plugin = this._findPluginFor(eventName);

            return plugin.addEventListener(element, eventName, handler);
          }
          /**
           * Registers a global handler for an event in a target view.
           *
           * @param target A target for global event notifications. One of "window", "document", or "body".
           * @param eventName The name of the event to listen for.
           * @param handler A function to call when the notification occurs. Receives the
           * event object as an argument.
           * @returns A callback function that can be used to remove the handler.
           */

        }, {
          key: "addGlobalEventListener",
          value: function addGlobalEventListener(target, eventName, handler) {
            var plugin = this._findPluginFor(eventName);

            return plugin.addGlobalEventListener(target, eventName, handler);
          }
          /**
           * Retrieves the compilation zone in which event listeners are registered.
           */

        }, {
          key: "getZone",
          value: function getZone() {
            return this._zone;
          }
          /** @internal */

        }, {
          key: "_findPluginFor",
          value: function _findPluginFor(eventName) {
            var plugin = this._eventNameToPlugin.get(eventName);

            if (plugin) {
              return plugin;
            }

            var plugins = this._plugins;

            for (var i = 0; i < plugins.length; i++) {
              var _plugin = plugins[i];

              if (_plugin.supports(eventName)) {
                this._eventNameToPlugin.set(eventName, _plugin);

                return _plugin;
              }
            }

            throw new Error("No event manager plugin found for event ".concat(eventName));
          }
        }]);

        return EventManager;
      }();

      EventManager.ɵfac = function EventManager_Factory(t) {
        return new (t || EventManager)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](EVENT_MANAGER_PLUGINS), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]));
      };

      EventManager.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: EventManager,
        factory: EventManager.ɵfac
      });
      return EventManager;
    }();

    var EventManagerPlugin = /*#__PURE__*/function () {
      function EventManagerPlugin(_doc) {
        _classCallCheck(this, EventManagerPlugin);

        this._doc = _doc;
      }

      _createClass2(EventManagerPlugin, [{
        key: "addGlobalEventListener",
        value: function addGlobalEventListener(element, eventName, handler) {
          var target = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().getGlobalEventTarget(this._doc, element);

          if (!target) {
            throw new Error("Unsupported event target ".concat(target, " for event ").concat(eventName));
          }

          return this.addEventListener(target, eventName, handler);
        }
      }]);

      return EventManagerPlugin;
    }();

    var SharedStylesHost = /*@__PURE__*/function () {
      var SharedStylesHost = /*#__PURE__*/function () {
        function SharedStylesHost() {
          _classCallCheck(this, SharedStylesHost);

          /** @internal */
          this._stylesSet = new Set();
        }

        _createClass2(SharedStylesHost, [{
          key: "addStyles",
          value: function addStyles(styles) {
            var _this58 = this;

            var additions = new Set();
            styles.forEach(function (style) {
              if (!_this58._stylesSet.has(style)) {
                _this58._stylesSet.add(style);

                additions.add(style);
              }
            });
            this.onStylesAdded(additions);
          }
        }, {
          key: "onStylesAdded",
          value: function onStylesAdded(additions) {}
        }, {
          key: "getAllStyles",
          value: function getAllStyles() {
            return Array.from(this._stylesSet);
          }
        }]);

        return SharedStylesHost;
      }();

      SharedStylesHost.ɵfac = function SharedStylesHost_Factory(t) {
        return new (t || SharedStylesHost)();
      };

      SharedStylesHost.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: SharedStylesHost,
        factory: SharedStylesHost.ɵfac
      });
      return SharedStylesHost;
    }();

    var DomSharedStylesHost = /*@__PURE__*/function () {
      var DomSharedStylesHost = /*#__PURE__*/function (_SharedStylesHost) {
        _inherits(DomSharedStylesHost, _SharedStylesHost);

        var _super33 = _createSuper(DomSharedStylesHost);

        function DomSharedStylesHost(_doc) {
          var _this59;

          _classCallCheck(this, DomSharedStylesHost);

          _this59 = _super33.call(this);
          _this59._doc = _doc;
          _this59._hostNodes = new Set();
          _this59._styleNodes = new Set();

          _this59._hostNodes.add(_doc.head);

          return _this59;
        }

        _createClass2(DomSharedStylesHost, [{
          key: "_addStylesToHost",
          value: function _addStylesToHost(styles, host) {
            var _this60 = this;

            styles.forEach(function (style) {
              var styleEl = _this60._doc.createElement('style');

              styleEl.textContent = style;

              _this60._styleNodes.add(host.appendChild(styleEl));
            });
          }
        }, {
          key: "addHost",
          value: function addHost(hostNode) {
            this._addStylesToHost(this._stylesSet, hostNode);

            this._hostNodes.add(hostNode);
          }
        }, {
          key: "removeHost",
          value: function removeHost(hostNode) {
            this._hostNodes["delete"](hostNode);
          }
        }, {
          key: "onStylesAdded",
          value: function onStylesAdded(additions) {
            var _this61 = this;

            this._hostNodes.forEach(function (hostNode) {
              return _this61._addStylesToHost(additions, hostNode);
            });
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._styleNodes.forEach(function (styleNode) {
              return Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().remove(styleNode);
            });
          }
        }]);

        return DomSharedStylesHost;
      }(SharedStylesHost);

      DomSharedStylesHost.ɵfac = function DomSharedStylesHost_Factory(t) {
        return new (t || DomSharedStylesHost)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      };

      DomSharedStylesHost.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: DomSharedStylesHost,
        factory: DomSharedStylesHost.ɵfac
      });
      return DomSharedStylesHost;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var NAMESPACE_URIS = {
      'svg': 'http://www.w3.org/2000/svg',
      'xhtml': 'http://www.w3.org/1999/xhtml',
      'xlink': 'http://www.w3.org/1999/xlink',
      'xml': 'http://www.w3.org/XML/1998/namespace',
      'xmlns': 'http://www.w3.org/2000/xmlns/'
    };
    var COMPONENT_REGEX = /%COMP%/g;
    var NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;
    var COMPONENT_VARIABLE = '%COMP%';
    var HOST_ATTR = "_nghost-".concat(COMPONENT_VARIABLE);
    var CONTENT_ATTR = "_ngcontent-".concat(COMPONENT_VARIABLE);

    function shimContentAttribute(componentShortId) {
      return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
    }

    function shimHostAttribute(componentShortId) {
      return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
    }

    function flattenStyles(compId, styles, target) {
      for (var i = 0; i < styles.length; i++) {
        var style = styles[i];

        if (Array.isArray(style)) {
          flattenStyles(compId, style, target);
        } else {
          style = style.replace(COMPONENT_REGEX, compId);
          target.push(style);
        }
      }

      return target;
    }

    function decoratePreventDefault(eventHandler) {
      // `DebugNode.triggerEventHandler` needs to know if the listener was created with
      // decoratePreventDefault or is a listener added outside the Angular context so it can handle the
      // two differently. In the first case, the special '__ngUnwrap__' token is passed to the unwrap
      // the listener (see below).
      return function (event) {
        // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function
        // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The debug_node
        // can inspect the listener toString contents for the existence of this special token. Because
        // the token is a string literal, it is ensured to not be modified by compiled code.
        if (event === '__ngUnwrap__') {
          return eventHandler;
        }

        var allowDefaultBehavior = eventHandler(event);

        if (allowDefaultBehavior === false) {
          // TODO(tbosch): move preventDefault into event plugins...
          event.preventDefault();
          event.returnValue = false;
        }

        return undefined;
      };
    }

    var DomRendererFactory2 = /*@__PURE__*/function () {
      var DomRendererFactory2 = /*#__PURE__*/function () {
        function DomRendererFactory2(eventManager, sharedStylesHost, appId) {
          _classCallCheck(this, DomRendererFactory2);

          this.eventManager = eventManager;
          this.sharedStylesHost = sharedStylesHost;
          this.appId = appId;
          this.rendererByCompId = new Map();
          this.defaultRenderer = new DefaultDomRenderer2(eventManager);
        }

        _createClass2(DomRendererFactory2, [{
          key: "createRenderer",
          value: function createRenderer(element, type) {
            if (!element || !type) {
              return this.defaultRenderer;
            }

            switch (type.encapsulation) {
              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].Emulated:
                {
                  var renderer = this.rendererByCompId.get(type.id);

                  if (!renderer) {
                    renderer = new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type, this.appId);
                    this.rendererByCompId.set(type.id, renderer);
                  }

                  renderer.applyToHost(element);
                  return renderer;
                }

              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].Native:
              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].ShadowDom:
                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);

              default:
                {
                  if (!this.rendererByCompId.has(type.id)) {
                    var styles = flattenStyles(type.id, type.styles, []);
                    this.sharedStylesHost.addStyles(styles);
                    this.rendererByCompId.set(type.id, this.defaultRenderer);
                  }

                  return this.defaultRenderer;
                }
            }
          }
        }, {
          key: "begin",
          value: function begin() {}
        }, {
          key: "end",
          value: function end() {}
        }]);

        return DomRendererFactory2;
      }();

      DomRendererFactory2.ɵfac = function DomRendererFactory2_Factory(t) {
        return new (t || DomRendererFactory2)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](EventManager), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](DomSharedStylesHost), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"]));
      };

      DomRendererFactory2.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: DomRendererFactory2,
        factory: DomRendererFactory2.ɵfac
      });
      return DomRendererFactory2;
    }();

    var DefaultDomRenderer2 = /*#__PURE__*/function () {
      function DefaultDomRenderer2(eventManager) {
        _classCallCheck(this, DefaultDomRenderer2);

        this.eventManager = eventManager;
        this.data = Object.create(null);
      }

      _createClass2(DefaultDomRenderer2, [{
        key: "destroy",
        value: function destroy() {}
      }, {
        key: "createElement",
        value: function createElement(name, namespace) {
          if (namespace) {
            // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key
            // will result in undefined, so we just return the namespace here.
            return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);
          }

          return document.createElement(name);
        }
      }, {
        key: "createComment",
        value: function createComment(value) {
          return document.createComment(value);
        }
      }, {
        key: "createText",
        value: function createText(value) {
          return document.createTextNode(value);
        }
      }, {
        key: "appendChild",
        value: function appendChild(parent, newChild) {
          parent.appendChild(newChild);
        }
      }, {
        key: "insertBefore",
        value: function insertBefore(parent, newChild, refChild) {
          if (parent) {
            parent.insertBefore(newChild, refChild);
          }
        }
      }, {
        key: "removeChild",
        value: function removeChild(parent, oldChild) {
          if (parent) {
            parent.removeChild(oldChild);
          }
        }
      }, {
        key: "selectRootElement",
        value: function selectRootElement(selectorOrNode, preserveContent) {
          var el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) : selectorOrNode;

          if (!el) {
            throw new Error("The selector \"".concat(selectorOrNode, "\" did not match any elements"));
          }

          if (!preserveContent) {
            el.textContent = '';
          }

          return el;
        }
      }, {
        key: "parentNode",
        value: function parentNode(node) {
          return node.parentNode;
        }
      }, {
        key: "nextSibling",
        value: function nextSibling(node) {
          return node.nextSibling;
        }
      }, {
        key: "setAttribute",
        value: function setAttribute(el, name, value, namespace) {
          if (namespace) {
            name = namespace + ':' + name; // TODO(FW-811): Ivy may cause issues here because it's passing around
            // full URIs for namespaces, therefore this lookup will fail.

            var namespaceUri = NAMESPACE_URIS[namespace];

            if (namespaceUri) {
              el.setAttributeNS(namespaceUri, name, value);
            } else {
              el.setAttribute(name, value);
            }
          } else {
            el.setAttribute(name, value);
          }
        }
      }, {
        key: "removeAttribute",
        value: function removeAttribute(el, name, namespace) {
          if (namespace) {
            // TODO(FW-811): Ivy may cause issues here because it's passing around
            // full URIs for namespaces, therefore this lookup will fail.
            var namespaceUri = NAMESPACE_URIS[namespace];

            if (namespaceUri) {
              el.removeAttributeNS(namespaceUri, name);
            } else {
              // TODO(FW-811): Since ivy is passing around full URIs for namespaces
              // this could result in properties like `http://www.w3.org/2000/svg:cx="123"`,
              // which is wrong.
              el.removeAttribute("".concat(namespace, ":").concat(name));
            }
          } else {
            el.removeAttribute(name);
          }
        }
      }, {
        key: "addClass",
        value: function addClass(el, name) {
          el.classList.add(name);
        }
      }, {
        key: "removeClass",
        value: function removeClass(el, name) {
          el.classList.remove(name);
        }
      }, {
        key: "setStyle",
        value: function setStyle(el, style, value, flags) {
          if (flags & _angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererStyleFlags2"].DashCase) {
            el.style.setProperty(style, value, !!(flags & _angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererStyleFlags2"].Important) ? 'important' : '');
          } else {
            el.style[style] = value;
          }
        }
      }, {
        key: "removeStyle",
        value: function removeStyle(el, style, flags) {
          if (flags & _angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererStyleFlags2"].DashCase) {
            el.style.removeProperty(style);
          } else {
            // IE requires '' instead of null
            // see https://github.com/angular/angular/issues/7916
            el.style[style] = '';
          }
        }
      }, {
        key: "setProperty",
        value: function setProperty(el, name, value) {
          NG_DEV_MODE && checkNoSyntheticProp(name, 'property');
          el[name] = value;
        }
      }, {
        key: "setValue",
        value: function setValue(node, value) {
          node.nodeValue = value;
        }
      }, {
        key: "listen",
        value: function listen(target, event, callback) {
          NG_DEV_MODE && checkNoSyntheticProp(event, 'listener');

          if (typeof target === 'string') {
            return this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback));
          }

          return this.eventManager.addEventListener(target, event, decoratePreventDefault(callback));
        }
      }]);

      return DefaultDomRenderer2;
    }();

    var ɵ0$2 = function ɵ0$2() {
      return '@'.charCodeAt(0);
    };

    var AT_CHARCODE = /*@__PURE__*/ɵ0$2();

    function checkNoSyntheticProp(name, nameKind) {
      if (name.charCodeAt(0) === AT_CHARCODE) {
        throw new Error("Found the synthetic ".concat(nameKind, " ").concat(name, ". Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application."));
      }
    }

    var EmulatedEncapsulationDomRenderer2 = /*#__PURE__*/function (_DefaultDomRenderer) {
      _inherits(EmulatedEncapsulationDomRenderer2, _DefaultDomRenderer);

      var _super34 = _createSuper(EmulatedEncapsulationDomRenderer2);

      function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component, appId) {
        var _this62;

        _classCallCheck(this, EmulatedEncapsulationDomRenderer2);

        _this62 = _super34.call(this, eventManager);
        _this62.component = component;
        var styles = flattenStyles(appId + '-' + component.id, component.styles, []);
        sharedStylesHost.addStyles(styles);
        _this62.contentAttr = shimContentAttribute(appId + '-' + component.id);
        _this62.hostAttr = shimHostAttribute(appId + '-' + component.id);
        return _this62;
      }

      _createClass2(EmulatedEncapsulationDomRenderer2, [{
        key: "applyToHost",
        value: function applyToHost(element) {
          _get(_getPrototypeOf(EmulatedEncapsulationDomRenderer2.prototype), "setAttribute", this).call(this, element, this.hostAttr, '');
        }
      }, {
        key: "createElement",
        value: function createElement(parent, name) {
          var el = _get(_getPrototypeOf(EmulatedEncapsulationDomRenderer2.prototype), "createElement", this).call(this, parent, name);

          _get(_getPrototypeOf(EmulatedEncapsulationDomRenderer2.prototype), "setAttribute", this).call(this, el, this.contentAttr, '');

          return el;
        }
      }]);

      return EmulatedEncapsulationDomRenderer2;
    }(DefaultDomRenderer2);

    var ShadowDomRenderer = /*#__PURE__*/function (_DefaultDomRenderer2) {
      _inherits(ShadowDomRenderer, _DefaultDomRenderer2);

      var _super35 = _createSuper(ShadowDomRenderer);

      function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {
        var _this63;

        _classCallCheck(this, ShadowDomRenderer);

        _this63 = _super35.call(this, eventManager);
        _this63.sharedStylesHost = sharedStylesHost;
        _this63.hostEl = hostEl;
        _this63.component = component;

        if (component.encapsulation === _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].ShadowDom) {
          _this63.shadowRoot = hostEl.attachShadow({
            mode: 'open'
          });
        } else {
          _this63.shadowRoot = hostEl.createShadowRoot();
        }

        _this63.sharedStylesHost.addHost(_this63.shadowRoot);

        var styles = flattenStyles(component.id, component.styles, []);

        for (var i = 0; i < styles.length; i++) {
          var styleEl = document.createElement('style');
          styleEl.textContent = styles[i];

          _this63.shadowRoot.appendChild(styleEl);
        }

        return _this63;
      }

      _createClass2(ShadowDomRenderer, [{
        key: "nodeOrShadowRoot",
        value: function nodeOrShadowRoot(node) {
          return node === this.hostEl ? this.shadowRoot : node;
        }
      }, {
        key: "destroy",
        value: function destroy() {
          this.sharedStylesHost.removeHost(this.shadowRoot);
        }
      }, {
        key: "appendChild",
        value: function appendChild(parent, newChild) {
          return _get(_getPrototypeOf(ShadowDomRenderer.prototype), "appendChild", this).call(this, this.nodeOrShadowRoot(parent), newChild);
        }
      }, {
        key: "insertBefore",
        value: function insertBefore(parent, newChild, refChild) {
          return _get(_getPrototypeOf(ShadowDomRenderer.prototype), "insertBefore", this).call(this, this.nodeOrShadowRoot(parent), newChild, refChild);
        }
      }, {
        key: "removeChild",
        value: function removeChild(parent, oldChild) {
          return _get(_getPrototypeOf(ShadowDomRenderer.prototype), "removeChild", this).call(this, this.nodeOrShadowRoot(parent), oldChild);
        }
      }, {
        key: "parentNode",
        value: function parentNode(node) {
          return this.nodeOrShadowRoot(_get(_getPrototypeOf(ShadowDomRenderer.prototype), "parentNode", this).call(this, this.nodeOrShadowRoot(node)));
        }
      }]);

      return ShadowDomRenderer;
    }(DefaultDomRenderer2);

    var DomEventsPlugin = /*@__PURE__*/function () {
      var DomEventsPlugin = /*#__PURE__*/function (_EventManagerPlugin) {
        _inherits(DomEventsPlugin, _EventManagerPlugin);

        var _super36 = _createSuper(DomEventsPlugin);

        function DomEventsPlugin(doc) {
          _classCallCheck(this, DomEventsPlugin);

          return _super36.call(this, doc);
        } // This plugin should come last in the list of plugins, because it accepts all
        // events.


        _createClass2(DomEventsPlugin, [{
          key: "supports",
          value: function supports(eventName) {
            return true;
          }
        }, {
          key: "addEventListener",
          value: function addEventListener(element, eventName, handler) {
            var _this64 = this;

            element.addEventListener(eventName, handler, false);
            return function () {
              return _this64.removeEventListener(element, eventName, handler);
            };
          }
        }, {
          key: "removeEventListener",
          value: function removeEventListener(target, eventName, callback) {
            return target.removeEventListener(eventName, callback);
          }
        }]);

        return DomEventsPlugin;
      }(EventManagerPlugin);

      DomEventsPlugin.ɵfac = function DomEventsPlugin_Factory(t) {
        return new (t || DomEventsPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      };

      DomEventsPlugin.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: DomEventsPlugin,
        factory: DomEventsPlugin.ɵfac
      });
      return DomEventsPlugin;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Supported HammerJS recognizer event names.
     */


    var EVENT_NAMES = {
      // pan
      'pan': true,
      'panstart': true,
      'panmove': true,
      'panend': true,
      'pancancel': true,
      'panleft': true,
      'panright': true,
      'panup': true,
      'pandown': true,
      // pinch
      'pinch': true,
      'pinchstart': true,
      'pinchmove': true,
      'pinchend': true,
      'pinchcancel': true,
      'pinchin': true,
      'pinchout': true,
      // press
      'press': true,
      'pressup': true,
      // rotate
      'rotate': true,
      'rotatestart': true,
      'rotatemove': true,
      'rotateend': true,
      'rotatecancel': true,
      // swipe
      'swipe': true,
      'swipeleft': true,
      'swiperight': true,
      'swipeup': true,
      'swipedown': true,
      // tap
      'tap': true
    };
    /**
     * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.
     * @see `HammerGestureConfig`
     *
     * @ngModule HammerModule
     * @publicApi
     */

    var HAMMER_GESTURE_CONFIG = /*@__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('HammerGestureConfig');
    /**
     * Injection token used to provide a {@link HammerLoader} to Angular.
     *
     * @publicApi
     */

    var HAMMER_LOADER = /*@__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('HammerLoader');

    var HammerGestureConfig = /*@__PURE__*/function () {
      var HammerGestureConfig = /*#__PURE__*/function () {
        function HammerGestureConfig() {
          _classCallCheck(this, HammerGestureConfig);

          /**
           * A set of supported event names for gestures to be used in Angular.
           * Angular supports all built-in recognizers, as listed in
           * [HammerJS documentation](http://hammerjs.github.io/).
           */
          this.events = [];
          /**
           * Maps gesture event names to a set of configuration options
           * that specify overrides to the default values for specific properties.
           *
           * The key is a supported event name to be configured,
           * and the options object contains a set of properties, with override values
           * to be applied to the named recognizer event.
           * For example, to disable recognition of the rotate event, specify
           *  `{"rotate": {"enable": false}}`.
           *
           * Properties that are not present take the HammerJS default values.
           * For information about which properties are supported for which events,
           * and their allowed and default values, see
           * [HammerJS documentation](http://hammerjs.github.io/).
           *
           */

          this.overrides = {};
        }
        /**
         * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)
         * and attaches it to a given HTML element.
         * @param element The element that will recognize gestures.
         * @returns A HammerJS event-manager object.
         */


        _createClass2(HammerGestureConfig, [{
          key: "buildHammer",
          value: function buildHammer(element) {
            var mc = new Hammer(element, this.options);
            mc.get('pinch').set({
              enable: true
            });
            mc.get('rotate').set({
              enable: true
            });

            for (var eventName in this.overrides) {
              mc.get(eventName).set(this.overrides[eventName]);
            }

            return mc;
          }
        }]);

        return HammerGestureConfig;
      }();

      HammerGestureConfig.ɵfac = function HammerGestureConfig_Factory(t) {
        return new (t || HammerGestureConfig)();
      };

      HammerGestureConfig.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: HammerGestureConfig,
        factory: HammerGestureConfig.ɵfac
      });
      return HammerGestureConfig;
    }();

    var HammerGesturesPlugin = /*@__PURE__*/function () {
      var HammerGesturesPlugin = /*#__PURE__*/function (_EventManagerPlugin2) {
        _inherits(HammerGesturesPlugin, _EventManagerPlugin2);

        var _super37 = _createSuper(HammerGesturesPlugin);

        function HammerGesturesPlugin(doc, _config, console, loader) {
          var _this65;

          _classCallCheck(this, HammerGesturesPlugin);

          _this65 = _super37.call(this, doc);
          _this65._config = _config;
          _this65.console = console;
          _this65.loader = loader;
          return _this65;
        }

        _createClass2(HammerGesturesPlugin, [{
          key: "supports",
          value: function supports(eventName) {
            if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
              return false;
            }

            if (!window.Hammer && !this.loader) {
              this.console.warn("The \"".concat(eventName, "\" event cannot be bound because Hammer.JS is not ") + "loaded and no custom loader has been specified.");
              return false;
            }

            return true;
          }
        }, {
          key: "addEventListener",
          value: function addEventListener(element, eventName, handler) {
            var _this66 = this;

            var zone = this.manager.getZone();
            eventName = eventName.toLowerCase(); // If Hammer is not present but a loader is specified, we defer adding the event listener
            // until Hammer is loaded.

            if (!window.Hammer && this.loader) {
              // This `addEventListener` method returns a function to remove the added listener.
              // Until Hammer is loaded, the returned function needs to *cancel* the registration rather
              // than remove anything.
              var cancelRegistration = false;

              var deregister = function deregister() {
                cancelRegistration = true;
              };

              this.loader().then(function () {
                // If Hammer isn't actually loaded when the custom loader resolves, give up.
                if (!window.Hammer) {
                  _this66.console.warn("The custom HAMMER_LOADER completed, but Hammer.JS is not present.");

                  deregister = function deregister() {};

                  return;
                }

                if (!cancelRegistration) {
                  // Now that Hammer is loaded and the listener is being loaded for real,
                  // the deregistration function changes from canceling registration to removal.
                  deregister = _this66.addEventListener(element, eventName, handler);
                }
              })["catch"](function () {
                _this66.console.warn("The \"".concat(eventName, "\" event cannot be bound because the custom ") + "Hammer.JS loader failed.");

                deregister = function deregister() {};
              }); // Return a function that *executes* `deregister` (and not `deregister` itself) so that we
              // can change the behavior of `deregister` once the listener is added. Using a closure in
              // this way allows us to avoid any additional data structures to track listener removal.

              return function () {
                deregister();
              };
            }

            return zone.runOutsideAngular(function () {
              // Creating the manager bind events, must be done outside of angular
              var mc = _this66._config.buildHammer(element);

              var callback = function callback(eventObj) {
                zone.runGuarded(function () {
                  handler(eventObj);
                });
              };

              mc.on(eventName, callback);
              return function () {
                mc.off(eventName, callback); // destroy mc to prevent memory leak

                if (typeof mc.destroy === 'function') {
                  mc.destroy();
                }
              };
            });
          }
        }, {
          key: "isCustomEvent",
          value: function isCustomEvent(eventName) {
            return this._config.events.indexOf(eventName) > -1;
          }
        }]);

        return HammerGesturesPlugin;
      }(EventManagerPlugin);

      HammerGesturesPlugin.ɵfac = function HammerGesturesPlugin_Factory(t) {
        return new (t || HammerGesturesPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](HAMMER_GESTURE_CONFIG), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](HAMMER_LOADER, 8));
      };

      HammerGesturesPlugin.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: HammerGesturesPlugin,
        factory: HammerGesturesPlugin.ɵfac
      });
      return HammerGesturesPlugin;
    }();
    /**
     * In Ivy, support for Hammer gestures is optional, so applications must
     * import the `HammerModule` at root to turn on support. This means that
     * Hammer-specific code can be tree-shaken away if not needed.
     */


    var HAMMER_PROVIDERS__POST_R3__ = [];
    /**
     * In View Engine, support for Hammer gestures is built-in by default.
     */

    var HAMMER_PROVIDERS__PRE_R3__ = [{
      provide: EVENT_MANAGER_PLUGINS,
      useClass: HammerGesturesPlugin,
      multi: true,
      deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], HAMMER_GESTURE_CONFIG, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"], [/*@__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), HAMMER_LOADER]]
    }, {
      provide: HAMMER_GESTURE_CONFIG,
      useClass: HammerGestureConfig,
      deps: []
    }];
    var HAMMER_PROVIDERS = HAMMER_PROVIDERS__POST_R3__;

    var HammerModule = /*@__PURE__*/function () {
      var HammerModule = function HammerModule() {
        _classCallCheck(this, HammerModule);
      };

      HammerModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: HammerModule
      });
      HammerModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function HammerModule_Factory(t) {
          return new (t || HammerModule)();
        },
        providers: HAMMER_PROVIDERS__PRE_R3__
      });
      return HammerModule;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Defines supported modifiers for key events.
     */


    var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
    var DOM_KEY_LOCATION_NUMPAD = 3; // Map to convert some key or keyIdentifier values to what will be returned by getEventKey

    var _keyMap = {
      // The following values are here for cross-browser compatibility and to match the W3C standard
      // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
      '\b': 'Backspace',
      '\t': 'Tab',
      '\x7F': 'Delete',
      '\x1B': 'Escape',
      'Del': 'Delete',
      'Esc': 'Escape',
      'Left': 'ArrowLeft',
      'Right': 'ArrowRight',
      'Up': 'ArrowUp',
      'Down': 'ArrowDown',
      'Menu': 'ContextMenu',
      'Scroll': 'ScrollLock',
      'Win': 'OS'
    }; // There is a bug in Chrome for numeric keypad keys:
    // https://code.google.com/p/chromium/issues/detail?id=155654
    // 1, 2, 3 ... are reported as A, B, C ...

    var _chromeNumKeyPadMap = {
      'A': '1',
      'B': '2',
      'C': '3',
      'D': '4',
      'E': '5',
      'F': '6',
      'G': '7',
      'H': '8',
      'I': '9',
      'J': '*',
      'K': '+',
      'M': '-',
      'N': '.',
      'O': '/',
      '\x60': '0',
      '\x90': 'NumLock'
    };

    var ɵ0$3 = function ɵ0$3(event) {
      return event.altKey;
    },
        ɵ1 = function ɵ1(event) {
      return event.ctrlKey;
    },
        ɵ2 = function ɵ2(event) {
      return event.metaKey;
    },
        ɵ3 = function ɵ3(event) {
      return event.shiftKey;
    };
    /**
     * Retrieves modifiers from key-event objects.
     */


    var MODIFIER_KEY_GETTERS = {
      'alt': ɵ0$3,
      'control': ɵ1,
      'meta': ɵ2,
      'shift': ɵ3
    };

    var KeyEventsPlugin = /*@__PURE__*/function () {
      var KeyEventsPlugin = /*#__PURE__*/function (_EventManagerPlugin3) {
        _inherits(KeyEventsPlugin, _EventManagerPlugin3);

        var _super38 = _createSuper(KeyEventsPlugin);

        /**
         * Initializes an instance of the browser plug-in.
         * @param doc The document in which key events will be detected.
         */
        function KeyEventsPlugin(doc) {
          _classCallCheck(this, KeyEventsPlugin);

          return _super38.call(this, doc);
        }
        /**
         * Reports whether a named key event is supported.
         * @param eventName The event name to query.
         * @return True if the named key event is supported.
         */


        _createClass2(KeyEventsPlugin, [{
          key: "supports",
          value: function supports(eventName) {
            return KeyEventsPlugin.parseEventName(eventName) != null;
          }
          /**
           * Registers a handler for a specific element and key event.
           * @param element The HTML element to receive event notifications.
           * @param eventName The name of the key event to listen for.
           * @param handler A function to call when the notification occurs. Receives the
           * event object as an argument.
           * @returns The key event that was registered.
           */

        }, {
          key: "addEventListener",
          value: function addEventListener(element, eventName, handler) {
            var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
            var outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
            return this.manager.getZone().runOutsideAngular(function () {
              return Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
            });
          }
        }], [{
          key: "parseEventName",
          value: function parseEventName(eventName) {
            var parts = eventName.toLowerCase().split('.');
            var domEventName = parts.shift();

            if (parts.length === 0 || !(domEventName === 'keydown' || domEventName === 'keyup')) {
              return null;
            }

            var key = KeyEventsPlugin._normalizeKey(parts.pop());

            var fullKey = '';
            MODIFIER_KEYS.forEach(function (modifierName) {
              var index = parts.indexOf(modifierName);

              if (index > -1) {
                parts.splice(index, 1);
                fullKey += modifierName + '.';
              }
            });
            fullKey += key;

            if (parts.length != 0 || key.length === 0) {
              // returning null instead of throwing to let another plugin process the event
              return null;
            } // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.
            //       The code must remain in the `result['domEventName']` form.
            // return {domEventName, fullKey};


            var result = {};
            result['domEventName'] = domEventName;
            result['fullKey'] = fullKey;
            return result;
          }
        }, {
          key: "getEventFullKey",
          value: function getEventFullKey(event) {
            var fullKey = '';
            var key = getEventKey(event);
            key = key.toLowerCase();

            if (key === ' ') {
              key = 'space'; // for readability
            } else if (key === '.') {
              key = 'dot'; // because '.' is used as a separator in event names
            }

            MODIFIER_KEYS.forEach(function (modifierName) {
              if (modifierName != key) {
                var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];

                if (modifierGetter(event)) {
                  fullKey += modifierName + '.';
                }
              }
            });
            fullKey += key;
            return fullKey;
          }
          /**
           * Configures a handler callback for a key event.
           * @param fullKey The event name that combines all simultaneous keystrokes.
           * @param handler The function that responds to the key event.
           * @param zone The zone in which the event occurred.
           * @returns A callback function.
           */

        }, {
          key: "eventCallback",
          value: function eventCallback(fullKey, handler, zone) {
            return function (event
            /** TODO #9100 */
            ) {
              if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
                zone.runGuarded(function () {
                  return handler(event);
                });
              }
            };
          }
          /** @internal */

        }, {
          key: "_normalizeKey",
          value: function _normalizeKey(keyName) {
            // TODO: switch to a Map if the mapping grows too much
            switch (keyName) {
              case 'esc':
                return 'escape';

              default:
                return keyName;
            }
          }
        }]);

        return KeyEventsPlugin;
      }(EventManagerPlugin);

      KeyEventsPlugin.ɵfac = function KeyEventsPlugin_Factory(t) {
        return new (t || KeyEventsPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      };

      KeyEventsPlugin.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: KeyEventsPlugin,
        factory: KeyEventsPlugin.ɵfac
      });
      return KeyEventsPlugin;
    }();

    function getEventKey(event) {
      var key = event.key;

      if (key == null) {
        key = event.keyIdentifier; // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
        // Safari cf
        // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces

        if (key == null) {
          return 'Unidentified';
        }

        if (key.startsWith('U+')) {
          key = String.fromCharCode(parseInt(key.substring(2), 16));

          if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
            // There is a bug in Chrome for numeric keypad keys:
            // https://code.google.com/p/chromium/issues/detail?id=155654
            // 1, 2, 3 ... are reported as A, B, C ...
            key = _chromeNumKeyPadMap[key];
          }
        }
      }

      return _keyMap[key] || key;
    }

    var DomSanitizer = /*@__PURE__*/function () {
      var DomSanitizer = function DomSanitizer() {
        _classCallCheck(this, DomSanitizer);
      };

      DomSanitizer.ɵfac = function DomSanitizer_Factory(t) {
        return new (t || DomSanitizer)();
      };

      DomSanitizer.ɵprov = /*@__PURE__*/Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function DomSanitizer_Factory() {
          return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(DomSanitizerImpl);
        },
        token: DomSanitizer,
        providedIn: "root"
      });
      return DomSanitizer;
    }();

    function domSanitizerImplFactory(injector) {
      return new DomSanitizerImpl(injector.get(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
    }

    var DomSanitizerImpl = /*@__PURE__*/function () {
      var DomSanitizerImpl = /*#__PURE__*/function (_DomSanitizer) {
        _inherits(DomSanitizerImpl, _DomSanitizer);

        var _super39 = _createSuper(DomSanitizerImpl);

        function DomSanitizerImpl(_doc) {
          var _this67;

          _classCallCheck(this, DomSanitizerImpl);

          _this67 = _super39.call(this);
          _this67._doc = _doc;
          return _this67;
        }

        _createClass2(DomSanitizerImpl, [{
          key: "sanitize",
          value: function sanitize(ctx, value) {
            if (value == null) return null;

            switch (ctx) {
              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].NONE:
                return value;

              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].HTML:
                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "HTML"
                /* Html */
                )) {
                  return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }

                return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵ_sanitizeHtml"])(this._doc, String(value));

              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].STYLE:
                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "Style"
                /* Style */
                )) {
                  return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }

                return value;

              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].SCRIPT:
                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "Script"
                /* Script */
                )) {
                  return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }

                throw new Error('unsafe value used in a script context');

              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].URL:
                var type = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵgetSanitizationBypassType"])(value);

                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "URL"
                /* Url */
                )) {
                  return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }

                return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵ_sanitizeUrl"])(String(value));

              case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].RESOURCE_URL:
                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "ResourceURL"
                /* ResourceUrl */
                )) {
                  return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }

                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');

              default:
                throw new Error("Unexpected SecurityContext ".concat(ctx, " (see http://g.co/ng/security#xss)"));
            }
          }
        }, {
          key: "bypassSecurityTrustHtml",
          value: function bypassSecurityTrustHtml(value) {
            return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustHtml"])(value);
          }
        }, {
          key: "bypassSecurityTrustStyle",
          value: function bypassSecurityTrustStyle(value) {
            return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustStyle"])(value);
          }
        }, {
          key: "bypassSecurityTrustScript",
          value: function bypassSecurityTrustScript(value) {
            return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustScript"])(value);
          }
        }, {
          key: "bypassSecurityTrustUrl",
          value: function bypassSecurityTrustUrl(value) {
            return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustUrl"])(value);
          }
        }, {
          key: "bypassSecurityTrustResourceUrl",
          value: function bypassSecurityTrustResourceUrl(value) {
            return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustResourceUrl"])(value);
          }
        }]);

        return DomSanitizerImpl;
      }(DomSanitizer);

      DomSanitizerImpl.ɵfac = function DomSanitizerImpl_Factory(t) {
        return new (t || DomSanitizerImpl)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      };

      DomSanitizerImpl.ɵprov = /*@__PURE__*/Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: function DomSanitizerImpl_Factory() {
          return domSanitizerImplFactory(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["INJECTOR"]));
        },
        token: DomSanitizerImpl,
        providedIn: "root"
      });
      return DomSanitizerImpl;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function initDomAdapter() {
      BrowserDomAdapter.makeCurrent();
      BrowserGetTestability.init();
    }

    function errorHandler() {
      return new _angular_core__WEBPACK_IMPORTED_MODULE_1__["ErrorHandler"]();
    }

    function _document() {
      // Tell ivy about the global document
      Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetDocument"])(document);
      return document;
    }

    var ɵ0$4 = _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵPLATFORM_BROWSER_ID"];
    var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{
      provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_ID"],
      useValue: ɵ0$4
    }, {
      provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_INITIALIZER"],
      useValue: initDomAdapter,
      multi: true
    }, {
      provide: _angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],
      useFactory: _document,
      deps: []
    }];
    var BROWSER_SANITIZATION_PROVIDERS__PRE_R3__ = [{
      provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Sanitizer"],
      useExisting: DomSanitizer
    }, {
      provide: DomSanitizer,
      useClass: DomSanitizerImpl,
      deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
    }];
    var BROWSER_SANITIZATION_PROVIDERS__POST_R3__ = [];
    /**
     * @security Replacing built-in sanitization providers exposes the application to XSS risks.
     * Attacker-controlled data introduced by an unsanitized provider could expose your
     * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
     * @publicApi
     */

    var BROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS__POST_R3__;
    /**
     * A factory function that returns a `PlatformRef` instance associated with browser service
     * providers.
     *
     * @publicApi
     */

    var platformBrowser = /*@__PURE__*/Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["createPlatformFactory"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["platformCore"], 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
    var BROWSER_MODULE_PROVIDERS = [BROWSER_SANITIZATION_PROVIDERS, {
      provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵINJECTOR_SCOPE"],
      useValue: 'root'
    }, {
      provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ErrorHandler"],
      useFactory: errorHandler,
      deps: []
    }, {
      provide: EVENT_MANAGER_PLUGINS,
      useClass: DomEventsPlugin,
      multi: true,
      deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_ID"]]
    }, {
      provide: EVENT_MANAGER_PLUGINS,
      useClass: KeyEventsPlugin,
      multi: true,
      deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
    }, HAMMER_PROVIDERS, {
      provide: DomRendererFactory2,
      useClass: DomRendererFactory2,
      deps: [EventManager, DomSharedStylesHost, _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"]]
    }, {
      provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererFactory2"],
      useExisting: DomRendererFactory2
    }, {
      provide: SharedStylesHost,
      useExisting: DomSharedStylesHost
    }, {
      provide: DomSharedStylesHost,
      useClass: DomSharedStylesHost,
      deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
    }, {
      provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Testability"],
      useClass: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Testability"],
      deps: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]]
    }, {
      provide: EventManager,
      useClass: EventManager,
      deps: [EVENT_MANAGER_PLUGINS, _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]]
    }, ELEMENT_PROBE_PROVIDERS];

    var BrowserModule = /*@__PURE__*/function () {
      var BrowserModule = /*#__PURE__*/function () {
        function BrowserModule(parentModule) {
          _classCallCheck(this, BrowserModule);

          if (parentModule) {
            throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
          }
        }
        /**
         * Configures a browser-based app to transition from a server-rendered app, if
         * one is present on the page.
         *
         * @param params An object containing an identifier for the app to transition.
         * The ID must match between the client and server versions of the app.
         * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.
         */


        _createClass2(BrowserModule, null, [{
          key: "withServerTransition",
          value: function withServerTransition(params) {
            return {
              ngModule: BrowserModule,
              providers: [{
                provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"],
                useValue: params.appId
              }, {
                provide: TRANSITION_ID,
                useExisting: _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"]
              }, SERVER_TRANSITION_PROVIDERS]
            };
          }
        }]);

        return BrowserModule;
      }();

      BrowserModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: BrowserModule
      });
      BrowserModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function BrowserModule_Factory(t) {
          return new (t || BrowserModule)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](BrowserModule, 12));
        },
        providers: BROWSER_MODULE_PROVIDERS,
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationModule"]]
      });
      return BrowserModule;
    }();
    /*@__PURE__*/


    (function () {
      (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](BrowserModule, {
        exports: function exports() {
          return [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationModule"]];
        }
      });
    })();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Factory to create a `Meta` service instance for the current DOM document.
     */


    function createMeta() {
      return new Meta(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
    }

    var Meta = /*@__PURE__*/function () {
      var Meta = /*#__PURE__*/function () {
        function Meta(_doc) {
          _classCallCheck(this, Meta);

          this._doc = _doc;
          this._dom = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])();
        }
        /**
         * Retrieves or creates a specific `<meta>` tag element in the current HTML document.
         * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
         * values in the provided tag definition, and verifies that all other attribute values are equal.
         * If an existing element is found, it is returned and is not modified in any way.
         * @param tag The definition of a `<meta>` element to match or create.
         * @param forceCreation True to create a new element without checking whether one already exists.
         * @returns The existing element with the same attributes and values if found,
         * the new element if no match is found, or `null` if the tag parameter is not defined.
         */


        _createClass2(Meta, [{
          key: "addTag",
          value: function addTag(tag) {
            var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            if (!tag) return null;
            return this._getOrCreateElement(tag, forceCreation);
          }
          /**
           * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.
           * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
           * values in the provided tag definition, and verifies that all other attribute values are equal.
           * @param tags An array of tag definitions to match or create.
           * @param forceCreation True to create new elements without checking whether they already exist.
           * @returns The matching elements if found, or the new elements.
           */

        }, {
          key: "addTags",
          value: function addTags(tags) {
            var _this68 = this;

            var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            if (!tags) return [];
            return tags.reduce(function (result, tag) {
              if (tag) {
                result.push(_this68._getOrCreateElement(tag, forceCreation));
              }

              return result;
            }, []);
          }
          /**
           * Retrieves a `<meta>` tag element in the current HTML document.
           * @param attrSelector The tag attribute and value to match against, in the format
           * `"tag_attribute='value string'"`.
           * @returns The matching element, if any.
           */

        }, {
          key: "getTag",
          value: function getTag(attrSelector) {
            if (!attrSelector) return null;
            return this._doc.querySelector("meta[".concat(attrSelector, "]")) || null;
          }
          /**
           * Retrieves a set of `<meta>` tag elements in the current HTML document.
           * @param attrSelector The tag attribute and value to match against, in the format
           * `"tag_attribute='value string'"`.
           * @returns The matching elements, if any.
           */

        }, {
          key: "getTags",
          value: function getTags(attrSelector) {
            if (!attrSelector) return [];

            var list
            /*NodeList*/
            = this._doc.querySelectorAll("meta[".concat(attrSelector, "]"));

            return list ? [].slice.call(list) : [];
          }
          /**
           * Modifies an existing `<meta>` tag element in the current HTML document.
           * @param tag The tag description with which to replace the existing tag content.
           * @param selector A tag attribute and value to match against, to identify
           * an existing tag. A string in the format `"tag_attribute=`value string`"`.
           * If not supplied, matches a tag with the same `name` or `property` attribute value as the
           * replacement tag.
           * @return The modified element.
           */

        }, {
          key: "updateTag",
          value: function updateTag(tag, selector) {
            if (!tag) return null;
            selector = selector || this._parseSelector(tag);
            var meta = this.getTag(selector);

            if (meta) {
              return this._setMetaElementAttributes(tag, meta);
            }

            return this._getOrCreateElement(tag, true);
          }
          /**
           * Removes an existing `<meta>` tag element from the current HTML document.
           * @param attrSelector A tag attribute and value to match against, to identify
           * an existing tag. A string in the format `"tag_attribute=`value string`"`.
           */

        }, {
          key: "removeTag",
          value: function removeTag(attrSelector) {
            this.removeTagElement(this.getTag(attrSelector));
          }
          /**
           * Removes an existing `<meta>` tag element from the current HTML document.
           * @param meta The tag definition to match against to identify an existing tag.
           */

        }, {
          key: "removeTagElement",
          value: function removeTagElement(meta) {
            if (meta) {
              this._dom.remove(meta);
            }
          }
        }, {
          key: "_getOrCreateElement",
          value: function _getOrCreateElement(meta) {
            var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (!forceCreation) {
              var selector = this._parseSelector(meta);

              var elem = this.getTag(selector); // It's allowed to have multiple elements with the same name so it's not enough to
              // just check that element with the same name already present on the page. We also need to
              // check if element has tag attributes

              if (elem && this._containsAttributes(meta, elem)) return elem;
            }

            var element = this._dom.createElement('meta');

            this._setMetaElementAttributes(meta, element);

            var head = this._doc.getElementsByTagName('head')[0];

            head.appendChild(element);
            return element;
          }
        }, {
          key: "_setMetaElementAttributes",
          value: function _setMetaElementAttributes(tag, el) {
            Object.keys(tag).forEach(function (prop) {
              return el.setAttribute(prop, tag[prop]);
            });
            return el;
          }
        }, {
          key: "_parseSelector",
          value: function _parseSelector(tag) {
            var attr = tag.name ? 'name' : 'property';
            return "".concat(attr, "=\"").concat(tag[attr], "\"");
          }
        }, {
          key: "_containsAttributes",
          value: function _containsAttributes(tag, elem) {
            return Object.keys(tag).every(function (key) {
              return elem.getAttribute(key) === tag[key];
            });
          }
        }]);

        return Meta;
      }();

      Meta.ɵfac = function Meta_Factory(t) {
        return new (t || Meta)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      };

      Meta.ɵprov = /*@__PURE__*/Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: createMeta,
        token: Meta,
        providedIn: "root"
      });
      return Meta;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Factory to create Title service.
     */


    function createTitle() {
      return new Title(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
    }

    var Title = /*@__PURE__*/function () {
      var Title = /*#__PURE__*/function () {
        function Title(_doc) {
          _classCallCheck(this, Title);

          this._doc = _doc;
        }
        /**
         * Get the title of the current HTML document.
         */


        _createClass2(Title, [{
          key: "getTitle",
          value: function getTitle() {
            return this._doc.title;
          }
          /**
           * Set the title of the current HTML document.
           * @param newTitle
           */

        }, {
          key: "setTitle",
          value: function setTitle(newTitle) {
            this._doc.title = newTitle || '';
          }
        }]);

        return Title;
      }();

      Title.ɵfac = function Title_Factory(t) {
        return new (t || Title)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
      };

      Title.ɵprov = /*@__PURE__*/Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({
        factory: createTitle,
        token: Title,
        providedIn: "root"
      });
      return Title;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var win = typeof window !== 'undefined' && window || {};
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    var ChangeDetectionPerfRecord = function ChangeDetectionPerfRecord(msPerTick, numTicks) {
      _classCallCheck(this, ChangeDetectionPerfRecord);

      this.msPerTick = msPerTick;
      this.numTicks = numTicks;
    };
    /**
     * Entry point for all Angular profiling-related debug tools. This object
     * corresponds to the `ng.profiler` in the dev console.
     */


    var AngularProfiler = /*#__PURE__*/function () {
      function AngularProfiler(ref) {
        _classCallCheck(this, AngularProfiler);

        this.appRef = ref.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]);
      } // tslint:disable:no-console

      /**
       * Exercises change detection in a loop and then prints the average amount of
       * time in milliseconds how long a single round of change detection takes for
       * the current state of the UI. It runs a minimum of 5 rounds for a minimum
       * of 500 milliseconds.
       *
       * Optionally, a user may pass a `config` parameter containing a map of
       * options. Supported options are:
       *
       * `record` (boolean) - causes the profiler to record a CPU profile while
       * it exercises the change detector. Example:
       *
       * ```
       * ng.profiler.timeChangeDetection({record: true})
       * ```
       */


      _createClass2(AngularProfiler, [{
        key: "timeChangeDetection",
        value: function timeChangeDetection(config) {
          var record = config && config['record'];
          var profileName = 'Change Detection'; // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened

          var isProfilerAvailable = win.console.profile != null;

          if (record && isProfilerAvailable) {
            win.console.profile(profileName);
          }

          var start = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().performanceNow();
          var numTicks = 0;

          while (numTicks < 5 || Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().performanceNow() - start < 500) {
            this.appRef.tick();
            numTicks++;
          }

          var end = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().performanceNow();

          if (record && isProfilerAvailable) {
            win.console.profileEnd(profileName);
          }

          var msPerTick = (end - start) / numTicks;
          win.console.log("ran ".concat(numTicks, " change detection cycles"));
          win.console.log("".concat(msPerTick.toFixed(2), " ms per check"));
          return new ChangeDetectionPerfRecord(msPerTick, numTicks);
        }
      }]);

      return AngularProfiler;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    var PROFILER_GLOBAL_NAME = 'profiler';
    /**
     * Enabled Angular debug tools that are accessible via your browser's
     * developer console.
     *
     * Usage:
     *
     * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
     * 1. Type `ng.` (usually the console will show auto-complete suggestion)
     * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
     *    then hit Enter.
     *
     * @publicApi
     */

    function enableDebugTools(ref) {
      exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));
      return ref;
    }
    /**
     * Disables Angular tools.
     *
     * @publicApi
     */


    function disableDebugTools() {
      exportNgVar(PROFILER_GLOBAL_NAME, null);
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */


    function escapeHtml(text) {
      var escapedText = {
        '&': '&a;',
        '"': '&q;',
        '\'': '&s;',
        '<': '&l;',
        '>': '&g;'
      };
      return text.replace(/[&"'<>]/g, function (s) {
        return escapedText[s];
      });
    }

    function unescapeHtml(text) {
      var unescapedText = {
        '&a;': '&',
        '&q;': '"',
        '&s;': '\'',
        '&l;': '<',
        '&g;': '>'
      };
      return text.replace(/&[^;]+;/g, function (s) {
        return unescapedText[s];
      });
    }
    /**
     * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.
     *
     * Example:
     *
     * ```
     * const COUNTER_KEY = makeStateKey<number>('counter');
     * let value = 10;
     *
     * transferState.set(COUNTER_KEY, value);
     * ```
     *
     * @publicApi
     */


    function makeStateKey(key) {
      return key;
    }

    var TransferState = /*@__PURE__*/function () {
      var TransferState = /*#__PURE__*/function () {
        function TransferState() {
          _classCallCheck(this, TransferState);

          this.store = {};
          this.onSerializeCallbacks = {};
        }
        /** @internal */


        _createClass2(TransferState, [{
          key: "get",

          /**
           * Get the value corresponding to a key. Return `defaultValue` if key is not found.
           */
          value: function get(key, defaultValue) {
            return this.store[key] !== undefined ? this.store[key] : defaultValue;
          }
          /**
           * Set the value corresponding to a key.
           */

        }, {
          key: "set",
          value: function set(key, value) {
            this.store[key] = value;
          }
          /**
           * Remove a key from the store.
           */

        }, {
          key: "remove",
          value: function remove(key) {
            delete this.store[key];
          }
          /**
           * Test whether a key exists in the store.
           */

        }, {
          key: "hasKey",
          value: function hasKey(key) {
            return this.store.hasOwnProperty(key);
          }
          /**
           * Register a callback to provide the value for a key when `toJson` is called.
           */

        }, {
          key: "onSerialize",
          value: function onSerialize(key, callback) {
            this.onSerializeCallbacks[key] = callback;
          }
          /**
           * Serialize the current state of the store to JSON.
           */

        }, {
          key: "toJson",
          value: function toJson() {
            // Call the onSerialize callbacks and put those values into the store.
            for (var key in this.onSerializeCallbacks) {
              if (this.onSerializeCallbacks.hasOwnProperty(key)) {
                try {
                  this.store[key] = this.onSerializeCallbacks[key]();
                } catch (e) {
                  console.warn('Exception in onSerialize callback: ', e);
                }
              }
            }

            return JSON.stringify(this.store);
          }
        }], [{
          key: "init",
          value: function init(initState) {
            var transferState = new TransferState();
            transferState.store = initState;
            return transferState;
          }
        }]);

        return TransferState;
      }();

      TransferState.ɵfac = function TransferState_Factory(t) {
        return new (t || TransferState)();
      };

      TransferState.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: TransferState,
        factory: TransferState.ɵfac
      });
      return TransferState;
    }();

    function initTransferState(doc, appId) {
      // Locate the script tag with the JSON data transferred from the server.
      // The id of the script tag is set to the Angular appId + 'state'.
      var script = doc.getElementById(appId + '-state');
      var initialState = {};

      if (script && script.textContent) {
        try {
          initialState = JSON.parse(unescapeHtml(script.textContent));
        } catch (e) {
          console.warn('Exception while restoring TransferState for app ' + appId, e);
        }
      }

      return TransferState.init(initialState);
    }

    var BrowserTransferStateModule = /*@__PURE__*/function () {
      var BrowserTransferStateModule = function BrowserTransferStateModule() {
        _classCallCheck(this, BrowserTransferStateModule);
      };

      BrowserTransferStateModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: BrowserTransferStateModule
      });
      BrowserTransferStateModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function BrowserTransferStateModule_Factory(t) {
          return new (t || BrowserTransferStateModule)();
        },
        providers: [{
          provide: TransferState,
          useFactory: initTransferState,
          deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"]]
        }]
      });
      return BrowserTransferStateModule;
    }();
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Predicates for use with {@link DebugElement}'s query functions.
     *
     * @publicApi
     */


    var By = /*#__PURE__*/function () {
      function By() {
        _classCallCheck(this, By);
      }

      _createClass2(By, null, [{
        key: "all",

        /**
         * Match all nodes.
         *
         * @usageNotes
         * ### Example
         *
         * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
         */
        value: function all() {
          return function () {
            return true;
          };
        }
        /**
         * Match elements by the given CSS selector.
         *
         * @usageNotes
         * ### Example
         *
         * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
         */

      }, {
        key: "css",
        value: function css(selector) {
          return function (debugElement) {
            return debugElement.nativeElement != null ? elementMatches(debugElement.nativeElement, selector) : false;
          };
        }
        /**
         * Match nodes that have the given directive present.
         *
         * @usageNotes
         * ### Example
         *
         * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
         */

      }, {
        key: "directive",
        value: function directive(type) {
          return function (debugNode) {
            return debugNode.providerTokens.indexOf(type) !== -1;
          };
        }
      }]);

      return By;
    }();

    function elementMatches(n, selector) {
      if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().isElementNode(n)) {
        return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
      }

      return false;
    }
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @publicApi
     */


    var VERSION = /*@__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Version"]('10.0.9');
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    // This file only reexports content of the `src` folder. Keep it that way.

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Generated bundle index. Do not edit.
     */
    //# sourceMappingURL=platform-browser.js.map

    /***/
  },

  /***/
  "./node_modules/rxjs/_esm2015/index.js":
  /*!*********************************************!*\
    !*** ./node_modules/rxjs/_esm2015/index.js ***!
    \*********************************************/

  /*! exports provided: Observable, ConnectableObservable, GroupedObservable, observable, Subject, BehaviorSubject, ReplaySubject, AsyncSubject, asapScheduler, asyncScheduler, queueScheduler, animationFrameScheduler, VirtualTimeScheduler, VirtualAction, Scheduler, Subscription, Subscriber, Notification, NotificationKind, pipe, noop, identity, isObservable, ArgumentOutOfRangeError, EmptyError, ObjectUnsubscribedError, UnsubscriptionError, TimeoutError, bindCallback, bindNodeCallback, combineLatest, concat, defer, empty, forkJoin, from, fromEvent, fromEventPattern, generate, iif, interval, merge, never, of, onErrorResumeNext, pairs, partition, race, range, throwError, timer, using, zip, scheduled, EMPTY, NEVER, config */

  /***/
  function node_modulesRxjs_esm2015IndexJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony import */


    var _internal_Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./internal/Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Observable", function () {
      return _internal_Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"];
    });
    /* harmony import */


    var _internal_observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./internal/observable/ConnectableObservable */
    "./node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ConnectableObservable", function () {
      return _internal_observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_1__["ConnectableObservable"];
    });
    /* harmony import */


    var _internal_operators_groupBy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./internal/operators/groupBy */
    "./node_modules/rxjs/_esm2015/internal/operators/groupBy.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "GroupedObservable", function () {
      return _internal_operators_groupBy__WEBPACK_IMPORTED_MODULE_2__["GroupedObservable"];
    });
    /* harmony import */


    var _internal_symbol_observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./internal/symbol/observable */
    "./node_modules/rxjs/_esm2015/internal/symbol/observable.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "observable", function () {
      return _internal_symbol_observable__WEBPACK_IMPORTED_MODULE_3__["observable"];
    });
    /* harmony import */


    var _internal_Subject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./internal/Subject */
    "./node_modules/rxjs/_esm2015/internal/Subject.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Subject", function () {
      return _internal_Subject__WEBPACK_IMPORTED_MODULE_4__["Subject"];
    });
    /* harmony import */


    var _internal_BehaviorSubject__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./internal/BehaviorSubject */
    "./node_modules/rxjs/_esm2015/internal/BehaviorSubject.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "BehaviorSubject", function () {
      return _internal_BehaviorSubject__WEBPACK_IMPORTED_MODULE_5__["BehaviorSubject"];
    });
    /* harmony import */


    var _internal_ReplaySubject__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./internal/ReplaySubject */
    "./node_modules/rxjs/_esm2015/internal/ReplaySubject.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ReplaySubject", function () {
      return _internal_ReplaySubject__WEBPACK_IMPORTED_MODULE_6__["ReplaySubject"];
    });
    /* harmony import */


    var _internal_AsyncSubject__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ./internal/AsyncSubject */
    "./node_modules/rxjs/_esm2015/internal/AsyncSubject.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "AsyncSubject", function () {
      return _internal_AsyncSubject__WEBPACK_IMPORTED_MODULE_7__["AsyncSubject"];
    });
    /* harmony import */


    var _internal_scheduler_asap__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ./internal/scheduler/asap */
    "./node_modules/rxjs/_esm2015/internal/scheduler/asap.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "asapScheduler", function () {
      return _internal_scheduler_asap__WEBPACK_IMPORTED_MODULE_8__["asap"];
    });
    /* harmony import */


    var _internal_scheduler_async__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ./internal/scheduler/async */
    "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "asyncScheduler", function () {
      return _internal_scheduler_async__WEBPACK_IMPORTED_MODULE_9__["async"];
    });
    /* harmony import */


    var _internal_scheduler_queue__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ./internal/scheduler/queue */
    "./node_modules/rxjs/_esm2015/internal/scheduler/queue.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "queueScheduler", function () {
      return _internal_scheduler_queue__WEBPACK_IMPORTED_MODULE_10__["queue"];
    });
    /* harmony import */


    var _internal_scheduler_animationFrame__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ./internal/scheduler/animationFrame */
    "./node_modules/rxjs/_esm2015/internal/scheduler/animationFrame.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "animationFrameScheduler", function () {
      return _internal_scheduler_animationFrame__WEBPACK_IMPORTED_MODULE_11__["animationFrame"];
    });
    /* harmony import */


    var _internal_scheduler_VirtualTimeScheduler__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! ./internal/scheduler/VirtualTimeScheduler */
    "./node_modules/rxjs/_esm2015/internal/scheduler/VirtualTimeScheduler.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "VirtualTimeScheduler", function () {
      return _internal_scheduler_VirtualTimeScheduler__WEBPACK_IMPORTED_MODULE_12__["VirtualTimeScheduler"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "VirtualAction", function () {
      return _internal_scheduler_VirtualTimeScheduler__WEBPACK_IMPORTED_MODULE_12__["VirtualAction"];
    });
    /* harmony import */


    var _internal_Scheduler__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! ./internal/Scheduler */
    "./node_modules/rxjs/_esm2015/internal/Scheduler.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Scheduler", function () {
      return _internal_Scheduler__WEBPACK_IMPORTED_MODULE_13__["Scheduler"];
    });
    /* harmony import */


    var _internal_Subscription__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
    /*! ./internal/Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Subscription", function () {
      return _internal_Subscription__WEBPACK_IMPORTED_MODULE_14__["Subscription"];
    });
    /* harmony import */


    var _internal_Subscriber__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
    /*! ./internal/Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Subscriber", function () {
      return _internal_Subscriber__WEBPACK_IMPORTED_MODULE_15__["Subscriber"];
    });
    /* harmony import */


    var _internal_Notification__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
    /*! ./internal/Notification */
    "./node_modules/rxjs/_esm2015/internal/Notification.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "Notification", function () {
      return _internal_Notification__WEBPACK_IMPORTED_MODULE_16__["Notification"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "NotificationKind", function () {
      return _internal_Notification__WEBPACK_IMPORTED_MODULE_16__["NotificationKind"];
    });
    /* harmony import */


    var _internal_util_pipe__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
    /*! ./internal/util/pipe */
    "./node_modules/rxjs/_esm2015/internal/util/pipe.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "pipe", function () {
      return _internal_util_pipe__WEBPACK_IMPORTED_MODULE_17__["pipe"];
    });
    /* harmony import */


    var _internal_util_noop__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
    /*! ./internal/util/noop */
    "./node_modules/rxjs/_esm2015/internal/util/noop.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "noop", function () {
      return _internal_util_noop__WEBPACK_IMPORTED_MODULE_18__["noop"];
    });
    /* harmony import */


    var _internal_util_identity__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
    /*! ./internal/util/identity */
    "./node_modules/rxjs/_esm2015/internal/util/identity.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "identity", function () {
      return _internal_util_identity__WEBPACK_IMPORTED_MODULE_19__["identity"];
    });
    /* harmony import */


    var _internal_util_isObservable__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
    /*! ./internal/util/isObservable */
    "./node_modules/rxjs/_esm2015/internal/util/isObservable.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "isObservable", function () {
      return _internal_util_isObservable__WEBPACK_IMPORTED_MODULE_20__["isObservable"];
    });
    /* harmony import */


    var _internal_util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
    /*! ./internal/util/ArgumentOutOfRangeError */
    "./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ArgumentOutOfRangeError", function () {
      return _internal_util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_21__["ArgumentOutOfRangeError"];
    });
    /* harmony import */


    var _internal_util_EmptyError__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
    /*! ./internal/util/EmptyError */
    "./node_modules/rxjs/_esm2015/internal/util/EmptyError.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "EmptyError", function () {
      return _internal_util_EmptyError__WEBPACK_IMPORTED_MODULE_22__["EmptyError"];
    });
    /* harmony import */


    var _internal_util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(
    /*! ./internal/util/ObjectUnsubscribedError */
    "./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ObjectUnsubscribedError", function () {
      return _internal_util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_23__["ObjectUnsubscribedError"];
    });
    /* harmony import */


    var _internal_util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(
    /*! ./internal/util/UnsubscriptionError */
    "./node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "UnsubscriptionError", function () {
      return _internal_util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_24__["UnsubscriptionError"];
    });
    /* harmony import */


    var _internal_util_TimeoutError__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(
    /*! ./internal/util/TimeoutError */
    "./node_modules/rxjs/_esm2015/internal/util/TimeoutError.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "TimeoutError", function () {
      return _internal_util_TimeoutError__WEBPACK_IMPORTED_MODULE_25__["TimeoutError"];
    });
    /* harmony import */


    var _internal_observable_bindCallback__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(
    /*! ./internal/observable/bindCallback */
    "./node_modules/rxjs/_esm2015/internal/observable/bindCallback.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "bindCallback", function () {
      return _internal_observable_bindCallback__WEBPACK_IMPORTED_MODULE_26__["bindCallback"];
    });
    /* harmony import */


    var _internal_observable_bindNodeCallback__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(
    /*! ./internal/observable/bindNodeCallback */
    "./node_modules/rxjs/_esm2015/internal/observable/bindNodeCallback.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "bindNodeCallback", function () {
      return _internal_observable_bindNodeCallback__WEBPACK_IMPORTED_MODULE_27__["bindNodeCallback"];
    });
    /* harmony import */


    var _internal_observable_combineLatest__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(
    /*! ./internal/observable/combineLatest */
    "./node_modules/rxjs/_esm2015/internal/observable/combineLatest.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "combineLatest", function () {
      return _internal_observable_combineLatest__WEBPACK_IMPORTED_MODULE_28__["combineLatest"];
    });
    /* harmony import */


    var _internal_observable_concat__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(
    /*! ./internal/observable/concat */
    "./node_modules/rxjs/_esm2015/internal/observable/concat.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "concat", function () {
      return _internal_observable_concat__WEBPACK_IMPORTED_MODULE_29__["concat"];
    });
    /* harmony import */


    var _internal_observable_defer__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(
    /*! ./internal/observable/defer */
    "./node_modules/rxjs/_esm2015/internal/observable/defer.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "defer", function () {
      return _internal_observable_defer__WEBPACK_IMPORTED_MODULE_30__["defer"];
    });
    /* harmony import */


    var _internal_observable_empty__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(
    /*! ./internal/observable/empty */
    "./node_modules/rxjs/_esm2015/internal/observable/empty.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "empty", function () {
      return _internal_observable_empty__WEBPACK_IMPORTED_MODULE_31__["empty"];
    });
    /* harmony import */


    var _internal_observable_forkJoin__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(
    /*! ./internal/observable/forkJoin */
    "./node_modules/rxjs/_esm2015/internal/observable/forkJoin.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "forkJoin", function () {
      return _internal_observable_forkJoin__WEBPACK_IMPORTED_MODULE_32__["forkJoin"];
    });
    /* harmony import */


    var _internal_observable_from__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(
    /*! ./internal/observable/from */
    "./node_modules/rxjs/_esm2015/internal/observable/from.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "from", function () {
      return _internal_observable_from__WEBPACK_IMPORTED_MODULE_33__["from"];
    });
    /* harmony import */


    var _internal_observable_fromEvent__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(
    /*! ./internal/observable/fromEvent */
    "./node_modules/rxjs/_esm2015/internal/observable/fromEvent.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "fromEvent", function () {
      return _internal_observable_fromEvent__WEBPACK_IMPORTED_MODULE_34__["fromEvent"];
    });
    /* harmony import */


    var _internal_observable_fromEventPattern__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(
    /*! ./internal/observable/fromEventPattern */
    "./node_modules/rxjs/_esm2015/internal/observable/fromEventPattern.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "fromEventPattern", function () {
      return _internal_observable_fromEventPattern__WEBPACK_IMPORTED_MODULE_35__["fromEventPattern"];
    });
    /* harmony import */


    var _internal_observable_generate__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(
    /*! ./internal/observable/generate */
    "./node_modules/rxjs/_esm2015/internal/observable/generate.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "generate", function () {
      return _internal_observable_generate__WEBPACK_IMPORTED_MODULE_36__["generate"];
    });
    /* harmony import */


    var _internal_observable_iif__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(
    /*! ./internal/observable/iif */
    "./node_modules/rxjs/_esm2015/internal/observable/iif.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "iif", function () {
      return _internal_observable_iif__WEBPACK_IMPORTED_MODULE_37__["iif"];
    });
    /* harmony import */


    var _internal_observable_interval__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(
    /*! ./internal/observable/interval */
    "./node_modules/rxjs/_esm2015/internal/observable/interval.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "interval", function () {
      return _internal_observable_interval__WEBPACK_IMPORTED_MODULE_38__["interval"];
    });
    /* harmony import */


    var _internal_observable_merge__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(
    /*! ./internal/observable/merge */
    "./node_modules/rxjs/_esm2015/internal/observable/merge.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "merge", function () {
      return _internal_observable_merge__WEBPACK_IMPORTED_MODULE_39__["merge"];
    });
    /* harmony import */


    var _internal_observable_never__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(
    /*! ./internal/observable/never */
    "./node_modules/rxjs/_esm2015/internal/observable/never.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "never", function () {
      return _internal_observable_never__WEBPACK_IMPORTED_MODULE_40__["never"];
    });
    /* harmony import */


    var _internal_observable_of__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(
    /*! ./internal/observable/of */
    "./node_modules/rxjs/_esm2015/internal/observable/of.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "of", function () {
      return _internal_observable_of__WEBPACK_IMPORTED_MODULE_41__["of"];
    });
    /* harmony import */


    var _internal_observable_onErrorResumeNext__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(
    /*! ./internal/observable/onErrorResumeNext */
    "./node_modules/rxjs/_esm2015/internal/observable/onErrorResumeNext.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function () {
      return _internal_observable_onErrorResumeNext__WEBPACK_IMPORTED_MODULE_42__["onErrorResumeNext"];
    });
    /* harmony import */


    var _internal_observable_pairs__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(
    /*! ./internal/observable/pairs */
    "./node_modules/rxjs/_esm2015/internal/observable/pairs.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "pairs", function () {
      return _internal_observable_pairs__WEBPACK_IMPORTED_MODULE_43__["pairs"];
    });
    /* harmony import */


    var _internal_observable_partition__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(
    /*! ./internal/observable/partition */
    "./node_modules/rxjs/_esm2015/internal/observable/partition.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "partition", function () {
      return _internal_observable_partition__WEBPACK_IMPORTED_MODULE_44__["partition"];
    });
    /* harmony import */


    var _internal_observable_race__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(
    /*! ./internal/observable/race */
    "./node_modules/rxjs/_esm2015/internal/observable/race.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "race", function () {
      return _internal_observable_race__WEBPACK_IMPORTED_MODULE_45__["race"];
    });
    /* harmony import */


    var _internal_observable_range__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(
    /*! ./internal/observable/range */
    "./node_modules/rxjs/_esm2015/internal/observable/range.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "range", function () {
      return _internal_observable_range__WEBPACK_IMPORTED_MODULE_46__["range"];
    });
    /* harmony import */


    var _internal_observable_throwError__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(
    /*! ./internal/observable/throwError */
    "./node_modules/rxjs/_esm2015/internal/observable/throwError.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "throwError", function () {
      return _internal_observable_throwError__WEBPACK_IMPORTED_MODULE_47__["throwError"];
    });
    /* harmony import */


    var _internal_observable_timer__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(
    /*! ./internal/observable/timer */
    "./node_modules/rxjs/_esm2015/internal/observable/timer.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "timer", function () {
      return _internal_observable_timer__WEBPACK_IMPORTED_MODULE_48__["timer"];
    });
    /* harmony import */


    var _internal_observable_using__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(
    /*! ./internal/observable/using */
    "./node_modules/rxjs/_esm2015/internal/observable/using.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "using", function () {
      return _internal_observable_using__WEBPACK_IMPORTED_MODULE_49__["using"];
    });
    /* harmony import */


    var _internal_observable_zip__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(
    /*! ./internal/observable/zip */
    "./node_modules/rxjs/_esm2015/internal/observable/zip.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "zip", function () {
      return _internal_observable_zip__WEBPACK_IMPORTED_MODULE_50__["zip"];
    });
    /* harmony import */


    var _internal_scheduled_scheduled__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(
    /*! ./internal/scheduled/scheduled */
    "./node_modules/rxjs/_esm2015/internal/scheduled/scheduled.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "scheduled", function () {
      return _internal_scheduled_scheduled__WEBPACK_IMPORTED_MODULE_51__["scheduled"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "EMPTY", function () {
      return _internal_observable_empty__WEBPACK_IMPORTED_MODULE_31__["EMPTY"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "NEVER", function () {
      return _internal_observable_never__WEBPACK_IMPORTED_MODULE_40__["NEVER"];
    });
    /* harmony import */


    var _internal_config__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(
    /*! ./internal/config */
    "./node_modules/rxjs/_esm2015/internal/config.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "config", function () {
      return _internal_config__WEBPACK_IMPORTED_MODULE_52__["config"];
    }); //# sourceMappingURL=index.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/AsyncSubject.js":
  /*!*************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/AsyncSubject.js ***!
    \*************************************************************/

  /*! exports provided: AsyncSubject */

  /***/
  function node_modulesRxjs_esm2015InternalAsyncSubjectJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AsyncSubject", function () {
      return AsyncSubject;
    });
    /* harmony import */


    var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Subject */
    "./node_modules/rxjs/_esm2015/internal/Subject.js");
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");

    var AsyncSubject = /*#__PURE__*/function (_Subject__WEBPACK_IMP) {
      _inherits(AsyncSubject, _Subject__WEBPACK_IMP);

      var _super40 = _createSuper(AsyncSubject);

      function AsyncSubject() {
        var _this69;

        _classCallCheck(this, AsyncSubject);

        _this69 = _super40.apply(this, arguments);
        _this69.value = null;
        _this69.hasNext = false;
        _this69.hasCompleted = false;
        return _this69;
      }

      _createClass2(AsyncSubject, [{
        key: "_subscribe",
        value: function _subscribe(subscriber) {
          if (this.hasError) {
            subscriber.error(this.thrownError);
            return _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"].EMPTY;
          } else if (this.hasCompleted && this.hasNext) {
            subscriber.next(this.value);
            subscriber.complete();
            return _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"].EMPTY;
          }

          return _get(_getPrototypeOf(AsyncSubject.prototype), "_subscribe", this).call(this, subscriber);
        }
      }, {
        key: "next",
        value: function next(value) {
          if (!this.hasCompleted) {
            this.value = value;
            this.hasNext = true;
          }
        }
      }, {
        key: "error",
        value: function error(_error) {
          if (!this.hasCompleted) {
            _get(_getPrototypeOf(AsyncSubject.prototype), "error", this).call(this, _error);
          }
        }
      }, {
        key: "complete",
        value: function complete() {
          this.hasCompleted = true;

          if (this.hasNext) {
            _get(_getPrototypeOf(AsyncSubject.prototype), "next", this).call(this, this.value);
          }

          _get(_getPrototypeOf(AsyncSubject.prototype), "complete", this).call(this);
        }
      }]);

      return AsyncSubject;
    }(_Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]); //# sourceMappingURL=AsyncSubject.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/BehaviorSubject.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/BehaviorSubject.js ***!
    \****************************************************************/

  /*! exports provided: BehaviorSubject */

  /***/
  function node_modulesRxjs_esm2015InternalBehaviorSubjectJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "BehaviorSubject", function () {
      return BehaviorSubject;
    });
    /* harmony import */


    var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Subject */
    "./node_modules/rxjs/_esm2015/internal/Subject.js");
    /* harmony import */


    var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./util/ObjectUnsubscribedError */
    "./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js");

    var BehaviorSubject = /*#__PURE__*/function (_Subject__WEBPACK_IMP2) {
      _inherits(BehaviorSubject, _Subject__WEBPACK_IMP2);

      var _super41 = _createSuper(BehaviorSubject);

      function BehaviorSubject(_value) {
        var _this70;

        _classCallCheck(this, BehaviorSubject);

        _this70 = _super41.call(this);
        _this70._value = _value;
        return _this70;
      }

      _createClass2(BehaviorSubject, [{
        key: "_subscribe",
        value: function _subscribe(subscriber) {
          var subscription = _get(_getPrototypeOf(BehaviorSubject.prototype), "_subscribe", this).call(this, subscriber);

          if (subscription && !subscription.closed) {
            subscriber.next(this._value);
          }

          return subscription;
        }
      }, {
        key: "getValue",
        value: function getValue() {
          if (this.hasError) {
            throw this.thrownError;
          } else if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__["ObjectUnsubscribedError"]();
          } else {
            return this._value;
          }
        }
      }, {
        key: "next",
        value: function next(value) {
          _get(_getPrototypeOf(BehaviorSubject.prototype), "next", this).call(this, this._value = value);
        }
      }, {
        key: "value",
        get: function get() {
          return this.getValue();
        }
      }]);

      return BehaviorSubject;
    }(_Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]); //# sourceMappingURL=BehaviorSubject.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js ***!
    \****************************************************************/

  /*! exports provided: InnerSubscriber */

  /***/
  function node_modulesRxjs_esm2015InternalInnerSubscriberJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "InnerSubscriber", function () {
      return InnerSubscriber;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    var InnerSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_) {
      _inherits(InnerSubscriber, _Subscriber__WEBPACK_);

      var _super42 = _createSuper(InnerSubscriber);

      function InnerSubscriber(parent, outerValue, outerIndex) {
        var _this71;

        _classCallCheck(this, InnerSubscriber);

        _this71 = _super42.call(this);
        _this71.parent = parent;
        _this71.outerValue = outerValue;
        _this71.outerIndex = outerIndex;
        _this71.index = 0;
        return _this71;
      }

      _createClass2(InnerSubscriber, [{
        key: "_next",
        value: function _next(value) {
          this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
        }
      }, {
        key: "_error",
        value: function _error(error) {
          this.parent.notifyError(error, this);
          this.unsubscribe();
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.parent.notifyComplete(this);
          this.unsubscribe();
        }
      }]);

      return InnerSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=InnerSubscriber.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/Notification.js":
  /*!*************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/Notification.js ***!
    \*************************************************************/

  /*! exports provided: NotificationKind, Notification */

  /***/
  function node_modulesRxjs_esm2015InternalNotificationJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NotificationKind", function () {
      return NotificationKind;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Notification", function () {
      return Notification;
    });
    /* harmony import */


    var _observable_empty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./observable/empty */
    "./node_modules/rxjs/_esm2015/internal/observable/empty.js");
    /* harmony import */


    var _observable_of__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./observable/of */
    "./node_modules/rxjs/_esm2015/internal/observable/of.js");
    /* harmony import */


    var _observable_throwError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./observable/throwError */
    "./node_modules/rxjs/_esm2015/internal/observable/throwError.js");

    var NotificationKind = /*@__PURE__*/function (NotificationKind) {
      NotificationKind["NEXT"] = "N";
      NotificationKind["ERROR"] = "E";
      NotificationKind["COMPLETE"] = "C";
      return NotificationKind;
    }({});

    var Notification = /*@__PURE__*/function () {
      var Notification = /*#__PURE__*/function () {
        function Notification(kind, value, error) {
          _classCallCheck(this, Notification);

          this.kind = kind;
          this.value = value;
          this.error = error;
          this.hasValue = kind === 'N';
        }

        _createClass2(Notification, [{
          key: "observe",
          value: function observe(observer) {
            switch (this.kind) {
              case 'N':
                return observer.next && observer.next(this.value);

              case 'E':
                return observer.error && observer.error(this.error);

              case 'C':
                return observer.complete && observer.complete();
            }
          }
        }, {
          key: "do",
          value: function _do(next, error, complete) {
            var kind = this.kind;

            switch (kind) {
              case 'N':
                return next && next(this.value);

              case 'E':
                return error && error(this.error);

              case 'C':
                return complete && complete();
            }
          }
        }, {
          key: "accept",
          value: function accept(nextOrObserver, error, complete) {
            if (nextOrObserver && typeof nextOrObserver.next === 'function') {
              return this.observe(nextOrObserver);
            } else {
              return this["do"](nextOrObserver, error, complete);
            }
          }
        }, {
          key: "toObservable",
          value: function toObservable() {
            var kind = this.kind;

            switch (kind) {
              case 'N':
                return Object(_observable_of__WEBPACK_IMPORTED_MODULE_1__["of"])(this.value);

              case 'E':
                return Object(_observable_throwError__WEBPACK_IMPORTED_MODULE_2__["throwError"])(this.error);

              case 'C':
                return Object(_observable_empty__WEBPACK_IMPORTED_MODULE_0__["empty"])();
            }

            throw new Error('unexpected notification kind value');
          }
        }], [{
          key: "createNext",
          value: function createNext(value) {
            if (typeof value !== 'undefined') {
              return new Notification('N', value);
            }

            return Notification.undefinedValueNotification;
          }
        }, {
          key: "createError",
          value: function createError(err) {
            return new Notification('E', undefined, err);
          }
        }, {
          key: "createComplete",
          value: function createComplete() {
            return Notification.completeNotification;
          }
        }]);

        return Notification;
      }();

      Notification.completeNotification = new Notification('C');
      Notification.undefinedValueNotification = new Notification('N', undefined);
      return Notification;
    }(); //# sourceMappingURL=Notification.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/Observable.js":
  /*!***********************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/Observable.js ***!
    \***********************************************************/

  /*! exports provided: Observable */

  /***/
  function node_modulesRxjs_esm2015InternalObservableJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Observable", function () {
      return Observable;
    });
    /* harmony import */


    var _util_canReportError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./util/canReportError */
    "./node_modules/rxjs/_esm2015/internal/util/canReportError.js");
    /* harmony import */


    var _util_toSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./util/toSubscriber */
    "./node_modules/rxjs/_esm2015/internal/util/toSubscriber.js");
    /* harmony import */


    var _symbol_observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./symbol/observable */
    "./node_modules/rxjs/_esm2015/internal/symbol/observable.js");
    /* harmony import */


    var _util_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./util/pipe */
    "./node_modules/rxjs/_esm2015/internal/util/pipe.js");
    /* harmony import */


    var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./config */
    "./node_modules/rxjs/_esm2015/internal/config.js");

    var Observable = /*@__PURE__*/function () {
      var Observable = /*#__PURE__*/function () {
        function Observable(subscribe) {
          _classCallCheck(this, Observable);

          this._isScalar = false;

          if (subscribe) {
            this._subscribe = subscribe;
          }
        }

        _createClass2(Observable, [{
          key: "lift",
          value: function lift(operator) {
            var observable = new Observable();
            observable.source = this;
            observable.operator = operator;
            return observable;
          }
        }, {
          key: "subscribe",
          value: function subscribe(observerOrNext, error, complete) {
            var operator = this.operator;
            var sink = Object(_util_toSubscriber__WEBPACK_IMPORTED_MODULE_1__["toSubscriber"])(observerOrNext, error, complete);

            if (operator) {
              sink.add(operator.call(sink, this.source));
            } else {
              sink.add(this.source || _config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
            }

            if (_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
              if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;

                if (sink.syncErrorThrown) {
                  throw sink.syncErrorValue;
                }
              }
            }

            return sink;
          }
        }, {
          key: "_trySubscribe",
          value: function _trySubscribe(sink) {
            try {
              return this._subscribe(sink);
            } catch (err) {
              if (_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
              }

              if (Object(_util_canReportError__WEBPACK_IMPORTED_MODULE_0__["canReportError"])(sink)) {
                sink.error(err);
              } else {
                console.warn(err);
              }
            }
          }
        }, {
          key: "forEach",
          value: function forEach(next, promiseCtor) {
            var _this72 = this;

            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
              var subscription;
              subscription = _this72.subscribe(function (value) {
                try {
                  next(value);
                } catch (err) {
                  reject(err);

                  if (subscription) {
                    subscription.unsubscribe();
                  }
                }
              }, reject, resolve);
            });
          }
        }, {
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            var source = this.source;
            return source && source.subscribe(subscriber);
          }
        }, {
          key: _symbol_observable__WEBPACK_IMPORTED_MODULE_2__["observable"],
          value: function value() {
            return this;
          }
        }, {
          key: "pipe",
          value: function pipe() {
            for (var _len14 = arguments.length, operations = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
              operations[_key14] = arguments[_key14];
            }

            if (operations.length === 0) {
              return this;
            }

            return Object(_util_pipe__WEBPACK_IMPORTED_MODULE_3__["pipeFromArray"])(operations)(this);
          }
        }, {
          key: "toPromise",
          value: function toPromise(promiseCtor) {
            var _this73 = this;

            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
              var value;

              _this73.subscribe(function (x) {
                return value = x;
              }, function (err) {
                return reject(err);
              }, function () {
                return resolve(value);
              });
            });
          }
        }]);

        return Observable;
      }();

      Observable.create = function (subscribe) {
        return new Observable(subscribe);
      };

      return Observable;
    }();

    function getPromiseCtor(promiseCtor) {
      if (!promiseCtor) {
        promiseCtor = _config__WEBPACK_IMPORTED_MODULE_4__["config"].Promise || Promise;
      }

      if (!promiseCtor) {
        throw new Error('no Promise impl found');
      }

      return promiseCtor;
    } //# sourceMappingURL=Observable.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/Observer.js":
  /*!*********************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/Observer.js ***!
    \*********************************************************/

  /*! exports provided: empty */

  /***/
  function node_modulesRxjs_esm2015InternalObserverJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "empty", function () {
      return empty;
    });
    /* harmony import */


    var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./config */
    "./node_modules/rxjs/_esm2015/internal/config.js");
    /* harmony import */


    var _util_hostReportError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./util/hostReportError */
    "./node_modules/rxjs/_esm2015/internal/util/hostReportError.js");

    var empty = {
      closed: true,
      next: function next(value) {},
      error: function error(err) {
        if (_config__WEBPACK_IMPORTED_MODULE_0__["config"].useDeprecatedSynchronousErrorHandling) {
          throw err;
        } else {
          Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_1__["hostReportError"])(err);
        }
      },
      complete: function complete() {}
    }; //# sourceMappingURL=Observer.js.map

    /***/
  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js ***!
    \****************************************************************/

  /*! exports provided: OuterSubscriber */

  /***/
  function node_modulesRxjs_esm2015InternalOuterSubscriberJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "OuterSubscriber", function () {
      return OuterSubscriber;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    var OuterSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_2) {
      _inherits(OuterSubscriber, _Subscriber__WEBPACK_2);

      var _super43 = _createSuper(OuterSubscriber);

      function OuterSubscriber() {
        _classCallCheck(this, OuterSubscriber);

        return _super43.apply(this, arguments);
      }

      _createClass2(OuterSubscriber, [{
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.destination.next(innerValue);
        }
      }, {
        key: "notifyError",
        value: function notifyError(error, innerSub) {
          this.destination.error(error);
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete(innerSub) {
          this.destination.complete();
        }
      }]);

      return OuterSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=OuterSubscriber.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/ReplaySubject.js":
  /*!**************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/ReplaySubject.js ***!
    \**************************************************************/

  /*! exports provided: ReplaySubject */

  /***/
  function node_modulesRxjs_esm2015InternalReplaySubjectJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ReplaySubject", function () {
      return ReplaySubject;
    });
    /* harmony import */


    var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Subject */
    "./node_modules/rxjs/_esm2015/internal/Subject.js");
    /* harmony import */


    var _scheduler_queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./scheduler/queue */
    "./node_modules/rxjs/_esm2015/internal/scheduler/queue.js");
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");
    /* harmony import */


    var _operators_observeOn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./operators/observeOn */
    "./node_modules/rxjs/_esm2015/internal/operators/observeOn.js");
    /* harmony import */


    var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./util/ObjectUnsubscribedError */
    "./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js");
    /* harmony import */


    var _SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./SubjectSubscription */
    "./node_modules/rxjs/_esm2015/internal/SubjectSubscription.js");

    var ReplaySubject = /*#__PURE__*/function (_Subject__WEBPACK_IMP3) {
      _inherits(ReplaySubject, _Subject__WEBPACK_IMP3);

      var _super44 = _createSuper(ReplaySubject);

      function ReplaySubject() {
        var _this74;

        var bufferSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.POSITIVE_INFINITY;
        var windowTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;
        var scheduler = arguments.length > 2 ? arguments[2] : undefined;

        _classCallCheck(this, ReplaySubject);

        _this74 = _super44.call(this);
        _this74.scheduler = scheduler;
        _this74._events = [];
        _this74._infiniteTimeWindow = false;
        _this74._bufferSize = bufferSize < 1 ? 1 : bufferSize;
        _this74._windowTime = windowTime < 1 ? 1 : windowTime;

        if (windowTime === Number.POSITIVE_INFINITY) {
          _this74._infiniteTimeWindow = true;
          _this74.next = _this74.nextInfiniteTimeWindow;
        } else {
          _this74.next = _this74.nextTimeWindow;
        }

        return _this74;
      }

      _createClass2(ReplaySubject, [{
        key: "nextInfiniteTimeWindow",
        value: function nextInfiniteTimeWindow(value) {
          var _events = this._events;

          _events.push(value);

          if (_events.length > this._bufferSize) {
            _events.shift();
          }

          _get(_getPrototypeOf(ReplaySubject.prototype), "next", this).call(this, value);
        }
      }, {
        key: "nextTimeWindow",
        value: function nextTimeWindow(value) {
          this._events.push(new ReplayEvent(this._getNow(), value));

          this._trimBufferThenGetEvents();

          _get(_getPrototypeOf(ReplaySubject.prototype), "next", this).call(this, value);
        }
      }, {
        key: "_subscribe",
        value: function _subscribe(subscriber) {
          var _infiniteTimeWindow = this._infiniteTimeWindow;

          var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();

          var scheduler = this.scheduler;
          var len = _events.length;
          var subscription;

          if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_4__["ObjectUnsubscribedError"]();
          } else if (this.isStopped || this.hasError) {
            subscription = _Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
          } else {
            this.observers.push(subscriber);
            subscription = new _SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__["SubjectSubscription"](this, subscriber);
          }

          if (scheduler) {
            subscriber.add(subscriber = new _operators_observeOn__WEBPACK_IMPORTED_MODULE_3__["ObserveOnSubscriber"](subscriber, scheduler));
          }

          if (_infiniteTimeWindow) {
            for (var i = 0; i < len && !subscriber.closed; i++) {
              subscriber.next(_events[i]);
            }
          } else {
            for (var _i20 = 0; _i20 < len && !subscriber.closed; _i20++) {
              subscriber.next(_events[_i20].value);
            }
          }

          if (this.hasError) {
            subscriber.error(this.thrownError);
          } else if (this.isStopped) {
            subscriber.complete();
          }

          return subscription;
        }
      }, {
        key: "_getNow",
        value: function _getNow() {
          return (this.scheduler || _scheduler_queue__WEBPACK_IMPORTED_MODULE_1__["queue"]).now();
        }
      }, {
        key: "_trimBufferThenGetEvents",
        value: function _trimBufferThenGetEvents() {
          var now = this._getNow();

          var _bufferSize = this._bufferSize;
          var _windowTime = this._windowTime;
          var _events = this._events;
          var eventsCount = _events.length;
          var spliceCount = 0;

          while (spliceCount < eventsCount) {
            if (now - _events[spliceCount].time < _windowTime) {
              break;
            }

            spliceCount++;
          }

          if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
          }

          if (spliceCount > 0) {
            _events.splice(0, spliceCount);
          }

          return _events;
        }
      }]);

      return ReplaySubject;
    }(_Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]);

    var ReplayEvent = function ReplayEvent(time, value) {
      _classCallCheck(this, ReplayEvent);

      this.time = time;
      this.value = value;
    }; //# sourceMappingURL=ReplaySubject.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/Scheduler.js":
  /*!**********************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/Scheduler.js ***!
    \**********************************************************/

  /*! exports provided: Scheduler */

  /***/
  function node_modulesRxjs_esm2015InternalSchedulerJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Scheduler", function () {
      return Scheduler;
    });

    var Scheduler = /*@__PURE__*/function () {
      var Scheduler = /*#__PURE__*/function () {
        function Scheduler(SchedulerAction) {
          var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Scheduler.now;

          _classCallCheck(this, Scheduler);

          this.SchedulerAction = SchedulerAction;
          this.now = now;
        }

        _createClass2(Scheduler, [{
          key: "schedule",
          value: function schedule(work) {
            var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var state = arguments.length > 2 ? arguments[2] : undefined;
            return new this.SchedulerAction(this, work).schedule(state, delay);
          }
        }]);

        return Scheduler;
      }();

      Scheduler.now = function () {
        return Date.now();
      };

      return Scheduler;
    }(); //# sourceMappingURL=Scheduler.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/Subject.js":
  /*!********************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/Subject.js ***!
    \********************************************************/

  /*! exports provided: SubjectSubscriber, Subject, AnonymousSubject */

  /***/
  function node_modulesRxjs_esm2015InternalSubjectJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SubjectSubscriber", function () {
      return SubjectSubscriber;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Subject", function () {
      return Subject;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AnonymousSubject", function () {
      return AnonymousSubject;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");
    /* harmony import */


    var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./util/ObjectUnsubscribedError */
    "./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js");
    /* harmony import */


    var _SubjectSubscription__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./SubjectSubscription */
    "./node_modules/rxjs/_esm2015/internal/SubjectSubscription.js");
    /* harmony import */


    var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../internal/symbol/rxSubscriber */
    "./node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js");

    var SubjectSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_3) {
      _inherits(SubjectSubscriber, _Subscriber__WEBPACK_3);

      var _super45 = _createSuper(SubjectSubscriber);

      function SubjectSubscriber(destination) {
        var _this75;

        _classCallCheck(this, SubjectSubscriber);

        _this75 = _super45.call(this, destination);
        _this75.destination = destination;
        return _this75;
      }

      return SubjectSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_1__["Subscriber"]);

    var Subject = /*@__PURE__*/function () {
      var Subject = /*#__PURE__*/function (_Observable__WEBPACK_) {
        _inherits(Subject, _Observable__WEBPACK_);

        var _super46 = _createSuper(Subject);

        function Subject() {
          var _this76;

          _classCallCheck(this, Subject);

          _this76 = _super46.call(this);
          _this76.observers = [];
          _this76.closed = false;
          _this76.isStopped = false;
          _this76.hasError = false;
          _this76.thrownError = null;
          return _this76;
        }

        _createClass2(Subject, [{
          key: _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_5__["rxSubscriber"],
          value: function value() {
            return new SubjectSubscriber(this);
          }
        }, {
          key: "lift",
          value: function lift(operator) {
            var subject = new AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
          }
        }, {
          key: "next",
          value: function next(value) {
            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__["ObjectUnsubscribedError"]();
            }

            if (!this.isStopped) {
              var observers = this.observers;
              var _len15 = observers.length;
              var copy = observers.slice();

              for (var i = 0; i < _len15; i++) {
                copy[i].next(value);
              }
            }
          }
        }, {
          key: "error",
          value: function error(err) {
            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__["ObjectUnsubscribedError"]();
            }

            this.hasError = true;
            this.thrownError = err;
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();

            for (var i = 0; i < len; i++) {
              copy[i].error(err);
            }

            this.observers.length = 0;
          }
        }, {
          key: "complete",
          value: function complete() {
            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__["ObjectUnsubscribedError"]();
            }

            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();

            for (var i = 0; i < len; i++) {
              copy[i].complete();
            }

            this.observers.length = 0;
          }
        }, {
          key: "unsubscribe",
          value: function unsubscribe() {
            this.isStopped = true;
            this.closed = true;
            this.observers = null;
          }
        }, {
          key: "_trySubscribe",
          value: function _trySubscribe(subscriber) {
            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__["ObjectUnsubscribedError"]();
            } else {
              return _get(_getPrototypeOf(Subject.prototype), "_trySubscribe", this).call(this, subscriber);
            }
          }
        }, {
          key: "_subscribe",
          value: function _subscribe(subscriber) {
            if (this.closed) {
              throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__["ObjectUnsubscribedError"]();
            } else if (this.hasError) {
              subscriber.error(this.thrownError);
              return _Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
            } else if (this.isStopped) {
              subscriber.complete();
              return _Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
            } else {
              this.observers.push(subscriber);
              return new _SubjectSubscription__WEBPACK_IMPORTED_MODULE_4__["SubjectSubscription"](this, subscriber);
            }
          }
        }, {
          key: "asObservable",
          value: function asObservable() {
            var observable = new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]();
            observable.source = this;
            return observable;
          }
        }]);

        return Subject;
      }(_Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]);

      Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
      };

      return Subject;
    }();

    var AnonymousSubject = /*#__PURE__*/function (_Subject) {
      _inherits(AnonymousSubject, _Subject);

      var _super47 = _createSuper(AnonymousSubject);

      function AnonymousSubject(destination, source) {
        var _this77;

        _classCallCheck(this, AnonymousSubject);

        _this77 = _super47.call(this);
        _this77.destination = destination;
        _this77.source = source;
        return _this77;
      }

      _createClass2(AnonymousSubject, [{
        key: "next",
        value: function next(value) {
          var destination = this.destination;

          if (destination && destination.next) {
            destination.next(value);
          }
        }
      }, {
        key: "error",
        value: function error(err) {
          var destination = this.destination;

          if (destination && destination.error) {
            this.destination.error(err);
          }
        }
      }, {
        key: "complete",
        value: function complete() {
          var destination = this.destination;

          if (destination && destination.complete) {
            this.destination.complete();
          }
        }
      }, {
        key: "_subscribe",
        value: function _subscribe(subscriber) {
          var source = this.source;

          if (source) {
            return this.source.subscribe(subscriber);
          } else {
            return _Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
          }
        }
      }]);

      return AnonymousSubject;
    }(Subject); //# sourceMappingURL=Subject.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/SubjectSubscription.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/SubjectSubscription.js ***!
    \********************************************************************/

  /*! exports provided: SubjectSubscription */

  /***/
  function node_modulesRxjs_esm2015InternalSubjectSubscriptionJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SubjectSubscription", function () {
      return SubjectSubscription;
    });
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");

    var SubjectSubscription = /*#__PURE__*/function (_Subscription__WEBPAC) {
      _inherits(SubjectSubscription, _Subscription__WEBPAC);

      var _super48 = _createSuper(SubjectSubscription);

      function SubjectSubscription(subject, subscriber) {
        var _this78;

        _classCallCheck(this, SubjectSubscription);

        _this78 = _super48.call(this);
        _this78.subject = subject;
        _this78.subscriber = subscriber;
        _this78.closed = false;
        return _this78;
      }

      _createClass2(SubjectSubscription, [{
        key: "unsubscribe",
        value: function unsubscribe() {
          if (this.closed) {
            return;
          }

          this.closed = true;
          var subject = this.subject;
          var observers = subject.observers;
          this.subject = null;

          if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
          }

          var subscriberIndex = observers.indexOf(this.subscriber);

          if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
          }
        }
      }]);

      return SubjectSubscription;
    }(_Subscription__WEBPACK_IMPORTED_MODULE_0__["Subscription"]); //# sourceMappingURL=SubjectSubscription.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/Subscriber.js":
  /*!***********************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/Subscriber.js ***!
    \***********************************************************/

  /*! exports provided: Subscriber, SafeSubscriber */

  /***/
  function node_modulesRxjs_esm2015InternalSubscriberJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Subscriber", function () {
      return Subscriber;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SafeSubscriber", function () {
      return SafeSubscriber;
    });
    /* harmony import */


    var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./util/isFunction */
    "./node_modules/rxjs/_esm2015/internal/util/isFunction.js");
    /* harmony import */


    var _Observer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./Observer */
    "./node_modules/rxjs/_esm2015/internal/Observer.js");
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");
    /* harmony import */


    var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../internal/symbol/rxSubscriber */
    "./node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js");
    /* harmony import */


    var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./config */
    "./node_modules/rxjs/_esm2015/internal/config.js");
    /* harmony import */


    var _util_hostReportError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./util/hostReportError */
    "./node_modules/rxjs/_esm2015/internal/util/hostReportError.js");

    var Subscriber = /*#__PURE__*/function (_Subscription__WEBPAC2) {
      _inherits(Subscriber, _Subscription__WEBPAC2);

      var _super49 = _createSuper(Subscriber);

      function Subscriber(destinationOrNext, error, complete) {
        var _this79;

        _classCallCheck(this, Subscriber);

        _this79 = _super49.call(this);
        _this79.syncErrorValue = null;
        _this79.syncErrorThrown = false;
        _this79.syncErrorThrowable = false;
        _this79.isStopped = false;

        switch (arguments.length) {
          case 0:
            _this79.destination = _Observer__WEBPACK_IMPORTED_MODULE_1__["empty"];
            break;

          case 1:
            if (!destinationOrNext) {
              _this79.destination = _Observer__WEBPACK_IMPORTED_MODULE_1__["empty"];
              break;
            }

            if (typeof destinationOrNext === 'object') {
              if (destinationOrNext instanceof Subscriber) {
                _this79.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                _this79.destination = destinationOrNext;
                destinationOrNext.add(_assertThisInitialized(_this79));
              } else {
                _this79.syncErrorThrowable = true;
                _this79.destination = new SafeSubscriber(_assertThisInitialized(_this79), destinationOrNext);
              }

              break;
            }

          default:
            _this79.syncErrorThrowable = true;
            _this79.destination = new SafeSubscriber(_assertThisInitialized(_this79), destinationOrNext, error, complete);
            break;
        }

        return _this79;
      }

      _createClass2(Subscriber, [{
        key: _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_3__["rxSubscriber"],
        value: function value() {
          return this;
        }
      }, {
        key: "next",
        value: function next(value) {
          if (!this.isStopped) {
            this._next(value);
          }
        }
      }, {
        key: "error",
        value: function error(err) {
          if (!this.isStopped) {
            this.isStopped = true;

            this._error(err);
          }
        }
      }, {
        key: "complete",
        value: function complete() {
          if (!this.isStopped) {
            this.isStopped = true;

            this._complete();
          }
        }
      }, {
        key: "unsubscribe",
        value: function unsubscribe() {
          if (this.closed) {
            return;
          }

          this.isStopped = true;

          _get(_getPrototypeOf(Subscriber.prototype), "unsubscribe", this).call(this);
        }
      }, {
        key: "_next",
        value: function _next(value) {
          this.destination.next(value);
        }
      }, {
        key: "_error",
        value: function _error(err) {
          this.destination.error(err);
          this.unsubscribe();
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.destination.complete();
          this.unsubscribe();
        }
      }, {
        key: "_unsubscribeAndRecycle",
        value: function _unsubscribeAndRecycle() {
          var _parentOrParents = this._parentOrParents;
          this._parentOrParents = null;
          this.unsubscribe();
          this.closed = false;
          this.isStopped = false;
          this._parentOrParents = _parentOrParents;
          return this;
        }
      }], [{
        key: "create",
        value: function create(next, error, complete) {
          var subscriber = new Subscriber(next, error, complete);
          subscriber.syncErrorThrowable = false;
          return subscriber;
        }
      }]);

      return Subscriber;
    }(_Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"]);

    var SafeSubscriber = /*#__PURE__*/function (_Subscriber) {
      _inherits(SafeSubscriber, _Subscriber);

      var _super50 = _createSuper(SafeSubscriber);

      function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        var _this80;

        _classCallCheck(this, SafeSubscriber);

        _this80 = _super50.call(this);
        _this80._parentSubscriber = _parentSubscriber;
        var next;

        var context = _assertThisInitialized(_this80);

        if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(observerOrNext)) {
          next = observerOrNext;
        } else if (observerOrNext) {
          next = observerOrNext.next;
          error = observerOrNext.error;
          complete = observerOrNext.complete;

          if (observerOrNext !== _Observer__WEBPACK_IMPORTED_MODULE_1__["empty"]) {
            context = Object.create(observerOrNext);

            if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(context.unsubscribe)) {
              _this80.add(context.unsubscribe.bind(context));
            }

            context.unsubscribe = _this80.unsubscribe.bind(_assertThisInitialized(_this80));
          }
        }

        _this80._context = context;
        _this80._next = next;
        _this80._error = error;
        _this80._complete = complete;
        return _this80;
      }

      _createClass2(SafeSubscriber, [{
        key: "next",
        value: function next(value) {
          if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;

            if (!_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
              this.__tryOrUnsub(this._next, value);
            } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
              this.unsubscribe();
            }
          }
        }
      }, {
        key: "error",
        value: function error(err) {
          if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            var useDeprecatedSynchronousErrorHandling = _config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling;

            if (this._error) {
              if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._error, err);

                this.unsubscribe();
              } else {
                this.__tryOrSetError(_parentSubscriber, this._error, err);

                this.unsubscribe();
              }
            } else if (!_parentSubscriber.syncErrorThrowable) {
              this.unsubscribe();

              if (useDeprecatedSynchronousErrorHandling) {
                throw err;
              }

              Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_5__["hostReportError"])(err);
            } else {
              if (useDeprecatedSynchronousErrorHandling) {
                _parentSubscriber.syncErrorValue = err;
                _parentSubscriber.syncErrorThrown = true;
              } else {
                Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_5__["hostReportError"])(err);
              }

              this.unsubscribe();
            }
          }
        }
      }, {
        key: "complete",
        value: function complete() {
          var _this81 = this;

          if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;

            if (this._complete) {
              var wrappedComplete = function wrappedComplete() {
                return _this81._complete.call(_this81._context);
              };

              if (!_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(wrappedComplete);

                this.unsubscribe();
              } else {
                this.__tryOrSetError(_parentSubscriber, wrappedComplete);

                this.unsubscribe();
              }
            } else {
              this.unsubscribe();
            }
          }
        }
      }, {
        key: "__tryOrUnsub",
        value: function __tryOrUnsub(fn, value) {
          try {
            fn.call(this._context, value);
          } catch (err) {
            this.unsubscribe();

            if (_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
              throw err;
            } else {
              Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_5__["hostReportError"])(err);
            }
          }
        }
      }, {
        key: "__tryOrSetError",
        value: function __tryOrSetError(parent, fn, value) {
          if (!_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
            throw new Error('bad call');
          }

          try {
            fn.call(this._context, value);
          } catch (err) {
            if (_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
              parent.syncErrorValue = err;
              parent.syncErrorThrown = true;
              return true;
            } else {
              Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_5__["hostReportError"])(err);
              return true;
            }
          }

          return false;
        }
      }, {
        key: "_unsubscribe",
        value: function _unsubscribe() {
          var _parentSubscriber = this._parentSubscriber;
          this._context = null;
          this._parentSubscriber = null;

          _parentSubscriber.unsubscribe();
        }
      }]);

      return SafeSubscriber;
    }(Subscriber); //# sourceMappingURL=Subscriber.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/Subscription.js":
  /*!*************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/Subscription.js ***!
    \*************************************************************/

  /*! exports provided: Subscription */

  /***/
  function node_modulesRxjs_esm2015InternalSubscriptionJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Subscription", function () {
      return Subscription;
    });
    /* harmony import */


    var _util_isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./util/isArray */
    "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
    /* harmony import */


    var _util_isObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./util/isObject */
    "./node_modules/rxjs/_esm2015/internal/util/isObject.js");
    /* harmony import */


    var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./util/isFunction */
    "./node_modules/rxjs/_esm2015/internal/util/isFunction.js");
    /* harmony import */


    var _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./util/UnsubscriptionError */
    "./node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js");

    var Subscription = /*@__PURE__*/function () {
      var Subscription = /*#__PURE__*/function () {
        function Subscription(unsubscribe) {
          _classCallCheck(this, Subscription);

          this.closed = false;
          this._parentOrParents = null;
          this._subscriptions = null;

          if (unsubscribe) {
            this._unsubscribe = unsubscribe;
          }
        }

        _createClass2(Subscription, [{
          key: "unsubscribe",
          value: function unsubscribe() {
            var errors;

            if (this.closed) {
              return;
            }

            var _parentOrParents = this._parentOrParents,
                _unsubscribe = this._unsubscribe,
                _subscriptions = this._subscriptions;
            this.closed = true;
            this._parentOrParents = null;
            this._subscriptions = null;

            if (_parentOrParents instanceof Subscription) {
              _parentOrParents.remove(this);
            } else if (_parentOrParents !== null) {
              for (var index = 0; index < _parentOrParents.length; ++index) {
                var parent = _parentOrParents[index];
                parent.remove(this);
              }
            }

            if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(_unsubscribe)) {
              try {
                _unsubscribe.call(this);
              } catch (e) {
                errors = e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__["UnsubscriptionError"] ? flattenUnsubscriptionErrors(e.errors) : [e];
              }
            }

            if (Object(_util_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(_subscriptions)) {
              var _index2 = -1;

              var _len16 = _subscriptions.length;

              while (++_index2 < _len16) {
                var sub = _subscriptions[_index2];

                if (Object(_util_isObject__WEBPACK_IMPORTED_MODULE_1__["isObject"])(sub)) {
                  try {
                    sub.unsubscribe();
                  } catch (e) {
                    errors = errors || [];

                    if (e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__["UnsubscriptionError"]) {
                      errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
                    } else {
                      errors.push(e);
                    }
                  }
                }
              }
            }

            if (errors) {
              throw new _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__["UnsubscriptionError"](errors);
            }
          }
        }, {
          key: "add",
          value: function add(teardown) {
            var subscription = teardown;

            if (!teardown) {
              return Subscription.EMPTY;
            }

            switch (typeof teardown) {
              case 'function':
                subscription = new Subscription(teardown);

              case 'object':
                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
                  return subscription;
                } else if (this.closed) {
                  subscription.unsubscribe();
                  return subscription;
                } else if (!(subscription instanceof Subscription)) {
                  var tmp = subscription;
                  subscription = new Subscription();
                  subscription._subscriptions = [tmp];
                }

                break;

              default:
                {
                  throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
                }
            }

            var _subscription = subscription,
                _parentOrParents = _subscription._parentOrParents;

            if (_parentOrParents === null) {
              subscription._parentOrParents = this;
            } else if (_parentOrParents instanceof Subscription) {
              if (_parentOrParents === this) {
                return subscription;
              }

              subscription._parentOrParents = [_parentOrParents, this];
            } else if (_parentOrParents.indexOf(this) === -1) {
              _parentOrParents.push(this);
            } else {
              return subscription;
            }

            var subscriptions = this._subscriptions;

            if (subscriptions === null) {
              this._subscriptions = [subscription];
            } else {
              subscriptions.push(subscription);
            }

            return subscription;
          }
        }, {
          key: "remove",
          value: function remove(subscription) {
            var subscriptions = this._subscriptions;

            if (subscriptions) {
              var subscriptionIndex = subscriptions.indexOf(subscription);

              if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
              }
            }
          }
        }]);

        return Subscription;
      }();

      Subscription.EMPTY = function (empty) {
        empty.closed = true;
        return empty;
      }(new Subscription());

      return Subscription;
    }();

    function flattenUnsubscriptionErrors(errors) {
      return errors.reduce(function (errs, err) {
        return errs.concat(err instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__["UnsubscriptionError"] ? err.errors : err);
      }, []);
    } //# sourceMappingURL=Subscription.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/config.js":
  /*!*******************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/config.js ***!
    \*******************************************************/

  /*! exports provided: config */

  /***/
  function node_modulesRxjs_esm2015InternalConfigJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "config", function () {
      return config;
    });

    var _enable_super_gross_mode_that_will_cause_bad_things = false;
    var config = {
      Promise: undefined,

      set useDeprecatedSynchronousErrorHandling(value) {
        if (value) {
          var error = new Error();
          console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
        } else if (_enable_super_gross_mode_that_will_cause_bad_things) {
          console.log('RxJS: Back to a better error behavior. Thank you. <3');
        }

        _enable_super_gross_mode_that_will_cause_bad_things = value;
      },

      get useDeprecatedSynchronousErrorHandling() {
        return _enable_super_gross_mode_that_will_cause_bad_things;
      }

    }; //# sourceMappingURL=config.js.map

    /***/
  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js":
  /*!*********************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js ***!
    \*********************************************************************************/

  /*! exports provided: ConnectableObservable, connectableObservableDescriptor */

  /***/
  function node_modulesRxjs_esm2015InternalObservableConnectableObservableJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ConnectableObservable", function () {
      return ConnectableObservable;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "connectableObservableDescriptor", function () {
      return connectableObservableDescriptor;
    });
    /* harmony import */


    var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subject */
    "./node_modules/rxjs/_esm2015/internal/Subject.js");
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");
    /* harmony import */


    var _operators_refCount__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../operators/refCount */
    "./node_modules/rxjs/_esm2015/internal/operators/refCount.js");

    var ConnectableObservable = /*#__PURE__*/function (_Observable__WEBPACK_2) {
      _inherits(ConnectableObservable, _Observable__WEBPACK_2);

      var _super51 = _createSuper(ConnectableObservable);

      function ConnectableObservable(source, subjectFactory) {
        var _this82;

        _classCallCheck(this, ConnectableObservable);

        _this82 = _super51.call(this);
        _this82.source = source;
        _this82.subjectFactory = subjectFactory;
        _this82._refCount = 0;
        _this82._isComplete = false;
        return _this82;
      }

      _createClass2(ConnectableObservable, [{
        key: "_subscribe",
        value: function _subscribe(subscriber) {
          return this.getSubject().subscribe(subscriber);
        }
      }, {
        key: "getSubject",
        value: function getSubject() {
          var subject = this._subject;

          if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
          }

          return this._subject;
        }
      }, {
        key: "connect",
        value: function connect() {
          var connection = this._connection;

          if (!connection) {
            this._isComplete = false;
            connection = this._connection = new _Subscription__WEBPACK_IMPORTED_MODULE_3__["Subscription"]();
            connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));

            if (connection.closed) {
              this._connection = null;
              connection = _Subscription__WEBPACK_IMPORTED_MODULE_3__["Subscription"].EMPTY;
            }
          }

          return connection;
        }
      }, {
        key: "refCount",
        value: function refCount() {
          return Object(_operators_refCount__WEBPACK_IMPORTED_MODULE_4__["refCount"])()(this);
        }
      }]);

      return ConnectableObservable;
    }(_Observable__WEBPACK_IMPORTED_MODULE_1__["Observable"]);

    var connectableObservableDescriptor = function () {
      var connectableProto = ConnectableObservable.prototype;
      return {
        operator: {
          value: null
        },
        _refCount: {
          value: 0,
          writable: true
        },
        _subject: {
          value: null,
          writable: true
        },
        _connection: {
          value: null,
          writable: true
        },
        _subscribe: {
          value: connectableProto._subscribe
        },
        _isComplete: {
          value: connectableProto._isComplete,
          writable: true
        },
        getSubject: {
          value: connectableProto.getSubject
        },
        connect: {
          value: connectableProto.connect
        },
        refCount: {
          value: connectableProto.refCount
        }
      };
    }();

    var ConnectableSubscriber = /*#__PURE__*/function (_Subject__WEBPACK_IMP4) {
      _inherits(ConnectableSubscriber, _Subject__WEBPACK_IMP4);

      var _super52 = _createSuper(ConnectableSubscriber);

      function ConnectableSubscriber(destination, connectable) {
        var _this83;

        _classCallCheck(this, ConnectableSubscriber);

        _this83 = _super52.call(this, destination);
        _this83.connectable = connectable;
        return _this83;
      }

      _createClass2(ConnectableSubscriber, [{
        key: "_error",
        value: function _error(err) {
          this._unsubscribe();

          _get(_getPrototypeOf(ConnectableSubscriber.prototype), "_error", this).call(this, err);
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.connectable._isComplete = true;

          this._unsubscribe();

          _get(_getPrototypeOf(ConnectableSubscriber.prototype), "_complete", this).call(this);
        }
      }, {
        key: "_unsubscribe",
        value: function _unsubscribe() {
          var connectable = this.connectable;

          if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;

            if (connection) {
              connection.unsubscribe();
            }
          }
        }
      }]);

      return ConnectableSubscriber;
    }(_Subject__WEBPACK_IMPORTED_MODULE_0__["SubjectSubscriber"]);

    var RefCountOperator = /*#__PURE__*/function () {
      function RefCountOperator(connectable) {
        _classCallCheck(this, RefCountOperator);

        this.connectable = connectable;
      }

      _createClass2(RefCountOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          var connectable = this.connectable;
          connectable._refCount++;
          var refCounter = new RefCountSubscriber(subscriber, connectable);
          var subscription = source.subscribe(refCounter);

          if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
          }

          return subscription;
        }
      }]);

      return RefCountOperator;
    }();

    var RefCountSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_4) {
      _inherits(RefCountSubscriber, _Subscriber__WEBPACK_4);

      var _super53 = _createSuper(RefCountSubscriber);

      function RefCountSubscriber(destination, connectable) {
        var _this84;

        _classCallCheck(this, RefCountSubscriber);

        _this84 = _super53.call(this, destination);
        _this84.connectable = connectable;
        return _this84;
      }

      _createClass2(RefCountSubscriber, [{
        key: "_unsubscribe",
        value: function _unsubscribe() {
          var connectable = this.connectable;

          if (!connectable) {
            this.connection = null;
            return;
          }

          this.connectable = null;
          var refCount = connectable._refCount;

          if (refCount <= 0) {
            this.connection = null;
            return;
          }

          connectable._refCount = refCount - 1;

          if (refCount > 1) {
            this.connection = null;
            return;
          }

          var connection = this.connection;
          var sharedConnection = connectable._connection;
          this.connection = null;

          if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
          }
        }
      }]);

      return RefCountSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_2__["Subscriber"]); //# sourceMappingURL=ConnectableObservable.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/SubscribeOnObservable.js":
  /*!*********************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/SubscribeOnObservable.js ***!
    \*********************************************************************************/

  /*! exports provided: SubscribeOnObservable */

  /***/
  function node_modulesRxjs_esm2015InternalObservableSubscribeOnObservableJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SubscribeOnObservable", function () {
      return SubscribeOnObservable;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _scheduler_asap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../scheduler/asap */
    "./node_modules/rxjs/_esm2015/internal/scheduler/asap.js");
    /* harmony import */


    var _util_isNumeric__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/isNumeric */
    "./node_modules/rxjs/_esm2015/internal/util/isNumeric.js");

    var SubscribeOnObservable = /*#__PURE__*/function (_Observable__WEBPACK_3) {
      _inherits(SubscribeOnObservable, _Observable__WEBPACK_3);

      var _super54 = _createSuper(SubscribeOnObservable);

      function SubscribeOnObservable(source) {
        var _this85;

        var delayTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var scheduler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _scheduler_asap__WEBPACK_IMPORTED_MODULE_1__["asap"];

        _classCallCheck(this, SubscribeOnObservable);

        _this85 = _super54.call(this);
        _this85.source = source;
        _this85.delayTime = delayTime;
        _this85.scheduler = scheduler;

        if (!Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_2__["isNumeric"])(delayTime) || delayTime < 0) {
          _this85.delayTime = 0;
        }

        if (!scheduler || typeof scheduler.schedule !== 'function') {
          _this85.scheduler = _scheduler_asap__WEBPACK_IMPORTED_MODULE_1__["asap"];
        }

        return _this85;
      }

      _createClass2(SubscribeOnObservable, [{
        key: "_subscribe",
        value: function _subscribe(subscriber) {
          var delay = this.delayTime;
          var source = this.source;
          var scheduler = this.scheduler;
          return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
            source: source,
            subscriber: subscriber
          });
        }
      }], [{
        key: "create",
        value: function create(source) {
          var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var scheduler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _scheduler_asap__WEBPACK_IMPORTED_MODULE_1__["asap"];
          return new SubscribeOnObservable(source, delay, scheduler);
        }
      }, {
        key: "dispatch",
        value: function dispatch(arg) {
          var source = arg.source,
              subscriber = arg.subscriber;
          return this.add(source.subscribe(subscriber));
        }
      }]);

      return SubscribeOnObservable;
    }(_Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]); //# sourceMappingURL=SubscribeOnObservable.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/bindCallback.js":
  /*!************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/bindCallback.js ***!
    \************************************************************************/

  /*! exports provided: bindCallback */

  /***/
  function node_modulesRxjs_esm2015InternalObservableBindCallbackJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "bindCallback", function () {
      return bindCallback;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../AsyncSubject */
    "./node_modules/rxjs/_esm2015/internal/AsyncSubject.js");
    /* harmony import */


    var _operators_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../operators/map */
    "./node_modules/rxjs/_esm2015/internal/operators/map.js");
    /* harmony import */


    var _util_canReportError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../util/canReportError */
    "./node_modules/rxjs/_esm2015/internal/util/canReportError.js");
    /* harmony import */


    var _util_isArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../util/isArray */
    "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
    /* harmony import */


    var _util_isScheduler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../util/isScheduler */
    "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");

    function bindCallback(callbackFunc, resultSelector, scheduler) {
      if (resultSelector) {
        if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_5__["isScheduler"])(resultSelector)) {
          scheduler = resultSelector;
        } else {
          return function () {
            return bindCallback(callbackFunc, scheduler).apply(void 0, arguments).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_2__["map"])(function (args) {
              return Object(_util_isArray__WEBPACK_IMPORTED_MODULE_4__["isArray"])(args) ? resultSelector.apply(void 0, _toConsumableArray(args)) : resultSelector(args);
            }));
          };
        }
      }

      return function () {
        for (var _len17 = arguments.length, args = new Array(_len17), _key15 = 0; _key15 < _len17; _key15++) {
          args[_key15] = arguments[_key15];
        }

        var context = this;
        var subject;
        var params = {
          context: context,
          subject: subject,
          callbackFunc: callbackFunc,
          scheduler: scheduler
        };
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          if (!scheduler) {
            if (!subject) {
              subject = new _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__["AsyncSubject"]();

              var handler = function handler() {
                for (var _len18 = arguments.length, innerArgs = new Array(_len18), _key16 = 0; _key16 < _len18; _key16++) {
                  innerArgs[_key16] = arguments[_key16];
                }

                subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                subject.complete();
              };

              try {
                callbackFunc.apply(context, [].concat(args, [handler]));
              } catch (err) {
                if (Object(_util_canReportError__WEBPACK_IMPORTED_MODULE_3__["canReportError"])(subject)) {
                  subject.error(err);
                } else {
                  console.warn(err);
                }
              }
            }

            return subject.subscribe(subscriber);
          } else {
            var state = {
              args: args,
              subscriber: subscriber,
              params: params
            };
            return scheduler.schedule(dispatch, 0, state);
          }
        });
      };
    }

    function dispatch(state) {
      var _this86 = this;

      var self = this;
      var args = state.args,
          subscriber = state.subscriber,
          params = state.params;
      var callbackFunc = params.callbackFunc,
          context = params.context,
          scheduler = params.scheduler;
      var subject = params.subject;

      if (!subject) {
        subject = params.subject = new _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__["AsyncSubject"]();

        var handler = function handler() {
          for (var _len19 = arguments.length, innerArgs = new Array(_len19), _key17 = 0; _key17 < _len19; _key17++) {
            innerArgs[_key17] = arguments[_key17];
          }

          var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;

          _this86.add(scheduler.schedule(dispatchNext, 0, {
            value: value,
            subject: subject
          }));
        };

        try {
          callbackFunc.apply(context, [].concat(_toConsumableArray(args), [handler]));
        } catch (err) {
          subject.error(err);
        }
      }

      this.add(subject.subscribe(subscriber));
    }

    function dispatchNext(state) {
      var value = state.value,
          subject = state.subject;
      subject.next(value);
      subject.complete();
    }

    function dispatchError(state) {
      var err = state.err,
          subject = state.subject;
      subject.error(err);
    } //# sourceMappingURL=bindCallback.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/bindNodeCallback.js":
  /*!****************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/bindNodeCallback.js ***!
    \****************************************************************************/

  /*! exports provided: bindNodeCallback */

  /***/
  function node_modulesRxjs_esm2015InternalObservableBindNodeCallbackJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "bindNodeCallback", function () {
      return bindNodeCallback;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../AsyncSubject */
    "./node_modules/rxjs/_esm2015/internal/AsyncSubject.js");
    /* harmony import */


    var _operators_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../operators/map */
    "./node_modules/rxjs/_esm2015/internal/operators/map.js");
    /* harmony import */


    var _util_canReportError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../util/canReportError */
    "./node_modules/rxjs/_esm2015/internal/util/canReportError.js");
    /* harmony import */


    var _util_isScheduler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../util/isScheduler */
    "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");
    /* harmony import */


    var _util_isArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../util/isArray */
    "./node_modules/rxjs/_esm2015/internal/util/isArray.js");

    function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
      if (resultSelector) {
        if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_4__["isScheduler"])(resultSelector)) {
          scheduler = resultSelector;
        } else {
          return function () {
            return bindNodeCallback(callbackFunc, scheduler).apply(void 0, arguments).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_2__["map"])(function (args) {
              return Object(_util_isArray__WEBPACK_IMPORTED_MODULE_5__["isArray"])(args) ? resultSelector.apply(void 0, _toConsumableArray(args)) : resultSelector(args);
            }));
          };
        }
      }

      return function () {
        for (var _len20 = arguments.length, args = new Array(_len20), _key18 = 0; _key18 < _len20; _key18++) {
          args[_key18] = arguments[_key18];
        }

        var params = {
          subject: undefined,
          args: args,
          callbackFunc: callbackFunc,
          scheduler: scheduler,
          context: this
        };
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          var context = params.context;
          var subject = params.subject;

          if (!scheduler) {
            if (!subject) {
              subject = params.subject = new _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__["AsyncSubject"]();

              var handler = function handler() {
                for (var _len21 = arguments.length, innerArgs = new Array(_len21), _key19 = 0; _key19 < _len21; _key19++) {
                  innerArgs[_key19] = arguments[_key19];
                }

                var err = innerArgs.shift();

                if (err) {
                  subject.error(err);
                  return;
                }

                subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                subject.complete();
              };

              try {
                callbackFunc.apply(context, [].concat(args, [handler]));
              } catch (err) {
                if (Object(_util_canReportError__WEBPACK_IMPORTED_MODULE_3__["canReportError"])(subject)) {
                  subject.error(err);
                } else {
                  console.warn(err);
                }
              }
            }

            return subject.subscribe(subscriber);
          } else {
            return scheduler.schedule(dispatch, 0, {
              params: params,
              subscriber: subscriber,
              context: context
            });
          }
        });
      };
    }

    function dispatch(state) {
      var _this87 = this;

      var params = state.params,
          subscriber = state.subscriber,
          context = state.context;
      var callbackFunc = params.callbackFunc,
          args = params.args,
          scheduler = params.scheduler;
      var subject = params.subject;

      if (!subject) {
        subject = params.subject = new _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__["AsyncSubject"]();

        var handler = function handler() {
          for (var _len22 = arguments.length, innerArgs = new Array(_len22), _key20 = 0; _key20 < _len22; _key20++) {
            innerArgs[_key20] = arguments[_key20];
          }

          var err = innerArgs.shift();

          if (err) {
            _this87.add(scheduler.schedule(dispatchError, 0, {
              err: err,
              subject: subject
            }));
          } else {
            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;

            _this87.add(scheduler.schedule(dispatchNext, 0, {
              value: value,
              subject: subject
            }));
          }
        };

        try {
          callbackFunc.apply(context, [].concat(_toConsumableArray(args), [handler]));
        } catch (err) {
          this.add(scheduler.schedule(dispatchError, 0, {
            err: err,
            subject: subject
          }));
        }
      }

      this.add(subject.subscribe(subscriber));
    }

    function dispatchNext(arg) {
      var value = arg.value,
          subject = arg.subject;
      subject.next(value);
      subject.complete();
    }

    function dispatchError(arg) {
      var err = arg.err,
          subject = arg.subject;
      subject.error(err);
    } //# sourceMappingURL=bindNodeCallback.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/combineLatest.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/combineLatest.js ***!
    \*************************************************************************/

  /*! exports provided: combineLatest, CombineLatestOperator, CombineLatestSubscriber */

  /***/
  function node_modulesRxjs_esm2015InternalObservableCombineLatestJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "combineLatest", function () {
      return combineLatest;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CombineLatestOperator", function () {
      return CombineLatestOperator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "CombineLatestSubscriber", function () {
      return CombineLatestSubscriber;
    });
    /* harmony import */


    var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util/isScheduler */
    "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");
    /* harmony import */


    var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/isArray */
    "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");
    /* harmony import */


    var _fromArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./fromArray */
    "./node_modules/rxjs/_esm2015/internal/observable/fromArray.js");

    var NONE = {};

    function combineLatest() {
      for (var _len23 = arguments.length, observables = new Array(_len23), _key21 = 0; _key21 < _len23; _key21++) {
        observables[_key21] = arguments[_key21];
      }

      var resultSelector = null;
      var scheduler = null;

      if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__["isScheduler"])(observables[observables.length - 1])) {
        scheduler = observables.pop();
      }

      if (typeof observables[observables.length - 1] === 'function') {
        resultSelector = observables.pop();
      }

      if (observables.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(observables[0])) {
        observables = observables[0];
      }

      return Object(_fromArray__WEBPACK_IMPORTED_MODULE_4__["fromArray"])(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
    }

    var CombineLatestOperator = /*#__PURE__*/function () {
      function CombineLatestOperator(resultSelector) {
        _classCallCheck(this, CombineLatestOperator);

        this.resultSelector = resultSelector;
      }

      _createClass2(CombineLatestOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
        }
      }]);

      return CombineLatestOperator;
    }();

    var CombineLatestSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB) {
      _inherits(CombineLatestSubscriber, _OuterSubscriber__WEB);

      var _super55 = _createSuper(CombineLatestSubscriber);

      function CombineLatestSubscriber(destination, resultSelector) {
        var _this88;

        _classCallCheck(this, CombineLatestSubscriber);

        _this88 = _super55.call(this, destination);
        _this88.resultSelector = resultSelector;
        _this88.active = 0;
        _this88.values = [];
        _this88.observables = [];
        return _this88;
      }

      _createClass2(CombineLatestSubscriber, [{
        key: "_next",
        value: function _next(observable) {
          this.values.push(NONE);
          this.observables.push(observable);
        }
      }, {
        key: "_complete",
        value: function _complete() {
          var observables = this.observables;
          var len = observables.length;

          if (len === 0) {
            this.destination.complete();
          } else {
            this.active = len;
            this.toRespond = len;

            for (var i = 0; i < len; i++) {
              var observable = observables[i];
              this.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(this, observable, observable, i));
            }
          }
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete(unused) {
          if ((this.active -= 1) === 0) {
            this.destination.complete();
          }
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          var values = this.values;
          var oldVal = values[outerIndex];
          var toRespond = !this.toRespond ? 0 : oldVal === NONE ? --this.toRespond : this.toRespond;
          values[outerIndex] = innerValue;

          if (toRespond === 0) {
            if (this.resultSelector) {
              this._tryResultSelector(values);
            } else {
              this.destination.next(values.slice());
            }
          }
        }
      }, {
        key: "_tryResultSelector",
        value: function _tryResultSelector(values) {
          var result;

          try {
            result = this.resultSelector.apply(this, values);
          } catch (err) {
            this.destination.error(err);
            return;
          }

          this.destination.next(result);
        }
      }]);

      return CombineLatestSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"]); //# sourceMappingURL=combineLatest.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/concat.js":
  /*!******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/concat.js ***!
    \******************************************************************/

  /*! exports provided: concat */

  /***/
  function node_modulesRxjs_esm2015InternalObservableConcatJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "concat", function () {
      return concat;
    });
    /* harmony import */


    var _of__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./of */
    "./node_modules/rxjs/_esm2015/internal/observable/of.js");
    /* harmony import */


    var _operators_concatAll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../operators/concatAll */
    "./node_modules/rxjs/_esm2015/internal/operators/concatAll.js");

    function concat() {
      return Object(_operators_concatAll__WEBPACK_IMPORTED_MODULE_1__["concatAll"])()(Object(_of__WEBPACK_IMPORTED_MODULE_0__["of"]).apply(void 0, arguments));
    } //# sourceMappingURL=concat.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/defer.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/defer.js ***!
    \*****************************************************************/

  /*! exports provided: defer */

  /***/
  function node_modulesRxjs_esm2015InternalObservableDeferJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "defer", function () {
      return defer;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./from */
    "./node_modules/rxjs/_esm2015/internal/observable/from.js");
    /* harmony import */


    var _empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./empty */
    "./node_modules/rxjs/_esm2015/internal/observable/empty.js");

    function defer(observableFactory) {
      return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var input;

        try {
          input = observableFactory();
        } catch (err) {
          subscriber.error(err);
          return undefined;
        }

        var source = input ? Object(_from__WEBPACK_IMPORTED_MODULE_1__["from"])(input) : Object(_empty__WEBPACK_IMPORTED_MODULE_2__["empty"])();
        return source.subscribe(subscriber);
      });
    } //# sourceMappingURL=defer.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/empty.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/empty.js ***!
    \*****************************************************************/

  /*! exports provided: EMPTY, empty */

  /***/
  function node_modulesRxjs_esm2015InternalObservableEmptyJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "EMPTY", function () {
      return EMPTY;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "empty", function () {
      return empty;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");

    var EMPTY = new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
      return subscriber.complete();
    });

    function empty(scheduler) {
      return scheduler ? emptyScheduled(scheduler) : EMPTY;
    }

    function emptyScheduled(scheduler) {
      return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        return scheduler.schedule(function () {
          return subscriber.complete();
        });
      });
    } //# sourceMappingURL=empty.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/forkJoin.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/forkJoin.js ***!
    \********************************************************************/

  /*! exports provided: forkJoin */

  /***/
  function node_modulesRxjs_esm2015InternalObservableForkJoinJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "forkJoin", function () {
      return forkJoin;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/isArray */
    "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
    /* harmony import */


    var _operators_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../operators/map */
    "./node_modules/rxjs/_esm2015/internal/operators/map.js");
    /* harmony import */


    var _util_isObject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../util/isObject */
    "./node_modules/rxjs/_esm2015/internal/util/isObject.js");
    /* harmony import */


    var _from__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./from */
    "./node_modules/rxjs/_esm2015/internal/observable/from.js");

    function forkJoin() {
      for (var _len24 = arguments.length, sources = new Array(_len24), _key22 = 0; _key22 < _len24; _key22++) {
        sources[_key22] = arguments[_key22];
      }

      if (sources.length === 1) {
        var first = sources[0];

        if (Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(first)) {
          return forkJoinInternal(first, null);
        }

        if (Object(_util_isObject__WEBPACK_IMPORTED_MODULE_3__["isObject"])(first) && Object.getPrototypeOf(first) === Object.prototype) {
          var keys = Object.keys(first);
          return forkJoinInternal(keys.map(function (key) {
            return first[key];
          }), keys);
        }
      }

      if (typeof sources[sources.length - 1] === 'function') {
        var resultSelector = sources.pop();
        sources = sources.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(sources[0]) ? sources[0] : sources;
        return forkJoinInternal(sources, null).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_2__["map"])(function (args) {
          return resultSelector.apply(void 0, _toConsumableArray(args));
        }));
      }

      return forkJoinInternal(sources, null);
    }

    function forkJoinInternal(sources, keys) {
      return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var len = sources.length;

        if (len === 0) {
          subscriber.complete();
          return;
        }

        var values = new Array(len);
        var completed = 0;
        var emitted = 0;

        var _loop3 = function _loop3(i) {
          var source = Object(_from__WEBPACK_IMPORTED_MODULE_4__["from"])(sources[i]);
          var hasValue = false;
          subscriber.add(source.subscribe({
            next: function next(value) {
              if (!hasValue) {
                hasValue = true;
                emitted++;
              }

              values[i] = value;
            },
            error: function error(err) {
              return subscriber.error(err);
            },
            complete: function complete() {
              completed++;

              if (completed === len || !hasValue) {
                if (emitted === len) {
                  subscriber.next(keys ? keys.reduce(function (result, key, i) {
                    return result[key] = values[i], result;
                  }, {}) : values);
                }

                subscriber.complete();
              }
            }
          }));
        };

        for (var i = 0; i < len; i++) {
          _loop3(i);
        }
      });
    } //# sourceMappingURL=forkJoin.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/from.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/from.js ***!
    \****************************************************************/

  /*! exports provided: from */

  /***/
  function node_modulesRxjs_esm2015InternalObservableFromJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "from", function () {
      return from;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/subscribeTo */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeTo.js");
    /* harmony import */


    var _scheduled_scheduled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../scheduled/scheduled */
    "./node_modules/rxjs/_esm2015/internal/scheduled/scheduled.js");

    function from(input, scheduler) {
      if (!scheduler) {
        if (input instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]) {
          return input;
        }

        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](Object(_util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__["subscribeTo"])(input));
      } else {
        return Object(_scheduled_scheduled__WEBPACK_IMPORTED_MODULE_2__["scheduled"])(input, scheduler);
      }
    } //# sourceMappingURL=from.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/fromArray.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/fromArray.js ***!
    \*********************************************************************/

  /*! exports provided: fromArray */

  /***/
  function node_modulesRxjs_esm2015InternalObservableFromArrayJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "fromArray", function () {
      return fromArray;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _util_subscribeToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/subscribeToArray */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js");
    /* harmony import */


    var _scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../scheduled/scheduleArray */
    "./node_modules/rxjs/_esm2015/internal/scheduled/scheduleArray.js");

    function fromArray(input, scheduler) {
      if (!scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](Object(_util_subscribeToArray__WEBPACK_IMPORTED_MODULE_1__["subscribeToArray"])(input));
      } else {
        return Object(_scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__["scheduleArray"])(input, scheduler);
      }
    } //# sourceMappingURL=fromArray.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/fromEvent.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/fromEvent.js ***!
    \*********************************************************************/

  /*! exports provided: fromEvent */

  /***/
  function node_modulesRxjs_esm2015InternalObservableFromEventJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "fromEvent", function () {
      return fromEvent;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/isArray */
    "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
    /* harmony import */


    var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/isFunction */
    "./node_modules/rxjs/_esm2015/internal/util/isFunction.js");
    /* harmony import */


    var _operators_map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../operators/map */
    "./node_modules/rxjs/_esm2015/internal/operators/map.js");

    var toString = function () {
      return Object.prototype.toString;
    }();

    function fromEvent(target, eventName, options, resultSelector) {
      if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(options)) {
        resultSelector = options;
        options = undefined;
      }

      if (resultSelector) {
        return fromEvent(target, eventName, options).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_3__["map"])(function (args) {
          return Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(args) ? resultSelector.apply(void 0, _toConsumableArray(args)) : resultSelector(args);
        }));
      }

      return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        function handler(e) {
          if (arguments.length > 1) {
            subscriber.next(Array.prototype.slice.call(arguments));
          } else {
            subscriber.next(e);
          }
        }

        setupSubscription(target, eventName, handler, subscriber, options);
      });
    }

    function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
      var unsubscribe;

      if (isEventTarget(sourceObj)) {
        var source = sourceObj;
        sourceObj.addEventListener(eventName, handler, options);

        unsubscribe = function unsubscribe() {
          return source.removeEventListener(eventName, handler, options);
        };
      } else if (isJQueryStyleEventEmitter(sourceObj)) {
        var _source = sourceObj;
        sourceObj.on(eventName, handler);

        unsubscribe = function unsubscribe() {
          return _source.off(eventName, handler);
        };
      } else if (isNodeStyleEventEmitter(sourceObj)) {
        var _source2 = sourceObj;
        sourceObj.addListener(eventName, handler);

        unsubscribe = function unsubscribe() {
          return _source2.removeListener(eventName, handler);
        };
      } else if (sourceObj && sourceObj.length) {
        for (var i = 0, _len25 = sourceObj.length; i < _len25; i++) {
          setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
        }
      } else {
        throw new TypeError('Invalid event target');
      }

      subscriber.add(unsubscribe);
    }

    function isNodeStyleEventEmitter(sourceObj) {
      return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
    }

    function isJQueryStyleEventEmitter(sourceObj) {
      return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
    }

    function isEventTarget(sourceObj) {
      return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
    } //# sourceMappingURL=fromEvent.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/fromEventPattern.js":
  /*!****************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/fromEventPattern.js ***!
    \****************************************************************************/

  /*! exports provided: fromEventPattern */

  /***/
  function node_modulesRxjs_esm2015InternalObservableFromEventPatternJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "fromEventPattern", function () {
      return fromEventPattern;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/isArray */
    "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
    /* harmony import */


    var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/isFunction */
    "./node_modules/rxjs/_esm2015/internal/util/isFunction.js");
    /* harmony import */


    var _operators_map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../operators/map */
    "./node_modules/rxjs/_esm2015/internal/operators/map.js");

    function fromEventPattern(addHandler, removeHandler, resultSelector) {
      if (resultSelector) {
        return fromEventPattern(addHandler, removeHandler).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_3__["map"])(function (args) {
          return Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(args) ? resultSelector.apply(void 0, _toConsumableArray(args)) : resultSelector(args);
        }));
      }

      return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var handler = function handler() {
          for (var _len26 = arguments.length, e = new Array(_len26), _key23 = 0; _key23 < _len26; _key23++) {
            e[_key23] = arguments[_key23];
          }

          return subscriber.next(e.length === 1 ? e[0] : e);
        };

        var retValue;

        try {
          retValue = addHandler(handler);
        } catch (err) {
          subscriber.error(err);
          return undefined;
        }

        if (!Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(removeHandler)) {
          return undefined;
        }

        return function () {
          return removeHandler(handler, retValue);
        };
      });
    } //# sourceMappingURL=fromEventPattern.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/generate.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/generate.js ***!
    \********************************************************************/

  /*! exports provided: generate */

  /***/
  function node_modulesRxjs_esm2015InternalObservableGenerateJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "generate", function () {
      return generate;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/identity */
    "./node_modules/rxjs/_esm2015/internal/util/identity.js");
    /* harmony import */


    var _util_isScheduler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/isScheduler */
    "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");

    function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
      var resultSelector;
      var initialState;

      if (arguments.length == 1) {
        var options = initialStateOrOptions;
        initialState = options.initialState;
        condition = options.condition;
        iterate = options.iterate;
        resultSelector = options.resultSelector || _util_identity__WEBPACK_IMPORTED_MODULE_1__["identity"];
        scheduler = options.scheduler;
      } else if (resultSelectorOrObservable === undefined || Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_2__["isScheduler"])(resultSelectorOrObservable)) {
        initialState = initialStateOrOptions;
        resultSelector = _util_identity__WEBPACK_IMPORTED_MODULE_1__["identity"];
        scheduler = resultSelectorOrObservable;
      } else {
        initialState = initialStateOrOptions;
        resultSelector = resultSelectorOrObservable;
      }

      return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var state = initialState;

        if (scheduler) {
          return scheduler.schedule(dispatch, 0, {
            subscriber: subscriber,
            iterate: iterate,
            condition: condition,
            resultSelector: resultSelector,
            state: state
          });
        }

        do {
          if (condition) {
            var conditionResult = void 0;

            try {
              conditionResult = condition(state);
            } catch (err) {
              subscriber.error(err);
              return undefined;
            }

            if (!conditionResult) {
              subscriber.complete();
              break;
            }
          }

          var value = void 0;

          try {
            value = resultSelector(state);
          } catch (err) {
            subscriber.error(err);
            return undefined;
          }

          subscriber.next(value);

          if (subscriber.closed) {
            break;
          }

          try {
            state = iterate(state);
          } catch (err) {
            subscriber.error(err);
            return undefined;
          }
        } while (true);

        return undefined;
      });
    }

    function dispatch(state) {
      var subscriber = state.subscriber,
          condition = state.condition;

      if (subscriber.closed) {
        return undefined;
      }

      if (state.needIterate) {
        try {
          state.state = state.iterate(state.state);
        } catch (err) {
          subscriber.error(err);
          return undefined;
        }
      } else {
        state.needIterate = true;
      }

      if (condition) {
        var conditionResult;

        try {
          conditionResult = condition(state.state);
        } catch (err) {
          subscriber.error(err);
          return undefined;
        }

        if (!conditionResult) {
          subscriber.complete();
          return undefined;
        }

        if (subscriber.closed) {
          return undefined;
        }
      }

      var value;

      try {
        value = state.resultSelector(state.state);
      } catch (err) {
        subscriber.error(err);
        return undefined;
      }

      if (subscriber.closed) {
        return undefined;
      }

      subscriber.next(value);

      if (subscriber.closed) {
        return undefined;
      }

      return this.schedule(state);
    } //# sourceMappingURL=generate.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/iif.js":
  /*!***************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/iif.js ***!
    \***************************************************************/

  /*! exports provided: iif */

  /***/
  function node_modulesRxjs_esm2015InternalObservableIifJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "iif", function () {
      return iif;
    });
    /* harmony import */


    var _defer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./defer */
    "./node_modules/rxjs/_esm2015/internal/observable/defer.js");
    /* harmony import */


    var _empty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./empty */
    "./node_modules/rxjs/_esm2015/internal/observable/empty.js");

    function iif(condition) {
      var trueResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _empty__WEBPACK_IMPORTED_MODULE_1__["EMPTY"];
      var falseResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _empty__WEBPACK_IMPORTED_MODULE_1__["EMPTY"];
      return Object(_defer__WEBPACK_IMPORTED_MODULE_0__["defer"])(function () {
        return condition() ? trueResult : falseResult;
      });
    } //# sourceMappingURL=iif.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/interval.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/interval.js ***!
    \********************************************************************/

  /*! exports provided: interval */

  /***/
  function node_modulesRxjs_esm2015InternalObservableIntervalJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "interval", function () {
      return interval;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../scheduler/async */
    "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
    /* harmony import */


    var _util_isNumeric__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/isNumeric */
    "./node_modules/rxjs/_esm2015/internal/util/isNumeric.js");

    function interval() {
      var period = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];

      if (!Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_2__["isNumeric"])(period) || period < 0) {
        period = 0;
      }

      if (!scheduler || typeof scheduler.schedule !== 'function') {
        scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
      }

      return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        subscriber.add(scheduler.schedule(dispatch, period, {
          subscriber: subscriber,
          counter: 0,
          period: period
        }));
        return subscriber;
      });
    }

    function dispatch(state) {
      var subscriber = state.subscriber,
          counter = state.counter,
          period = state.period;
      subscriber.next(counter);
      this.schedule({
        subscriber: subscriber,
        counter: counter + 1,
        period: period
      }, period);
    } //# sourceMappingURL=interval.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/merge.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/merge.js ***!
    \*****************************************************************/

  /*! exports provided: merge */

  /***/
  function node_modulesRxjs_esm2015InternalObservableMergeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "merge", function () {
      return merge;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _util_isScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/isScheduler */
    "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");
    /* harmony import */


    var _operators_mergeAll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../operators/mergeAll */
    "./node_modules/rxjs/_esm2015/internal/operators/mergeAll.js");
    /* harmony import */


    var _fromArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./fromArray */
    "./node_modules/rxjs/_esm2015/internal/observable/fromArray.js");

    function merge() {
      var concurrent = Number.POSITIVE_INFINITY;
      var scheduler = null;

      for (var _len27 = arguments.length, observables = new Array(_len27), _key24 = 0; _key24 < _len27; _key24++) {
        observables[_key24] = arguments[_key24];
      }

      var last = observables[observables.length - 1];

      if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_1__["isScheduler"])(last)) {
        scheduler = observables.pop();

        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
          concurrent = observables.pop();
        }
      } else if (typeof last === 'number') {
        concurrent = observables.pop();
      }

      if (scheduler === null && observables.length === 1 && observables[0] instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]) {
        return observables[0];
      }

      return Object(_operators_mergeAll__WEBPACK_IMPORTED_MODULE_2__["mergeAll"])(concurrent)(Object(_fromArray__WEBPACK_IMPORTED_MODULE_3__["fromArray"])(observables, scheduler));
    } //# sourceMappingURL=merge.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/never.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/never.js ***!
    \*****************************************************************/

  /*! exports provided: NEVER, never */

  /***/
  function node_modulesRxjs_esm2015InternalObservableNeverJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NEVER", function () {
      return NEVER;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "never", function () {
      return never;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _util_noop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/noop */
    "./node_modules/rxjs/_esm2015/internal/util/noop.js");

    var NEVER = new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](_util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"]);

    function never() {
      return NEVER;
    } //# sourceMappingURL=never.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/of.js":
  /*!**************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/of.js ***!
    \**************************************************************/

  /*! exports provided: of */

  /***/
  function node_modulesRxjs_esm2015InternalObservableOfJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "of", function () {
      return of;
    });
    /* harmony import */


    var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util/isScheduler */
    "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");
    /* harmony import */


    var _fromArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./fromArray */
    "./node_modules/rxjs/_esm2015/internal/observable/fromArray.js");
    /* harmony import */


    var _scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../scheduled/scheduleArray */
    "./node_modules/rxjs/_esm2015/internal/scheduled/scheduleArray.js");

    function of() {
      for (var _len28 = arguments.length, args = new Array(_len28), _key25 = 0; _key25 < _len28; _key25++) {
        args[_key25] = arguments[_key25];
      }

      var scheduler = args[args.length - 1];

      if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__["isScheduler"])(scheduler)) {
        args.pop();
        return Object(_scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__["scheduleArray"])(args, scheduler);
      } else {
        return Object(_fromArray__WEBPACK_IMPORTED_MODULE_1__["fromArray"])(args);
      }
    } //# sourceMappingURL=of.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/onErrorResumeNext.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/onErrorResumeNext.js ***!
    \*****************************************************************************/

  /*! exports provided: onErrorResumeNext */

  /***/
  function node_modulesRxjs_esm2015InternalObservableOnErrorResumeNextJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function () {
      return onErrorResumeNext;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./from */
    "./node_modules/rxjs/_esm2015/internal/observable/from.js");
    /* harmony import */


    var _util_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/isArray */
    "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
    /* harmony import */


    var _empty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./empty */
    "./node_modules/rxjs/_esm2015/internal/observable/empty.js");

    function onErrorResumeNext() {
      for (var _len29 = arguments.length, sources = new Array(_len29), _key26 = 0; _key26 < _len29; _key26++) {
        sources[_key26] = arguments[_key26];
      }

      if (sources.length === 0) {
        return _empty__WEBPACK_IMPORTED_MODULE_3__["EMPTY"];
      }

      var first = sources[0],
          remainder = sources.slice(1);

      if (sources.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_2__["isArray"])(first)) {
        return onErrorResumeNext.apply(void 0, _toConsumableArray(first));
      }

      return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var subNext = function subNext() {
          return subscriber.add(onErrorResumeNext.apply(void 0, _toConsumableArray(remainder)).subscribe(subscriber));
        };

        return Object(_from__WEBPACK_IMPORTED_MODULE_1__["from"])(first).subscribe({
          next: function next(value) {
            subscriber.next(value);
          },
          error: subNext,
          complete: subNext
        });
      });
    } //# sourceMappingURL=onErrorResumeNext.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/pairs.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/pairs.js ***!
    \*****************************************************************/

  /*! exports provided: pairs, dispatch */

  /***/
  function node_modulesRxjs_esm2015InternalObservablePairsJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "pairs", function () {
      return pairs;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "dispatch", function () {
      return dispatch;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");

    function pairs(obj, scheduler) {
      if (!scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          var keys = Object.keys(obj);

          for (var i = 0; i < keys.length && !subscriber.closed; i++) {
            var key = keys[i];

            if (obj.hasOwnProperty(key)) {
              subscriber.next([key, obj[key]]);
            }
          }

          subscriber.complete();
        });
      } else {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          var keys = Object.keys(obj);
          var subscription = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
          subscription.add(scheduler.schedule(dispatch, 0, {
            keys: keys,
            index: 0,
            subscriber: subscriber,
            subscription: subscription,
            obj: obj
          }));
          return subscription;
        });
      }
    }

    function dispatch(state) {
      var keys = state.keys,
          index = state.index,
          subscriber = state.subscriber,
          subscription = state.subscription,
          obj = state.obj;

      if (!subscriber.closed) {
        if (index < keys.length) {
          var key = keys[index];
          subscriber.next([key, obj[key]]);
          subscription.add(this.schedule({
            keys: keys,
            index: index + 1,
            subscriber: subscriber,
            subscription: subscription,
            obj: obj
          }));
        } else {
          subscriber.complete();
        }
      }
    } //# sourceMappingURL=pairs.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/partition.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/partition.js ***!
    \*********************************************************************/

  /*! exports provided: partition */

  /***/
  function node_modulesRxjs_esm2015InternalObservablePartitionJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "partition", function () {
      return partition;
    });
    /* harmony import */


    var _util_not__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util/not */
    "./node_modules/rxjs/_esm2015/internal/util/not.js");
    /* harmony import */


    var _util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/subscribeTo */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeTo.js");
    /* harmony import */


    var _operators_filter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../operators/filter */
    "./node_modules/rxjs/_esm2015/internal/operators/filter.js");
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");

    function partition(source, predicate, thisArg) {
      return [Object(_operators_filter__WEBPACK_IMPORTED_MODULE_2__["filter"])(predicate, thisArg)(new _Observable__WEBPACK_IMPORTED_MODULE_3__["Observable"](Object(_util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__["subscribeTo"])(source))), Object(_operators_filter__WEBPACK_IMPORTED_MODULE_2__["filter"])(Object(_util_not__WEBPACK_IMPORTED_MODULE_0__["not"])(predicate, thisArg))(new _Observable__WEBPACK_IMPORTED_MODULE_3__["Observable"](Object(_util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__["subscribeTo"])(source)))];
    } //# sourceMappingURL=partition.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/race.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/race.js ***!
    \****************************************************************/

  /*! exports provided: race, RaceOperator, RaceSubscriber */

  /***/
  function node_modulesRxjs_esm2015InternalObservableRaceJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "race", function () {
      return race;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RaceOperator", function () {
      return RaceOperator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RaceSubscriber", function () {
      return RaceSubscriber;
    });
    /* harmony import */


    var _util_isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util/isArray */
    "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
    /* harmony import */


    var _fromArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./fromArray */
    "./node_modules/rxjs/_esm2015/internal/observable/fromArray.js");
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function race() {
      for (var _len30 = arguments.length, observables = new Array(_len30), _key27 = 0; _key27 < _len30; _key27++) {
        observables[_key27] = arguments[_key27];
      }

      if (observables.length === 1) {
        if (Object(_util_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(observables[0])) {
          observables = observables[0];
        } else {
          return observables[0];
        }
      }

      return Object(_fromArray__WEBPACK_IMPORTED_MODULE_1__["fromArray"])(observables, undefined).lift(new RaceOperator());
    }

    var RaceOperator = /*#__PURE__*/function () {
      function RaceOperator() {
        _classCallCheck(this, RaceOperator);
      }

      _createClass2(RaceOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new RaceSubscriber(subscriber));
        }
      }]);

      return RaceOperator;
    }();

    var RaceSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB2) {
      _inherits(RaceSubscriber, _OuterSubscriber__WEB2);

      var _super56 = _createSuper(RaceSubscriber);

      function RaceSubscriber(destination) {
        var _this89;

        _classCallCheck(this, RaceSubscriber);

        _this89 = _super56.call(this, destination);
        _this89.hasFirst = false;
        _this89.observables = [];
        _this89.subscriptions = [];
        return _this89;
      }

      _createClass2(RaceSubscriber, [{
        key: "_next",
        value: function _next(observable) {
          this.observables.push(observable);
        }
      }, {
        key: "_complete",
        value: function _complete() {
          var observables = this.observables;
          var len = observables.length;

          if (len === 0) {
            this.destination.complete();
          } else {
            for (var i = 0; i < len && !this.hasFirst; i++) {
              var observable = observables[i];
              var subscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(this, observable, observable, i);

              if (this.subscriptions) {
                this.subscriptions.push(subscription);
              }

              this.add(subscription);
            }

            this.observables = null;
          }
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          if (!this.hasFirst) {
            this.hasFirst = true;

            for (var i = 0; i < this.subscriptions.length; i++) {
              if (i !== outerIndex) {
                var subscription = this.subscriptions[i];
                subscription.unsubscribe();
                this.remove(subscription);
              }
            }

            this.subscriptions = null;
          }

          this.destination.next(innerValue);
        }
      }]);

      return RaceSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"]); //# sourceMappingURL=race.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/range.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/range.js ***!
    \*****************************************************************/

  /*! exports provided: range, dispatch */

  /***/
  function node_modulesRxjs_esm2015InternalObservableRangeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "range", function () {
      return range;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "dispatch", function () {
      return dispatch;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");

    function range() {
      var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var count = arguments.length > 1 ? arguments[1] : undefined;
      var scheduler = arguments.length > 2 ? arguments[2] : undefined;
      return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        if (count === undefined) {
          count = start;
          start = 0;
        }

        var index = 0;
        var current = start;

        if (scheduler) {
          return scheduler.schedule(dispatch, 0, {
            index: index,
            count: count,
            start: start,
            subscriber: subscriber
          });
        } else {
          do {
            if (index++ >= count) {
              subscriber.complete();
              break;
            }

            subscriber.next(current++);

            if (subscriber.closed) {
              break;
            }
          } while (true);
        }

        return undefined;
      });
    }

    function dispatch(state) {
      var start = state.start,
          index = state.index,
          count = state.count,
          subscriber = state.subscriber;

      if (index >= count) {
        subscriber.complete();
        return;
      }

      subscriber.next(start);

      if (subscriber.closed) {
        return;
      }

      state.index = index + 1;
      state.start = start + 1;
      this.schedule(state);
    } //# sourceMappingURL=range.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/throwError.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/throwError.js ***!
    \**********************************************************************/

  /*! exports provided: throwError */

  /***/
  function node_modulesRxjs_esm2015InternalObservableThrowErrorJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "throwError", function () {
      return throwError;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");

    function throwError(error, scheduler) {
      if (!scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          return subscriber.error(error);
        });
      } else {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
          return scheduler.schedule(dispatch, 0, {
            error: error,
            subscriber: subscriber
          });
        });
      }
    }

    function dispatch(_ref19) {
      var error = _ref19.error,
          subscriber = _ref19.subscriber;
      subscriber.error(error);
    } //# sourceMappingURL=throwError.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/timer.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/timer.js ***!
    \*****************************************************************/

  /*! exports provided: timer */

  /***/
  function node_modulesRxjs_esm2015InternalObservableTimerJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "timer", function () {
      return timer;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../scheduler/async */
    "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
    /* harmony import */


    var _util_isNumeric__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/isNumeric */
    "./node_modules/rxjs/_esm2015/internal/util/isNumeric.js");
    /* harmony import */


    var _util_isScheduler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../util/isScheduler */
    "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");

    function timer() {
      var dueTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var periodOrScheduler = arguments.length > 1 ? arguments[1] : undefined;
      var scheduler = arguments.length > 2 ? arguments[2] : undefined;
      var period = -1;

      if (Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_2__["isNumeric"])(periodOrScheduler)) {
        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
      } else if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_3__["isScheduler"])(periodOrScheduler)) {
        scheduler = periodOrScheduler;
      }

      if (!Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_3__["isScheduler"])(scheduler)) {
        scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
      }

      return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var due = Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_2__["isNumeric"])(dueTime) ? dueTime : +dueTime - scheduler.now();
        return scheduler.schedule(dispatch, due, {
          index: 0,
          period: period,
          subscriber: subscriber
        });
      });
    }

    function dispatch(state) {
      var index = state.index,
          period = state.period,
          subscriber = state.subscriber;
      subscriber.next(index);

      if (subscriber.closed) {
        return;
      } else if (period === -1) {
        return subscriber.complete();
      }

      state.index = index + 1;
      this.schedule(state, period);
    } //# sourceMappingURL=timer.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/using.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/using.js ***!
    \*****************************************************************/

  /*! exports provided: using */

  /***/
  function node_modulesRxjs_esm2015InternalObservableUsingJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "using", function () {
      return using;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./from */
    "./node_modules/rxjs/_esm2015/internal/observable/from.js");
    /* harmony import */


    var _empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./empty */
    "./node_modules/rxjs/_esm2015/internal/observable/empty.js");

    function using(resourceFactory, observableFactory) {
      return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var resource;

        try {
          resource = resourceFactory();
        } catch (err) {
          subscriber.error(err);
          return undefined;
        }

        var result;

        try {
          result = observableFactory(resource);
        } catch (err) {
          subscriber.error(err);
          return undefined;
        }

        var source = result ? Object(_from__WEBPACK_IMPORTED_MODULE_1__["from"])(result) : _empty__WEBPACK_IMPORTED_MODULE_2__["EMPTY"];
        var subscription = source.subscribe(subscriber);
        return function () {
          subscription.unsubscribe();

          if (resource) {
            resource.unsubscribe();
          }
        };
      });
    } //# sourceMappingURL=using.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/observable/zip.js":
  /*!***************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/observable/zip.js ***!
    \***************************************************************/

  /*! exports provided: zip, ZipOperator, ZipSubscriber */

  /***/
  function node_modulesRxjs_esm2015InternalObservableZipJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "zip", function () {
      return zip;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ZipOperator", function () {
      return ZipOperator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ZipSubscriber", function () {
      return ZipSubscriber;
    });
    /* harmony import */


    var _fromArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./fromArray */
    "./node_modules/rxjs/_esm2015/internal/observable/fromArray.js");
    /* harmony import */


    var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/isArray */
    "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");
    /* harmony import */


    var _internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../../internal/symbol/iterator */
    "./node_modules/rxjs/_esm2015/internal/symbol/iterator.js");

    function zip() {
      for (var _len31 = arguments.length, observables = new Array(_len31), _key28 = 0; _key28 < _len31; _key28++) {
        observables[_key28] = arguments[_key28];
      }

      var resultSelector = observables[observables.length - 1];

      if (typeof resultSelector === 'function') {
        observables.pop();
      }

      return Object(_fromArray__WEBPACK_IMPORTED_MODULE_0__["fromArray"])(observables, undefined).lift(new ZipOperator(resultSelector));
    }

    var ZipOperator = /*#__PURE__*/function () {
      function ZipOperator(resultSelector) {
        _classCallCheck(this, ZipOperator);

        this.resultSelector = resultSelector;
      }

      _createClass2(ZipOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
        }
      }]);

      return ZipOperator;
    }();

    var ZipSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_5) {
      _inherits(ZipSubscriber, _Subscriber__WEBPACK_5);

      var _super57 = _createSuper(ZipSubscriber);

      function ZipSubscriber(destination, resultSelector) {
        var _this90;

        var values = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Object.create(null);

        _classCallCheck(this, ZipSubscriber);

        _this90 = _super57.call(this, destination);
        _this90.iterators = [];
        _this90.active = 0;
        _this90.resultSelector = typeof resultSelector === 'function' ? resultSelector : null;
        _this90.values = values;
        return _this90;
      }

      _createClass2(ZipSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var iterators = this.iterators;

          if (Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(value)) {
            iterators.push(new StaticArrayIterator(value));
          } else if (typeof value[_internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_5__["iterator"]] === 'function') {
            iterators.push(new StaticIterator(value[_internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_5__["iterator"]]()));
          } else {
            iterators.push(new ZipBufferIterator(this.destination, this, value));
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          var iterators = this.iterators;
          var len = iterators.length;
          this.unsubscribe();

          if (len === 0) {
            this.destination.complete();
            return;
          }

          this.active = len;

          for (var i = 0; i < len; i++) {
            var iterator = iterators[i];

            if (iterator.stillUnsubscribed) {
              var destination = this.destination;
              destination.add(iterator.subscribe(iterator, i));
            } else {
              this.active--;
            }
          }
        }
      }, {
        key: "notifyInactive",
        value: function notifyInactive() {
          this.active--;

          if (this.active === 0) {
            this.destination.complete();
          }
        }
      }, {
        key: "checkIterators",
        value: function checkIterators() {
          var iterators = this.iterators;
          var len = iterators.length;
          var destination = this.destination;

          for (var i = 0; i < len; i++) {
            var iterator = iterators[i];

            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
              return;
            }
          }

          var shouldComplete = false;
          var args = [];

          for (var _i21 = 0; _i21 < len; _i21++) {
            var _iterator9 = iterators[_i21];

            var result = _iterator9.next();

            if (_iterator9.hasCompleted()) {
              shouldComplete = true;
            }

            if (result.done) {
              destination.complete();
              return;
            }

            args.push(result.value);
          }

          if (this.resultSelector) {
            this._tryresultSelector(args);
          } else {
            destination.next(args);
          }

          if (shouldComplete) {
            destination.complete();
          }
        }
      }, {
        key: "_tryresultSelector",
        value: function _tryresultSelector(args) {
          var result;

          try {
            result = this.resultSelector.apply(this, args);
          } catch (err) {
            this.destination.error(err);
            return;
          }

          this.destination.next(result);
        }
      }]);

      return ZipSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_2__["Subscriber"]);

    var StaticIterator = /*#__PURE__*/function () {
      function StaticIterator(iterator) {
        _classCallCheck(this, StaticIterator);

        this.iterator = iterator;
        this.nextResult = iterator.next();
      }

      _createClass2(StaticIterator, [{
        key: "hasValue",
        value: function hasValue() {
          return true;
        }
      }, {
        key: "next",
        value: function next() {
          var result = this.nextResult;
          this.nextResult = this.iterator.next();
          return result;
        }
      }, {
        key: "hasCompleted",
        value: function hasCompleted() {
          var nextResult = this.nextResult;
          return nextResult && nextResult.done;
        }
      }]);

      return StaticIterator;
    }();

    var StaticArrayIterator = /*#__PURE__*/function () {
      function StaticArrayIterator(array) {
        _classCallCheck(this, StaticArrayIterator);

        this.array = array;
        this.index = 0;
        this.length = 0;
        this.length = array.length;
      }

      _createClass2(StaticArrayIterator, [{
        key: _internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_5__["iterator"],
        value: function value() {
          return this;
        }
      }, {
        key: "next",
        value: function next(value) {
          var i = this.index++;
          var array = this.array;
          return i < this.length ? {
            value: array[i],
            done: false
          } : {
            value: null,
            done: true
          };
        }
      }, {
        key: "hasValue",
        value: function hasValue() {
          return this.array.length > this.index;
        }
      }, {
        key: "hasCompleted",
        value: function hasCompleted() {
          return this.array.length === this.index;
        }
      }]);

      return StaticArrayIterator;
    }();

    var ZipBufferIterator = /*#__PURE__*/function (_OuterSubscriber__WEB3) {
      _inherits(ZipBufferIterator, _OuterSubscriber__WEB3);

      var _super58 = _createSuper(ZipBufferIterator);

      function ZipBufferIterator(destination, parent, observable) {
        var _this91;

        _classCallCheck(this, ZipBufferIterator);

        _this91 = _super58.call(this, destination);
        _this91.parent = parent;
        _this91.observable = observable;
        _this91.stillUnsubscribed = true;
        _this91.buffer = [];
        _this91.isComplete = false;
        return _this91;
      }

      _createClass2(ZipBufferIterator, [{
        key: _internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_5__["iterator"],
        value: function value() {
          return this;
        }
      }, {
        key: "next",
        value: function next() {
          var buffer = this.buffer;

          if (buffer.length === 0 && this.isComplete) {
            return {
              value: null,
              done: true
            };
          } else {
            return {
              value: buffer.shift(),
              done: false
            };
          }
        }
      }, {
        key: "hasValue",
        value: function hasValue() {
          return this.buffer.length > 0;
        }
      }, {
        key: "hasCompleted",
        value: function hasCompleted() {
          return this.buffer.length === 0 && this.isComplete;
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete() {
          if (this.buffer.length > 0) {
            this.isComplete = true;
            this.parent.notifyInactive();
          } else {
            this.destination.complete();
          }
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.buffer.push(innerValue);
          this.parent.checkIterators();
        }
      }, {
        key: "subscribe",
        value: function subscribe(value, index) {
          return Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__["subscribeToResult"])(this, this.observable, this, index);
        }
      }]);

      return ZipBufferIterator;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_3__["OuterSubscriber"]); //# sourceMappingURL=zip.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/audit.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/audit.js ***!
    \****************************************************************/

  /*! exports provided: audit */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsAuditJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "audit", function () {
      return audit;
    });
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function audit(durationSelector) {
      return function auditOperatorFunction(source) {
        return source.lift(new AuditOperator(durationSelector));
      };
    }

    var AuditOperator = /*#__PURE__*/function () {
      function AuditOperator(durationSelector) {
        _classCallCheck(this, AuditOperator);

        this.durationSelector = durationSelector;
      }

      _createClass2(AuditOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
        }
      }]);

      return AuditOperator;
    }();

    var AuditSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB4) {
      _inherits(AuditSubscriber, _OuterSubscriber__WEB4);

      var _super59 = _createSuper(AuditSubscriber);

      function AuditSubscriber(destination, durationSelector) {
        var _this92;

        _classCallCheck(this, AuditSubscriber);

        _this92 = _super59.call(this, destination);
        _this92.durationSelector = durationSelector;
        _this92.hasValue = false;
        return _this92;
      }

      _createClass2(AuditSubscriber, [{
        key: "_next",
        value: function _next(value) {
          this.value = value;
          this.hasValue = true;

          if (!this.throttled) {
            var duration;

            try {
              var durationSelector = this.durationSelector;
              duration = durationSelector(value);
            } catch (err) {
              return this.destination.error(err);
            }

            var innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, duration);

            if (!innerSubscription || innerSubscription.closed) {
              this.clearThrottle();
            } else {
              this.add(this.throttled = innerSubscription);
            }
          }
        }
      }, {
        key: "clearThrottle",
        value: function clearThrottle() {
          var value = this.value,
              hasValue = this.hasValue,
              throttled = this.throttled;

          if (throttled) {
            this.remove(throttled);
            this.throttled = null;
            throttled.unsubscribe();
          }

          if (hasValue) {
            this.value = null;
            this.hasValue = false;
            this.destination.next(value);
          }
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex) {
          this.clearThrottle();
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete() {
          this.clearThrottle();
        }
      }]);

      return AuditSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"]); //# sourceMappingURL=audit.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/auditTime.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/auditTime.js ***!
    \********************************************************************/

  /*! exports provided: auditTime */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsAuditTimeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "auditTime", function () {
      return auditTime;
    });
    /* harmony import */


    var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../scheduler/async */
    "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
    /* harmony import */


    var _audit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./audit */
    "./node_modules/rxjs/_esm2015/internal/operators/audit.js");
    /* harmony import */


    var _observable_timer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../observable/timer */
    "./node_modules/rxjs/_esm2015/internal/observable/timer.js");

    function auditTime(duration) {
      var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"];
      return Object(_audit__WEBPACK_IMPORTED_MODULE_1__["audit"])(function () {
        return Object(_observable_timer__WEBPACK_IMPORTED_MODULE_2__["timer"])(duration, scheduler);
      });
    } //# sourceMappingURL=auditTime.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/buffer.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/buffer.js ***!
    \*****************************************************************/

  /*! exports provided: buffer */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsBufferJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "buffer", function () {
      return buffer;
    });
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function buffer(closingNotifier) {
      return function bufferOperatorFunction(source) {
        return source.lift(new BufferOperator(closingNotifier));
      };
    }

    var BufferOperator = /*#__PURE__*/function () {
      function BufferOperator(closingNotifier) {
        _classCallCheck(this, BufferOperator);

        this.closingNotifier = closingNotifier;
      }

      _createClass2(BufferOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
        }
      }]);

      return BufferOperator;
    }();

    var BufferSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB5) {
      _inherits(BufferSubscriber, _OuterSubscriber__WEB5);

      var _super60 = _createSuper(BufferSubscriber);

      function BufferSubscriber(destination, closingNotifier) {
        var _this93;

        _classCallCheck(this, BufferSubscriber);

        _this93 = _super60.call(this, destination);
        _this93.buffer = [];

        _this93.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(_assertThisInitialized(_this93), closingNotifier));

        return _this93;
      }

      _createClass2(BufferSubscriber, [{
        key: "_next",
        value: function _next(value) {
          this.buffer.push(value);
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          var buffer = this.buffer;
          this.buffer = [];
          this.destination.next(buffer);
        }
      }]);

      return BufferSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"]); //# sourceMappingURL=buffer.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/bufferCount.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/bufferCount.js ***!
    \**********************************************************************/

  /*! exports provided: bufferCount */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsBufferCountJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "bufferCount", function () {
      return bufferCount;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function bufferCount(bufferSize) {
      var startBufferEvery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return function bufferCountOperatorFunction(source) {
        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));
      };
    }

    var BufferCountOperator = /*#__PURE__*/function () {
      function BufferCountOperator(bufferSize, startBufferEvery) {
        _classCallCheck(this, BufferCountOperator);

        this.bufferSize = bufferSize;
        this.startBufferEvery = startBufferEvery;

        if (!startBufferEvery || bufferSize === startBufferEvery) {
          this.subscriberClass = BufferCountSubscriber;
        } else {
          this.subscriberClass = BufferSkipCountSubscriber;
        }
      }

      _createClass2(BufferCountOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
        }
      }]);

      return BufferCountOperator;
    }();

    var BufferCountSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_6) {
      _inherits(BufferCountSubscriber, _Subscriber__WEBPACK_6);

      var _super61 = _createSuper(BufferCountSubscriber);

      function BufferCountSubscriber(destination, bufferSize) {
        var _this94;

        _classCallCheck(this, BufferCountSubscriber);

        _this94 = _super61.call(this, destination);
        _this94.bufferSize = bufferSize;
        _this94.buffer = [];
        return _this94;
      }

      _createClass2(BufferCountSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var buffer = this.buffer;
          buffer.push(value);

          if (buffer.length == this.bufferSize) {
            this.destination.next(buffer);
            this.buffer = [];
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          var buffer = this.buffer;

          if (buffer.length > 0) {
            this.destination.next(buffer);
          }

          _get(_getPrototypeOf(BufferCountSubscriber.prototype), "_complete", this).call(this);
        }
      }]);

      return BufferCountSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

    var BufferSkipCountSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_7) {
      _inherits(BufferSkipCountSubscriber, _Subscriber__WEBPACK_7);

      var _super62 = _createSuper(BufferSkipCountSubscriber);

      function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
        var _this95;

        _classCallCheck(this, BufferSkipCountSubscriber);

        _this95 = _super62.call(this, destination);
        _this95.bufferSize = bufferSize;
        _this95.startBufferEvery = startBufferEvery;
        _this95.buffers = [];
        _this95.count = 0;
        return _this95;
      }

      _createClass2(BufferSkipCountSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var bufferSize = this.bufferSize,
              startBufferEvery = this.startBufferEvery,
              buffers = this.buffers,
              count = this.count;
          this.count++;

          if (count % startBufferEvery === 0) {
            buffers.push([]);
          }

          for (var i = buffers.length; i--;) {
            var buffer = buffers[i];
            buffer.push(value);

            if (buffer.length === bufferSize) {
              buffers.splice(i, 1);
              this.destination.next(buffer);
            }
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          var buffers = this.buffers,
              destination = this.destination;

          while (buffers.length > 0) {
            var buffer = buffers.shift();

            if (buffer.length > 0) {
              destination.next(buffer);
            }
          }

          _get(_getPrototypeOf(BufferSkipCountSubscriber.prototype), "_complete", this).call(this);
        }
      }]);

      return BufferSkipCountSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=bufferCount.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/bufferTime.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/bufferTime.js ***!
    \*********************************************************************/

  /*! exports provided: bufferTime */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsBufferTimeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "bufferTime", function () {
      return bufferTime;
    });
    /* harmony import */


    var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../scheduler/async */
    "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _util_isScheduler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/isScheduler */
    "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");

    function bufferTime(bufferTimeSpan) {
      var length = arguments.length;
      var scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"];

      if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_2__["isScheduler"])(arguments[arguments.length - 1])) {
        scheduler = arguments[arguments.length - 1];
        length--;
      }

      var bufferCreationInterval = null;

      if (length >= 2) {
        bufferCreationInterval = arguments[1];
      }

      var maxBufferSize = Number.POSITIVE_INFINITY;

      if (length >= 3) {
        maxBufferSize = arguments[2];
      }

      return function bufferTimeOperatorFunction(source) {
        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
      };
    }

    var BufferTimeOperator = /*#__PURE__*/function () {
      function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        _classCallCheck(this, BufferTimeOperator);

        this.bufferTimeSpan = bufferTimeSpan;
        this.bufferCreationInterval = bufferCreationInterval;
        this.maxBufferSize = maxBufferSize;
        this.scheduler = scheduler;
      }

      _createClass2(BufferTimeOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
        }
      }]);

      return BufferTimeOperator;
    }();

    var Context = function Context() {
      _classCallCheck(this, Context);

      this.buffer = [];
    };

    var BufferTimeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_8) {
      _inherits(BufferTimeSubscriber, _Subscriber__WEBPACK_8);

      var _super63 = _createSuper(BufferTimeSubscriber);

      function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        var _this96;

        _classCallCheck(this, BufferTimeSubscriber);

        _this96 = _super63.call(this, destination);
        _this96.bufferTimeSpan = bufferTimeSpan;
        _this96.bufferCreationInterval = bufferCreationInterval;
        _this96.maxBufferSize = maxBufferSize;
        _this96.scheduler = scheduler;
        _this96.contexts = [];

        var context = _this96.openContext();

        _this96.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;

        if (_this96.timespanOnly) {
          var timeSpanOnlyState = {
            subscriber: _assertThisInitialized(_this96),
            context: context,
            bufferTimeSpan: bufferTimeSpan
          };

          _this96.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        } else {
          var closeState = {
            subscriber: _assertThisInitialized(_this96),
            context: context
          };
          var creationState = {
            bufferTimeSpan: bufferTimeSpan,
            bufferCreationInterval: bufferCreationInterval,
            subscriber: _assertThisInitialized(_this96),
            scheduler: scheduler
          };

          _this96.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));

          _this96.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
        }

        return _this96;
      }

      _createClass2(BufferTimeSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var contexts = this.contexts;
          var len = contexts.length;
          var filledBufferContext;

          for (var i = 0; i < len; i++) {
            var context = contexts[i];
            var buffer = context.buffer;
            buffer.push(value);

            if (buffer.length == this.maxBufferSize) {
              filledBufferContext = context;
            }
          }

          if (filledBufferContext) {
            this.onBufferFull(filledBufferContext);
          }
        }
      }, {
        key: "_error",
        value: function _error(err) {
          this.contexts.length = 0;

          _get(_getPrototypeOf(BufferTimeSubscriber.prototype), "_error", this).call(this, err);
        }
      }, {
        key: "_complete",
        value: function _complete() {
          var contexts = this.contexts,
              destination = this.destination;

          while (contexts.length > 0) {
            var context = contexts.shift();
            destination.next(context.buffer);
          }

          _get(_getPrototypeOf(BufferTimeSubscriber.prototype), "_complete", this).call(this);
        }
      }, {
        key: "_unsubscribe",
        value: function _unsubscribe() {
          this.contexts = null;
        }
      }, {
        key: "onBufferFull",
        value: function onBufferFull(context) {
          this.closeContext(context);
          var closeAction = context.closeAction;
          closeAction.unsubscribe();
          this.remove(closeAction);

          if (!this.closed && this.timespanOnly) {
            context = this.openContext();
            var bufferTimeSpan = this.bufferTimeSpan;
            var timeSpanOnlyState = {
              subscriber: this,
              context: context,
              bufferTimeSpan: bufferTimeSpan
            };
            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
          }
        }
      }, {
        key: "openContext",
        value: function openContext() {
          var context = new Context();
          this.contexts.push(context);
          return context;
        }
      }, {
        key: "closeContext",
        value: function closeContext(context) {
          this.destination.next(context.buffer);
          var contexts = this.contexts;
          var spliceIndex = contexts ? contexts.indexOf(context) : -1;

          if (spliceIndex >= 0) {
            contexts.splice(contexts.indexOf(context), 1);
          }
        }
      }]);

      return BufferTimeSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_1__["Subscriber"]);

    function dispatchBufferTimeSpanOnly(state) {
      var subscriber = state.subscriber;
      var prevContext = state.context;

      if (prevContext) {
        subscriber.closeContext(prevContext);
      }

      if (!subscriber.closed) {
        state.context = subscriber.openContext();
        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
      }
    }

    function dispatchBufferCreation(state) {
      var bufferCreationInterval = state.bufferCreationInterval,
          bufferTimeSpan = state.bufferTimeSpan,
          subscriber = state.subscriber,
          scheduler = state.scheduler;
      var context = subscriber.openContext();
      var action = this;

      if (!subscriber.closed) {
        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, {
          subscriber: subscriber,
          context: context
        }));
        action.schedule(state, bufferCreationInterval);
      }
    }

    function dispatchBufferClose(arg) {
      var subscriber = arg.subscriber,
          context = arg.context;
      subscriber.closeContext(context);
    } //# sourceMappingURL=bufferTime.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/bufferToggle.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/bufferToggle.js ***!
    \***********************************************************************/

  /*! exports provided: bufferToggle */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsBufferToggleJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "bufferToggle", function () {
      return bufferToggle;
    });
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");

    function bufferToggle(openings, closingSelector) {
      return function bufferToggleOperatorFunction(source) {
        return source.lift(new BufferToggleOperator(openings, closingSelector));
      };
    }

    var BufferToggleOperator = /*#__PURE__*/function () {
      function BufferToggleOperator(openings, closingSelector) {
        _classCallCheck(this, BufferToggleOperator);

        this.openings = openings;
        this.closingSelector = closingSelector;
      }

      _createClass2(BufferToggleOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
        }
      }]);

      return BufferToggleOperator;
    }();

    var BufferToggleSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB6) {
      _inherits(BufferToggleSubscriber, _OuterSubscriber__WEB6);

      var _super64 = _createSuper(BufferToggleSubscriber);

      function BufferToggleSubscriber(destination, openings, closingSelector) {
        var _this97;

        _classCallCheck(this, BufferToggleSubscriber);

        _this97 = _super64.call(this, destination);
        _this97.openings = openings;
        _this97.closingSelector = closingSelector;
        _this97.contexts = [];

        _this97.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(_assertThisInitialized(_this97), openings));

        return _this97;
      }

      _createClass2(BufferToggleSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var contexts = this.contexts;
          var len = contexts.length;

          for (var i = 0; i < len; i++) {
            contexts[i].buffer.push(value);
          }
        }
      }, {
        key: "_error",
        value: function _error(err) {
          var contexts = this.contexts;

          while (contexts.length > 0) {
            var context = contexts.shift();
            context.subscription.unsubscribe();
            context.buffer = null;
            context.subscription = null;
          }

          this.contexts = null;

          _get(_getPrototypeOf(BufferToggleSubscriber.prototype), "_error", this).call(this, err);
        }
      }, {
        key: "_complete",
        value: function _complete() {
          var contexts = this.contexts;

          while (contexts.length > 0) {
            var context = contexts.shift();
            this.destination.next(context.buffer);
            context.subscription.unsubscribe();
            context.buffer = null;
            context.subscription = null;
          }

          this.contexts = null;

          _get(_getPrototypeOf(BufferToggleSubscriber.prototype), "_complete", this).call(this);
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete(innerSub) {
          this.closeBuffer(innerSub.context);
        }
      }, {
        key: "openBuffer",
        value: function openBuffer(value) {
          try {
            var closingSelector = this.closingSelector;
            var closingNotifier = closingSelector.call(this, value);

            if (closingNotifier) {
              this.trySubscribe(closingNotifier);
            }
          } catch (err) {
            this._error(err);
          }
        }
      }, {
        key: "closeBuffer",
        value: function closeBuffer(context) {
          var contexts = this.contexts;

          if (contexts && context) {
            var buffer = context.buffer,
                subscription = context.subscription;
            this.destination.next(buffer);
            contexts.splice(contexts.indexOf(context), 1);
            this.remove(subscription);
            subscription.unsubscribe();
          }
        }
      }, {
        key: "trySubscribe",
        value: function trySubscribe(closingNotifier) {
          var contexts = this.contexts;
          var buffer = [];
          var subscription = new _Subscription__WEBPACK_IMPORTED_MODULE_0__["Subscription"]();
          var context = {
            buffer: buffer,
            subscription: subscription
          };
          contexts.push(context);
          var innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, closingNotifier, context);

          if (!innerSubscription || innerSubscription.closed) {
            this.closeBuffer(context);
          } else {
            innerSubscription.context = context;
            this.add(innerSubscription);
            subscription.add(innerSubscription);
          }
        }
      }]);

      return BufferToggleSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"]); //# sourceMappingURL=bufferToggle.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/bufferWhen.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/bufferWhen.js ***!
    \*********************************************************************/

  /*! exports provided: bufferWhen */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsBufferWhenJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "bufferWhen", function () {
      return bufferWhen;
    });
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function bufferWhen(closingSelector) {
      return function (source) {
        return source.lift(new BufferWhenOperator(closingSelector));
      };
    }

    var BufferWhenOperator = /*#__PURE__*/function () {
      function BufferWhenOperator(closingSelector) {
        _classCallCheck(this, BufferWhenOperator);

        this.closingSelector = closingSelector;
      }

      _createClass2(BufferWhenOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
        }
      }]);

      return BufferWhenOperator;
    }();

    var BufferWhenSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB7) {
      _inherits(BufferWhenSubscriber, _OuterSubscriber__WEB7);

      var _super65 = _createSuper(BufferWhenSubscriber);

      function BufferWhenSubscriber(destination, closingSelector) {
        var _this98;

        _classCallCheck(this, BufferWhenSubscriber);

        _this98 = _super65.call(this, destination);
        _this98.closingSelector = closingSelector;
        _this98.subscribing = false;

        _this98.openBuffer();

        return _this98;
      }

      _createClass2(BufferWhenSubscriber, [{
        key: "_next",
        value: function _next(value) {
          this.buffer.push(value);
        }
      }, {
        key: "_complete",
        value: function _complete() {
          var buffer = this.buffer;

          if (buffer) {
            this.destination.next(buffer);
          }

          _get(_getPrototypeOf(BufferWhenSubscriber.prototype), "_complete", this).call(this);
        }
      }, {
        key: "_unsubscribe",
        value: function _unsubscribe() {
          this.buffer = null;
          this.subscribing = false;
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.openBuffer();
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete() {
          if (this.subscribing) {
            this.complete();
          } else {
            this.openBuffer();
          }
        }
      }, {
        key: "openBuffer",
        value: function openBuffer() {
          var closingSubscription = this.closingSubscription;

          if (closingSubscription) {
            this.remove(closingSubscription);
            closingSubscription.unsubscribe();
          }

          var buffer = this.buffer;

          if (this.buffer) {
            this.destination.next(buffer);
          }

          this.buffer = [];
          var closingNotifier;

          try {
            var closingSelector = this.closingSelector;
            closingNotifier = closingSelector();
          } catch (err) {
            return this.error(err);
          }

          closingSubscription = new _Subscription__WEBPACK_IMPORTED_MODULE_0__["Subscription"]();
          this.closingSubscription = closingSubscription;
          this.add(closingSubscription);
          this.subscribing = true;
          closingSubscription.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(this, closingNotifier));
          this.subscribing = false;
        }
      }]);

      return BufferWhenSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__["OuterSubscriber"]); //# sourceMappingURL=bufferWhen.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/catchError.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/catchError.js ***!
    \*********************************************************************/

  /*! exports provided: catchError */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsCatchErrorJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "catchError", function () {
      return catchError;
    });
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../InnerSubscriber */
    "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function catchError(selector) {
      return function catchErrorOperatorFunction(source) {
        var operator = new CatchOperator(selector);
        var caught = source.lift(operator);
        return operator.caught = caught;
      };
    }

    var CatchOperator = /*#__PURE__*/function () {
      function CatchOperator(selector) {
        _classCallCheck(this, CatchOperator);

        this.selector = selector;
      }

      _createClass2(CatchOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
        }
      }]);

      return CatchOperator;
    }();

    var CatchSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB8) {
      _inherits(CatchSubscriber, _OuterSubscriber__WEB8);

      var _super66 = _createSuper(CatchSubscriber);

      function CatchSubscriber(destination, selector, caught) {
        var _this99;

        _classCallCheck(this, CatchSubscriber);

        _this99 = _super66.call(this, destination);
        _this99.selector = selector;
        _this99.caught = caught;
        return _this99;
      }

      _createClass2(CatchSubscriber, [{
        key: "error",
        value: function error(err) {
          if (!this.isStopped) {
            var result;

            try {
              result = this.selector(err, this.caught);
            } catch (err2) {
              _get(_getPrototypeOf(CatchSubscriber.prototype), "error", this).call(this, err2);

              return;
            }

            this._unsubscribeAndRecycle();

            var innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__["InnerSubscriber"](this, undefined, undefined);
            this.add(innerSubscriber);
            var innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(this, result, undefined, undefined, innerSubscriber);

            if (innerSubscription !== innerSubscriber) {
              this.add(innerSubscription);
            }
          }
        }
      }]);

      return CatchSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"]); //# sourceMappingURL=catchError.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/combineAll.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/combineAll.js ***!
    \*********************************************************************/

  /*! exports provided: combineAll */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsCombineAllJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "combineAll", function () {
      return combineAll;
    });
    /* harmony import */


    var _observable_combineLatest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../observable/combineLatest */
    "./node_modules/rxjs/_esm2015/internal/observable/combineLatest.js");

    function combineAll(project) {
      return function (source) {
        return source.lift(new _observable_combineLatest__WEBPACK_IMPORTED_MODULE_0__["CombineLatestOperator"](project));
      };
    } //# sourceMappingURL=combineAll.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/combineLatest.js":
  /*!************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/combineLatest.js ***!
    \************************************************************************/

  /*! exports provided: combineLatest */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsCombineLatestJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "combineLatest", function () {
      return combineLatest;
    });
    /* harmony import */


    var _util_isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util/isArray */
    "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
    /* harmony import */


    var _observable_combineLatest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../observable/combineLatest */
    "./node_modules/rxjs/_esm2015/internal/observable/combineLatest.js");
    /* harmony import */


    var _observable_from__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../observable/from */
    "./node_modules/rxjs/_esm2015/internal/observable/from.js");

    var none = {};

    function combineLatest() {
      for (var _len32 = arguments.length, observables = new Array(_len32), _key29 = 0; _key29 < _len32; _key29++) {
        observables[_key29] = arguments[_key29];
      }

      var project = null;

      if (typeof observables[observables.length - 1] === 'function') {
        project = observables.pop();
      }

      if (observables.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(observables[0])) {
        observables = observables[0].slice();
      }

      return function (source) {
        return source.lift.call(Object(_observable_from__WEBPACK_IMPORTED_MODULE_2__["from"])([source].concat(_toConsumableArray(observables))), new _observable_combineLatest__WEBPACK_IMPORTED_MODULE_1__["CombineLatestOperator"](project));
      };
    } //# sourceMappingURL=combineLatest.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/concat.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/concat.js ***!
    \*****************************************************************/

  /*! exports provided: concat */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsConcatJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "concat", function () {
      return concat;
    });
    /* harmony import */


    var _observable_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../observable/concat */
    "./node_modules/rxjs/_esm2015/internal/observable/concat.js");

    function concat() {
      for (var _len33 = arguments.length, observables = new Array(_len33), _key30 = 0; _key30 < _len33; _key30++) {
        observables[_key30] = arguments[_key30];
      }

      return function (source) {
        return source.lift.call(Object(_observable_concat__WEBPACK_IMPORTED_MODULE_0__["concat"]).apply(void 0, [source].concat(observables)));
      };
    } //# sourceMappingURL=concat.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/concatAll.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/concatAll.js ***!
    \********************************************************************/

  /*! exports provided: concatAll */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsConcatAllJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "concatAll", function () {
      return concatAll;
    });
    /* harmony import */


    var _mergeAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./mergeAll */
    "./node_modules/rxjs/_esm2015/internal/operators/mergeAll.js");

    function concatAll() {
      return Object(_mergeAll__WEBPACK_IMPORTED_MODULE_0__["mergeAll"])(1);
    } //# sourceMappingURL=concatAll.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/concatMap.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/concatMap.js ***!
    \********************************************************************/

  /*! exports provided: concatMap */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsConcatMapJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "concatMap", function () {
      return concatMap;
    });
    /* harmony import */


    var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./mergeMap */
    "./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js");

    function concatMap(project, resultSelector) {
      return Object(_mergeMap__WEBPACK_IMPORTED_MODULE_0__["mergeMap"])(project, resultSelector, 1);
    } //# sourceMappingURL=concatMap.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/concatMapTo.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/concatMapTo.js ***!
    \**********************************************************************/

  /*! exports provided: concatMapTo */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsConcatMapToJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "concatMapTo", function () {
      return concatMapTo;
    });
    /* harmony import */


    var _concatMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./concatMap */
    "./node_modules/rxjs/_esm2015/internal/operators/concatMap.js");

    function concatMapTo(innerObservable, resultSelector) {
      return Object(_concatMap__WEBPACK_IMPORTED_MODULE_0__["concatMap"])(function () {
        return innerObservable;
      }, resultSelector);
    } //# sourceMappingURL=concatMapTo.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/count.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/count.js ***!
    \****************************************************************/

  /*! exports provided: count */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsCountJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "count", function () {
      return count;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function count(predicate) {
      return function (source) {
        return source.lift(new CountOperator(predicate, source));
      };
    }

    var CountOperator = /*#__PURE__*/function () {
      function CountOperator(predicate, source) {
        _classCallCheck(this, CountOperator);

        this.predicate = predicate;
        this.source = source;
      }

      _createClass2(CountOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
        }
      }]);

      return CountOperator;
    }();

    var CountSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_9) {
      _inherits(CountSubscriber, _Subscriber__WEBPACK_9);

      var _super67 = _createSuper(CountSubscriber);

      function CountSubscriber(destination, predicate, source) {
        var _this100;

        _classCallCheck(this, CountSubscriber);

        _this100 = _super67.call(this, destination);
        _this100.predicate = predicate;
        _this100.source = source;
        _this100.count = 0;
        _this100.index = 0;
        return _this100;
      }

      _createClass2(CountSubscriber, [{
        key: "_next",
        value: function _next(value) {
          if (this.predicate) {
            this._tryPredicate(value);
          } else {
            this.count++;
          }
        }
      }, {
        key: "_tryPredicate",
        value: function _tryPredicate(value) {
          var result;

          try {
            result = this.predicate(value, this.index++, this.source);
          } catch (err) {
            this.destination.error(err);
            return;
          }

          if (result) {
            this.count++;
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.destination.next(this.count);
          this.destination.complete();
        }
      }]);

      return CountSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=count.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/debounce.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/debounce.js ***!
    \*******************************************************************/

  /*! exports provided: debounce */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsDebounceJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "debounce", function () {
      return debounce;
    });
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function debounce(durationSelector) {
      return function (source) {
        return source.lift(new DebounceOperator(durationSelector));
      };
    }

    var DebounceOperator = /*#__PURE__*/function () {
      function DebounceOperator(durationSelector) {
        _classCallCheck(this, DebounceOperator);

        this.durationSelector = durationSelector;
      }

      _createClass2(DebounceOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
        }
      }]);

      return DebounceOperator;
    }();

    var DebounceSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB9) {
      _inherits(DebounceSubscriber, _OuterSubscriber__WEB9);

      var _super68 = _createSuper(DebounceSubscriber);

      function DebounceSubscriber(destination, durationSelector) {
        var _this101;

        _classCallCheck(this, DebounceSubscriber);

        _this101 = _super68.call(this, destination);
        _this101.durationSelector = durationSelector;
        _this101.hasValue = false;
        _this101.durationSubscription = null;
        return _this101;
      }

      _createClass2(DebounceSubscriber, [{
        key: "_next",
        value: function _next(value) {
          try {
            var result = this.durationSelector.call(this, value);

            if (result) {
              this._tryNext(value, result);
            }
          } catch (err) {
            this.destination.error(err);
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.emitValue();
          this.destination.complete();
        }
      }, {
        key: "_tryNext",
        value: function _tryNext(value, duration) {
          var subscription = this.durationSubscription;
          this.value = value;
          this.hasValue = true;

          if (subscription) {
            subscription.unsubscribe();
            this.remove(subscription);
          }

          subscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, duration);

          if (subscription && !subscription.closed) {
            this.add(this.durationSubscription = subscription);
          }
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.emitValue();
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete() {
          this.emitValue();
        }
      }, {
        key: "emitValue",
        value: function emitValue() {
          if (this.hasValue) {
            var value = this.value;
            var subscription = this.durationSubscription;

            if (subscription) {
              this.durationSubscription = null;
              subscription.unsubscribe();
              this.remove(subscription);
            }

            this.value = null;
            this.hasValue = false;

            _get(_getPrototypeOf(DebounceSubscriber.prototype), "_next", this).call(this, value);
          }
        }
      }]);

      return DebounceSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"]); //# sourceMappingURL=debounce.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/debounceTime.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/debounceTime.js ***!
    \***********************************************************************/

  /*! exports provided: debounceTime */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsDebounceTimeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "debounceTime", function () {
      return debounceTime;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../scheduler/async */
    "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");

    function debounceTime(dueTime) {
      var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
      return function (source) {
        return source.lift(new DebounceTimeOperator(dueTime, scheduler));
      };
    }

    var DebounceTimeOperator = /*#__PURE__*/function () {
      function DebounceTimeOperator(dueTime, scheduler) {
        _classCallCheck(this, DebounceTimeOperator);

        this.dueTime = dueTime;
        this.scheduler = scheduler;
      }

      _createClass2(DebounceTimeOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
        }
      }]);

      return DebounceTimeOperator;
    }();

    var DebounceTimeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_10) {
      _inherits(DebounceTimeSubscriber, _Subscriber__WEBPACK_10);

      var _super69 = _createSuper(DebounceTimeSubscriber);

      function DebounceTimeSubscriber(destination, dueTime, scheduler) {
        var _this102;

        _classCallCheck(this, DebounceTimeSubscriber);

        _this102 = _super69.call(this, destination);
        _this102.dueTime = dueTime;
        _this102.scheduler = scheduler;
        _this102.debouncedSubscription = null;
        _this102.lastValue = null;
        _this102.hasValue = false;
        return _this102;
      }

      _createClass2(DebounceTimeSubscriber, [{
        key: "_next",
        value: function _next(value) {
          this.clearDebounce();
          this.lastValue = value;
          this.hasValue = true;
          this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.debouncedNext();
          this.destination.complete();
        }
      }, {
        key: "debouncedNext",
        value: function debouncedNext() {
          this.clearDebounce();

          if (this.hasValue) {
            var lastValue = this.lastValue;
            this.lastValue = null;
            this.hasValue = false;
            this.destination.next(lastValue);
          }
        }
      }, {
        key: "clearDebounce",
        value: function clearDebounce() {
          var debouncedSubscription = this.debouncedSubscription;

          if (debouncedSubscription !== null) {
            this.remove(debouncedSubscription);
            debouncedSubscription.unsubscribe();
            this.debouncedSubscription = null;
          }
        }
      }]);

      return DebounceTimeSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

    function dispatchNext(subscriber) {
      subscriber.debouncedNext();
    } //# sourceMappingURL=debounceTime.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js ***!
    \*************************************************************************/

  /*! exports provided: defaultIfEmpty */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsDefaultIfEmptyJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "defaultIfEmpty", function () {
      return defaultIfEmpty;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function defaultIfEmpty() {
      var defaultValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      return function (source) {
        return source.lift(new DefaultIfEmptyOperator(defaultValue));
      };
    }

    var DefaultIfEmptyOperator = /*#__PURE__*/function () {
      function DefaultIfEmptyOperator(defaultValue) {
        _classCallCheck(this, DefaultIfEmptyOperator);

        this.defaultValue = defaultValue;
      }

      _createClass2(DefaultIfEmptyOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
        }
      }]);

      return DefaultIfEmptyOperator;
    }();

    var DefaultIfEmptySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_11) {
      _inherits(DefaultIfEmptySubscriber, _Subscriber__WEBPACK_11);

      var _super70 = _createSuper(DefaultIfEmptySubscriber);

      function DefaultIfEmptySubscriber(destination, defaultValue) {
        var _this103;

        _classCallCheck(this, DefaultIfEmptySubscriber);

        _this103 = _super70.call(this, destination);
        _this103.defaultValue = defaultValue;
        _this103.isEmpty = true;
        return _this103;
      }

      _createClass2(DefaultIfEmptySubscriber, [{
        key: "_next",
        value: function _next(value) {
          this.isEmpty = false;
          this.destination.next(value);
        }
      }, {
        key: "_complete",
        value: function _complete() {
          if (this.isEmpty) {
            this.destination.next(this.defaultValue);
          }

          this.destination.complete();
        }
      }]);

      return DefaultIfEmptySubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=defaultIfEmpty.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/delay.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/delay.js ***!
    \****************************************************************/

  /*! exports provided: delay */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsDelayJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "delay", function () {
      return delay;
    });
    /* harmony import */


    var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../scheduler/async */
    "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
    /* harmony import */


    var _util_isDate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/isDate */
    "./node_modules/rxjs/_esm2015/internal/util/isDate.js");
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _Notification__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Notification */
    "./node_modules/rxjs/_esm2015/internal/Notification.js");

    function delay(delay) {
      var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"];
      var absoluteDelay = Object(_util_isDate__WEBPACK_IMPORTED_MODULE_1__["isDate"])(delay);
      var delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);
      return function (source) {
        return source.lift(new DelayOperator(delayFor, scheduler));
      };
    }

    var DelayOperator = /*#__PURE__*/function () {
      function DelayOperator(delay, scheduler) {
        _classCallCheck(this, DelayOperator);

        this.delay = delay;
        this.scheduler = scheduler;
      }

      _createClass2(DelayOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
        }
      }]);

      return DelayOperator;
    }();

    var DelaySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_12) {
      _inherits(DelaySubscriber, _Subscriber__WEBPACK_12);

      var _super71 = _createSuper(DelaySubscriber);

      function DelaySubscriber(destination, delay, scheduler) {
        var _this104;

        _classCallCheck(this, DelaySubscriber);

        _this104 = _super71.call(this, destination);
        _this104.delay = delay;
        _this104.scheduler = scheduler;
        _this104.queue = [];
        _this104.active = false;
        _this104.errored = false;
        return _this104;
      }

      _createClass2(DelaySubscriber, [{
        key: "_schedule",
        value: function _schedule(scheduler) {
          this.active = true;
          var destination = this.destination;
          destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
            source: this,
            destination: this.destination,
            scheduler: scheduler
          }));
        }
      }, {
        key: "scheduleNotification",
        value: function scheduleNotification(notification) {
          if (this.errored === true) {
            return;
          }

          var scheduler = this.scheduler;
          var message = new DelayMessage(scheduler.now() + this.delay, notification);
          this.queue.push(message);

          if (this.active === false) {
            this._schedule(scheduler);
          }
        }
      }, {
        key: "_next",
        value: function _next(value) {
          this.scheduleNotification(_Notification__WEBPACK_IMPORTED_MODULE_3__["Notification"].createNext(value));
        }
      }, {
        key: "_error",
        value: function _error(err) {
          this.errored = true;
          this.queue = [];
          this.destination.error(err);
          this.unsubscribe();
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.scheduleNotification(_Notification__WEBPACK_IMPORTED_MODULE_3__["Notification"].createComplete());
          this.unsubscribe();
        }
      }], [{
        key: "dispatch",
        value: function dispatch(state) {
          var source = state.source;
          var queue = source.queue;
          var scheduler = state.scheduler;
          var destination = state.destination;

          while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {
            queue.shift().notification.observe(destination);
          }

          if (queue.length > 0) {
            var _delay = Math.max(0, queue[0].time - scheduler.now());

            this.schedule(state, _delay);
          } else {
            this.unsubscribe();
            source.active = false;
          }
        }
      }]);

      return DelaySubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_2__["Subscriber"]);

    var DelayMessage = function DelayMessage(time, notification) {
      _classCallCheck(this, DelayMessage);

      this.time = time;
      this.notification = notification;
    }; //# sourceMappingURL=delay.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/delayWhen.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/delayWhen.js ***!
    \********************************************************************/

  /*! exports provided: delayWhen */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsDelayWhenJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "delayWhen", function () {
      return delayWhen;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function delayWhen(delayDurationSelector, subscriptionDelay) {
      if (subscriptionDelay) {
        return function (source) {
          return new SubscriptionDelayObservable(source, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));
        };
      }

      return function (source) {
        return source.lift(new DelayWhenOperator(delayDurationSelector));
      };
    }

    var DelayWhenOperator = /*#__PURE__*/function () {
      function DelayWhenOperator(delayDurationSelector) {
        _classCallCheck(this, DelayWhenOperator);

        this.delayDurationSelector = delayDurationSelector;
      }

      _createClass2(DelayWhenOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
        }
      }]);

      return DelayWhenOperator;
    }();

    var DelayWhenSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB10) {
      _inherits(DelayWhenSubscriber, _OuterSubscriber__WEB10);

      var _super72 = _createSuper(DelayWhenSubscriber);

      function DelayWhenSubscriber(destination, delayDurationSelector) {
        var _this105;

        _classCallCheck(this, DelayWhenSubscriber);

        _this105 = _super72.call(this, destination);
        _this105.delayDurationSelector = delayDurationSelector;
        _this105.completed = false;
        _this105.delayNotifierSubscriptions = [];
        _this105.index = 0;
        return _this105;
      }

      _createClass2(DelayWhenSubscriber, [{
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.destination.next(outerValue);
          this.removeSubscription(innerSub);
          this.tryComplete();
        }
      }, {
        key: "notifyError",
        value: function notifyError(error, innerSub) {
          this._error(error);
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete(innerSub) {
          var value = this.removeSubscription(innerSub);

          if (value) {
            this.destination.next(value);
          }

          this.tryComplete();
        }
      }, {
        key: "_next",
        value: function _next(value) {
          var index = this.index++;

          try {
            var delayNotifier = this.delayDurationSelector(value, index);

            if (delayNotifier) {
              this.tryDelay(delayNotifier, value);
            }
          } catch (err) {
            this.destination.error(err);
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.completed = true;
          this.tryComplete();
          this.unsubscribe();
        }
      }, {
        key: "removeSubscription",
        value: function removeSubscription(subscription) {
          subscription.unsubscribe();
          var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);

          if (subscriptionIdx !== -1) {
            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
          }

          return subscription.outerValue;
        }
      }, {
        key: "tryDelay",
        value: function tryDelay(delayNotifier, value) {
          var notifierSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(this, delayNotifier, value);

          if (notifierSubscription && !notifierSubscription.closed) {
            var destination = this.destination;
            destination.add(notifierSubscription);
            this.delayNotifierSubscriptions.push(notifierSubscription);
          }
        }
      }, {
        key: "tryComplete",
        value: function tryComplete() {
          if (this.completed && this.delayNotifierSubscriptions.length === 0) {
            this.destination.complete();
          }
        }
      }]);

      return DelayWhenSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"]);

    var SubscriptionDelayObservable = /*#__PURE__*/function (_Observable__WEBPACK_4) {
      _inherits(SubscriptionDelayObservable, _Observable__WEBPACK_4);

      var _super73 = _createSuper(SubscriptionDelayObservable);

      function SubscriptionDelayObservable(source, subscriptionDelay) {
        var _this106;

        _classCallCheck(this, SubscriptionDelayObservable);

        _this106 = _super73.call(this);
        _this106.source = source;
        _this106.subscriptionDelay = subscriptionDelay;
        return _this106;
      }

      _createClass2(SubscriptionDelayObservable, [{
        key: "_subscribe",
        value: function _subscribe(subscriber) {
          this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
        }
      }]);

      return SubscriptionDelayObservable;
    }(_Observable__WEBPACK_IMPORTED_MODULE_1__["Observable"]);

    var SubscriptionDelaySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_13) {
      _inherits(SubscriptionDelaySubscriber, _Subscriber__WEBPACK_13);

      var _super74 = _createSuper(SubscriptionDelaySubscriber);

      function SubscriptionDelaySubscriber(parent, source) {
        var _this107;

        _classCallCheck(this, SubscriptionDelaySubscriber);

        _this107 = _super74.call(this);
        _this107.parent = parent;
        _this107.source = source;
        _this107.sourceSubscribed = false;
        return _this107;
      }

      _createClass2(SubscriptionDelaySubscriber, [{
        key: "_next",
        value: function _next(unused) {
          this.subscribeToSource();
        }
      }, {
        key: "_error",
        value: function _error(err) {
          this.unsubscribe();
          this.parent.error(err);
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.unsubscribe();
          this.subscribeToSource();
        }
      }, {
        key: "subscribeToSource",
        value: function subscribeToSource() {
          if (!this.sourceSubscribed) {
            this.sourceSubscribed = true;
            this.unsubscribe();
            this.source.subscribe(this.parent);
          }
        }
      }]);

      return SubscriptionDelaySubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=delayWhen.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/dematerialize.js":
  /*!************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/dematerialize.js ***!
    \************************************************************************/

  /*! exports provided: dematerialize */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsDematerializeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "dematerialize", function () {
      return dematerialize;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function dematerialize() {
      return function dematerializeOperatorFunction(source) {
        return source.lift(new DeMaterializeOperator());
      };
    }

    var DeMaterializeOperator = /*#__PURE__*/function () {
      function DeMaterializeOperator() {
        _classCallCheck(this, DeMaterializeOperator);
      }

      _createClass2(DeMaterializeOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new DeMaterializeSubscriber(subscriber));
        }
      }]);

      return DeMaterializeOperator;
    }();

    var DeMaterializeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_14) {
      _inherits(DeMaterializeSubscriber, _Subscriber__WEBPACK_14);

      var _super75 = _createSuper(DeMaterializeSubscriber);

      function DeMaterializeSubscriber(destination) {
        _classCallCheck(this, DeMaterializeSubscriber);

        return _super75.call(this, destination);
      }

      _createClass2(DeMaterializeSubscriber, [{
        key: "_next",
        value: function _next(value) {
          value.observe(this.destination);
        }
      }]);

      return DeMaterializeSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=dematerialize.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/distinct.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/distinct.js ***!
    \*******************************************************************/

  /*! exports provided: distinct, DistinctSubscriber */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsDistinctJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "distinct", function () {
      return distinct;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DistinctSubscriber", function () {
      return DistinctSubscriber;
    });
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function distinct(keySelector, flushes) {
      return function (source) {
        return source.lift(new DistinctOperator(keySelector, flushes));
      };
    }

    var DistinctOperator = /*#__PURE__*/function () {
      function DistinctOperator(keySelector, flushes) {
        _classCallCheck(this, DistinctOperator);

        this.keySelector = keySelector;
        this.flushes = flushes;
      }

      _createClass2(DistinctOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
        }
      }]);

      return DistinctOperator;
    }();

    var DistinctSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB11) {
      _inherits(DistinctSubscriber, _OuterSubscriber__WEB11);

      var _super76 = _createSuper(DistinctSubscriber);

      function DistinctSubscriber(destination, keySelector, flushes) {
        var _this108;

        _classCallCheck(this, DistinctSubscriber);

        _this108 = _super76.call(this, destination);
        _this108.keySelector = keySelector;
        _this108.values = new Set();

        if (flushes) {
          _this108.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(_assertThisInitialized(_this108), flushes));
        }

        return _this108;
      }

      _createClass2(DistinctSubscriber, [{
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.values.clear();
        }
      }, {
        key: "notifyError",
        value: function notifyError(error, innerSub) {
          this._error(error);
        }
      }, {
        key: "_next",
        value: function _next(value) {
          if (this.keySelector) {
            this._useKeySelector(value);
          } else {
            this._finalizeNext(value, value);
          }
        }
      }, {
        key: "_useKeySelector",
        value: function _useKeySelector(value) {
          var key;
          var destination = this.destination;

          try {
            key = this.keySelector(value);
          } catch (err) {
            destination.error(err);
            return;
          }

          this._finalizeNext(key, value);
        }
      }, {
        key: "_finalizeNext",
        value: function _finalizeNext(key, value) {
          var values = this.values;

          if (!values.has(key)) {
            values.add(key);
            this.destination.next(value);
          }
        }
      }]);

      return DistinctSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"]); //# sourceMappingURL=distinct.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js":
  /*!*******************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js ***!
    \*******************************************************************************/

  /*! exports provided: distinctUntilChanged */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsDistinctUntilChangedJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "distinctUntilChanged", function () {
      return distinctUntilChanged;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function distinctUntilChanged(compare, keySelector) {
      return function (source) {
        return source.lift(new DistinctUntilChangedOperator(compare, keySelector));
      };
    }

    var DistinctUntilChangedOperator = /*#__PURE__*/function () {
      function DistinctUntilChangedOperator(compare, keySelector) {
        _classCallCheck(this, DistinctUntilChangedOperator);

        this.compare = compare;
        this.keySelector = keySelector;
      }

      _createClass2(DistinctUntilChangedOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
        }
      }]);

      return DistinctUntilChangedOperator;
    }();

    var DistinctUntilChangedSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_15) {
      _inherits(DistinctUntilChangedSubscriber, _Subscriber__WEBPACK_15);

      var _super77 = _createSuper(DistinctUntilChangedSubscriber);

      function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
        var _this109;

        _classCallCheck(this, DistinctUntilChangedSubscriber);

        _this109 = _super77.call(this, destination);
        _this109.keySelector = keySelector;
        _this109.hasKey = false;

        if (typeof compare === 'function') {
          _this109.compare = compare;
        }

        return _this109;
      }

      _createClass2(DistinctUntilChangedSubscriber, [{
        key: "compare",
        value: function compare(x, y) {
          return x === y;
        }
      }, {
        key: "_next",
        value: function _next(value) {
          var key;

          try {
            var keySelector = this.keySelector;
            key = keySelector ? keySelector(value) : value;
          } catch (err) {
            return this.destination.error(err);
          }

          var result = false;

          if (this.hasKey) {
            try {
              var compare = this.compare;
              result = compare(this.key, key);
            } catch (err) {
              return this.destination.error(err);
            }
          } else {
            this.hasKey = true;
          }

          if (!result) {
            this.key = key;
            this.destination.next(value);
          }
        }
      }]);

      return DistinctUntilChangedSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=distinctUntilChanged.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js":
  /*!**********************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js ***!
    \**********************************************************************************/

  /*! exports provided: distinctUntilKeyChanged */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsDistinctUntilKeyChangedJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "distinctUntilKeyChanged", function () {
      return distinctUntilKeyChanged;
    });
    /* harmony import */


    var _distinctUntilChanged__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./distinctUntilChanged */
    "./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js");

    function distinctUntilKeyChanged(key, compare) {
      return Object(_distinctUntilChanged__WEBPACK_IMPORTED_MODULE_0__["distinctUntilChanged"])(function (x, y) {
        return compare ? compare(x[key], y[key]) : x[key] === y[key];
      });
    } //# sourceMappingURL=distinctUntilKeyChanged.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/elementAt.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/elementAt.js ***!
    \********************************************************************/

  /*! exports provided: elementAt */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsElementAtJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "elementAt", function () {
      return elementAt;
    });
    /* harmony import */


    var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util/ArgumentOutOfRangeError */
    "./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js");
    /* harmony import */


    var _filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./filter */
    "./node_modules/rxjs/_esm2015/internal/operators/filter.js");
    /* harmony import */


    var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./throwIfEmpty */
    "./node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js");
    /* harmony import */


    var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./defaultIfEmpty */
    "./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js");
    /* harmony import */


    var _take__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./take */
    "./node_modules/rxjs/_esm2015/internal/operators/take.js");

    function elementAt(index, defaultValue) {
      if (index < 0) {
        throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_0__["ArgumentOutOfRangeError"]();
      }

      var hasDefaultValue = arguments.length >= 2;
      return function (source) {
        return source.pipe(Object(_filter__WEBPACK_IMPORTED_MODULE_1__["filter"])(function (v, i) {
          return i === index;
        }), Object(_take__WEBPACK_IMPORTED_MODULE_4__["take"])(1), hasDefaultValue ? Object(_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__["defaultIfEmpty"])(defaultValue) : Object(_throwIfEmpty__WEBPACK_IMPORTED_MODULE_2__["throwIfEmpty"])(function () {
          return new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_0__["ArgumentOutOfRangeError"]();
        }));
      };
    } //# sourceMappingURL=elementAt.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/endWith.js":
  /*!******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/endWith.js ***!
    \******************************************************************/

  /*! exports provided: endWith */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsEndWithJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "endWith", function () {
      return endWith;
    });
    /* harmony import */


    var _observable_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../observable/concat */
    "./node_modules/rxjs/_esm2015/internal/observable/concat.js");
    /* harmony import */


    var _observable_of__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../observable/of */
    "./node_modules/rxjs/_esm2015/internal/observable/of.js");

    function endWith() {
      for (var _len34 = arguments.length, array = new Array(_len34), _key31 = 0; _key31 < _len34; _key31++) {
        array[_key31] = arguments[_key31];
      }

      return function (source) {
        return Object(_observable_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])(source, Object(_observable_of__WEBPACK_IMPORTED_MODULE_1__["of"]).apply(void 0, array));
      };
    } //# sourceMappingURL=endWith.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/every.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/every.js ***!
    \****************************************************************/

  /*! exports provided: every */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsEveryJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "every", function () {
      return every;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function every(predicate, thisArg) {
      return function (source) {
        return source.lift(new EveryOperator(predicate, thisArg, source));
      };
    }

    var EveryOperator = /*#__PURE__*/function () {
      function EveryOperator(predicate, thisArg, source) {
        _classCallCheck(this, EveryOperator);

        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
      }

      _createClass2(EveryOperator, [{
        key: "call",
        value: function call(observer, source) {
          return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
        }
      }]);

      return EveryOperator;
    }();

    var EverySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_16) {
      _inherits(EverySubscriber, _Subscriber__WEBPACK_16);

      var _super78 = _createSuper(EverySubscriber);

      function EverySubscriber(destination, predicate, thisArg, source) {
        var _this110;

        _classCallCheck(this, EverySubscriber);

        _this110 = _super78.call(this, destination);
        _this110.predicate = predicate;
        _this110.thisArg = thisArg;
        _this110.source = source;
        _this110.index = 0;
        _this110.thisArg = thisArg || _assertThisInitialized(_this110);
        return _this110;
      }

      _createClass2(EverySubscriber, [{
        key: "notifyComplete",
        value: function notifyComplete(everyValueMatch) {
          this.destination.next(everyValueMatch);
          this.destination.complete();
        }
      }, {
        key: "_next",
        value: function _next(value) {
          var result = false;

          try {
            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
          } catch (err) {
            this.destination.error(err);
            return;
          }

          if (!result) {
            this.notifyComplete(false);
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.notifyComplete(true);
        }
      }]);

      return EverySubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=every.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/exhaust.js":
  /*!******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/exhaust.js ***!
    \******************************************************************/

  /*! exports provided: exhaust */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsExhaustJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "exhaust", function () {
      return exhaust;
    });
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function exhaust() {
      return function (source) {
        return source.lift(new SwitchFirstOperator());
      };
    }

    var SwitchFirstOperator = /*#__PURE__*/function () {
      function SwitchFirstOperator() {
        _classCallCheck(this, SwitchFirstOperator);
      }

      _createClass2(SwitchFirstOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new SwitchFirstSubscriber(subscriber));
        }
      }]);

      return SwitchFirstOperator;
    }();

    var SwitchFirstSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB12) {
      _inherits(SwitchFirstSubscriber, _OuterSubscriber__WEB12);

      var _super79 = _createSuper(SwitchFirstSubscriber);

      function SwitchFirstSubscriber(destination) {
        var _this111;

        _classCallCheck(this, SwitchFirstSubscriber);

        _this111 = _super79.call(this, destination);
        _this111.hasCompleted = false;
        _this111.hasSubscription = false;
        return _this111;
      }

      _createClass2(SwitchFirstSubscriber, [{
        key: "_next",
        value: function _next(value) {
          if (!this.hasSubscription) {
            this.hasSubscription = true;
            this.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, value));
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.hasCompleted = true;

          if (!this.hasSubscription) {
            this.destination.complete();
          }
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete(innerSub) {
          this.remove(innerSub);
          this.hasSubscription = false;

          if (this.hasCompleted) {
            this.destination.complete();
          }
        }
      }]);

      return SwitchFirstSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"]); //# sourceMappingURL=exhaust.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/exhaustMap.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/exhaustMap.js ***!
    \*********************************************************************/

  /*! exports provided: exhaustMap */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsExhaustMapJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "exhaustMap", function () {
      return exhaustMap;
    });
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../InnerSubscriber */
    "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");
    /* harmony import */


    var _map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./map */
    "./node_modules/rxjs/_esm2015/internal/operators/map.js");
    /* harmony import */


    var _observable_from__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../observable/from */
    "./node_modules/rxjs/_esm2015/internal/observable/from.js");

    function exhaustMap(project, resultSelector) {
      if (resultSelector) {
        return function (source) {
          return source.pipe(exhaustMap(function (a, i) {
            return Object(_observable_from__WEBPACK_IMPORTED_MODULE_4__["from"])(project(a, i)).pipe(Object(_map__WEBPACK_IMPORTED_MODULE_3__["map"])(function (b, ii) {
              return resultSelector(a, b, i, ii);
            }));
          }));
        };
      }

      return function (source) {
        return source.lift(new ExhaustMapOperator(project));
      };
    }

    var ExhaustMapOperator = /*#__PURE__*/function () {
      function ExhaustMapOperator(project) {
        _classCallCheck(this, ExhaustMapOperator);

        this.project = project;
      }

      _createClass2(ExhaustMapOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));
        }
      }]);

      return ExhaustMapOperator;
    }();

    var ExhaustMapSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB13) {
      _inherits(ExhaustMapSubscriber, _OuterSubscriber__WEB13);

      var _super80 = _createSuper(ExhaustMapSubscriber);

      function ExhaustMapSubscriber(destination, project) {
        var _this112;

        _classCallCheck(this, ExhaustMapSubscriber);

        _this112 = _super80.call(this, destination);
        _this112.project = project;
        _this112.hasSubscription = false;
        _this112.hasCompleted = false;
        _this112.index = 0;
        return _this112;
      }

      _createClass2(ExhaustMapSubscriber, [{
        key: "_next",
        value: function _next(value) {
          if (!this.hasSubscription) {
            this.tryNext(value);
          }
        }
      }, {
        key: "tryNext",
        value: function tryNext(value) {
          var result;
          var index = this.index++;

          try {
            result = this.project(value, index);
          } catch (err) {
            this.destination.error(err);
            return;
          }

          this.hasSubscription = true;

          this._innerSub(result, value, index);
        }
      }, {
        key: "_innerSub",
        value: function _innerSub(result, value, index) {
          var innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__["InnerSubscriber"](this, value, index);
          var destination = this.destination;
          destination.add(innerSubscriber);
          var innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(this, result, undefined, undefined, innerSubscriber);

          if (innerSubscription !== innerSubscriber) {
            destination.add(innerSubscription);
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.hasCompleted = true;

          if (!this.hasSubscription) {
            this.destination.complete();
          }

          this.unsubscribe();
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.destination.next(innerValue);
        }
      }, {
        key: "notifyError",
        value: function notifyError(err) {
          this.destination.error(err);
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete(innerSub) {
          var destination = this.destination;
          destination.remove(innerSub);
          this.hasSubscription = false;

          if (this.hasCompleted) {
            this.destination.complete();
          }
        }
      }]);

      return ExhaustMapSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"]); //# sourceMappingURL=exhaustMap.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/expand.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/expand.js ***!
    \*****************************************************************/

  /*! exports provided: expand, ExpandOperator, ExpandSubscriber */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsExpandJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "expand", function () {
      return expand;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ExpandOperator", function () {
      return ExpandOperator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ExpandSubscriber", function () {
      return ExpandSubscriber;
    });
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function expand(project) {
      var concurrent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;
      var scheduler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
      concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
      return function (source) {
        return source.lift(new ExpandOperator(project, concurrent, scheduler));
      };
    }

    var ExpandOperator = /*#__PURE__*/function () {
      function ExpandOperator(project, concurrent, scheduler) {
        _classCallCheck(this, ExpandOperator);

        this.project = project;
        this.concurrent = concurrent;
        this.scheduler = scheduler;
      }

      _createClass2(ExpandOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
        }
      }]);

      return ExpandOperator;
    }();

    var ExpandSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB14) {
      _inherits(ExpandSubscriber, _OuterSubscriber__WEB14);

      var _super81 = _createSuper(ExpandSubscriber);

      function ExpandSubscriber(destination, project, concurrent, scheduler) {
        var _this113;

        _classCallCheck(this, ExpandSubscriber);

        _this113 = _super81.call(this, destination);
        _this113.project = project;
        _this113.concurrent = concurrent;
        _this113.scheduler = scheduler;
        _this113.index = 0;
        _this113.active = 0;
        _this113.hasCompleted = false;

        if (concurrent < Number.POSITIVE_INFINITY) {
          _this113.buffer = [];
        }

        return _this113;
      }

      _createClass2(ExpandSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var destination = this.destination;

          if (destination.closed) {
            this._complete();

            return;
          }

          var index = this.index++;

          if (this.active < this.concurrent) {
            destination.next(value);

            try {
              var project = this.project;
              var result = project(value, index);

              if (!this.scheduler) {
                this.subscribeToProjection(result, value, index);
              } else {
                var state = {
                  subscriber: this,
                  result: result,
                  value: value,
                  index: index
                };
                var _destination = this.destination;

                _destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
              }
            } catch (e) {
              destination.error(e);
            }
          } else {
            this.buffer.push(value);
          }
        }
      }, {
        key: "subscribeToProjection",
        value: function subscribeToProjection(result, value, index) {
          this.active++;
          var destination = this.destination;
          destination.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, result, value, index));
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.hasCompleted = true;

          if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
          }

          this.unsubscribe();
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this._next(innerValue);
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete(innerSub) {
          var buffer = this.buffer;
          var destination = this.destination;
          destination.remove(innerSub);
          this.active--;

          if (buffer && buffer.length > 0) {
            this._next(buffer.shift());
          }

          if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
          }
        }
      }], [{
        key: "dispatch",
        value: function dispatch(arg) {
          var subscriber = arg.subscriber,
              result = arg.result,
              value = arg.value,
              index = arg.index;
          subscriber.subscribeToProjection(result, value, index);
        }
      }]);

      return ExpandSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"]); //# sourceMappingURL=expand.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/filter.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/filter.js ***!
    \*****************************************************************/

  /*! exports provided: filter */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsFilterJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "filter", function () {
      return filter;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function filter(predicate, thisArg) {
      return function filterOperatorFunction(source) {
        return source.lift(new FilterOperator(predicate, thisArg));
      };
    }

    var FilterOperator = /*#__PURE__*/function () {
      function FilterOperator(predicate, thisArg) {
        _classCallCheck(this, FilterOperator);

        this.predicate = predicate;
        this.thisArg = thisArg;
      }

      _createClass2(FilterOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
        }
      }]);

      return FilterOperator;
    }();

    var FilterSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_17) {
      _inherits(FilterSubscriber, _Subscriber__WEBPACK_17);

      var _super82 = _createSuper(FilterSubscriber);

      function FilterSubscriber(destination, predicate, thisArg) {
        var _this114;

        _classCallCheck(this, FilterSubscriber);

        _this114 = _super82.call(this, destination);
        _this114.predicate = predicate;
        _this114.thisArg = thisArg;
        _this114.count = 0;
        return _this114;
      }

      _createClass2(FilterSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var result;

          try {
            result = this.predicate.call(this.thisArg, value, this.count++);
          } catch (err) {
            this.destination.error(err);
            return;
          }

          if (result) {
            this.destination.next(value);
          }
        }
      }]);

      return FilterSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=filter.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/finalize.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/finalize.js ***!
    \*******************************************************************/

  /*! exports provided: finalize */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsFinalizeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "finalize", function () {
      return finalize;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");

    function finalize(callback) {
      return function (source) {
        return source.lift(new FinallyOperator(callback));
      };
    }

    var FinallyOperator = /*#__PURE__*/function () {
      function FinallyOperator(callback) {
        _classCallCheck(this, FinallyOperator);

        this.callback = callback;
      }

      _createClass2(FinallyOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new FinallySubscriber(subscriber, this.callback));
        }
      }]);

      return FinallyOperator;
    }();

    var FinallySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_18) {
      _inherits(FinallySubscriber, _Subscriber__WEBPACK_18);

      var _super83 = _createSuper(FinallySubscriber);

      function FinallySubscriber(destination, callback) {
        var _this115;

        _classCallCheck(this, FinallySubscriber);

        _this115 = _super83.call(this, destination);

        _this115.add(new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"](callback));

        return _this115;
      }

      return FinallySubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=finalize.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/find.js":
  /*!***************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/find.js ***!
    \***************************************************************/

  /*! exports provided: find, FindValueOperator, FindValueSubscriber */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsFindJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "find", function () {
      return find;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FindValueOperator", function () {
      return FindValueOperator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FindValueSubscriber", function () {
      return FindValueSubscriber;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function find(predicate, thisArg) {
      if (typeof predicate !== 'function') {
        throw new TypeError('predicate is not a function');
      }

      return function (source) {
        return source.lift(new FindValueOperator(predicate, source, false, thisArg));
      };
    }

    var FindValueOperator = /*#__PURE__*/function () {
      function FindValueOperator(predicate, source, yieldIndex, thisArg) {
        _classCallCheck(this, FindValueOperator);

        this.predicate = predicate;
        this.source = source;
        this.yieldIndex = yieldIndex;
        this.thisArg = thisArg;
      }

      _createClass2(FindValueOperator, [{
        key: "call",
        value: function call(observer, source) {
          return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
        }
      }]);

      return FindValueOperator;
    }();

    var FindValueSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_19) {
      _inherits(FindValueSubscriber, _Subscriber__WEBPACK_19);

      var _super84 = _createSuper(FindValueSubscriber);

      function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
        var _this116;

        _classCallCheck(this, FindValueSubscriber);

        _this116 = _super84.call(this, destination);
        _this116.predicate = predicate;
        _this116.source = source;
        _this116.yieldIndex = yieldIndex;
        _this116.thisArg = thisArg;
        _this116.index = 0;
        return _this116;
      }

      _createClass2(FindValueSubscriber, [{
        key: "notifyComplete",
        value: function notifyComplete(value) {
          var destination = this.destination;
          destination.next(value);
          destination.complete();
          this.unsubscribe();
        }
      }, {
        key: "_next",
        value: function _next(value) {
          var predicate = this.predicate,
              thisArg = this.thisArg;
          var index = this.index++;

          try {
            var result = predicate.call(thisArg || this, value, index, this.source);

            if (result) {
              this.notifyComplete(this.yieldIndex ? index : value);
            }
          } catch (err) {
            this.destination.error(err);
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.notifyComplete(this.yieldIndex ? -1 : undefined);
        }
      }]);

      return FindValueSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=find.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/findIndex.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/findIndex.js ***!
    \********************************************************************/

  /*! exports provided: findIndex */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsFindIndexJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "findIndex", function () {
      return findIndex;
    });
    /* harmony import */


    var _operators_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../operators/find */
    "./node_modules/rxjs/_esm2015/internal/operators/find.js");

    function findIndex(predicate, thisArg) {
      return function (source) {
        return source.lift(new _operators_find__WEBPACK_IMPORTED_MODULE_0__["FindValueOperator"](predicate, source, true, thisArg));
      };
    } //# sourceMappingURL=findIndex.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/first.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/first.js ***!
    \****************************************************************/

  /*! exports provided: first */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsFirstJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "first", function () {
      return first;
    });
    /* harmony import */


    var _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util/EmptyError */
    "./node_modules/rxjs/_esm2015/internal/util/EmptyError.js");
    /* harmony import */


    var _filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./filter */
    "./node_modules/rxjs/_esm2015/internal/operators/filter.js");
    /* harmony import */


    var _take__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./take */
    "./node_modules/rxjs/_esm2015/internal/operators/take.js");
    /* harmony import */


    var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./defaultIfEmpty */
    "./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js");
    /* harmony import */


    var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./throwIfEmpty */
    "./node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js");
    /* harmony import */


    var _util_identity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../util/identity */
    "./node_modules/rxjs/_esm2015/internal/util/identity.js");

    function first(predicate, defaultValue) {
      var hasDefaultValue = arguments.length >= 2;
      return function (source) {
        return source.pipe(predicate ? Object(_filter__WEBPACK_IMPORTED_MODULE_1__["filter"])(function (v, i) {
          return predicate(v, i, source);
        }) : _util_identity__WEBPACK_IMPORTED_MODULE_5__["identity"], Object(_take__WEBPACK_IMPORTED_MODULE_2__["take"])(1), hasDefaultValue ? Object(_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__["defaultIfEmpty"])(defaultValue) : Object(_throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__["throwIfEmpty"])(function () {
          return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__["EmptyError"]();
        }));
      };
    } //# sourceMappingURL=first.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/groupBy.js":
  /*!******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/groupBy.js ***!
    \******************************************************************/

  /*! exports provided: groupBy, GroupedObservable */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsGroupByJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "groupBy", function () {
      return groupBy;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "GroupedObservable", function () {
      return GroupedObservable;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _Subject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../Subject */
    "./node_modules/rxjs/_esm2015/internal/Subject.js");

    function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
      return function (source) {
        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
      };
    }

    var GroupByOperator = /*#__PURE__*/function () {
      function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
        _classCallCheck(this, GroupByOperator);

        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
      }

      _createClass2(GroupByOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
        }
      }]);

      return GroupByOperator;
    }();

    var GroupBySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_20) {
      _inherits(GroupBySubscriber, _Subscriber__WEBPACK_20);

      var _super85 = _createSuper(GroupBySubscriber);

      function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
        var _this117;

        _classCallCheck(this, GroupBySubscriber);

        _this117 = _super85.call(this, destination);
        _this117.keySelector = keySelector;
        _this117.elementSelector = elementSelector;
        _this117.durationSelector = durationSelector;
        _this117.subjectSelector = subjectSelector;
        _this117.groups = null;
        _this117.attemptedToUnsubscribe = false;
        _this117.count = 0;
        return _this117;
      }

      _createClass2(GroupBySubscriber, [{
        key: "_next",
        value: function _next(value) {
          var key;

          try {
            key = this.keySelector(value);
          } catch (err) {
            this.error(err);
            return;
          }

          this._group(value, key);
        }
      }, {
        key: "_group",
        value: function _group(value, key) {
          var groups = this.groups;

          if (!groups) {
            groups = this.groups = new Map();
          }

          var group = groups.get(key);
          var element;

          if (this.elementSelector) {
            try {
              element = this.elementSelector(value);
            } catch (err) {
              this.error(err);
            }
          } else {
            element = value;
          }

          if (!group) {
            group = this.subjectSelector ? this.subjectSelector() : new _Subject__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
            groups.set(key, group);
            var groupedObservable = new GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);

            if (this.durationSelector) {
              var duration;

              try {
                duration = this.durationSelector(new GroupedObservable(key, group));
              } catch (err) {
                this.error(err);
                return;
              }

              this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
            }
          }

          if (!group.closed) {
            group.next(element);
          }
        }
      }, {
        key: "_error",
        value: function _error(err) {
          var groups = this.groups;

          if (groups) {
            groups.forEach(function (group, key) {
              group.error(err);
            });
            groups.clear();
          }

          this.destination.error(err);
        }
      }, {
        key: "_complete",
        value: function _complete() {
          var groups = this.groups;

          if (groups) {
            groups.forEach(function (group, key) {
              group.complete();
            });
            groups.clear();
          }

          this.destination.complete();
        }
      }, {
        key: "removeGroup",
        value: function removeGroup(key) {
          this.groups["delete"](key);
        }
      }, {
        key: "unsubscribe",
        value: function unsubscribe() {
          if (!this.closed) {
            this.attemptedToUnsubscribe = true;

            if (this.count === 0) {
              _get(_getPrototypeOf(GroupBySubscriber.prototype), "unsubscribe", this).call(this);
            }
          }
        }
      }]);

      return GroupBySubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

    var GroupDurationSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_21) {
      _inherits(GroupDurationSubscriber, _Subscriber__WEBPACK_21);

      var _super86 = _createSuper(GroupDurationSubscriber);

      function GroupDurationSubscriber(key, group, parent) {
        var _this118;

        _classCallCheck(this, GroupDurationSubscriber);

        _this118 = _super86.call(this, group);
        _this118.key = key;
        _this118.group = group;
        _this118.parent = parent;
        return _this118;
      }

      _createClass2(GroupDurationSubscriber, [{
        key: "_next",
        value: function _next(value) {
          this.complete();
        }
      }, {
        key: "_unsubscribe",
        value: function _unsubscribe() {
          var parent = this.parent,
              key = this.key;
          this.key = this.parent = null;

          if (parent) {
            parent.removeGroup(key);
          }
        }
      }]);

      return GroupDurationSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

    var GroupedObservable = /*#__PURE__*/function (_Observable__WEBPACK_5) {
      _inherits(GroupedObservable, _Observable__WEBPACK_5);

      var _super87 = _createSuper(GroupedObservable);

      function GroupedObservable(key, groupSubject, refCountSubscription) {
        var _this119;

        _classCallCheck(this, GroupedObservable);

        _this119 = _super87.call(this);
        _this119.key = key;
        _this119.groupSubject = groupSubject;
        _this119.refCountSubscription = refCountSubscription;
        return _this119;
      }

      _createClass2(GroupedObservable, [{
        key: "_subscribe",
        value: function _subscribe(subscriber) {
          var subscription = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
          var refCountSubscription = this.refCountSubscription,
              groupSubject = this.groupSubject;

          if (refCountSubscription && !refCountSubscription.closed) {
            subscription.add(new InnerRefCountSubscription(refCountSubscription));
          }

          subscription.add(groupSubject.subscribe(subscriber));
          return subscription;
        }
      }]);

      return GroupedObservable;
    }(_Observable__WEBPACK_IMPORTED_MODULE_2__["Observable"]);

    var InnerRefCountSubscription = /*#__PURE__*/function (_Subscription__WEBPAC3) {
      _inherits(InnerRefCountSubscription, _Subscription__WEBPAC3);

      var _super88 = _createSuper(InnerRefCountSubscription);

      function InnerRefCountSubscription(parent) {
        var _this120;

        _classCallCheck(this, InnerRefCountSubscription);

        _this120 = _super88.call(this);
        _this120.parent = parent;
        parent.count++;
        return _this120;
      }

      _createClass2(InnerRefCountSubscription, [{
        key: "unsubscribe",
        value: function unsubscribe() {
          var parent = this.parent;

          if (!parent.closed && !this.closed) {
            _get(_getPrototypeOf(InnerRefCountSubscription.prototype), "unsubscribe", this).call(this);

            parent.count -= 1;

            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
              parent.unsubscribe();
            }
          }
        }
      }]);

      return InnerRefCountSubscription;
    }(_Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]); //# sourceMappingURL=groupBy.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/ignoreElements.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/ignoreElements.js ***!
    \*************************************************************************/

  /*! exports provided: ignoreElements */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsIgnoreElementsJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ignoreElements", function () {
      return ignoreElements;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function ignoreElements() {
      return function ignoreElementsOperatorFunction(source) {
        return source.lift(new IgnoreElementsOperator());
      };
    }

    var IgnoreElementsOperator = /*#__PURE__*/function () {
      function IgnoreElementsOperator() {
        _classCallCheck(this, IgnoreElementsOperator);
      }

      _createClass2(IgnoreElementsOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new IgnoreElementsSubscriber(subscriber));
        }
      }]);

      return IgnoreElementsOperator;
    }();

    var IgnoreElementsSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_22) {
      _inherits(IgnoreElementsSubscriber, _Subscriber__WEBPACK_22);

      var _super89 = _createSuper(IgnoreElementsSubscriber);

      function IgnoreElementsSubscriber() {
        _classCallCheck(this, IgnoreElementsSubscriber);

        return _super89.apply(this, arguments);
      }

      _createClass2(IgnoreElementsSubscriber, [{
        key: "_next",
        value: function _next(unused) {}
      }]);

      return IgnoreElementsSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=ignoreElements.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/isEmpty.js":
  /*!******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/isEmpty.js ***!
    \******************************************************************/

  /*! exports provided: isEmpty */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsIsEmptyJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isEmpty", function () {
      return isEmpty;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function isEmpty() {
      return function (source) {
        return source.lift(new IsEmptyOperator());
      };
    }

    var IsEmptyOperator = /*#__PURE__*/function () {
      function IsEmptyOperator() {
        _classCallCheck(this, IsEmptyOperator);
      }

      _createClass2(IsEmptyOperator, [{
        key: "call",
        value: function call(observer, source) {
          return source.subscribe(new IsEmptySubscriber(observer));
        }
      }]);

      return IsEmptyOperator;
    }();

    var IsEmptySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_23) {
      _inherits(IsEmptySubscriber, _Subscriber__WEBPACK_23);

      var _super90 = _createSuper(IsEmptySubscriber);

      function IsEmptySubscriber(destination) {
        _classCallCheck(this, IsEmptySubscriber);

        return _super90.call(this, destination);
      }

      _createClass2(IsEmptySubscriber, [{
        key: "notifyComplete",
        value: function notifyComplete(isEmpty) {
          var destination = this.destination;
          destination.next(isEmpty);
          destination.complete();
        }
      }, {
        key: "_next",
        value: function _next(value) {
          this.notifyComplete(false);
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.notifyComplete(true);
        }
      }]);

      return IsEmptySubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=isEmpty.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/last.js":
  /*!***************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/last.js ***!
    \***************************************************************/

  /*! exports provided: last */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsLastJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "last", function () {
      return last;
    });
    /* harmony import */


    var _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util/EmptyError */
    "./node_modules/rxjs/_esm2015/internal/util/EmptyError.js");
    /* harmony import */


    var _filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./filter */
    "./node_modules/rxjs/_esm2015/internal/operators/filter.js");
    /* harmony import */


    var _takeLast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./takeLast */
    "./node_modules/rxjs/_esm2015/internal/operators/takeLast.js");
    /* harmony import */


    var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./throwIfEmpty */
    "./node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js");
    /* harmony import */


    var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./defaultIfEmpty */
    "./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js");
    /* harmony import */


    var _util_identity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../util/identity */
    "./node_modules/rxjs/_esm2015/internal/util/identity.js");

    function last(predicate, defaultValue) {
      var hasDefaultValue = arguments.length >= 2;
      return function (source) {
        return source.pipe(predicate ? Object(_filter__WEBPACK_IMPORTED_MODULE_1__["filter"])(function (v, i) {
          return predicate(v, i, source);
        }) : _util_identity__WEBPACK_IMPORTED_MODULE_5__["identity"], Object(_takeLast__WEBPACK_IMPORTED_MODULE_2__["takeLast"])(1), hasDefaultValue ? Object(_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_4__["defaultIfEmpty"])(defaultValue) : Object(_throwIfEmpty__WEBPACK_IMPORTED_MODULE_3__["throwIfEmpty"])(function () {
          return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__["EmptyError"]();
        }));
      };
    } //# sourceMappingURL=last.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/map.js":
  /*!**************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/map.js ***!
    \**************************************************************/

  /*! exports provided: map, MapOperator */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsMapJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "map", function () {
      return map;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MapOperator", function () {
      return MapOperator;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function map(project, thisArg) {
      return function mapOperation(source) {
        if (typeof project !== 'function') {
          throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }

        return source.lift(new MapOperator(project, thisArg));
      };
    }

    var MapOperator = /*#__PURE__*/function () {
      function MapOperator(project, thisArg) {
        _classCallCheck(this, MapOperator);

        this.project = project;
        this.thisArg = thisArg;
      }

      _createClass2(MapOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
        }
      }]);

      return MapOperator;
    }();

    var MapSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_24) {
      _inherits(MapSubscriber, _Subscriber__WEBPACK_24);

      var _super91 = _createSuper(MapSubscriber);

      function MapSubscriber(destination, project, thisArg) {
        var _this121;

        _classCallCheck(this, MapSubscriber);

        _this121 = _super91.call(this, destination);
        _this121.project = project;
        _this121.count = 0;
        _this121.thisArg = thisArg || _assertThisInitialized(_this121);
        return _this121;
      }

      _createClass2(MapSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var result;

          try {
            result = this.project.call(this.thisArg, value, this.count++);
          } catch (err) {
            this.destination.error(err);
            return;
          }

          this.destination.next(result);
        }
      }]);

      return MapSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=map.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/mapTo.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/mapTo.js ***!
    \****************************************************************/

  /*! exports provided: mapTo */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsMapToJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "mapTo", function () {
      return mapTo;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function mapTo(value) {
      return function (source) {
        return source.lift(new MapToOperator(value));
      };
    }

    var MapToOperator = /*#__PURE__*/function () {
      function MapToOperator(value) {
        _classCallCheck(this, MapToOperator);

        this.value = value;
      }

      _createClass2(MapToOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new MapToSubscriber(subscriber, this.value));
        }
      }]);

      return MapToOperator;
    }();

    var MapToSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_25) {
      _inherits(MapToSubscriber, _Subscriber__WEBPACK_25);

      var _super92 = _createSuper(MapToSubscriber);

      function MapToSubscriber(destination, value) {
        var _this122;

        _classCallCheck(this, MapToSubscriber);

        _this122 = _super92.call(this, destination);
        _this122.value = value;
        return _this122;
      }

      _createClass2(MapToSubscriber, [{
        key: "_next",
        value: function _next(x) {
          this.destination.next(this.value);
        }
      }]);

      return MapToSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=mapTo.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/materialize.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/materialize.js ***!
    \**********************************************************************/

  /*! exports provided: materialize */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsMaterializeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "materialize", function () {
      return materialize;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _Notification__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Notification */
    "./node_modules/rxjs/_esm2015/internal/Notification.js");

    function materialize() {
      return function materializeOperatorFunction(source) {
        return source.lift(new MaterializeOperator());
      };
    }

    var MaterializeOperator = /*#__PURE__*/function () {
      function MaterializeOperator() {
        _classCallCheck(this, MaterializeOperator);
      }

      _createClass2(MaterializeOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new MaterializeSubscriber(subscriber));
        }
      }]);

      return MaterializeOperator;
    }();

    var MaterializeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_26) {
      _inherits(MaterializeSubscriber, _Subscriber__WEBPACK_26);

      var _super93 = _createSuper(MaterializeSubscriber);

      function MaterializeSubscriber(destination) {
        _classCallCheck(this, MaterializeSubscriber);

        return _super93.call(this, destination);
      }

      _createClass2(MaterializeSubscriber, [{
        key: "_next",
        value: function _next(value) {
          this.destination.next(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createNext(value));
        }
      }, {
        key: "_error",
        value: function _error(err) {
          var destination = this.destination;
          destination.next(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createError(err));
          destination.complete();
        }
      }, {
        key: "_complete",
        value: function _complete() {
          var destination = this.destination;
          destination.next(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createComplete());
          destination.complete();
        }
      }]);

      return MaterializeSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=materialize.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/max.js":
  /*!**************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/max.js ***!
    \**************************************************************/

  /*! exports provided: max */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsMaxJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "max", function () {
      return max;
    });
    /* harmony import */


    var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./reduce */
    "./node_modules/rxjs/_esm2015/internal/operators/reduce.js");

    function max(comparer) {
      var max = typeof comparer === 'function' ? function (x, y) {
        return comparer(x, y) > 0 ? x : y;
      } : function (x, y) {
        return x > y ? x : y;
      };
      return Object(_reduce__WEBPACK_IMPORTED_MODULE_0__["reduce"])(max);
    } //# sourceMappingURL=max.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/merge.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/merge.js ***!
    \****************************************************************/

  /*! exports provided: merge */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsMergeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "merge", function () {
      return merge;
    });
    /* harmony import */


    var _observable_merge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../observable/merge */
    "./node_modules/rxjs/_esm2015/internal/observable/merge.js");

    function merge() {
      for (var _len35 = arguments.length, observables = new Array(_len35), _key32 = 0; _key32 < _len35; _key32++) {
        observables[_key32] = arguments[_key32];
      }

      return function (source) {
        return source.lift.call(Object(_observable_merge__WEBPACK_IMPORTED_MODULE_0__["merge"]).apply(void 0, [source].concat(observables)));
      };
    } //# sourceMappingURL=merge.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/mergeAll.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/mergeAll.js ***!
    \*******************************************************************/

  /*! exports provided: mergeAll */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsMergeAllJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "mergeAll", function () {
      return mergeAll;
    });
    /* harmony import */


    var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./mergeMap */
    "./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js");
    /* harmony import */


    var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/identity */
    "./node_modules/rxjs/_esm2015/internal/util/identity.js");

    function mergeAll() {
      var concurrent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.POSITIVE_INFINITY;
      return Object(_mergeMap__WEBPACK_IMPORTED_MODULE_0__["mergeMap"])(_util_identity__WEBPACK_IMPORTED_MODULE_1__["identity"], concurrent);
    } //# sourceMappingURL=mergeAll.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js ***!
    \*******************************************************************/

  /*! exports provided: mergeMap, MergeMapOperator, MergeMapSubscriber */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsMergeMapJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "mergeMap", function () {
      return mergeMap;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MergeMapOperator", function () {
      return MergeMapOperator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MergeMapSubscriber", function () {
      return MergeMapSubscriber;
    });
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../InnerSubscriber */
    "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js");
    /* harmony import */


    var _map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./map */
    "./node_modules/rxjs/_esm2015/internal/operators/map.js");
    /* harmony import */


    var _observable_from__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../observable/from */
    "./node_modules/rxjs/_esm2015/internal/observable/from.js");

    function mergeMap(project, resultSelector) {
      var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;

      if (typeof resultSelector === 'function') {
        return function (source) {
          return source.pipe(mergeMap(function (a, i) {
            return Object(_observable_from__WEBPACK_IMPORTED_MODULE_4__["from"])(project(a, i)).pipe(Object(_map__WEBPACK_IMPORTED_MODULE_3__["map"])(function (b, ii) {
              return resultSelector(a, b, i, ii);
            }));
          }, concurrent));
        };
      } else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
      }

      return function (source) {
        return source.lift(new MergeMapOperator(project, concurrent));
      };
    }

    var MergeMapOperator = /*#__PURE__*/function () {
      function MergeMapOperator(project) {
        var concurrent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;

        _classCallCheck(this, MergeMapOperator);

        this.project = project;
        this.concurrent = concurrent;
      }

      _createClass2(MergeMapOperator, [{
        key: "call",
        value: function call(observer, source) {
          return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
        }
      }]);

      return MergeMapOperator;
    }();

    var MergeMapSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB15) {
      _inherits(MergeMapSubscriber, _OuterSubscriber__WEB15);

      var _super94 = _createSuper(MergeMapSubscriber);

      function MergeMapSubscriber(destination, project) {
        var _this123;

        var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;

        _classCallCheck(this, MergeMapSubscriber);

        _this123 = _super94.call(this, destination);
        _this123.project = project;
        _this123.concurrent = concurrent;
        _this123.hasCompleted = false;
        _this123.buffer = [];
        _this123.active = 0;
        _this123.index = 0;
        return _this123;
      }

      _createClass2(MergeMapSubscriber, [{
        key: "_next",
        value: function _next(value) {
          if (this.active < this.concurrent) {
            this._tryNext(value);
          } else {
            this.buffer.push(value);
          }
        }
      }, {
        key: "_tryNext",
        value: function _tryNext(value) {
          var result;
          var index = this.index++;

          try {
            result = this.project(value, index);
          } catch (err) {
            this.destination.error(err);
            return;
          }

          this.active++;

          this._innerSub(result, value, index);
        }
      }, {
        key: "_innerSub",
        value: function _innerSub(ish, value, index) {
          var innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_2__["InnerSubscriber"](this, value, index);
          var destination = this.destination;
          destination.add(innerSubscriber);
          var innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_0__["subscribeToResult"])(this, ish, undefined, undefined, innerSubscriber);

          if (innerSubscription !== innerSubscriber) {
            destination.add(innerSubscription);
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.hasCompleted = true;

          if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
          }

          this.unsubscribe();
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.destination.next(innerValue);
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete(innerSub) {
          var buffer = this.buffer;
          this.remove(innerSub);
          this.active--;

          if (buffer.length > 0) {
            this._next(buffer.shift());
          } else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
          }
        }
      }]);

      return MergeMapSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__["OuterSubscriber"]); //# sourceMappingURL=mergeMap.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/mergeMapTo.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/mergeMapTo.js ***!
    \*********************************************************************/

  /*! exports provided: mergeMapTo */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsMergeMapToJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "mergeMapTo", function () {
      return mergeMapTo;
    });
    /* harmony import */


    var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./mergeMap */
    "./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js");

    function mergeMapTo(innerObservable, resultSelector) {
      var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;

      if (typeof resultSelector === 'function') {
        return Object(_mergeMap__WEBPACK_IMPORTED_MODULE_0__["mergeMap"])(function () {
          return innerObservable;
        }, resultSelector, concurrent);
      }

      if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
      }

      return Object(_mergeMap__WEBPACK_IMPORTED_MODULE_0__["mergeMap"])(function () {
        return innerObservable;
      }, concurrent);
    } //# sourceMappingURL=mergeMapTo.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/mergeScan.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/mergeScan.js ***!
    \********************************************************************/

  /*! exports provided: mergeScan, MergeScanOperator, MergeScanSubscriber */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsMergeScanJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "mergeScan", function () {
      return mergeScan;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MergeScanOperator", function () {
      return MergeScanOperator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MergeScanSubscriber", function () {
      return MergeScanSubscriber;
    });
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../InnerSubscriber */
    "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js");

    function mergeScan(accumulator, seed) {
      var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;
      return function (source) {
        return source.lift(new MergeScanOperator(accumulator, seed, concurrent));
      };
    }

    var MergeScanOperator = /*#__PURE__*/function () {
      function MergeScanOperator(accumulator, seed, concurrent) {
        _classCallCheck(this, MergeScanOperator);

        this.accumulator = accumulator;
        this.seed = seed;
        this.concurrent = concurrent;
      }

      _createClass2(MergeScanOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
        }
      }]);

      return MergeScanOperator;
    }();

    var MergeScanSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB16) {
      _inherits(MergeScanSubscriber, _OuterSubscriber__WEB16);

      var _super95 = _createSuper(MergeScanSubscriber);

      function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
        var _this124;

        _classCallCheck(this, MergeScanSubscriber);

        _this124 = _super95.call(this, destination);
        _this124.accumulator = accumulator;
        _this124.acc = acc;
        _this124.concurrent = concurrent;
        _this124.hasValue = false;
        _this124.hasCompleted = false;
        _this124.buffer = [];
        _this124.active = 0;
        _this124.index = 0;
        return _this124;
      }

      _createClass2(MergeScanSubscriber, [{
        key: "_next",
        value: function _next(value) {
          if (this.active < this.concurrent) {
            var index = this.index++;
            var destination = this.destination;
            var ish;

            try {
              var accumulator = this.accumulator;
              ish = accumulator(this.acc, value, index);
            } catch (e) {
              return destination.error(e);
            }

            this.active++;

            this._innerSub(ish, value, index);
          } else {
            this.buffer.push(value);
          }
        }
      }, {
        key: "_innerSub",
        value: function _innerSub(ish, value, index) {
          var innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_2__["InnerSubscriber"](this, value, index);
          var destination = this.destination;
          destination.add(innerSubscriber);
          var innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_0__["subscribeToResult"])(this, ish, undefined, undefined, innerSubscriber);

          if (innerSubscription !== innerSubscriber) {
            destination.add(innerSubscription);
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.hasCompleted = true;

          if (this.active === 0 && this.buffer.length === 0) {
            if (this.hasValue === false) {
              this.destination.next(this.acc);
            }

            this.destination.complete();
          }

          this.unsubscribe();
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          var destination = this.destination;
          this.acc = innerValue;
          this.hasValue = true;
          destination.next(innerValue);
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete(innerSub) {
          var buffer = this.buffer;
          var destination = this.destination;
          destination.remove(innerSub);
          this.active--;

          if (buffer.length > 0) {
            this._next(buffer.shift());
          } else if (this.active === 0 && this.hasCompleted) {
            if (this.hasValue === false) {
              this.destination.next(this.acc);
            }

            this.destination.complete();
          }
        }
      }]);

      return MergeScanSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__["OuterSubscriber"]); //# sourceMappingURL=mergeScan.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/min.js":
  /*!**************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/min.js ***!
    \**************************************************************/

  /*! exports provided: min */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsMinJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "min", function () {
      return min;
    });
    /* harmony import */


    var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./reduce */
    "./node_modules/rxjs/_esm2015/internal/operators/reduce.js");

    function min(comparer) {
      var min = typeof comparer === 'function' ? function (x, y) {
        return comparer(x, y) < 0 ? x : y;
      } : function (x, y) {
        return x < y ? x : y;
      };
      return Object(_reduce__WEBPACK_IMPORTED_MODULE_0__["reduce"])(min);
    } //# sourceMappingURL=min.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/multicast.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/multicast.js ***!
    \********************************************************************/

  /*! exports provided: multicast, MulticastOperator */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsMulticastJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "multicast", function () {
      return multicast;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "MulticastOperator", function () {
      return MulticastOperator;
    });
    /* harmony import */


    var _observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../observable/ConnectableObservable */
    "./node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js");

    function multicast(subjectOrSubjectFactory, selector) {
      return function multicastOperatorFunction(source) {
        var subjectFactory;

        if (typeof subjectOrSubjectFactory === 'function') {
          subjectFactory = subjectOrSubjectFactory;
        } else {
          subjectFactory = function subjectFactory() {
            return subjectOrSubjectFactory;
          };
        }

        if (typeof selector === 'function') {
          return source.lift(new MulticastOperator(subjectFactory, selector));
        }

        var connectable = Object.create(source, _observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_0__["connectableObservableDescriptor"]);
        connectable.source = source;
        connectable.subjectFactory = subjectFactory;
        return connectable;
      };
    }

    var MulticastOperator = /*#__PURE__*/function () {
      function MulticastOperator(subjectFactory, selector) {
        _classCallCheck(this, MulticastOperator);

        this.subjectFactory = subjectFactory;
        this.selector = selector;
      }

      _createClass2(MulticastOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          var selector = this.selector;
          var subject = this.subjectFactory();
          var subscription = selector(subject).subscribe(subscriber);
          subscription.add(source.subscribe(subject));
          return subscription;
        }
      }]);

      return MulticastOperator;
    }(); //# sourceMappingURL=multicast.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/observeOn.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/observeOn.js ***!
    \********************************************************************/

  /*! exports provided: observeOn, ObserveOnOperator, ObserveOnSubscriber, ObserveOnMessage */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsObserveOnJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "observeOn", function () {
      return observeOn;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ObserveOnOperator", function () {
      return ObserveOnOperator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ObserveOnSubscriber", function () {
      return ObserveOnSubscriber;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ObserveOnMessage", function () {
      return ObserveOnMessage;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _Notification__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Notification */
    "./node_modules/rxjs/_esm2015/internal/Notification.js");

    function observeOn(scheduler) {
      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return function observeOnOperatorFunction(source) {
        return source.lift(new ObserveOnOperator(scheduler, delay));
      };
    }

    var ObserveOnOperator = /*#__PURE__*/function () {
      function ObserveOnOperator(scheduler) {
        var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        _classCallCheck(this, ObserveOnOperator);

        this.scheduler = scheduler;
        this.delay = delay;
      }

      _createClass2(ObserveOnOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
        }
      }]);

      return ObserveOnOperator;
    }();

    var ObserveOnSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_27) {
      _inherits(ObserveOnSubscriber, _Subscriber__WEBPACK_27);

      var _super96 = _createSuper(ObserveOnSubscriber);

      function ObserveOnSubscriber(destination, scheduler) {
        var _this125;

        var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

        _classCallCheck(this, ObserveOnSubscriber);

        _this125 = _super96.call(this, destination);
        _this125.scheduler = scheduler;
        _this125.delay = delay;
        return _this125;
      }

      _createClass2(ObserveOnSubscriber, [{
        key: "scheduleMessage",
        value: function scheduleMessage(notification) {
          var destination = this.destination;
          destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
        }
      }, {
        key: "_next",
        value: function _next(value) {
          this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createNext(value));
        }
      }, {
        key: "_error",
        value: function _error(err) {
          this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createError(err));
          this.unsubscribe();
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createComplete());
          this.unsubscribe();
        }
      }], [{
        key: "dispatch",
        value: function dispatch(arg) {
          var notification = arg.notification,
              destination = arg.destination;
          notification.observe(destination);
          this.unsubscribe();
        }
      }]);

      return ObserveOnSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

    var ObserveOnMessage = function ObserveOnMessage(notification, destination) {
      _classCallCheck(this, ObserveOnMessage);

      this.notification = notification;
      this.destination = destination;
    }; //# sourceMappingURL=observeOn.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/onErrorResumeNext.js":
  /*!****************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/onErrorResumeNext.js ***!
    \****************************************************************************/

  /*! exports provided: onErrorResumeNext, onErrorResumeNextStatic */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsOnErrorResumeNextJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function () {
      return onErrorResumeNext;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "onErrorResumeNextStatic", function () {
      return onErrorResumeNextStatic;
    });
    /* harmony import */


    var _observable_from__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../observable/from */
    "./node_modules/rxjs/_esm2015/internal/observable/from.js");
    /* harmony import */


    var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/isArray */
    "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../InnerSubscriber */
    "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function onErrorResumeNext() {
      for (var _len36 = arguments.length, nextSources = new Array(_len36), _key33 = 0; _key33 < _len36; _key33++) {
        nextSources[_key33] = arguments[_key33];
      }

      if (nextSources.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(nextSources[0])) {
        nextSources = nextSources[0];
      }

      return function (source) {
        return source.lift(new OnErrorResumeNextOperator(nextSources));
      };
    }

    function onErrorResumeNextStatic() {
      for (var _len37 = arguments.length, nextSources = new Array(_len37), _key34 = 0; _key34 < _len37; _key34++) {
        nextSources[_key34] = arguments[_key34];
      }

      var source = null;

      if (nextSources.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(nextSources[0])) {
        nextSources = nextSources[0];
      }

      source = nextSources.shift();
      return Object(_observable_from__WEBPACK_IMPORTED_MODULE_0__["from"])(source, null).lift(new OnErrorResumeNextOperator(nextSources));
    }

    var OnErrorResumeNextOperator = /*#__PURE__*/function () {
      function OnErrorResumeNextOperator(nextSources) {
        _classCallCheck(this, OnErrorResumeNextOperator);

        this.nextSources = nextSources;
      }

      _createClass2(OnErrorResumeNextOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
        }
      }]);

      return OnErrorResumeNextOperator;
    }();

    var OnErrorResumeNextSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB17) {
      _inherits(OnErrorResumeNextSubscriber, _OuterSubscriber__WEB17);

      var _super97 = _createSuper(OnErrorResumeNextSubscriber);

      function OnErrorResumeNextSubscriber(destination, nextSources) {
        var _this126;

        _classCallCheck(this, OnErrorResumeNextSubscriber);

        _this126 = _super97.call(this, destination);
        _this126.destination = destination;
        _this126.nextSources = nextSources;
        return _this126;
      }

      _createClass2(OnErrorResumeNextSubscriber, [{
        key: "notifyError",
        value: function notifyError(error, innerSub) {
          this.subscribeToNextSource();
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete(innerSub) {
          this.subscribeToNextSource();
        }
      }, {
        key: "_error",
        value: function _error(err) {
          this.subscribeToNextSource();
          this.unsubscribe();
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.subscribeToNextSource();
          this.unsubscribe();
        }
      }, {
        key: "subscribeToNextSource",
        value: function subscribeToNextSource() {
          var next = this.nextSources.shift();

          if (!!next) {
            var innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_3__["InnerSubscriber"](this, undefined, undefined);
            var destination = this.destination;
            destination.add(innerSubscriber);
            var innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__["subscribeToResult"])(this, next, undefined, undefined, innerSubscriber);

            if (innerSubscription !== innerSubscriber) {
              destination.add(innerSubscription);
            }
          } else {
            this.destination.complete();
          }
        }
      }]);

      return OnErrorResumeNextSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"]); //# sourceMappingURL=onErrorResumeNext.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/pairwise.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/pairwise.js ***!
    \*******************************************************************/

  /*! exports provided: pairwise */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsPairwiseJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "pairwise", function () {
      return pairwise;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function pairwise() {
      return function (source) {
        return source.lift(new PairwiseOperator());
      };
    }

    var PairwiseOperator = /*#__PURE__*/function () {
      function PairwiseOperator() {
        _classCallCheck(this, PairwiseOperator);
      }

      _createClass2(PairwiseOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new PairwiseSubscriber(subscriber));
        }
      }]);

      return PairwiseOperator;
    }();

    var PairwiseSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_28) {
      _inherits(PairwiseSubscriber, _Subscriber__WEBPACK_28);

      var _super98 = _createSuper(PairwiseSubscriber);

      function PairwiseSubscriber(destination) {
        var _this127;

        _classCallCheck(this, PairwiseSubscriber);

        _this127 = _super98.call(this, destination);
        _this127.hasPrev = false;
        return _this127;
      }

      _createClass2(PairwiseSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var pair;

          if (this.hasPrev) {
            pair = [this.prev, value];
          } else {
            this.hasPrev = true;
          }

          this.prev = value;

          if (pair) {
            this.destination.next(pair);
          }
        }
      }]);

      return PairwiseSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=pairwise.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/partition.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/partition.js ***!
    \********************************************************************/

  /*! exports provided: partition */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsPartitionJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "partition", function () {
      return partition;
    });
    /* harmony import */


    var _util_not__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util/not */
    "./node_modules/rxjs/_esm2015/internal/util/not.js");
    /* harmony import */


    var _filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./filter */
    "./node_modules/rxjs/_esm2015/internal/operators/filter.js");

    function partition(predicate, thisArg) {
      return function (source) {
        return [Object(_filter__WEBPACK_IMPORTED_MODULE_1__["filter"])(predicate, thisArg)(source), Object(_filter__WEBPACK_IMPORTED_MODULE_1__["filter"])(Object(_util_not__WEBPACK_IMPORTED_MODULE_0__["not"])(predicate, thisArg))(source)];
      };
    } //# sourceMappingURL=partition.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/pluck.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/pluck.js ***!
    \****************************************************************/

  /*! exports provided: pluck */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsPluckJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "pluck", function () {
      return pluck;
    });
    /* harmony import */


    var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./map */
    "./node_modules/rxjs/_esm2015/internal/operators/map.js");

    function pluck() {
      for (var _len38 = arguments.length, properties = new Array(_len38), _key35 = 0; _key35 < _len38; _key35++) {
        properties[_key35] = arguments[_key35];
      }

      var length = properties.length;

      if (length === 0) {
        throw new Error('list of properties cannot be empty.');
      }

      return function (source) {
        return Object(_map__WEBPACK_IMPORTED_MODULE_0__["map"])(plucker(properties, length))(source);
      };
    }

    function plucker(props, length) {
      var mapper = function mapper(x) {
        var currentProp = x;

        for (var i = 0; i < length; i++) {
          var p = currentProp[props[i]];

          if (typeof p !== 'undefined') {
            currentProp = p;
          } else {
            return undefined;
          }
        }

        return currentProp;
      };

      return mapper;
    } //# sourceMappingURL=pluck.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/publish.js":
  /*!******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/publish.js ***!
    \******************************************************************/

  /*! exports provided: publish */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsPublishJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "publish", function () {
      return publish;
    });
    /* harmony import */


    var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subject */
    "./node_modules/rxjs/_esm2015/internal/Subject.js");
    /* harmony import */


    var _multicast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./multicast */
    "./node_modules/rxjs/_esm2015/internal/operators/multicast.js");

    function publish(selector) {
      return selector ? Object(_multicast__WEBPACK_IMPORTED_MODULE_1__["multicast"])(function () {
        return new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
      }, selector) : Object(_multicast__WEBPACK_IMPORTED_MODULE_1__["multicast"])(new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]());
    } //# sourceMappingURL=publish.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/publishBehavior.js":
  /*!**************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/publishBehavior.js ***!
    \**************************************************************************/

  /*! exports provided: publishBehavior */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsPublishBehaviorJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "publishBehavior", function () {
      return publishBehavior;
    });
    /* harmony import */


    var _BehaviorSubject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../BehaviorSubject */
    "./node_modules/rxjs/_esm2015/internal/BehaviorSubject.js");
    /* harmony import */


    var _multicast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./multicast */
    "./node_modules/rxjs/_esm2015/internal/operators/multicast.js");

    function publishBehavior(value) {
      return function (source) {
        return Object(_multicast__WEBPACK_IMPORTED_MODULE_1__["multicast"])(new _BehaviorSubject__WEBPACK_IMPORTED_MODULE_0__["BehaviorSubject"](value))(source);
      };
    } //# sourceMappingURL=publishBehavior.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/publishLast.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/publishLast.js ***!
    \**********************************************************************/

  /*! exports provided: publishLast */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsPublishLastJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "publishLast", function () {
      return publishLast;
    });
    /* harmony import */


    var _AsyncSubject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../AsyncSubject */
    "./node_modules/rxjs/_esm2015/internal/AsyncSubject.js");
    /* harmony import */


    var _multicast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./multicast */
    "./node_modules/rxjs/_esm2015/internal/operators/multicast.js");

    function publishLast() {
      return function (source) {
        return Object(_multicast__WEBPACK_IMPORTED_MODULE_1__["multicast"])(new _AsyncSubject__WEBPACK_IMPORTED_MODULE_0__["AsyncSubject"]())(source);
      };
    } //# sourceMappingURL=publishLast.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/publishReplay.js":
  /*!************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/publishReplay.js ***!
    \************************************************************************/

  /*! exports provided: publishReplay */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsPublishReplayJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "publishReplay", function () {
      return publishReplay;
    });
    /* harmony import */


    var _ReplaySubject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../ReplaySubject */
    "./node_modules/rxjs/_esm2015/internal/ReplaySubject.js");
    /* harmony import */


    var _multicast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./multicast */
    "./node_modules/rxjs/_esm2015/internal/operators/multicast.js");

    function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {
      if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {
        scheduler = selectorOrScheduler;
      }

      var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;
      var subject = new _ReplaySubject__WEBPACK_IMPORTED_MODULE_0__["ReplaySubject"](bufferSize, windowTime, scheduler);
      return function (source) {
        return Object(_multicast__WEBPACK_IMPORTED_MODULE_1__["multicast"])(function () {
          return subject;
        }, selector)(source);
      };
    } //# sourceMappingURL=publishReplay.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/race.js":
  /*!***************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/race.js ***!
    \***************************************************************/

  /*! exports provided: race */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsRaceJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "race", function () {
      return race;
    });
    /* harmony import */


    var _util_isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util/isArray */
    "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
    /* harmony import */


    var _observable_race__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../observable/race */
    "./node_modules/rxjs/_esm2015/internal/observable/race.js");

    function race() {
      for (var _len39 = arguments.length, observables = new Array(_len39), _key36 = 0; _key36 < _len39; _key36++) {
        observables[_key36] = arguments[_key36];
      }

      return function raceOperatorFunction(source) {
        if (observables.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(observables[0])) {
          observables = observables[0];
        }

        return source.lift.call(Object(_observable_race__WEBPACK_IMPORTED_MODULE_1__["race"]).apply(void 0, [source].concat(_toConsumableArray(observables))));
      };
    } //# sourceMappingURL=race.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/reduce.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/reduce.js ***!
    \*****************************************************************/

  /*! exports provided: reduce */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsReduceJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "reduce", function () {
      return reduce;
    });
    /* harmony import */


    var _scan__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./scan */
    "./node_modules/rxjs/_esm2015/internal/operators/scan.js");
    /* harmony import */


    var _takeLast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./takeLast */
    "./node_modules/rxjs/_esm2015/internal/operators/takeLast.js");
    /* harmony import */


    var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./defaultIfEmpty */
    "./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js");
    /* harmony import */


    var _util_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../util/pipe */
    "./node_modules/rxjs/_esm2015/internal/util/pipe.js");

    function reduce(accumulator, seed) {
      if (arguments.length >= 2) {
        return function reduceOperatorFunctionWithSeed(source) {
          return Object(_util_pipe__WEBPACK_IMPORTED_MODULE_3__["pipe"])(Object(_scan__WEBPACK_IMPORTED_MODULE_0__["scan"])(accumulator, seed), Object(_takeLast__WEBPACK_IMPORTED_MODULE_1__["takeLast"])(1), Object(_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_2__["defaultIfEmpty"])(seed))(source);
        };
      }

      return function reduceOperatorFunction(source) {
        return Object(_util_pipe__WEBPACK_IMPORTED_MODULE_3__["pipe"])(Object(_scan__WEBPACK_IMPORTED_MODULE_0__["scan"])(function (acc, value, index) {
          return accumulator(acc, value, index + 1);
        }), Object(_takeLast__WEBPACK_IMPORTED_MODULE_1__["takeLast"])(1))(source);
      };
    } //# sourceMappingURL=reduce.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/refCount.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/refCount.js ***!
    \*******************************************************************/

  /*! exports provided: refCount */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsRefCountJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "refCount", function () {
      return refCount;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function refCount() {
      return function refCountOperatorFunction(source) {
        return source.lift(new RefCountOperator(source));
      };
    }

    var RefCountOperator = /*#__PURE__*/function () {
      function RefCountOperator(connectable) {
        _classCallCheck(this, RefCountOperator);

        this.connectable = connectable;
      }

      _createClass2(RefCountOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          var connectable = this.connectable;
          connectable._refCount++;
          var refCounter = new RefCountSubscriber(subscriber, connectable);
          var subscription = source.subscribe(refCounter);

          if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
          }

          return subscription;
        }
      }]);

      return RefCountOperator;
    }();

    var RefCountSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_29) {
      _inherits(RefCountSubscriber, _Subscriber__WEBPACK_29);

      var _super99 = _createSuper(RefCountSubscriber);

      function RefCountSubscriber(destination, connectable) {
        var _this128;

        _classCallCheck(this, RefCountSubscriber);

        _this128 = _super99.call(this, destination);
        _this128.connectable = connectable;
        return _this128;
      }

      _createClass2(RefCountSubscriber, [{
        key: "_unsubscribe",
        value: function _unsubscribe() {
          var connectable = this.connectable;

          if (!connectable) {
            this.connection = null;
            return;
          }

          this.connectable = null;
          var refCount = connectable._refCount;

          if (refCount <= 0) {
            this.connection = null;
            return;
          }

          connectable._refCount = refCount - 1;

          if (refCount > 1) {
            this.connection = null;
            return;
          }

          var connection = this.connection;
          var sharedConnection = connectable._connection;
          this.connection = null;

          if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
          }
        }
      }]);

      return RefCountSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=refCount.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/repeat.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/repeat.js ***!
    \*****************************************************************/

  /*! exports provided: repeat */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsRepeatJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "repeat", function () {
      return repeat;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _observable_empty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../observable/empty */
    "./node_modules/rxjs/_esm2015/internal/observable/empty.js");

    function repeat() {
      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
      return function (source) {
        if (count === 0) {
          return Object(_observable_empty__WEBPACK_IMPORTED_MODULE_1__["empty"])();
        } else if (count < 0) {
          return source.lift(new RepeatOperator(-1, source));
        } else {
          return source.lift(new RepeatOperator(count - 1, source));
        }
      };
    }

    var RepeatOperator = /*#__PURE__*/function () {
      function RepeatOperator(count, source) {
        _classCallCheck(this, RepeatOperator);

        this.count = count;
        this.source = source;
      }

      _createClass2(RepeatOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
        }
      }]);

      return RepeatOperator;
    }();

    var RepeatSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_30) {
      _inherits(RepeatSubscriber, _Subscriber__WEBPACK_30);

      var _super100 = _createSuper(RepeatSubscriber);

      function RepeatSubscriber(destination, count, source) {
        var _this129;

        _classCallCheck(this, RepeatSubscriber);

        _this129 = _super100.call(this, destination);
        _this129.count = count;
        _this129.source = source;
        return _this129;
      }

      _createClass2(RepeatSubscriber, [{
        key: "complete",
        value: function complete() {
          if (!this.isStopped) {
            var source = this.source,
                count = this.count;

            if (count === 0) {
              return _get(_getPrototypeOf(RepeatSubscriber.prototype), "complete", this).call(this);
            } else if (count > -1) {
              this.count = count - 1;
            }

            source.subscribe(this._unsubscribeAndRecycle());
          }
        }
      }]);

      return RepeatSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=repeat.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/repeatWhen.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/repeatWhen.js ***!
    \*********************************************************************/

  /*! exports provided: repeatWhen */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsRepeatWhenJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "repeatWhen", function () {
      return repeatWhen;
    });
    /* harmony import */


    var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subject */
    "./node_modules/rxjs/_esm2015/internal/Subject.js");
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function repeatWhen(notifier) {
      return function (source) {
        return source.lift(new RepeatWhenOperator(notifier));
      };
    }

    var RepeatWhenOperator = /*#__PURE__*/function () {
      function RepeatWhenOperator(notifier) {
        _classCallCheck(this, RepeatWhenOperator);

        this.notifier = notifier;
      }

      _createClass2(RepeatWhenOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
        }
      }]);

      return RepeatWhenOperator;
    }();

    var RepeatWhenSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB18) {
      _inherits(RepeatWhenSubscriber, _OuterSubscriber__WEB18);

      var _super101 = _createSuper(RepeatWhenSubscriber);

      function RepeatWhenSubscriber(destination, notifier, source) {
        var _this130;

        _classCallCheck(this, RepeatWhenSubscriber);

        _this130 = _super101.call(this, destination);
        _this130.notifier = notifier;
        _this130.source = source;
        _this130.sourceIsBeingSubscribedTo = true;
        return _this130;
      }

      _createClass2(RepeatWhenSubscriber, [{
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.sourceIsBeingSubscribedTo = true;
          this.source.subscribe(this);
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete(innerSub) {
          if (this.sourceIsBeingSubscribedTo === false) {
            return _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), "complete", this).call(this);
          }
        }
      }, {
        key: "complete",
        value: function complete() {
          this.sourceIsBeingSubscribedTo = false;

          if (!this.isStopped) {
            if (!this.retries) {
              this.subscribeToRetries();
            }

            if (!this.retriesSubscription || this.retriesSubscription.closed) {
              return _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), "complete", this).call(this);
            }

            this._unsubscribeAndRecycle();

            this.notifications.next();
          }
        }
      }, {
        key: "_unsubscribe",
        value: function _unsubscribe() {
          var notifications = this.notifications,
              retriesSubscription = this.retriesSubscription;

          if (notifications) {
            notifications.unsubscribe();
            this.notifications = null;
          }

          if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
          }

          this.retries = null;
        }
      }, {
        key: "_unsubscribeAndRecycle",
        value: function _unsubscribeAndRecycle() {
          var _unsubscribe = this._unsubscribe;
          this._unsubscribe = null;

          _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), "_unsubscribeAndRecycle", this).call(this);

          this._unsubscribe = _unsubscribe;
          return this;
        }
      }, {
        key: "subscribeToRetries",
        value: function subscribeToRetries() {
          this.notifications = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
          var retries;

          try {
            var notifier = this.notifier;
            retries = notifier(this.notifications);
          } catch (e) {
            return _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), "complete", this).call(this);
          }

          this.retries = retries;
          this.retriesSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(this, retries);
        }
      }]);

      return RepeatWhenSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__["OuterSubscriber"]); //# sourceMappingURL=repeatWhen.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/retry.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/retry.js ***!
    \****************************************************************/

  /*! exports provided: retry */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsRetryJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "retry", function () {
      return retry;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function retry() {
      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
      return function (source) {
        return source.lift(new RetryOperator(count, source));
      };
    }

    var RetryOperator = /*#__PURE__*/function () {
      function RetryOperator(count, source) {
        _classCallCheck(this, RetryOperator);

        this.count = count;
        this.source = source;
      }

      _createClass2(RetryOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
        }
      }]);

      return RetryOperator;
    }();

    var RetrySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_31) {
      _inherits(RetrySubscriber, _Subscriber__WEBPACK_31);

      var _super102 = _createSuper(RetrySubscriber);

      function RetrySubscriber(destination, count, source) {
        var _this131;

        _classCallCheck(this, RetrySubscriber);

        _this131 = _super102.call(this, destination);
        _this131.count = count;
        _this131.source = source;
        return _this131;
      }

      _createClass2(RetrySubscriber, [{
        key: "error",
        value: function error(err) {
          if (!this.isStopped) {
            var source = this.source,
                count = this.count;

            if (count === 0) {
              return _get(_getPrototypeOf(RetrySubscriber.prototype), "error", this).call(this, err);
            } else if (count > -1) {
              this.count = count - 1;
            }

            source.subscribe(this._unsubscribeAndRecycle());
          }
        }
      }]);

      return RetrySubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=retry.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/retryWhen.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/retryWhen.js ***!
    \********************************************************************/

  /*! exports provided: retryWhen */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsRetryWhenJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "retryWhen", function () {
      return retryWhen;
    });
    /* harmony import */


    var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subject */
    "./node_modules/rxjs/_esm2015/internal/Subject.js");
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function retryWhen(notifier) {
      return function (source) {
        return source.lift(new RetryWhenOperator(notifier, source));
      };
    }

    var RetryWhenOperator = /*#__PURE__*/function () {
      function RetryWhenOperator(notifier, source) {
        _classCallCheck(this, RetryWhenOperator);

        this.notifier = notifier;
        this.source = source;
      }

      _createClass2(RetryWhenOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
        }
      }]);

      return RetryWhenOperator;
    }();

    var RetryWhenSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB19) {
      _inherits(RetryWhenSubscriber, _OuterSubscriber__WEB19);

      var _super103 = _createSuper(RetryWhenSubscriber);

      function RetryWhenSubscriber(destination, notifier, source) {
        var _this132;

        _classCallCheck(this, RetryWhenSubscriber);

        _this132 = _super103.call(this, destination);
        _this132.notifier = notifier;
        _this132.source = source;
        return _this132;
      }

      _createClass2(RetryWhenSubscriber, [{
        key: "error",
        value: function error(err) {
          if (!this.isStopped) {
            var errors = this.errors;
            var retries = this.retries;
            var retriesSubscription = this.retriesSubscription;

            if (!retries) {
              errors = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();

              try {
                var notifier = this.notifier;
                retries = notifier(errors);
              } catch (e) {
                return _get(_getPrototypeOf(RetryWhenSubscriber.prototype), "error", this).call(this, e);
              }

              retriesSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(this, retries);
            } else {
              this.errors = null;
              this.retriesSubscription = null;
            }

            this._unsubscribeAndRecycle();

            this.errors = errors;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            errors.next(err);
          }
        }
      }, {
        key: "_unsubscribe",
        value: function _unsubscribe() {
          var errors = this.errors,
              retriesSubscription = this.retriesSubscription;

          if (errors) {
            errors.unsubscribe();
            this.errors = null;
          }

          if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
          }

          this.retries = null;
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          var _unsubscribe = this._unsubscribe;
          this._unsubscribe = null;

          this._unsubscribeAndRecycle();

          this._unsubscribe = _unsubscribe;
          this.source.subscribe(this);
        }
      }]);

      return RetryWhenSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__["OuterSubscriber"]); //# sourceMappingURL=retryWhen.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/sample.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/sample.js ***!
    \*****************************************************************/

  /*! exports provided: sample */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsSampleJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sample", function () {
      return sample;
    });
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function sample(notifier) {
      return function (source) {
        return source.lift(new SampleOperator(notifier));
      };
    }

    var SampleOperator = /*#__PURE__*/function () {
      function SampleOperator(notifier) {
        _classCallCheck(this, SampleOperator);

        this.notifier = notifier;
      }

      _createClass2(SampleOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          var sampleSubscriber = new SampleSubscriber(subscriber);
          var subscription = source.subscribe(sampleSubscriber);
          subscription.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(sampleSubscriber, this.notifier));
          return subscription;
        }
      }]);

      return SampleOperator;
    }();

    var SampleSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB20) {
      _inherits(SampleSubscriber, _OuterSubscriber__WEB20);

      var _super104 = _createSuper(SampleSubscriber);

      function SampleSubscriber() {
        var _this133;

        _classCallCheck(this, SampleSubscriber);

        _this133 = _super104.apply(this, arguments);
        _this133.hasValue = false;
        return _this133;
      }

      _createClass2(SampleSubscriber, [{
        key: "_next",
        value: function _next(value) {
          this.value = value;
          this.hasValue = true;
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.emitValue();
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete() {
          this.emitValue();
        }
      }, {
        key: "emitValue",
        value: function emitValue() {
          if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.value);
          }
        }
      }]);

      return SampleSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"]); //# sourceMappingURL=sample.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/sampleTime.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/sampleTime.js ***!
    \*********************************************************************/

  /*! exports provided: sampleTime */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsSampleTimeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sampleTime", function () {
      return sampleTime;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../scheduler/async */
    "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");

    function sampleTime(period) {
      var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
      return function (source) {
        return source.lift(new SampleTimeOperator(period, scheduler));
      };
    }

    var SampleTimeOperator = /*#__PURE__*/function () {
      function SampleTimeOperator(period, scheduler) {
        _classCallCheck(this, SampleTimeOperator);

        this.period = period;
        this.scheduler = scheduler;
      }

      _createClass2(SampleTimeOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
        }
      }]);

      return SampleTimeOperator;
    }();

    var SampleTimeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_32) {
      _inherits(SampleTimeSubscriber, _Subscriber__WEBPACK_32);

      var _super105 = _createSuper(SampleTimeSubscriber);

      function SampleTimeSubscriber(destination, period, scheduler) {
        var _this134;

        _classCallCheck(this, SampleTimeSubscriber);

        _this134 = _super105.call(this, destination);
        _this134.period = period;
        _this134.scheduler = scheduler;
        _this134.hasValue = false;

        _this134.add(scheduler.schedule(dispatchNotification, period, {
          subscriber: _assertThisInitialized(_this134),
          period: period
        }));

        return _this134;
      }

      _createClass2(SampleTimeSubscriber, [{
        key: "_next",
        value: function _next(value) {
          this.lastValue = value;
          this.hasValue = true;
        }
      }, {
        key: "notifyNext",
        value: function notifyNext() {
          if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.lastValue);
          }
        }
      }]);

      return SampleTimeSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

    function dispatchNotification(state) {
      var subscriber = state.subscriber,
          period = state.period;
      subscriber.notifyNext();
      this.schedule(state, period);
    } //# sourceMappingURL=sampleTime.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/scan.js":
  /*!***************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/scan.js ***!
    \***************************************************************/

  /*! exports provided: scan */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsScanJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "scan", function () {
      return scan;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function scan(accumulator, seed) {
      var hasSeed = false;

      if (arguments.length >= 2) {
        hasSeed = true;
      }

      return function scanOperatorFunction(source) {
        return source.lift(new ScanOperator(accumulator, seed, hasSeed));
      };
    }

    var ScanOperator = /*#__PURE__*/function () {
      function ScanOperator(accumulator, seed) {
        var hasSeed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        _classCallCheck(this, ScanOperator);

        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
      }

      _createClass2(ScanOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
        }
      }]);

      return ScanOperator;
    }();

    var ScanSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_33) {
      _inherits(ScanSubscriber, _Subscriber__WEBPACK_33);

      var _super106 = _createSuper(ScanSubscriber);

      function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
        var _this135;

        _classCallCheck(this, ScanSubscriber);

        _this135 = _super106.call(this, destination);
        _this135.accumulator = accumulator;
        _this135._seed = _seed;
        _this135.hasSeed = hasSeed;
        _this135.index = 0;
        return _this135;
      }

      _createClass2(ScanSubscriber, [{
        key: "_next",
        value: function _next(value) {
          if (!this.hasSeed) {
            this.seed = value;
            this.destination.next(value);
          } else {
            return this._tryNext(value);
          }
        }
      }, {
        key: "_tryNext",
        value: function _tryNext(value) {
          var index = this.index++;
          var result;

          try {
            result = this.accumulator(this.seed, value, index);
          } catch (err) {
            this.destination.error(err);
          }

          this.seed = result;
          this.destination.next(result);
        }
      }, {
        key: "seed",
        get: function get() {
          return this._seed;
        },
        set: function set(value) {
          this.hasSeed = true;
          this._seed = value;
        }
      }]);

      return ScanSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=scan.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/sequenceEqual.js":
  /*!************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/sequenceEqual.js ***!
    \************************************************************************/

  /*! exports provided: sequenceEqual, SequenceEqualOperator, SequenceEqualSubscriber */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsSequenceEqualJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sequenceEqual", function () {
      return sequenceEqual;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SequenceEqualOperator", function () {
      return SequenceEqualOperator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SequenceEqualSubscriber", function () {
      return SequenceEqualSubscriber;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function sequenceEqual(compareTo, comparator) {
      return function (source) {
        return source.lift(new SequenceEqualOperator(compareTo, comparator));
      };
    }

    var SequenceEqualOperator = /*#__PURE__*/function () {
      function SequenceEqualOperator(compareTo, comparator) {
        _classCallCheck(this, SequenceEqualOperator);

        this.compareTo = compareTo;
        this.comparator = comparator;
      }

      _createClass2(SequenceEqualOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));
        }
      }]);

      return SequenceEqualOperator;
    }();

    var SequenceEqualSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_34) {
      _inherits(SequenceEqualSubscriber, _Subscriber__WEBPACK_34);

      var _super107 = _createSuper(SequenceEqualSubscriber);

      function SequenceEqualSubscriber(destination, compareTo, comparator) {
        var _this136;

        _classCallCheck(this, SequenceEqualSubscriber);

        _this136 = _super107.call(this, destination);
        _this136.compareTo = compareTo;
        _this136.comparator = comparator;
        _this136._a = [];
        _this136._b = [];
        _this136._oneComplete = false;

        _this136.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _assertThisInitialized(_this136))));

        return _this136;
      }

      _createClass2(SequenceEqualSubscriber, [{
        key: "_next",
        value: function _next(value) {
          if (this._oneComplete && this._b.length === 0) {
            this.emit(false);
          } else {
            this._a.push(value);

            this.checkValues();
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          if (this._oneComplete) {
            this.emit(this._a.length === 0 && this._b.length === 0);
          } else {
            this._oneComplete = true;
          }

          this.unsubscribe();
        }
      }, {
        key: "checkValues",
        value: function checkValues() {
          var _a = this._a,
              _b = this._b,
              comparator = this.comparator;

          while (_a.length > 0 && _b.length > 0) {
            var a = _a.shift();

            var b = _b.shift();

            var areEqual = false;

            try {
              areEqual = comparator ? comparator(a, b) : a === b;
            } catch (e) {
              this.destination.error(e);
            }

            if (!areEqual) {
              this.emit(false);
            }
          }
        }
      }, {
        key: "emit",
        value: function emit(value) {
          var destination = this.destination;
          destination.next(value);
          destination.complete();
        }
      }, {
        key: "nextB",
        value: function nextB(value) {
          if (this._oneComplete && this._a.length === 0) {
            this.emit(false);
          } else {
            this._b.push(value);

            this.checkValues();
          }
        }
      }, {
        key: "completeB",
        value: function completeB() {
          if (this._oneComplete) {
            this.emit(this._a.length === 0 && this._b.length === 0);
          } else {
            this._oneComplete = true;
          }
        }
      }]);

      return SequenceEqualSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

    var SequenceEqualCompareToSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_35) {
      _inherits(SequenceEqualCompareToSubscriber, _Subscriber__WEBPACK_35);

      var _super108 = _createSuper(SequenceEqualCompareToSubscriber);

      function SequenceEqualCompareToSubscriber(destination, parent) {
        var _this137;

        _classCallCheck(this, SequenceEqualCompareToSubscriber);

        _this137 = _super108.call(this, destination);
        _this137.parent = parent;
        return _this137;
      }

      _createClass2(SequenceEqualCompareToSubscriber, [{
        key: "_next",
        value: function _next(value) {
          this.parent.nextB(value);
        }
      }, {
        key: "_error",
        value: function _error(err) {
          this.parent.error(err);
          this.unsubscribe();
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.parent.completeB();
          this.unsubscribe();
        }
      }]);

      return SequenceEqualCompareToSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=sequenceEqual.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/share.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/share.js ***!
    \****************************************************************/

  /*! exports provided: share */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsShareJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "share", function () {
      return share;
    });
    /* harmony import */


    var _multicast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./multicast */
    "./node_modules/rxjs/_esm2015/internal/operators/multicast.js");
    /* harmony import */


    var _refCount__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./refCount */
    "./node_modules/rxjs/_esm2015/internal/operators/refCount.js");
    /* harmony import */


    var _Subject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Subject */
    "./node_modules/rxjs/_esm2015/internal/Subject.js");

    function shareSubjectFactory() {
      return new _Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
    }

    function share() {
      return function (source) {
        return Object(_refCount__WEBPACK_IMPORTED_MODULE_1__["refCount"])()(Object(_multicast__WEBPACK_IMPORTED_MODULE_0__["multicast"])(shareSubjectFactory)(source));
      };
    } //# sourceMappingURL=share.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/shareReplay.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/shareReplay.js ***!
    \**********************************************************************/

  /*! exports provided: shareReplay */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsShareReplayJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "shareReplay", function () {
      return shareReplay;
    });
    /* harmony import */


    var _ReplaySubject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../ReplaySubject */
    "./node_modules/rxjs/_esm2015/internal/ReplaySubject.js");

    function shareReplay(configOrBufferSize, windowTime, scheduler) {
      var config;

      if (configOrBufferSize && typeof configOrBufferSize === 'object') {
        config = configOrBufferSize;
      } else {
        config = {
          bufferSize: configOrBufferSize,
          windowTime: windowTime,
          refCount: false,
          scheduler: scheduler
        };
      }

      return function (source) {
        return source.lift(shareReplayOperator(config));
      };
    }

    function shareReplayOperator(_ref20) {
      var _ref20$bufferSize = _ref20.bufferSize,
          bufferSize = _ref20$bufferSize === void 0 ? Number.POSITIVE_INFINITY : _ref20$bufferSize,
          _ref20$windowTime = _ref20.windowTime,
          windowTime = _ref20$windowTime === void 0 ? Number.POSITIVE_INFINITY : _ref20$windowTime,
          useRefCount = _ref20.refCount,
          scheduler = _ref20.scheduler;
      var subject;
      var refCount = 0;
      var subscription;
      var hasError = false;
      var isComplete = false;
      return function shareReplayOperation(source) {
        refCount++;

        if (!subject || hasError) {
          hasError = false;
          subject = new _ReplaySubject__WEBPACK_IMPORTED_MODULE_0__["ReplaySubject"](bufferSize, windowTime, scheduler);
          subscription = source.subscribe({
            next: function next(value) {
              subject.next(value);
            },
            error: function error(err) {
              hasError = true;
              subject.error(err);
            },
            complete: function complete() {
              isComplete = true;
              subscription = undefined;
              subject.complete();
            }
          });
        }

        var innerSub = subject.subscribe(this);
        this.add(function () {
          refCount--;
          innerSub.unsubscribe();

          if (subscription && !isComplete && useRefCount && refCount === 0) {
            subscription.unsubscribe();
            subscription = undefined;
            subject = undefined;
          }
        });
      };
    } //# sourceMappingURL=shareReplay.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/single.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/single.js ***!
    \*****************************************************************/

  /*! exports provided: single */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsSingleJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "single", function () {
      return single;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _util_EmptyError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/EmptyError */
    "./node_modules/rxjs/_esm2015/internal/util/EmptyError.js");

    function single(predicate) {
      return function (source) {
        return source.lift(new SingleOperator(predicate, source));
      };
    }

    var SingleOperator = /*#__PURE__*/function () {
      function SingleOperator(predicate, source) {
        _classCallCheck(this, SingleOperator);

        this.predicate = predicate;
        this.source = source;
      }

      _createClass2(SingleOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
        }
      }]);

      return SingleOperator;
    }();

    var SingleSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_36) {
      _inherits(SingleSubscriber, _Subscriber__WEBPACK_36);

      var _super109 = _createSuper(SingleSubscriber);

      function SingleSubscriber(destination, predicate, source) {
        var _this138;

        _classCallCheck(this, SingleSubscriber);

        _this138 = _super109.call(this, destination);
        _this138.predicate = predicate;
        _this138.source = source;
        _this138.seenValue = false;
        _this138.index = 0;
        return _this138;
      }

      _createClass2(SingleSubscriber, [{
        key: "applySingleValue",
        value: function applySingleValue(value) {
          if (this.seenValue) {
            this.destination.error('Sequence contains more than one element');
          } else {
            this.seenValue = true;
            this.singleValue = value;
          }
        }
      }, {
        key: "_next",
        value: function _next(value) {
          var index = this.index++;

          if (this.predicate) {
            this.tryNext(value, index);
          } else {
            this.applySingleValue(value);
          }
        }
      }, {
        key: "tryNext",
        value: function tryNext(value, index) {
          try {
            if (this.predicate(value, index, this.source)) {
              this.applySingleValue(value);
            }
          } catch (err) {
            this.destination.error(err);
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          var destination = this.destination;

          if (this.index > 0) {
            destination.next(this.seenValue ? this.singleValue : undefined);
            destination.complete();
          } else {
            destination.error(new _util_EmptyError__WEBPACK_IMPORTED_MODULE_1__["EmptyError"]());
          }
        }
      }]);

      return SingleSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=single.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/skip.js":
  /*!***************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/skip.js ***!
    \***************************************************************/

  /*! exports provided: skip */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsSkipJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "skip", function () {
      return skip;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function skip(count) {
      return function (source) {
        return source.lift(new SkipOperator(count));
      };
    }

    var SkipOperator = /*#__PURE__*/function () {
      function SkipOperator(total) {
        _classCallCheck(this, SkipOperator);

        this.total = total;
      }

      _createClass2(SkipOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new SkipSubscriber(subscriber, this.total));
        }
      }]);

      return SkipOperator;
    }();

    var SkipSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_37) {
      _inherits(SkipSubscriber, _Subscriber__WEBPACK_37);

      var _super110 = _createSuper(SkipSubscriber);

      function SkipSubscriber(destination, total) {
        var _this139;

        _classCallCheck(this, SkipSubscriber);

        _this139 = _super110.call(this, destination);
        _this139.total = total;
        _this139.count = 0;
        return _this139;
      }

      _createClass2(SkipSubscriber, [{
        key: "_next",
        value: function _next(x) {
          if (++this.count > this.total) {
            this.destination.next(x);
          }
        }
      }]);

      return SkipSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=skip.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/skipLast.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/skipLast.js ***!
    \*******************************************************************/

  /*! exports provided: skipLast */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsSkipLastJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "skipLast", function () {
      return skipLast;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/ArgumentOutOfRangeError */
    "./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js");

    function skipLast(count) {
      return function (source) {
        return source.lift(new SkipLastOperator(count));
      };
    }

    var SkipLastOperator = /*#__PURE__*/function () {
      function SkipLastOperator(_skipCount) {
        _classCallCheck(this, SkipLastOperator);

        this._skipCount = _skipCount;

        if (this._skipCount < 0) {
          throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__["ArgumentOutOfRangeError"]();
        }
      }

      _createClass2(SkipLastOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          if (this._skipCount === 0) {
            return source.subscribe(new _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"](subscriber));
          } else {
            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
          }
        }
      }]);

      return SkipLastOperator;
    }();

    var SkipLastSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_38) {
      _inherits(SkipLastSubscriber, _Subscriber__WEBPACK_38);

      var _super111 = _createSuper(SkipLastSubscriber);

      function SkipLastSubscriber(destination, _skipCount) {
        var _this140;

        _classCallCheck(this, SkipLastSubscriber);

        _this140 = _super111.call(this, destination);
        _this140._skipCount = _skipCount;
        _this140._count = 0;
        _this140._ring = new Array(_skipCount);
        return _this140;
      }

      _createClass2(SkipLastSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var skipCount = this._skipCount;
          var count = this._count++;

          if (count < skipCount) {
            this._ring[count] = value;
          } else {
            var currentIndex = count % skipCount;
            var ring = this._ring;
            var oldValue = ring[currentIndex];
            ring[currentIndex] = value;
            this.destination.next(oldValue);
          }
        }
      }]);

      return SkipLastSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=skipLast.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/skipUntil.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/skipUntil.js ***!
    \********************************************************************/

  /*! exports provided: skipUntil */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsSkipUntilJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "skipUntil", function () {
      return skipUntil;
    });
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../InnerSubscriber */
    "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function skipUntil(notifier) {
      return function (source) {
        return source.lift(new SkipUntilOperator(notifier));
      };
    }

    var SkipUntilOperator = /*#__PURE__*/function () {
      function SkipUntilOperator(notifier) {
        _classCallCheck(this, SkipUntilOperator);

        this.notifier = notifier;
      }

      _createClass2(SkipUntilOperator, [{
        key: "call",
        value: function call(destination, source) {
          return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));
        }
      }]);

      return SkipUntilOperator;
    }();

    var SkipUntilSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB21) {
      _inherits(SkipUntilSubscriber, _OuterSubscriber__WEB21);

      var _super112 = _createSuper(SkipUntilSubscriber);

      function SkipUntilSubscriber(destination, notifier) {
        var _this141;

        _classCallCheck(this, SkipUntilSubscriber);

        _this141 = _super112.call(this, destination);
        _this141.hasValue = false;
        var innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__["InnerSubscriber"](_assertThisInitialized(_this141), undefined, undefined);

        _this141.add(innerSubscriber);

        _this141.innerSubscription = innerSubscriber;
        var innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(_assertThisInitialized(_this141), notifier, undefined, undefined, innerSubscriber);

        if (innerSubscription !== innerSubscriber) {
          _this141.add(innerSubscription);

          _this141.innerSubscription = innerSubscription;
        }

        return _this141;
      }

      _createClass2(SkipUntilSubscriber, [{
        key: "_next",
        value: function _next(value) {
          if (this.hasValue) {
            _get(_getPrototypeOf(SkipUntilSubscriber.prototype), "_next", this).call(this, value);
          }
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.hasValue = true;

          if (this.innerSubscription) {
            this.innerSubscription.unsubscribe();
          }
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete() {}
      }]);

      return SkipUntilSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"]); //# sourceMappingURL=skipUntil.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/skipWhile.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/skipWhile.js ***!
    \********************************************************************/

  /*! exports provided: skipWhile */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsSkipWhileJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "skipWhile", function () {
      return skipWhile;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function skipWhile(predicate) {
      return function (source) {
        return source.lift(new SkipWhileOperator(predicate));
      };
    }

    var SkipWhileOperator = /*#__PURE__*/function () {
      function SkipWhileOperator(predicate) {
        _classCallCheck(this, SkipWhileOperator);

        this.predicate = predicate;
      }

      _createClass2(SkipWhileOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
        }
      }]);

      return SkipWhileOperator;
    }();

    var SkipWhileSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_39) {
      _inherits(SkipWhileSubscriber, _Subscriber__WEBPACK_39);

      var _super113 = _createSuper(SkipWhileSubscriber);

      function SkipWhileSubscriber(destination, predicate) {
        var _this142;

        _classCallCheck(this, SkipWhileSubscriber);

        _this142 = _super113.call(this, destination);
        _this142.predicate = predicate;
        _this142.skipping = true;
        _this142.index = 0;
        return _this142;
      }

      _createClass2(SkipWhileSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var destination = this.destination;

          if (this.skipping) {
            this.tryCallPredicate(value);
          }

          if (!this.skipping) {
            destination.next(value);
          }
        }
      }, {
        key: "tryCallPredicate",
        value: function tryCallPredicate(value) {
          try {
            var result = this.predicate(value, this.index++);
            this.skipping = Boolean(result);
          } catch (err) {
            this.destination.error(err);
          }
        }
      }]);

      return SkipWhileSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=skipWhile.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/startWith.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/startWith.js ***!
    \********************************************************************/

  /*! exports provided: startWith */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsStartWithJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "startWith", function () {
      return startWith;
    });
    /* harmony import */


    var _observable_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../observable/concat */
    "./node_modules/rxjs/_esm2015/internal/observable/concat.js");
    /* harmony import */


    var _util_isScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/isScheduler */
    "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");

    function startWith() {
      for (var _len40 = arguments.length, array = new Array(_len40), _key37 = 0; _key37 < _len40; _key37++) {
        array[_key37] = arguments[_key37];
      }

      var scheduler = array[array.length - 1];

      if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_1__["isScheduler"])(scheduler)) {
        array.pop();
        return function (source) {
          return Object(_observable_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])(array, source, scheduler);
        };
      } else {
        return function (source) {
          return Object(_observable_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])(array, source);
        };
      }
    } //# sourceMappingURL=startWith.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/subscribeOn.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/subscribeOn.js ***!
    \**********************************************************************/

  /*! exports provided: subscribeOn */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsSubscribeOnJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "subscribeOn", function () {
      return subscribeOn;
    });
    /* harmony import */


    var _observable_SubscribeOnObservable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../observable/SubscribeOnObservable */
    "./node_modules/rxjs/_esm2015/internal/observable/SubscribeOnObservable.js");

    function subscribeOn(scheduler) {
      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return function subscribeOnOperatorFunction(source) {
        return source.lift(new SubscribeOnOperator(scheduler, delay));
      };
    }

    var SubscribeOnOperator = /*#__PURE__*/function () {
      function SubscribeOnOperator(scheduler, delay) {
        _classCallCheck(this, SubscribeOnOperator);

        this.scheduler = scheduler;
        this.delay = delay;
      }

      _createClass2(SubscribeOnOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return new _observable_SubscribeOnObservable__WEBPACK_IMPORTED_MODULE_0__["SubscribeOnObservable"](source, this.delay, this.scheduler).subscribe(subscriber);
        }
      }]);

      return SubscribeOnOperator;
    }(); //# sourceMappingURL=subscribeOn.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/switchAll.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/switchAll.js ***!
    \********************************************************************/

  /*! exports provided: switchAll */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsSwitchAllJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "switchAll", function () {
      return switchAll;
    });
    /* harmony import */


    var _switchMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./switchMap */
    "./node_modules/rxjs/_esm2015/internal/operators/switchMap.js");
    /* harmony import */


    var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/identity */
    "./node_modules/rxjs/_esm2015/internal/util/identity.js");

    function switchAll() {
      return Object(_switchMap__WEBPACK_IMPORTED_MODULE_0__["switchMap"])(_util_identity__WEBPACK_IMPORTED_MODULE_1__["identity"]);
    } //# sourceMappingURL=switchAll.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/switchMap.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/switchMap.js ***!
    \********************************************************************/

  /*! exports provided: switchMap */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsSwitchMapJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "switchMap", function () {
      return switchMap;
    });
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../InnerSubscriber */
    "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");
    /* harmony import */


    var _map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./map */
    "./node_modules/rxjs/_esm2015/internal/operators/map.js");
    /* harmony import */


    var _observable_from__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../observable/from */
    "./node_modules/rxjs/_esm2015/internal/observable/from.js");

    function switchMap(project, resultSelector) {
      if (typeof resultSelector === 'function') {
        return function (source) {
          return source.pipe(switchMap(function (a, i) {
            return Object(_observable_from__WEBPACK_IMPORTED_MODULE_4__["from"])(project(a, i)).pipe(Object(_map__WEBPACK_IMPORTED_MODULE_3__["map"])(function (b, ii) {
              return resultSelector(a, b, i, ii);
            }));
          }));
        };
      }

      return function (source) {
        return source.lift(new SwitchMapOperator(project));
      };
    }

    var SwitchMapOperator = /*#__PURE__*/function () {
      function SwitchMapOperator(project) {
        _classCallCheck(this, SwitchMapOperator);

        this.project = project;
      }

      _createClass2(SwitchMapOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
        }
      }]);

      return SwitchMapOperator;
    }();

    var SwitchMapSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB22) {
      _inherits(SwitchMapSubscriber, _OuterSubscriber__WEB22);

      var _super114 = _createSuper(SwitchMapSubscriber);

      function SwitchMapSubscriber(destination, project) {
        var _this143;

        _classCallCheck(this, SwitchMapSubscriber);

        _this143 = _super114.call(this, destination);
        _this143.project = project;
        _this143.index = 0;
        return _this143;
      }

      _createClass2(SwitchMapSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var result;
          var index = this.index++;

          try {
            result = this.project(value, index);
          } catch (error) {
            this.destination.error(error);
            return;
          }

          this._innerSub(result, value, index);
        }
      }, {
        key: "_innerSub",
        value: function _innerSub(result, value, index) {
          var innerSubscription = this.innerSubscription;

          if (innerSubscription) {
            innerSubscription.unsubscribe();
          }

          var innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__["InnerSubscriber"](this, value, index);
          var destination = this.destination;
          destination.add(innerSubscriber);
          this.innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(this, result, undefined, undefined, innerSubscriber);

          if (this.innerSubscription !== innerSubscriber) {
            destination.add(this.innerSubscription);
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          var innerSubscription = this.innerSubscription;

          if (!innerSubscription || innerSubscription.closed) {
            _get(_getPrototypeOf(SwitchMapSubscriber.prototype), "_complete", this).call(this);
          }

          this.unsubscribe();
        }
      }, {
        key: "_unsubscribe",
        value: function _unsubscribe() {
          this.innerSubscription = null;
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete(innerSub) {
          var destination = this.destination;
          destination.remove(innerSub);
          this.innerSubscription = null;

          if (this.isStopped) {
            _get(_getPrototypeOf(SwitchMapSubscriber.prototype), "_complete", this).call(this);
          }
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.destination.next(innerValue);
        }
      }]);

      return SwitchMapSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"]); //# sourceMappingURL=switchMap.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/switchMapTo.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/switchMapTo.js ***!
    \**********************************************************************/

  /*! exports provided: switchMapTo */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsSwitchMapToJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "switchMapTo", function () {
      return switchMapTo;
    });
    /* harmony import */


    var _switchMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./switchMap */
    "./node_modules/rxjs/_esm2015/internal/operators/switchMap.js");

    function switchMapTo(innerObservable, resultSelector) {
      return resultSelector ? Object(_switchMap__WEBPACK_IMPORTED_MODULE_0__["switchMap"])(function () {
        return innerObservable;
      }, resultSelector) : Object(_switchMap__WEBPACK_IMPORTED_MODULE_0__["switchMap"])(function () {
        return innerObservable;
      });
    } //# sourceMappingURL=switchMapTo.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/take.js":
  /*!***************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/take.js ***!
    \***************************************************************/

  /*! exports provided: take */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsTakeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "take", function () {
      return take;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/ArgumentOutOfRangeError */
    "./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js");
    /* harmony import */


    var _observable_empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../observable/empty */
    "./node_modules/rxjs/_esm2015/internal/observable/empty.js");

    function take(count) {
      return function (source) {
        if (count === 0) {
          return Object(_observable_empty__WEBPACK_IMPORTED_MODULE_2__["empty"])();
        } else {
          return source.lift(new TakeOperator(count));
        }
      };
    }

    var TakeOperator = /*#__PURE__*/function () {
      function TakeOperator(total) {
        _classCallCheck(this, TakeOperator);

        this.total = total;

        if (this.total < 0) {
          throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__["ArgumentOutOfRangeError"]();
        }
      }

      _createClass2(TakeOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new TakeSubscriber(subscriber, this.total));
        }
      }]);

      return TakeOperator;
    }();

    var TakeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_40) {
      _inherits(TakeSubscriber, _Subscriber__WEBPACK_40);

      var _super115 = _createSuper(TakeSubscriber);

      function TakeSubscriber(destination, total) {
        var _this144;

        _classCallCheck(this, TakeSubscriber);

        _this144 = _super115.call(this, destination);
        _this144.total = total;
        _this144.count = 0;
        return _this144;
      }

      _createClass2(TakeSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var total = this.total;
          var count = ++this.count;

          if (count <= total) {
            this.destination.next(value);

            if (count === total) {
              this.destination.complete();
              this.unsubscribe();
            }
          }
        }
      }]);

      return TakeSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=take.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/takeLast.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/takeLast.js ***!
    \*******************************************************************/

  /*! exports provided: takeLast */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsTakeLastJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "takeLast", function () {
      return takeLast;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/ArgumentOutOfRangeError */
    "./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js");
    /* harmony import */


    var _observable_empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../observable/empty */
    "./node_modules/rxjs/_esm2015/internal/observable/empty.js");

    function takeLast(count) {
      return function takeLastOperatorFunction(source) {
        if (count === 0) {
          return Object(_observable_empty__WEBPACK_IMPORTED_MODULE_2__["empty"])();
        } else {
          return source.lift(new TakeLastOperator(count));
        }
      };
    }

    var TakeLastOperator = /*#__PURE__*/function () {
      function TakeLastOperator(total) {
        _classCallCheck(this, TakeLastOperator);

        this.total = total;

        if (this.total < 0) {
          throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__["ArgumentOutOfRangeError"]();
        }
      }

      _createClass2(TakeLastOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
        }
      }]);

      return TakeLastOperator;
    }();

    var TakeLastSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_41) {
      _inherits(TakeLastSubscriber, _Subscriber__WEBPACK_41);

      var _super116 = _createSuper(TakeLastSubscriber);

      function TakeLastSubscriber(destination, total) {
        var _this145;

        _classCallCheck(this, TakeLastSubscriber);

        _this145 = _super116.call(this, destination);
        _this145.total = total;
        _this145.ring = new Array();
        _this145.count = 0;
        return _this145;
      }

      _createClass2(TakeLastSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var ring = this.ring;
          var total = this.total;
          var count = this.count++;

          if (ring.length < total) {
            ring.push(value);
          } else {
            var index = count % total;
            ring[index] = value;
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          var destination = this.destination;
          var count = this.count;

          if (count > 0) {
            var total = this.count >= this.total ? this.total : this.count;
            var ring = this.ring;

            for (var i = 0; i < total; i++) {
              var idx = count++ % total;
              destination.next(ring[idx]);
            }
          }

          destination.complete();
        }
      }]);

      return TakeLastSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=takeLast.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/takeUntil.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/takeUntil.js ***!
    \********************************************************************/

  /*! exports provided: takeUntil */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsTakeUntilJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "takeUntil", function () {
      return takeUntil;
    });
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function takeUntil(notifier) {
      return function (source) {
        return source.lift(new TakeUntilOperator(notifier));
      };
    }

    var TakeUntilOperator = /*#__PURE__*/function () {
      function TakeUntilOperator(notifier) {
        _classCallCheck(this, TakeUntilOperator);

        this.notifier = notifier;
      }

      _createClass2(TakeUntilOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
          var notifierSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(takeUntilSubscriber, this.notifier);

          if (notifierSubscription && !takeUntilSubscriber.seenValue) {
            takeUntilSubscriber.add(notifierSubscription);
            return source.subscribe(takeUntilSubscriber);
          }

          return takeUntilSubscriber;
        }
      }]);

      return TakeUntilOperator;
    }();

    var TakeUntilSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB23) {
      _inherits(TakeUntilSubscriber, _OuterSubscriber__WEB23);

      var _super117 = _createSuper(TakeUntilSubscriber);

      function TakeUntilSubscriber(destination) {
        var _this146;

        _classCallCheck(this, TakeUntilSubscriber);

        _this146 = _super117.call(this, destination);
        _this146.seenValue = false;
        return _this146;
      }

      _createClass2(TakeUntilSubscriber, [{
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.seenValue = true;
          this.complete();
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete() {}
      }]);

      return TakeUntilSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"]); //# sourceMappingURL=takeUntil.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/takeWhile.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/takeWhile.js ***!
    \********************************************************************/

  /*! exports provided: takeWhile */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsTakeWhileJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "takeWhile", function () {
      return takeWhile;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function takeWhile(predicate) {
      var inclusive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return function (source) {
        return source.lift(new TakeWhileOperator(predicate, inclusive));
      };
    }

    var TakeWhileOperator = /*#__PURE__*/function () {
      function TakeWhileOperator(predicate, inclusive) {
        _classCallCheck(this, TakeWhileOperator);

        this.predicate = predicate;
        this.inclusive = inclusive;
      }

      _createClass2(TakeWhileOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));
        }
      }]);

      return TakeWhileOperator;
    }();

    var TakeWhileSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_42) {
      _inherits(TakeWhileSubscriber, _Subscriber__WEBPACK_42);

      var _super118 = _createSuper(TakeWhileSubscriber);

      function TakeWhileSubscriber(destination, predicate, inclusive) {
        var _this147;

        _classCallCheck(this, TakeWhileSubscriber);

        _this147 = _super118.call(this, destination);
        _this147.predicate = predicate;
        _this147.inclusive = inclusive;
        _this147.index = 0;
        return _this147;
      }

      _createClass2(TakeWhileSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var destination = this.destination;
          var result;

          try {
            result = this.predicate(value, this.index++);
          } catch (err) {
            destination.error(err);
            return;
          }

          this.nextOrComplete(value, result);
        }
      }, {
        key: "nextOrComplete",
        value: function nextOrComplete(value, predicateResult) {
          var destination = this.destination;

          if (Boolean(predicateResult)) {
            destination.next(value);
          } else {
            if (this.inclusive) {
              destination.next(value);
            }

            destination.complete();
          }
        }
      }]);

      return TakeWhileSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=takeWhile.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/tap.js":
  /*!**************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/tap.js ***!
    \**************************************************************/

  /*! exports provided: tap */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsTapJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "tap", function () {
      return tap;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _util_noop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/noop */
    "./node_modules/rxjs/_esm2015/internal/util/noop.js");
    /* harmony import */


    var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/isFunction */
    "./node_modules/rxjs/_esm2015/internal/util/isFunction.js");

    function tap(nextOrObserver, error, complete) {
      return function tapOperatorFunction(source) {
        return source.lift(new DoOperator(nextOrObserver, error, complete));
      };
    }

    var DoOperator = /*#__PURE__*/function () {
      function DoOperator(nextOrObserver, error, complete) {
        _classCallCheck(this, DoOperator);

        this.nextOrObserver = nextOrObserver;
        this.error = error;
        this.complete = complete;
      }

      _createClass2(DoOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
        }
      }]);

      return DoOperator;
    }();

    var TapSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_43) {
      _inherits(TapSubscriber, _Subscriber__WEBPACK_43);

      var _super119 = _createSuper(TapSubscriber);

      function TapSubscriber(destination, observerOrNext, error, complete) {
        var _this148;

        _classCallCheck(this, TapSubscriber);

        _this148 = _super119.call(this, destination);
        _this148._tapNext = _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
        _this148._tapError = _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
        _this148._tapComplete = _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
        _this148._tapError = error || _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
        _this148._tapComplete = complete || _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];

        if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(observerOrNext)) {
          _this148._context = _assertThisInitialized(_this148);
          _this148._tapNext = observerOrNext;
        } else if (observerOrNext) {
          _this148._context = observerOrNext;
          _this148._tapNext = observerOrNext.next || _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
          _this148._tapError = observerOrNext.error || _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
          _this148._tapComplete = observerOrNext.complete || _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
        }

        return _this148;
      }

      _createClass2(TapSubscriber, [{
        key: "_next",
        value: function _next(value) {
          try {
            this._tapNext.call(this._context, value);
          } catch (err) {
            this.destination.error(err);
            return;
          }

          this.destination.next(value);
        }
      }, {
        key: "_error",
        value: function _error(err) {
          try {
            this._tapError.call(this._context, err);
          } catch (err) {
            this.destination.error(err);
            return;
          }

          this.destination.error(err);
        }
      }, {
        key: "_complete",
        value: function _complete() {
          try {
            this._tapComplete.call(this._context);
          } catch (err) {
            this.destination.error(err);
            return;
          }

          return this.destination.complete();
        }
      }]);

      return TapSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=tap.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/throttle.js":
  /*!*******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/throttle.js ***!
    \*******************************************************************/

  /*! exports provided: defaultThrottleConfig, throttle */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsThrottleJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "defaultThrottleConfig", function () {
      return defaultThrottleConfig;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "throttle", function () {
      return throttle;
    });
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    var defaultThrottleConfig = {
      leading: true,
      trailing: false
    };

    function throttle(durationSelector) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultThrottleConfig;
      return function (source) {
        return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));
      };
    }

    var ThrottleOperator = /*#__PURE__*/function () {
      function ThrottleOperator(durationSelector, leading, trailing) {
        _classCallCheck(this, ThrottleOperator);

        this.durationSelector = durationSelector;
        this.leading = leading;
        this.trailing = trailing;
      }

      _createClass2(ThrottleOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
        }
      }]);

      return ThrottleOperator;
    }();

    var ThrottleSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB24) {
      _inherits(ThrottleSubscriber, _OuterSubscriber__WEB24);

      var _super120 = _createSuper(ThrottleSubscriber);

      function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
        var _this149;

        _classCallCheck(this, ThrottleSubscriber);

        _this149 = _super120.call(this, destination);
        _this149.destination = destination;
        _this149.durationSelector = durationSelector;
        _this149._leading = _leading;
        _this149._trailing = _trailing;
        _this149._hasValue = false;
        return _this149;
      }

      _createClass2(ThrottleSubscriber, [{
        key: "_next",
        value: function _next(value) {
          this._hasValue = true;
          this._sendValue = value;

          if (!this._throttled) {
            if (this._leading) {
              this.send();
            } else {
              this.throttle(value);
            }
          }
        }
      }, {
        key: "send",
        value: function send() {
          var _hasValue = this._hasValue,
              _sendValue = this._sendValue;

          if (_hasValue) {
            this.destination.next(_sendValue);
            this.throttle(_sendValue);
          }

          this._hasValue = false;
          this._sendValue = null;
        }
      }, {
        key: "throttle",
        value: function throttle(value) {
          var duration = this.tryDurationSelector(value);

          if (!!duration) {
            this.add(this._throttled = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, duration));
          }
        }
      }, {
        key: "tryDurationSelector",
        value: function tryDurationSelector(value) {
          try {
            return this.durationSelector(value);
          } catch (err) {
            this.destination.error(err);
            return null;
          }
        }
      }, {
        key: "throttlingDone",
        value: function throttlingDone() {
          var _throttled = this._throttled,
              _trailing = this._trailing;

          if (_throttled) {
            _throttled.unsubscribe();
          }

          this._throttled = null;

          if (_trailing) {
            this.send();
          }
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.throttlingDone();
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete() {
          this.throttlingDone();
        }
      }]);

      return ThrottleSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"]); //# sourceMappingURL=throttle.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/throttleTime.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/throttleTime.js ***!
    \***********************************************************************/

  /*! exports provided: throttleTime */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsThrottleTimeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "throttleTime", function () {
      return throttleTime;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../scheduler/async */
    "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
    /* harmony import */


    var _throttle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./throttle */
    "./node_modules/rxjs/_esm2015/internal/operators/throttle.js");

    function throttleTime(duration) {
      var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _throttle__WEBPACK_IMPORTED_MODULE_2__["defaultThrottleConfig"];
      return function (source) {
        return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));
      };
    }

    var ThrottleTimeOperator = /*#__PURE__*/function () {
      function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
        _classCallCheck(this, ThrottleTimeOperator);

        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
      }

      _createClass2(ThrottleTimeOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
        }
      }]);

      return ThrottleTimeOperator;
    }();

    var ThrottleTimeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_44) {
      _inherits(ThrottleTimeSubscriber, _Subscriber__WEBPACK_44);

      var _super121 = _createSuper(ThrottleTimeSubscriber);

      function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
        var _this150;

        _classCallCheck(this, ThrottleTimeSubscriber);

        _this150 = _super121.call(this, destination);
        _this150.duration = duration;
        _this150.scheduler = scheduler;
        _this150.leading = leading;
        _this150.trailing = trailing;
        _this150._hasTrailingValue = false;
        _this150._trailingValue = null;
        return _this150;
      }

      _createClass2(ThrottleTimeSubscriber, [{
        key: "_next",
        value: function _next(value) {
          if (this.throttled) {
            if (this.trailing) {
              this._trailingValue = value;
              this._hasTrailingValue = true;
            }
          } else {
            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, {
              subscriber: this
            }));

            if (this.leading) {
              this.destination.next(value);
            } else if (this.trailing) {
              this._trailingValue = value;
              this._hasTrailingValue = true;
            }
          }
        }
      }, {
        key: "_complete",
        value: function _complete() {
          if (this._hasTrailingValue) {
            this.destination.next(this._trailingValue);
            this.destination.complete();
          } else {
            this.destination.complete();
          }
        }
      }, {
        key: "clearThrottle",
        value: function clearThrottle() {
          var throttled = this.throttled;

          if (throttled) {
            if (this.trailing && this._hasTrailingValue) {
              this.destination.next(this._trailingValue);
              this._trailingValue = null;
              this._hasTrailingValue = false;
            }

            throttled.unsubscribe();
            this.remove(throttled);
            this.throttled = null;
          }
        }
      }]);

      return ThrottleTimeSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]);

    function dispatchNext(arg) {
      var subscriber = arg.subscriber;
      subscriber.clearThrottle();
    } //# sourceMappingURL=throttleTime.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js ***!
    \***********************************************************************/

  /*! exports provided: throwIfEmpty */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsThrowIfEmptyJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "throwIfEmpty", function () {
      return throwIfEmpty;
    });
    /* harmony import */


    var _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util/EmptyError */
    "./node_modules/rxjs/_esm2015/internal/util/EmptyError.js");
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function throwIfEmpty() {
      var errorFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultErrorFactory;
      return function (source) {
        return source.lift(new ThrowIfEmptyOperator(errorFactory));
      };
    }

    var ThrowIfEmptyOperator = /*#__PURE__*/function () {
      function ThrowIfEmptyOperator(errorFactory) {
        _classCallCheck(this, ThrowIfEmptyOperator);

        this.errorFactory = errorFactory;
      }

      _createClass2(ThrowIfEmptyOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));
        }
      }]);

      return ThrowIfEmptyOperator;
    }();

    var ThrowIfEmptySubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_45) {
      _inherits(ThrowIfEmptySubscriber, _Subscriber__WEBPACK_45);

      var _super122 = _createSuper(ThrowIfEmptySubscriber);

      function ThrowIfEmptySubscriber(destination, errorFactory) {
        var _this151;

        _classCallCheck(this, ThrowIfEmptySubscriber);

        _this151 = _super122.call(this, destination);
        _this151.errorFactory = errorFactory;
        _this151.hasValue = false;
        return _this151;
      }

      _createClass2(ThrowIfEmptySubscriber, [{
        key: "_next",
        value: function _next(value) {
          this.hasValue = true;
          this.destination.next(value);
        }
      }, {
        key: "_complete",
        value: function _complete() {
          if (!this.hasValue) {
            var _err;

            try {
              _err = this.errorFactory();
            } catch (e) {
              _err = e;
            }

            this.destination.error(_err);
          } else {
            return this.destination.complete();
          }
        }
      }]);

      return ThrowIfEmptySubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_1__["Subscriber"]);

    function defaultErrorFactory() {
      return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__["EmptyError"]();
    } //# sourceMappingURL=throwIfEmpty.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/timeInterval.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/timeInterval.js ***!
    \***********************************************************************/

  /*! exports provided: timeInterval, TimeInterval */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsTimeIntervalJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "timeInterval", function () {
      return timeInterval;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TimeInterval", function () {
      return TimeInterval;
    });
    /* harmony import */


    var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../scheduler/async */
    "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
    /* harmony import */


    var _scan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./scan */
    "./node_modules/rxjs/_esm2015/internal/operators/scan.js");
    /* harmony import */


    var _observable_defer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../observable/defer */
    "./node_modules/rxjs/_esm2015/internal/observable/defer.js");
    /* harmony import */


    var _map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./map */
    "./node_modules/rxjs/_esm2015/internal/operators/map.js");

    function timeInterval() {
      var scheduler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"];
      return function (source) {
        return Object(_observable_defer__WEBPACK_IMPORTED_MODULE_2__["defer"])(function () {
          return source.pipe(Object(_scan__WEBPACK_IMPORTED_MODULE_1__["scan"])(function (_ref21, value) {
            var current = _ref21.current;
            return {
              value: value,
              current: scheduler.now(),
              last: current
            };
          }, {
            current: scheduler.now(),
            value: undefined,
            last: undefined
          }), Object(_map__WEBPACK_IMPORTED_MODULE_3__["map"])(function (_ref22) {
            var current = _ref22.current,
                last = _ref22.last,
                value = _ref22.value;
            return new TimeInterval(value, current - last);
          }));
        });
      };
    }

    var TimeInterval = function TimeInterval(value, interval) {
      _classCallCheck(this, TimeInterval);

      this.value = value;
      this.interval = interval;
    }; //# sourceMappingURL=timeInterval.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/timeout.js":
  /*!******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/timeout.js ***!
    \******************************************************************/

  /*! exports provided: timeout */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsTimeoutJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "timeout", function () {
      return timeout;
    });
    /* harmony import */


    var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../scheduler/async */
    "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
    /* harmony import */


    var _util_TimeoutError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/TimeoutError */
    "./node_modules/rxjs/_esm2015/internal/util/TimeoutError.js");
    /* harmony import */


    var _timeoutWith__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./timeoutWith */
    "./node_modules/rxjs/_esm2015/internal/operators/timeoutWith.js");
    /* harmony import */


    var _observable_throwError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../observable/throwError */
    "./node_modules/rxjs/_esm2015/internal/observable/throwError.js");

    function timeout(due) {
      var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"];
      return Object(_timeoutWith__WEBPACK_IMPORTED_MODULE_2__["timeoutWith"])(due, Object(_observable_throwError__WEBPACK_IMPORTED_MODULE_3__["throwError"])(new _util_TimeoutError__WEBPACK_IMPORTED_MODULE_1__["TimeoutError"]()), scheduler);
    } //# sourceMappingURL=timeout.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/timeoutWith.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/timeoutWith.js ***!
    \**********************************************************************/

  /*! exports provided: timeoutWith */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsTimeoutWithJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "timeoutWith", function () {
      return timeoutWith;
    });
    /* harmony import */


    var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../scheduler/async */
    "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
    /* harmony import */


    var _util_isDate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/isDate */
    "./node_modules/rxjs/_esm2015/internal/util/isDate.js");
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function timeoutWith(due, withObservable) {
      var scheduler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"];
      return function (source) {
        var absoluteTimeout = Object(_util_isDate__WEBPACK_IMPORTED_MODULE_1__["isDate"])(due);
        var waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);
        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
      };
    }

    var TimeoutWithOperator = /*#__PURE__*/function () {
      function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
        _classCallCheck(this, TimeoutWithOperator);

        this.waitFor = waitFor;
        this.absoluteTimeout = absoluteTimeout;
        this.withObservable = withObservable;
        this.scheduler = scheduler;
      }

      _createClass2(TimeoutWithOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
        }
      }]);

      return TimeoutWithOperator;
    }();

    var TimeoutWithSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB25) {
      _inherits(TimeoutWithSubscriber, _OuterSubscriber__WEB25);

      var _super123 = _createSuper(TimeoutWithSubscriber);

      function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
        var _this152;

        _classCallCheck(this, TimeoutWithSubscriber);

        _this152 = _super123.call(this, destination);
        _this152.absoluteTimeout = absoluteTimeout;
        _this152.waitFor = waitFor;
        _this152.withObservable = withObservable;
        _this152.scheduler = scheduler;
        _this152.action = null;

        _this152.scheduleTimeout();

        return _this152;
      }

      _createClass2(TimeoutWithSubscriber, [{
        key: "scheduleTimeout",
        value: function scheduleTimeout() {
          var action = this.action;

          if (action) {
            this.action = action.schedule(this, this.waitFor);
          } else {
            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
          }
        }
      }, {
        key: "_next",
        value: function _next(value) {
          if (!this.absoluteTimeout) {
            this.scheduleTimeout();
          }

          _get(_getPrototypeOf(TimeoutWithSubscriber.prototype), "_next", this).call(this, value);
        }
      }, {
        key: "_unsubscribe",
        value: function _unsubscribe() {
          this.action = null;
          this.scheduler = null;
          this.withObservable = null;
        }
      }], [{
        key: "dispatchTimeout",
        value: function dispatchTimeout(subscriber) {
          var withObservable = subscriber.withObservable;

          subscriber._unsubscribeAndRecycle();

          subscriber.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(subscriber, withObservable));
        }
      }]);

      return TimeoutWithSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"]); //# sourceMappingURL=timeoutWith.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/timestamp.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/timestamp.js ***!
    \********************************************************************/

  /*! exports provided: timestamp, Timestamp */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsTimestampJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "timestamp", function () {
      return timestamp;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Timestamp", function () {
      return Timestamp;
    });
    /* harmony import */


    var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../scheduler/async */
    "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
    /* harmony import */


    var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./map */
    "./node_modules/rxjs/_esm2015/internal/operators/map.js");

    function timestamp() {
      var scheduler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"];
      return Object(_map__WEBPACK_IMPORTED_MODULE_1__["map"])(function (value) {
        return new Timestamp(value, scheduler.now());
      });
    }

    var Timestamp = function Timestamp(value, timestamp) {
      _classCallCheck(this, Timestamp);

      this.value = value;
      this.timestamp = timestamp;
    }; //# sourceMappingURL=timestamp.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/toArray.js":
  /*!******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/toArray.js ***!
    \******************************************************************/

  /*! exports provided: toArray */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsToArrayJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "toArray", function () {
      return toArray;
    });
    /* harmony import */


    var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./reduce */
    "./node_modules/rxjs/_esm2015/internal/operators/reduce.js");

    function toArrayReducer(arr, item, index) {
      if (index === 0) {
        return [item];
      }

      arr.push(item);
      return arr;
    }

    function toArray() {
      return Object(_reduce__WEBPACK_IMPORTED_MODULE_0__["reduce"])(toArrayReducer, []);
    } //# sourceMappingURL=toArray.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/window.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/window.js ***!
    \*****************************************************************/

  /*! exports provided: window */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsWindowJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "window", function () {
      return window;
    });
    /* harmony import */


    var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subject */
    "./node_modules/rxjs/_esm2015/internal/Subject.js");
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function window(windowBoundaries) {
      return function windowOperatorFunction(source) {
        return source.lift(new WindowOperator(windowBoundaries));
      };
    }

    var WindowOperator = /*#__PURE__*/function () {
      function WindowOperator(windowBoundaries) {
        _classCallCheck(this, WindowOperator);

        this.windowBoundaries = windowBoundaries;
      }

      _createClass2(WindowOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          var windowSubscriber = new WindowSubscriber(subscriber);
          var sourceSubscription = source.subscribe(windowSubscriber);

          if (!sourceSubscription.closed) {
            windowSubscriber.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(windowSubscriber, this.windowBoundaries));
          }

          return sourceSubscription;
        }
      }]);

      return WindowOperator;
    }();

    var WindowSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB26) {
      _inherits(WindowSubscriber, _OuterSubscriber__WEB26);

      var _super124 = _createSuper(WindowSubscriber);

      function WindowSubscriber(destination) {
        var _this153;

        _classCallCheck(this, WindowSubscriber);

        _this153 = _super124.call(this, destination);
        _this153.window = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
        destination.next(_this153.window);
        return _this153;
      }

      _createClass2(WindowSubscriber, [{
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.openWindow();
        }
      }, {
        key: "notifyError",
        value: function notifyError(error, innerSub) {
          this._error(error);
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete(innerSub) {
          this._complete();
        }
      }, {
        key: "_next",
        value: function _next(value) {
          this.window.next(value);
        }
      }, {
        key: "_error",
        value: function _error(err) {
          this.window.error(err);
          this.destination.error(err);
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.window.complete();
          this.destination.complete();
        }
      }, {
        key: "_unsubscribe",
        value: function _unsubscribe() {
          this.window = null;
        }
      }, {
        key: "openWindow",
        value: function openWindow() {
          var prevWindow = this.window;

          if (prevWindow) {
            prevWindow.complete();
          }

          var destination = this.destination;
          var newWindow = this.window = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
          destination.next(newWindow);
        }
      }]);

      return WindowSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__["OuterSubscriber"]); //# sourceMappingURL=window.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/windowCount.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/windowCount.js ***!
    \**********************************************************************/

  /*! exports provided: windowCount */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsWindowCountJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "windowCount", function () {
      return windowCount;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _Subject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Subject */
    "./node_modules/rxjs/_esm2015/internal/Subject.js");

    function windowCount(windowSize) {
      var startWindowEvery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return function windowCountOperatorFunction(source) {
        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));
      };
    }

    var WindowCountOperator = /*#__PURE__*/function () {
      function WindowCountOperator(windowSize, startWindowEvery) {
        _classCallCheck(this, WindowCountOperator);

        this.windowSize = windowSize;
        this.startWindowEvery = startWindowEvery;
      }

      _createClass2(WindowCountOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
        }
      }]);

      return WindowCountOperator;
    }();

    var WindowCountSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_46) {
      _inherits(WindowCountSubscriber, _Subscriber__WEBPACK_46);

      var _super125 = _createSuper(WindowCountSubscriber);

      function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
        var _this154;

        _classCallCheck(this, WindowCountSubscriber);

        _this154 = _super125.call(this, destination);
        _this154.destination = destination;
        _this154.windowSize = windowSize;
        _this154.startWindowEvery = startWindowEvery;
        _this154.windows = [new _Subject__WEBPACK_IMPORTED_MODULE_1__["Subject"]()];
        _this154.count = 0;
        destination.next(_this154.windows[0]);
        return _this154;
      }

      _createClass2(WindowCountSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var startWindowEvery = this.startWindowEvery > 0 ? this.startWindowEvery : this.windowSize;
          var destination = this.destination;
          var windowSize = this.windowSize;
          var windows = this.windows;
          var len = windows.length;

          for (var i = 0; i < len && !this.closed; i++) {
            windows[i].next(value);
          }

          var c = this.count - windowSize + 1;

          if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
            windows.shift().complete();
          }

          if (++this.count % startWindowEvery === 0 && !this.closed) {
            var _window = new _Subject__WEBPACK_IMPORTED_MODULE_1__["Subject"]();

            windows.push(_window);
            destination.next(_window);
          }
        }
      }, {
        key: "_error",
        value: function _error(err) {
          var windows = this.windows;

          if (windows) {
            while (windows.length > 0 && !this.closed) {
              windows.shift().error(err);
            }
          }

          this.destination.error(err);
        }
      }, {
        key: "_complete",
        value: function _complete() {
          var windows = this.windows;

          if (windows) {
            while (windows.length > 0 && !this.closed) {
              windows.shift().complete();
            }
          }

          this.destination.complete();
        }
      }, {
        key: "_unsubscribe",
        value: function _unsubscribe() {
          this.count = 0;
          this.windows = null;
        }
      }]);

      return WindowCountSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]); //# sourceMappingURL=windowCount.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/windowTime.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/windowTime.js ***!
    \*********************************************************************/

  /*! exports provided: windowTime */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsWindowTimeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "windowTime", function () {
      return windowTime;
    });
    /* harmony import */


    var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subject */
    "./node_modules/rxjs/_esm2015/internal/Subject.js");
    /* harmony import */


    var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../scheduler/async */
    "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _util_isNumeric__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../util/isNumeric */
    "./node_modules/rxjs/_esm2015/internal/util/isNumeric.js");
    /* harmony import */


    var _util_isScheduler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../util/isScheduler */
    "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");

    function windowTime(windowTimeSpan) {
      var scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
      var windowCreationInterval = null;
      var maxWindowSize = Number.POSITIVE_INFINITY;

      if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_4__["isScheduler"])(arguments[3])) {
        scheduler = arguments[3];
      }

      if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_4__["isScheduler"])(arguments[2])) {
        scheduler = arguments[2];
      } else if (Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_3__["isNumeric"])(arguments[2])) {
        maxWindowSize = arguments[2];
      }

      if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_4__["isScheduler"])(arguments[1])) {
        scheduler = arguments[1];
      } else if (Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_3__["isNumeric"])(arguments[1])) {
        windowCreationInterval = arguments[1];
      }

      return function windowTimeOperatorFunction(source) {
        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
      };
    }

    var WindowTimeOperator = /*#__PURE__*/function () {
      function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        _classCallCheck(this, WindowTimeOperator);

        this.windowTimeSpan = windowTimeSpan;
        this.windowCreationInterval = windowCreationInterval;
        this.maxWindowSize = maxWindowSize;
        this.scheduler = scheduler;
      }

      _createClass2(WindowTimeOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
        }
      }]);

      return WindowTimeOperator;
    }();

    var CountedSubject = /*#__PURE__*/function (_Subject__WEBPACK_IMP5) {
      _inherits(CountedSubject, _Subject__WEBPACK_IMP5);

      var _super126 = _createSuper(CountedSubject);

      function CountedSubject() {
        var _this155;

        _classCallCheck(this, CountedSubject);

        _this155 = _super126.apply(this, arguments);
        _this155._numberOfNextedValues = 0;
        return _this155;
      }

      _createClass2(CountedSubject, [{
        key: "next",
        value: function next(value) {
          this._numberOfNextedValues++;

          _get(_getPrototypeOf(CountedSubject.prototype), "next", this).call(this, value);
        }
      }, {
        key: "numberOfNextedValues",
        get: function get() {
          return this._numberOfNextedValues;
        }
      }]);

      return CountedSubject;
    }(_Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]);

    var WindowTimeSubscriber = /*#__PURE__*/function (_Subscriber__WEBPACK_47) {
      _inherits(WindowTimeSubscriber, _Subscriber__WEBPACK_47);

      var _super127 = _createSuper(WindowTimeSubscriber);

      function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        var _this156;

        _classCallCheck(this, WindowTimeSubscriber);

        _this156 = _super127.call(this, destination);
        _this156.destination = destination;
        _this156.windowTimeSpan = windowTimeSpan;
        _this156.windowCreationInterval = windowCreationInterval;
        _this156.maxWindowSize = maxWindowSize;
        _this156.scheduler = scheduler;
        _this156.windows = [];

        var window = _this156.openWindow();

        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
          var closeState = {
            subscriber: _assertThisInitialized(_this156),
            window: window,
            context: null
          };
          var creationState = {
            windowTimeSpan: windowTimeSpan,
            windowCreationInterval: windowCreationInterval,
            subscriber: _assertThisInitialized(_this156),
            scheduler: scheduler
          };

          _this156.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));

          _this156.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
        } else {
          var timeSpanOnlyState = {
            subscriber: _assertThisInitialized(_this156),
            window: window,
            windowTimeSpan: windowTimeSpan
          };

          _this156.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
        }

        return _this156;
      }

      _createClass2(WindowTimeSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var windows = this.windows;
          var len = windows.length;

          for (var i = 0; i < len; i++) {
            var _window2 = windows[i];

            if (!_window2.closed) {
              _window2.next(value);

              if (_window2.numberOfNextedValues >= this.maxWindowSize) {
                this.closeWindow(_window2);
              }
            }
          }
        }
      }, {
        key: "_error",
        value: function _error(err) {
          var windows = this.windows;

          while (windows.length > 0) {
            windows.shift().error(err);
          }

          this.destination.error(err);
        }
      }, {
        key: "_complete",
        value: function _complete() {
          var windows = this.windows;

          while (windows.length > 0) {
            var _window3 = windows.shift();

            if (!_window3.closed) {
              _window3.complete();
            }
          }

          this.destination.complete();
        }
      }, {
        key: "openWindow",
        value: function openWindow() {
          var window = new CountedSubject();
          this.windows.push(window);
          var destination = this.destination;
          destination.next(window);
          return window;
        }
      }, {
        key: "closeWindow",
        value: function closeWindow(window) {
          window.complete();
          var windows = this.windows;
          windows.splice(windows.indexOf(window), 1);
        }
      }]);

      return WindowTimeSubscriber;
    }(_Subscriber__WEBPACK_IMPORTED_MODULE_2__["Subscriber"]);

    function dispatchWindowTimeSpanOnly(state) {
      var subscriber = state.subscriber,
          windowTimeSpan = state.windowTimeSpan,
          window = state.window;

      if (window) {
        subscriber.closeWindow(window);
      }

      state.window = subscriber.openWindow();
      this.schedule(state, windowTimeSpan);
    }

    function dispatchWindowCreation(state) {
      var windowTimeSpan = state.windowTimeSpan,
          subscriber = state.subscriber,
          scheduler = state.scheduler,
          windowCreationInterval = state.windowCreationInterval;
      var window = subscriber.openWindow();
      var action = this;
      var context = {
        action: action,
        subscription: null
      };
      var timeSpanState = {
        subscriber: subscriber,
        window: window,
        context: context
      };
      context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
      action.add(context.subscription);
      action.schedule(state, windowCreationInterval);
    }

    function dispatchWindowClose(state) {
      var subscriber = state.subscriber,
          window = state.window,
          context = state.context;

      if (context && context.action && context.subscription) {
        context.action.remove(context.subscription);
      }

      subscriber.closeWindow(window);
    } //# sourceMappingURL=windowTime.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/windowToggle.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/windowToggle.js ***!
    \***********************************************************************/

  /*! exports provided: windowToggle */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsWindowToggleJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "windowToggle", function () {
      return windowToggle;
    });
    /* harmony import */


    var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subject */
    "./node_modules/rxjs/_esm2015/internal/Subject.js");
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function windowToggle(openings, closingSelector) {
      return function (source) {
        return source.lift(new WindowToggleOperator(openings, closingSelector));
      };
    }

    var WindowToggleOperator = /*#__PURE__*/function () {
      function WindowToggleOperator(openings, closingSelector) {
        _classCallCheck(this, WindowToggleOperator);

        this.openings = openings;
        this.closingSelector = closingSelector;
      }

      _createClass2(WindowToggleOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
        }
      }]);

      return WindowToggleOperator;
    }();

    var WindowToggleSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB27) {
      _inherits(WindowToggleSubscriber, _OuterSubscriber__WEB27);

      var _super128 = _createSuper(WindowToggleSubscriber);

      function WindowToggleSubscriber(destination, openings, closingSelector) {
        var _this157;

        _classCallCheck(this, WindowToggleSubscriber);

        _this157 = _super128.call(this, destination);
        _this157.openings = openings;
        _this157.closingSelector = closingSelector;
        _this157.contexts = [];

        _this157.add(_this157.openSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(_assertThisInitialized(_this157), openings, openings));

        return _this157;
      }

      _createClass2(WindowToggleSubscriber, [{
        key: "_next",
        value: function _next(value) {
          var contexts = this.contexts;

          if (contexts) {
            var _len41 = contexts.length;

            for (var i = 0; i < _len41; i++) {
              contexts[i].window.next(value);
            }
          }
        }
      }, {
        key: "_error",
        value: function _error(err) {
          var contexts = this.contexts;
          this.contexts = null;

          if (contexts) {
            var _len42 = contexts.length;
            var index = -1;

            while (++index < _len42) {
              var context = contexts[index];
              context.window.error(err);
              context.subscription.unsubscribe();
            }
          }

          _get(_getPrototypeOf(WindowToggleSubscriber.prototype), "_error", this).call(this, err);
        }
      }, {
        key: "_complete",
        value: function _complete() {
          var contexts = this.contexts;
          this.contexts = null;

          if (contexts) {
            var _len43 = contexts.length;
            var index = -1;

            while (++index < _len43) {
              var context = contexts[index];
              context.window.complete();
              context.subscription.unsubscribe();
            }
          }

          _get(_getPrototypeOf(WindowToggleSubscriber.prototype), "_complete", this).call(this);
        }
      }, {
        key: "_unsubscribe",
        value: function _unsubscribe() {
          var contexts = this.contexts;
          this.contexts = null;

          if (contexts) {
            var _len44 = contexts.length;
            var index = -1;

            while (++index < _len44) {
              var context = contexts[index];
              context.window.unsubscribe();
              context.subscription.unsubscribe();
            }
          }
        }
      }, {
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          if (outerValue === this.openings) {
            var closingNotifier;

            try {
              var closingSelector = this.closingSelector;
              closingNotifier = closingSelector(innerValue);
            } catch (e) {
              return this.error(e);
            }

            var _window4 = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();

            var subscription = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
            var context = {
              window: _window4,
              subscription: subscription
            };
            this.contexts.push(context);
            var innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(this, closingNotifier, context);

            if (innerSubscription.closed) {
              this.closeWindow(this.contexts.length - 1);
            } else {
              innerSubscription.context = context;
              subscription.add(innerSubscription);
            }

            this.destination.next(_window4);
          } else {
            this.closeWindow(this.contexts.indexOf(outerValue));
          }
        }
      }, {
        key: "notifyError",
        value: function notifyError(err) {
          this.error(err);
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete(inner) {
          if (inner !== this.openSubscription) {
            this.closeWindow(this.contexts.indexOf(inner.context));
          }
        }
      }, {
        key: "closeWindow",
        value: function closeWindow(index) {
          if (index === -1) {
            return;
          }

          var contexts = this.contexts;
          var context = contexts[index];
          var window = context.window,
              subscription = context.subscription;
          contexts.splice(index, 1);
          window.complete();
          subscription.unsubscribe();
        }
      }]);

      return WindowToggleSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"]); //# sourceMappingURL=windowToggle.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/windowWhen.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/windowWhen.js ***!
    \*********************************************************************/

  /*! exports provided: windowWhen */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsWindowWhenJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "windowWhen", function () {
      return windowWhen;
    });
    /* harmony import */


    var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subject */
    "./node_modules/rxjs/_esm2015/internal/Subject.js");
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function windowWhen(closingSelector) {
      return function windowWhenOperatorFunction(source) {
        return source.lift(new WindowOperator(closingSelector));
      };
    }

    var WindowOperator = /*#__PURE__*/function () {
      function WindowOperator(closingSelector) {
        _classCallCheck(this, WindowOperator);

        this.closingSelector = closingSelector;
      }

      _createClass2(WindowOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));
        }
      }]);

      return WindowOperator;
    }();

    var WindowSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB28) {
      _inherits(WindowSubscriber, _OuterSubscriber__WEB28);

      var _super129 = _createSuper(WindowSubscriber);

      function WindowSubscriber(destination, closingSelector) {
        var _this158;

        _classCallCheck(this, WindowSubscriber);

        _this158 = _super129.call(this, destination);
        _this158.destination = destination;
        _this158.closingSelector = closingSelector;

        _this158.openWindow();

        return _this158;
      }

      _createClass2(WindowSubscriber, [{
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.openWindow(innerSub);
        }
      }, {
        key: "notifyError",
        value: function notifyError(error, innerSub) {
          this._error(error);
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete(innerSub) {
          this.openWindow(innerSub);
        }
      }, {
        key: "_next",
        value: function _next(value) {
          this.window.next(value);
        }
      }, {
        key: "_error",
        value: function _error(err) {
          this.window.error(err);
          this.destination.error(err);
          this.unsubscribeClosingNotification();
        }
      }, {
        key: "_complete",
        value: function _complete() {
          this.window.complete();
          this.destination.complete();
          this.unsubscribeClosingNotification();
        }
      }, {
        key: "unsubscribeClosingNotification",
        value: function unsubscribeClosingNotification() {
          if (this.closingNotification) {
            this.closingNotification.unsubscribe();
          }
        }
      }, {
        key: "openWindow",
        value: function openWindow() {
          var innerSub = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

          if (innerSub) {
            this.remove(innerSub);
            innerSub.unsubscribe();
          }

          var prevWindow = this.window;

          if (prevWindow) {
            prevWindow.complete();
          }

          var window = this.window = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
          this.destination.next(window);
          var closingNotifier;

          try {
            var closingSelector = this.closingSelector;
            closingNotifier = closingSelector();
          } catch (e) {
            this.destination.error(e);
            this.window.error(e);
            return;
          }

          this.add(this.closingNotification = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(this, closingNotifier));
        }
      }]);

      return WindowSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__["OuterSubscriber"]); //# sourceMappingURL=windowWhen.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/withLatestFrom.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/withLatestFrom.js ***!
    \*************************************************************************/

  /*! exports provided: withLatestFrom */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsWithLatestFromJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "withLatestFrom", function () {
      return withLatestFrom;
    });
    /* harmony import */


    var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../OuterSubscriber */
    "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
    /* harmony import */


    var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../util/subscribeToResult */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");

    function withLatestFrom() {
      for (var _len45 = arguments.length, args = new Array(_len45), _key38 = 0; _key38 < _len45; _key38++) {
        args[_key38] = arguments[_key38];
      }

      return function (source) {
        var project;

        if (typeof args[args.length - 1] === 'function') {
          project = args.pop();
        }

        var observables = args;
        return source.lift(new WithLatestFromOperator(observables, project));
      };
    }

    var WithLatestFromOperator = /*#__PURE__*/function () {
      function WithLatestFromOperator(observables, project) {
        _classCallCheck(this, WithLatestFromOperator);

        this.observables = observables;
        this.project = project;
      }

      _createClass2(WithLatestFromOperator, [{
        key: "call",
        value: function call(subscriber, source) {
          return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
        }
      }]);

      return WithLatestFromOperator;
    }();

    var WithLatestFromSubscriber = /*#__PURE__*/function (_OuterSubscriber__WEB29) {
      _inherits(WithLatestFromSubscriber, _OuterSubscriber__WEB29);

      var _super130 = _createSuper(WithLatestFromSubscriber);

      function WithLatestFromSubscriber(destination, observables, project) {
        var _this159;

        _classCallCheck(this, WithLatestFromSubscriber);

        _this159 = _super130.call(this, destination);
        _this159.observables = observables;
        _this159.project = project;
        _this159.toRespond = [];
        var len = observables.length;
        _this159.values = new Array(len);

        for (var i = 0; i < len; i++) {
          _this159.toRespond.push(i);
        }

        for (var _i22 = 0; _i22 < len; _i22++) {
          var observable = observables[_i22];

          _this159.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(_assertThisInitialized(_this159), observable, observable, _i22));
        }

        return _this159;
      }

      _createClass2(WithLatestFromSubscriber, [{
        key: "notifyNext",
        value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
          this.values[outerIndex] = innerValue;
          var toRespond = this.toRespond;

          if (toRespond.length > 0) {
            var found = toRespond.indexOf(outerIndex);

            if (found !== -1) {
              toRespond.splice(found, 1);
            }
          }
        }
      }, {
        key: "notifyComplete",
        value: function notifyComplete() {}
      }, {
        key: "_next",
        value: function _next(value) {
          if (this.toRespond.length === 0) {
            var args = [value].concat(_toConsumableArray(this.values));

            if (this.project) {
              this._tryProject(args);
            } else {
              this.destination.next(args);
            }
          }
        }
      }, {
        key: "_tryProject",
        value: function _tryProject(args) {
          var result;

          try {
            result = this.project.apply(this, args);
          } catch (err) {
            this.destination.error(err);
            return;
          }

          this.destination.next(result);
        }
      }]);

      return WithLatestFromSubscriber;
    }(_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"]); //# sourceMappingURL=withLatestFrom.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/zip.js":
  /*!**************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/zip.js ***!
    \**************************************************************/

  /*! exports provided: zip */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsZipJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "zip", function () {
      return zip;
    });
    /* harmony import */


    var _observable_zip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../observable/zip */
    "./node_modules/rxjs/_esm2015/internal/observable/zip.js");

    function zip() {
      for (var _len46 = arguments.length, observables = new Array(_len46), _key39 = 0; _key39 < _len46; _key39++) {
        observables[_key39] = arguments[_key39];
      }

      return function zipOperatorFunction(source) {
        return source.lift.call(Object(_observable_zip__WEBPACK_IMPORTED_MODULE_0__["zip"]).apply(void 0, [source].concat(observables)));
      };
    } //# sourceMappingURL=zip.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/operators/zipAll.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/operators/zipAll.js ***!
    \*****************************************************************/

  /*! exports provided: zipAll */

  /***/
  function node_modulesRxjs_esm2015InternalOperatorsZipAllJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "zipAll", function () {
      return zipAll;
    });
    /* harmony import */


    var _observable_zip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../observable/zip */
    "./node_modules/rxjs/_esm2015/internal/observable/zip.js");

    function zipAll(project) {
      return function (source) {
        return source.lift(new _observable_zip__WEBPACK_IMPORTED_MODULE_0__["ZipOperator"](project));
      };
    } //# sourceMappingURL=zipAll.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduled/scheduleArray.js":
  /*!************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduleArray.js ***!
    \************************************************************************/

  /*! exports provided: scheduleArray */

  /***/
  function node_modulesRxjs_esm2015InternalScheduledScheduleArrayJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "scheduleArray", function () {
      return scheduleArray;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");

    function scheduleArray(input, scheduler) {
      return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
        var i = 0;
        sub.add(scheduler.schedule(function () {
          if (i === input.length) {
            subscriber.complete();
            return;
          }

          subscriber.next(input[i++]);

          if (!subscriber.closed) {
            sub.add(this.schedule());
          }
        }));
        return sub;
      });
    } //# sourceMappingURL=scheduleArray.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduled/scheduleIterable.js":
  /*!***************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduleIterable.js ***!
    \***************************************************************************/

  /*! exports provided: scheduleIterable */

  /***/
  function node_modulesRxjs_esm2015InternalScheduledScheduleIterableJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "scheduleIterable", function () {
      return scheduleIterable;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");
    /* harmony import */


    var _symbol_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../symbol/iterator */
    "./node_modules/rxjs/_esm2015/internal/symbol/iterator.js");

    function scheduleIterable(input, scheduler) {
      if (!input) {
        throw new Error('Iterable cannot be null');
      }

      return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
        var iterator;
        sub.add(function () {
          if (iterator && typeof iterator["return"] === 'function') {
            iterator["return"]();
          }
        });
        sub.add(scheduler.schedule(function () {
          iterator = input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_2__["iterator"]]();
          sub.add(scheduler.schedule(function () {
            if (subscriber.closed) {
              return;
            }

            var value;
            var done;

            try {
              var result = iterator.next();
              value = result.value;
              done = result.done;
            } catch (err) {
              subscriber.error(err);
              return;
            }

            if (done) {
              subscriber.complete();
            } else {
              subscriber.next(value);
              this.schedule();
            }
          }));
        }));
        return sub;
      });
    } //# sourceMappingURL=scheduleIterable.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduled/scheduleObservable.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduleObservable.js ***!
    \*****************************************************************************/

  /*! exports provided: scheduleObservable */

  /***/
  function node_modulesRxjs_esm2015InternalScheduledScheduleObservableJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "scheduleObservable", function () {
      return scheduleObservable;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");
    /* harmony import */


    var _symbol_observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../symbol/observable */
    "./node_modules/rxjs/_esm2015/internal/symbol/observable.js");

    function scheduleObservable(input, scheduler) {
      return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
        sub.add(scheduler.schedule(function () {
          var observable = input[_symbol_observable__WEBPACK_IMPORTED_MODULE_2__["observable"]]();

          sub.add(observable.subscribe({
            next: function next(value) {
              sub.add(scheduler.schedule(function () {
                return subscriber.next(value);
              }));
            },
            error: function error(err) {
              sub.add(scheduler.schedule(function () {
                return subscriber.error(err);
              }));
            },
            complete: function complete() {
              sub.add(scheduler.schedule(function () {
                return subscriber.complete();
              }));
            }
          }));
        }));
        return sub;
      });
    } //# sourceMappingURL=scheduleObservable.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduled/schedulePromise.js":
  /*!**************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduled/schedulePromise.js ***!
    \**************************************************************************/

  /*! exports provided: schedulePromise */

  /***/
  function node_modulesRxjs_esm2015InternalScheduledSchedulePromiseJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "schedulePromise", function () {
      return schedulePromise;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");

    function schedulePromise(input, scheduler) {
      return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](function (subscriber) {
        var sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
        sub.add(scheduler.schedule(function () {
          return input.then(function (value) {
            sub.add(scheduler.schedule(function () {
              subscriber.next(value);
              sub.add(scheduler.schedule(function () {
                return subscriber.complete();
              }));
            }));
          }, function (err) {
            sub.add(scheduler.schedule(function () {
              return subscriber.error(err);
            }));
          });
        }));
        return sub;
      });
    } //# sourceMappingURL=schedulePromise.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduled/scheduled.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduled.js ***!
    \********************************************************************/

  /*! exports provided: scheduled */

  /***/
  function node_modulesRxjs_esm2015InternalScheduledScheduledJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "scheduled", function () {
      return scheduled;
    });
    /* harmony import */


    var _scheduleObservable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./scheduleObservable */
    "./node_modules/rxjs/_esm2015/internal/scheduled/scheduleObservable.js");
    /* harmony import */


    var _schedulePromise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./schedulePromise */
    "./node_modules/rxjs/_esm2015/internal/scheduled/schedulePromise.js");
    /* harmony import */


    var _scheduleArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./scheduleArray */
    "./node_modules/rxjs/_esm2015/internal/scheduled/scheduleArray.js");
    /* harmony import */


    var _scheduleIterable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./scheduleIterable */
    "./node_modules/rxjs/_esm2015/internal/scheduled/scheduleIterable.js");
    /* harmony import */


    var _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../util/isInteropObservable */
    "./node_modules/rxjs/_esm2015/internal/util/isInteropObservable.js");
    /* harmony import */


    var _util_isPromise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../util/isPromise */
    "./node_modules/rxjs/_esm2015/internal/util/isPromise.js");
    /* harmony import */


    var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../util/isArrayLike */
    "./node_modules/rxjs/_esm2015/internal/util/isArrayLike.js");
    /* harmony import */


    var _util_isIterable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../util/isIterable */
    "./node_modules/rxjs/_esm2015/internal/util/isIterable.js");

    function scheduled(input, scheduler) {
      if (input != null) {
        if (Object(_util_isInteropObservable__WEBPACK_IMPORTED_MODULE_4__["isInteropObservable"])(input)) {
          return Object(_scheduleObservable__WEBPACK_IMPORTED_MODULE_0__["scheduleObservable"])(input, scheduler);
        } else if (Object(_util_isPromise__WEBPACK_IMPORTED_MODULE_5__["isPromise"])(input)) {
          return Object(_schedulePromise__WEBPACK_IMPORTED_MODULE_1__["schedulePromise"])(input, scheduler);
        } else if (Object(_util_isArrayLike__WEBPACK_IMPORTED_MODULE_6__["isArrayLike"])(input)) {
          return Object(_scheduleArray__WEBPACK_IMPORTED_MODULE_2__["scheduleArray"])(input, scheduler);
        } else if (Object(_util_isIterable__WEBPACK_IMPORTED_MODULE_7__["isIterable"])(input) || typeof input === 'string') {
          return Object(_scheduleIterable__WEBPACK_IMPORTED_MODULE_3__["scheduleIterable"])(input, scheduler);
        }
      }

      throw new TypeError((input !== null && typeof input || input) + ' is not observable');
    } //# sourceMappingURL=scheduled.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduler/Action.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduler/Action.js ***!
    \*****************************************************************/

  /*! exports provided: Action */

  /***/
  function node_modulesRxjs_esm2015InternalSchedulerActionJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Action", function () {
      return Action;
    });
    /* harmony import */


    var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscription */
    "./node_modules/rxjs/_esm2015/internal/Subscription.js");

    var Action = /*#__PURE__*/function (_Subscription__WEBPAC4) {
      _inherits(Action, _Subscription__WEBPAC4);

      var _super131 = _createSuper(Action);

      function Action(scheduler, work) {
        _classCallCheck(this, Action);

        return _super131.call(this);
      }

      _createClass2(Action, [{
        key: "schedule",
        value: function schedule(state) {
          var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          return this;
        }
      }]);

      return Action;
    }(_Subscription__WEBPACK_IMPORTED_MODULE_0__["Subscription"]); //# sourceMappingURL=Action.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameAction.js":
  /*!*******************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameAction.js ***!
    \*******************************************************************************/

  /*! exports provided: AnimationFrameAction */

  /***/
  function node_modulesRxjs_esm2015InternalSchedulerAnimationFrameActionJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AnimationFrameAction", function () {
      return AnimationFrameAction;
    });
    /* harmony import */


    var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./AsyncAction */
    "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js");

    var AnimationFrameAction = /*#__PURE__*/function (_AsyncAction__WEBPACK) {
      _inherits(AnimationFrameAction, _AsyncAction__WEBPACK);

      var _super132 = _createSuper(AnimationFrameAction);

      function AnimationFrameAction(scheduler, work) {
        var _this160;

        _classCallCheck(this, AnimationFrameAction);

        _this160 = _super132.call(this, scheduler, work);
        _this160.scheduler = scheduler;
        _this160.work = work;
        return _this160;
      }

      _createClass2(AnimationFrameAction, [{
        key: "requestAsyncId",
        value: function requestAsyncId(scheduler, id) {
          var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

          if (delay !== null && delay > 0) {
            return _get(_getPrototypeOf(AnimationFrameAction.prototype), "requestAsyncId", this).call(this, scheduler, id, delay);
          }

          scheduler.actions.push(this);
          return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () {
            return scheduler.flush(null);
          }));
        }
      }, {
        key: "recycleAsyncId",
        value: function recycleAsyncId(scheduler, id) {
          var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

          if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
            return _get(_getPrototypeOf(AnimationFrameAction.prototype), "recycleAsyncId", this).call(this, scheduler, id, delay);
          }

          if (scheduler.actions.length === 0) {
            cancelAnimationFrame(id);
            scheduler.scheduled = undefined;
          }

          return undefined;
        }
      }]);

      return AnimationFrameAction;
    }(_AsyncAction__WEBPACK_IMPORTED_MODULE_0__["AsyncAction"]); //# sourceMappingURL=AnimationFrameAction.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameScheduler.js":
  /*!**********************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameScheduler.js ***!
    \**********************************************************************************/

  /*! exports provided: AnimationFrameScheduler */

  /***/
  function node_modulesRxjs_esm2015InternalSchedulerAnimationFrameSchedulerJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AnimationFrameScheduler", function () {
      return AnimationFrameScheduler;
    });
    /* harmony import */


    var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./AsyncScheduler */
    "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js");

    var AnimationFrameScheduler = /*#__PURE__*/function (_AsyncScheduler__WEBP) {
      _inherits(AnimationFrameScheduler, _AsyncScheduler__WEBP);

      var _super133 = _createSuper(AnimationFrameScheduler);

      function AnimationFrameScheduler() {
        _classCallCheck(this, AnimationFrameScheduler);

        return _super133.apply(this, arguments);
      }

      _createClass2(AnimationFrameScheduler, [{
        key: "flush",
        value: function flush(action) {
          this.active = true;
          this.scheduled = undefined;
          var actions = this.actions;
          var error;
          var index = -1;
          var count = actions.length;
          action = action || actions.shift();

          do {
            if (error = action.execute(action.state, action.delay)) {
              break;
            }
          } while (++index < count && (action = actions.shift()));

          this.active = false;

          if (error) {
            while (++index < count && (action = actions.shift())) {
              action.unsubscribe();
            }

            throw error;
          }
        }
      }]);

      return AnimationFrameScheduler;
    }(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__["AsyncScheduler"]); //# sourceMappingURL=AnimationFrameScheduler.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduler/AsapAction.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsapAction.js ***!
    \*********************************************************************/

  /*! exports provided: AsapAction */

  /***/
  function node_modulesRxjs_esm2015InternalSchedulerAsapActionJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AsapAction", function () {
      return AsapAction;
    });
    /* harmony import */


    var _util_Immediate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../util/Immediate */
    "./node_modules/rxjs/_esm2015/internal/util/Immediate.js");
    /* harmony import */


    var _AsyncAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./AsyncAction */
    "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js");

    var AsapAction = /*#__PURE__*/function (_AsyncAction__WEBPACK2) {
      _inherits(AsapAction, _AsyncAction__WEBPACK2);

      var _super134 = _createSuper(AsapAction);

      function AsapAction(scheduler, work) {
        var _this161;

        _classCallCheck(this, AsapAction);

        _this161 = _super134.call(this, scheduler, work);
        _this161.scheduler = scheduler;
        _this161.work = work;
        return _this161;
      }

      _createClass2(AsapAction, [{
        key: "requestAsyncId",
        value: function requestAsyncId(scheduler, id) {
          var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

          if (delay !== null && delay > 0) {
            return _get(_getPrototypeOf(AsapAction.prototype), "requestAsyncId", this).call(this, scheduler, id, delay);
          }

          scheduler.actions.push(this);
          return scheduler.scheduled || (scheduler.scheduled = _util_Immediate__WEBPACK_IMPORTED_MODULE_0__["Immediate"].setImmediate(scheduler.flush.bind(scheduler, null)));
        }
      }, {
        key: "recycleAsyncId",
        value: function recycleAsyncId(scheduler, id) {
          var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

          if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
            return _get(_getPrototypeOf(AsapAction.prototype), "recycleAsyncId", this).call(this, scheduler, id, delay);
          }

          if (scheduler.actions.length === 0) {
            _util_Immediate__WEBPACK_IMPORTED_MODULE_0__["Immediate"].clearImmediate(id);

            scheduler.scheduled = undefined;
          }

          return undefined;
        }
      }]);

      return AsapAction;
    }(_AsyncAction__WEBPACK_IMPORTED_MODULE_1__["AsyncAction"]); //# sourceMappingURL=AsapAction.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduler/AsapScheduler.js":
  /*!************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsapScheduler.js ***!
    \************************************************************************/

  /*! exports provided: AsapScheduler */

  /***/
  function node_modulesRxjs_esm2015InternalSchedulerAsapSchedulerJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AsapScheduler", function () {
      return AsapScheduler;
    });
    /* harmony import */


    var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./AsyncScheduler */
    "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js");

    var AsapScheduler = /*#__PURE__*/function (_AsyncScheduler__WEBP2) {
      _inherits(AsapScheduler, _AsyncScheduler__WEBP2);

      var _super135 = _createSuper(AsapScheduler);

      function AsapScheduler() {
        _classCallCheck(this, AsapScheduler);

        return _super135.apply(this, arguments);
      }

      _createClass2(AsapScheduler, [{
        key: "flush",
        value: function flush(action) {
          this.active = true;
          this.scheduled = undefined;
          var actions = this.actions;
          var error;
          var index = -1;
          var count = actions.length;
          action = action || actions.shift();

          do {
            if (error = action.execute(action.state, action.delay)) {
              break;
            }
          } while (++index < count && (action = actions.shift()));

          this.active = false;

          if (error) {
            while (++index < count && (action = actions.shift())) {
              action.unsubscribe();
            }

            throw error;
          }
        }
      }]);

      return AsapScheduler;
    }(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__["AsyncScheduler"]); //# sourceMappingURL=AsapScheduler.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js ***!
    \**********************************************************************/

  /*! exports provided: AsyncAction */

  /***/
  function node_modulesRxjs_esm2015InternalSchedulerAsyncActionJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AsyncAction", function () {
      return AsyncAction;
    });
    /* harmony import */


    var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./Action */
    "./node_modules/rxjs/_esm2015/internal/scheduler/Action.js");

    var AsyncAction = /*#__PURE__*/function (_Action__WEBPACK_IMPO) {
      _inherits(AsyncAction, _Action__WEBPACK_IMPO);

      var _super136 = _createSuper(AsyncAction);

      function AsyncAction(scheduler, work) {
        var _this162;

        _classCallCheck(this, AsyncAction);

        _this162 = _super136.call(this, scheduler, work);
        _this162.scheduler = scheduler;
        _this162.work = work;
        _this162.pending = false;
        return _this162;
      }

      _createClass2(AsyncAction, [{
        key: "schedule",
        value: function schedule(state) {
          var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          if (this.closed) {
            return this;
          }

          this.state = state;
          var id = this.id;
          var scheduler = this.scheduler;

          if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
          }

          this.pending = true;
          this.delay = delay;
          this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
          return this;
        }
      }, {
        key: "requestAsyncId",
        value: function requestAsyncId(scheduler, id) {
          var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
          return setInterval(scheduler.flush.bind(scheduler, this), delay);
        }
      }, {
        key: "recycleAsyncId",
        value: function recycleAsyncId(scheduler, id) {
          var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

          if (delay !== null && this.delay === delay && this.pending === false) {
            return id;
          }

          clearInterval(id);
          return undefined;
        }
      }, {
        key: "execute",
        value: function execute(state, delay) {
          if (this.closed) {
            return new Error('executing a cancelled action');
          }

          this.pending = false;

          var error = this._execute(state, delay);

          if (error) {
            return error;
          } else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
          }
        }
      }, {
        key: "_execute",
        value: function _execute(state, delay) {
          var errored = false;
          var errorValue = undefined;

          try {
            this.work(state);
          } catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
          }

          if (errored) {
            this.unsubscribe();
            return errorValue;
          }
        }
      }, {
        key: "_unsubscribe",
        value: function _unsubscribe() {
          var id = this.id;
          var scheduler = this.scheduler;
          var actions = scheduler.actions;
          var index = actions.indexOf(this);
          this.work = null;
          this.state = null;
          this.pending = false;
          this.scheduler = null;

          if (index !== -1) {
            actions.splice(index, 1);
          }

          if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
          }

          this.delay = null;
        }
      }]);

      return AsyncAction;
    }(_Action__WEBPACK_IMPORTED_MODULE_0__["Action"]); //# sourceMappingURL=AsyncAction.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js ***!
    \*************************************************************************/

  /*! exports provided: AsyncScheduler */

  /***/
  function node_modulesRxjs_esm2015InternalSchedulerAsyncSchedulerJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AsyncScheduler", function () {
      return AsyncScheduler;
    });
    /* harmony import */


    var _Scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Scheduler */
    "./node_modules/rxjs/_esm2015/internal/Scheduler.js");

    var AsyncScheduler = /*#__PURE__*/function (_Scheduler__WEBPACK_I) {
      _inherits(AsyncScheduler, _Scheduler__WEBPACK_I);

      var _super137 = _createSuper(AsyncScheduler);

      function AsyncScheduler(SchedulerAction) {
        var _this163;

        var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Scheduler__WEBPACK_IMPORTED_MODULE_0__["Scheduler"].now;

        _classCallCheck(this, AsyncScheduler);

        _this163 = _super137.call(this, SchedulerAction, function () {
          if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _assertThisInitialized(_this163)) {
            return AsyncScheduler.delegate.now();
          } else {
            return now();
          }
        });
        _this163.actions = [];
        _this163.active = false;
        _this163.scheduled = undefined;
        return _this163;
      }

      _createClass2(AsyncScheduler, [{
        key: "schedule",
        value: function schedule(work) {
          var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var state = arguments.length > 2 ? arguments[2] : undefined;

          if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
            return AsyncScheduler.delegate.schedule(work, delay, state);
          } else {
            return _get(_getPrototypeOf(AsyncScheduler.prototype), "schedule", this).call(this, work, delay, state);
          }
        }
      }, {
        key: "flush",
        value: function flush(action) {
          var actions = this.actions;

          if (this.active) {
            actions.push(action);
            return;
          }

          var error;
          this.active = true;

          do {
            if (error = action.execute(action.state, action.delay)) {
              break;
            }
          } while (action = actions.shift());

          this.active = false;

          if (error) {
            while (action = actions.shift()) {
              action.unsubscribe();
            }

            throw error;
          }
        }
      }]);

      return AsyncScheduler;
    }(_Scheduler__WEBPACK_IMPORTED_MODULE_0__["Scheduler"]); //# sourceMappingURL=AsyncScheduler.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduler/QueueAction.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduler/QueueAction.js ***!
    \**********************************************************************/

  /*! exports provided: QueueAction */

  /***/
  function node_modulesRxjs_esm2015InternalSchedulerQueueActionJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "QueueAction", function () {
      return QueueAction;
    });
    /* harmony import */


    var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./AsyncAction */
    "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js");

    var QueueAction = /*#__PURE__*/function (_AsyncAction__WEBPACK3) {
      _inherits(QueueAction, _AsyncAction__WEBPACK3);

      var _super138 = _createSuper(QueueAction);

      function QueueAction(scheduler, work) {
        var _this164;

        _classCallCheck(this, QueueAction);

        _this164 = _super138.call(this, scheduler, work);
        _this164.scheduler = scheduler;
        _this164.work = work;
        return _this164;
      }

      _createClass2(QueueAction, [{
        key: "schedule",
        value: function schedule(state) {
          var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          if (delay > 0) {
            return _get(_getPrototypeOf(QueueAction.prototype), "schedule", this).call(this, state, delay);
          }

          this.delay = delay;
          this.state = state;
          this.scheduler.flush(this);
          return this;
        }
      }, {
        key: "execute",
        value: function execute(state, delay) {
          return delay > 0 || this.closed ? _get(_getPrototypeOf(QueueAction.prototype), "execute", this).call(this, state, delay) : this._execute(state, delay);
        }
      }, {
        key: "requestAsyncId",
        value: function requestAsyncId(scheduler, id) {
          var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

          if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
            return _get(_getPrototypeOf(QueueAction.prototype), "requestAsyncId", this).call(this, scheduler, id, delay);
          }

          return scheduler.flush(this);
        }
      }]);

      return QueueAction;
    }(_AsyncAction__WEBPACK_IMPORTED_MODULE_0__["AsyncAction"]); //# sourceMappingURL=QueueAction.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduler/QueueScheduler.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduler/QueueScheduler.js ***!
    \*************************************************************************/

  /*! exports provided: QueueScheduler */

  /***/
  function node_modulesRxjs_esm2015InternalSchedulerQueueSchedulerJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "QueueScheduler", function () {
      return QueueScheduler;
    });
    /* harmony import */


    var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./AsyncScheduler */
    "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js");

    var QueueScheduler = /*#__PURE__*/function (_AsyncScheduler__WEBP3) {
      _inherits(QueueScheduler, _AsyncScheduler__WEBP3);

      var _super139 = _createSuper(QueueScheduler);

      function QueueScheduler() {
        _classCallCheck(this, QueueScheduler);

        return _super139.apply(this, arguments);
      }

      return QueueScheduler;
    }(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__["AsyncScheduler"]); //# sourceMappingURL=QueueScheduler.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduler/VirtualTimeScheduler.js":
  /*!*******************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduler/VirtualTimeScheduler.js ***!
    \*******************************************************************************/

  /*! exports provided: VirtualTimeScheduler, VirtualAction */

  /***/
  function node_modulesRxjs_esm2015InternalSchedulerVirtualTimeSchedulerJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "VirtualTimeScheduler", function () {
      return VirtualTimeScheduler;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "VirtualAction", function () {
      return VirtualAction;
    });
    /* harmony import */


    var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./AsyncAction */
    "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js");
    /* harmony import */


    var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./AsyncScheduler */
    "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js");

    var VirtualTimeScheduler = /*@__PURE__*/function () {
      var VirtualTimeScheduler = /*#__PURE__*/function (_AsyncScheduler__WEBP4) {
        _inherits(VirtualTimeScheduler, _AsyncScheduler__WEBP4);

        var _super140 = _createSuper(VirtualTimeScheduler);

        function VirtualTimeScheduler() {
          var _this165;

          var SchedulerAction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : VirtualAction;
          var maxFrames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;

          _classCallCheck(this, VirtualTimeScheduler);

          _this165 = _super140.call(this, SchedulerAction, function () {
            return _this165.frame;
          });
          _this165.maxFrames = maxFrames;
          _this165.frame = 0;
          _this165.index = -1;
          return _this165;
        }

        _createClass2(VirtualTimeScheduler, [{
          key: "flush",
          value: function flush() {
            var actions = this.actions,
                maxFrames = this.maxFrames;
            var error, action;

            while ((action = actions[0]) && action.delay <= maxFrames) {
              actions.shift();
              this.frame = action.delay;

              if (error = action.execute(action.state, action.delay)) {
                break;
              }
            }

            if (error) {
              while (action = actions.shift()) {
                action.unsubscribe();
              }

              throw error;
            }
          }
        }]);

        return VirtualTimeScheduler;
      }(_AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__["AsyncScheduler"]);

      VirtualTimeScheduler.frameTimeFactor = 10;
      return VirtualTimeScheduler;
    }();

    var VirtualAction = /*#__PURE__*/function (_AsyncAction__WEBPACK4) {
      _inherits(VirtualAction, _AsyncAction__WEBPACK4);

      var _super141 = _createSuper(VirtualAction);

      function VirtualAction(scheduler, work) {
        var _this166;

        var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : scheduler.index += 1;

        _classCallCheck(this, VirtualAction);

        _this166 = _super141.call(this, scheduler, work);
        _this166.scheduler = scheduler;
        _this166.work = work;
        _this166.index = index;
        _this166.active = true;
        _this166.index = scheduler.index = index;
        return _this166;
      }

      _createClass2(VirtualAction, [{
        key: "schedule",
        value: function schedule(state) {
          var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          if (!this.id) {
            return _get(_getPrototypeOf(VirtualAction.prototype), "schedule", this).call(this, state, delay);
          }

          this.active = false;
          var action = new VirtualAction(this.scheduler, this.work);
          this.add(action);
          return action.schedule(state, delay);
        }
      }, {
        key: "requestAsyncId",
        value: function requestAsyncId(scheduler, id) {
          var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
          this.delay = scheduler.frame + delay;
          var actions = scheduler.actions;
          actions.push(this);
          actions.sort(VirtualAction.sortActions);
          return true;
        }
      }, {
        key: "recycleAsyncId",
        value: function recycleAsyncId(scheduler, id) {
          var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
          return undefined;
        }
      }, {
        key: "_execute",
        value: function _execute(state, delay) {
          if (this.active === true) {
            return _get(_getPrototypeOf(VirtualAction.prototype), "_execute", this).call(this, state, delay);
          }
        }
      }], [{
        key: "sortActions",
        value: function sortActions(a, b) {
          if (a.delay === b.delay) {
            if (a.index === b.index) {
              return 0;
            } else if (a.index > b.index) {
              return 1;
            } else {
              return -1;
            }
          } else if (a.delay > b.delay) {
            return 1;
          } else {
            return -1;
          }
        }
      }]);

      return VirtualAction;
    }(_AsyncAction__WEBPACK_IMPORTED_MODULE_0__["AsyncAction"]); //# sourceMappingURL=VirtualTimeScheduler.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduler/animationFrame.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduler/animationFrame.js ***!
    \*************************************************************************/

  /*! exports provided: animationFrame */

  /***/
  function node_modulesRxjs_esm2015InternalSchedulerAnimationFrameJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "animationFrame", function () {
      return animationFrame;
    });
    /* harmony import */


    var _AnimationFrameAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./AnimationFrameAction */
    "./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameAction.js");
    /* harmony import */


    var _AnimationFrameScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./AnimationFrameScheduler */
    "./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameScheduler.js");

    var animationFrame = new _AnimationFrameScheduler__WEBPACK_IMPORTED_MODULE_1__["AnimationFrameScheduler"](_AnimationFrameAction__WEBPACK_IMPORTED_MODULE_0__["AnimationFrameAction"]); //# sourceMappingURL=animationFrame.js.map

    /***/
  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduler/asap.js":
  /*!***************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduler/asap.js ***!
    \***************************************************************/

  /*! exports provided: asap */

  /***/
  function node_modulesRxjs_esm2015InternalSchedulerAsapJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "asap", function () {
      return asap;
    });
    /* harmony import */


    var _AsapAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./AsapAction */
    "./node_modules/rxjs/_esm2015/internal/scheduler/AsapAction.js");
    /* harmony import */


    var _AsapScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./AsapScheduler */
    "./node_modules/rxjs/_esm2015/internal/scheduler/AsapScheduler.js");

    var asap = new _AsapScheduler__WEBPACK_IMPORTED_MODULE_1__["AsapScheduler"](_AsapAction__WEBPACK_IMPORTED_MODULE_0__["AsapAction"]); //# sourceMappingURL=asap.js.map

    /***/
  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduler/async.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduler/async.js ***!
    \****************************************************************/

  /*! exports provided: async */

  /***/
  function node_modulesRxjs_esm2015InternalSchedulerAsyncJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "async", function () {
      return async;
    });
    /* harmony import */


    var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./AsyncAction */
    "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js");
    /* harmony import */


    var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./AsyncScheduler */
    "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js");

    var async = new _AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__["AsyncScheduler"](_AsyncAction__WEBPACK_IMPORTED_MODULE_0__["AsyncAction"]); //# sourceMappingURL=async.js.map

    /***/
  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/scheduler/queue.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/scheduler/queue.js ***!
    \****************************************************************/

  /*! exports provided: queue */

  /***/
  function node_modulesRxjs_esm2015InternalSchedulerQueueJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "queue", function () {
      return queue;
    });
    /* harmony import */


    var _QueueAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./QueueAction */
    "./node_modules/rxjs/_esm2015/internal/scheduler/QueueAction.js");
    /* harmony import */


    var _QueueScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./QueueScheduler */
    "./node_modules/rxjs/_esm2015/internal/scheduler/QueueScheduler.js");

    var queue = new _QueueScheduler__WEBPACK_IMPORTED_MODULE_1__["QueueScheduler"](_QueueAction__WEBPACK_IMPORTED_MODULE_0__["QueueAction"]); //# sourceMappingURL=queue.js.map

    /***/
  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/symbol/iterator.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/symbol/iterator.js ***!
    \****************************************************************/

  /*! exports provided: getSymbolIterator, iterator, $$iterator */

  /***/
  function node_modulesRxjs_esm2015InternalSymbolIteratorJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getSymbolIterator", function () {
      return getSymbolIterator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "iterator", function () {
      return iterator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "$$iterator", function () {
      return $$iterator;
    });

    function getSymbolIterator() {
      if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
      }

      return Symbol.iterator;
    }

    var iterator = getSymbolIterator();
    var $$iterator = iterator; //# sourceMappingURL=iterator.js.map

    /***/
  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/symbol/observable.js":
  /*!******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/symbol/observable.js ***!
    \******************************************************************/

  /*! exports provided: observable */

  /***/
  function node_modulesRxjs_esm2015InternalSymbolObservableJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "observable", function () {
      return observable;
    });

    var observable = function () {
      return typeof Symbol === 'function' && Symbol.observable || '@@observable';
    }(); //# sourceMappingURL=observable.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js ***!
    \********************************************************************/

  /*! exports provided: rxSubscriber, $$rxSubscriber */

  /***/
  function node_modulesRxjs_esm2015InternalSymbolRxSubscriberJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "rxSubscriber", function () {
      return rxSubscriber;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "$$rxSubscriber", function () {
      return $$rxSubscriber;
    });

    var rxSubscriber = function () {
      return typeof Symbol === 'function' ? Symbol('rxSubscriber') : '@@rxSubscriber_' + Math.random();
    }();

    var $$rxSubscriber = rxSubscriber; //# sourceMappingURL=rxSubscriber.js.map

    /***/
  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js ***!
    \*****************************************************************************/

  /*! exports provided: ArgumentOutOfRangeError */

  /***/
  function node_modulesRxjs_esm2015InternalUtilArgumentOutOfRangeErrorJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ArgumentOutOfRangeError", function () {
      return ArgumentOutOfRangeError;
    });

    var ArgumentOutOfRangeErrorImpl = function () {
      function ArgumentOutOfRangeErrorImpl() {
        Error.call(this);
        this.message = 'argument out of range';
        this.name = 'ArgumentOutOfRangeError';
        return this;
      }

      ArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);
      return ArgumentOutOfRangeErrorImpl;
    }();

    var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl; //# sourceMappingURL=ArgumentOutOfRangeError.js.map

    /***/
  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/EmptyError.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/EmptyError.js ***!
    \****************************************************************/

  /*! exports provided: EmptyError */

  /***/
  function node_modulesRxjs_esm2015InternalUtilEmptyErrorJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "EmptyError", function () {
      return EmptyError;
    });

    var EmptyErrorImpl = function () {
      function EmptyErrorImpl() {
        Error.call(this);
        this.message = 'no elements in sequence';
        this.name = 'EmptyError';
        return this;
      }

      EmptyErrorImpl.prototype = Object.create(Error.prototype);
      return EmptyErrorImpl;
    }();

    var EmptyError = EmptyErrorImpl; //# sourceMappingURL=EmptyError.js.map

    /***/
  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/Immediate.js":
  /*!***************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/Immediate.js ***!
    \***************************************************************/

  /*! exports provided: Immediate, TestTools */

  /***/
  function node_modulesRxjs_esm2015InternalUtilImmediateJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Immediate", function () {
      return Immediate;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TestTools", function () {
      return TestTools;
    });

    var nextHandle = 1;

    var RESOLVED = function () {
      return Promise.resolve();
    }();

    var activeHandles = {};

    function findAndClearHandle(handle) {
      if (handle in activeHandles) {
        delete activeHandles[handle];
        return true;
      }

      return false;
    }

    var Immediate = {
      setImmediate: function setImmediate(cb) {
        var handle = nextHandle++;
        activeHandles[handle] = true;
        RESOLVED.then(function () {
          return findAndClearHandle(handle) && cb();
        });
        return handle;
      },
      clearImmediate: function clearImmediate(handle) {
        findAndClearHandle(handle);
      }
    };
    var TestTools = {
      pending: function pending() {
        return Object.keys(activeHandles).length;
      }
    }; //# sourceMappingURL=Immediate.js.map

    /***/
  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js ***!
    \*****************************************************************************/

  /*! exports provided: ObjectUnsubscribedError */

  /***/
  function node_modulesRxjs_esm2015InternalUtilObjectUnsubscribedErrorJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ObjectUnsubscribedError", function () {
      return ObjectUnsubscribedError;
    });

    var ObjectUnsubscribedErrorImpl = function () {
      function ObjectUnsubscribedErrorImpl() {
        Error.call(this);
        this.message = 'object unsubscribed';
        this.name = 'ObjectUnsubscribedError';
        return this;
      }

      ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);
      return ObjectUnsubscribedErrorImpl;
    }();

    var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl; //# sourceMappingURL=ObjectUnsubscribedError.js.map

    /***/
  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/TimeoutError.js":
  /*!******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/TimeoutError.js ***!
    \******************************************************************/

  /*! exports provided: TimeoutError */

  /***/
  function node_modulesRxjs_esm2015InternalUtilTimeoutErrorJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "TimeoutError", function () {
      return TimeoutError;
    });

    var TimeoutErrorImpl = function () {
      function TimeoutErrorImpl() {
        Error.call(this);
        this.message = 'Timeout has occurred';
        this.name = 'TimeoutError';
        return this;
      }

      TimeoutErrorImpl.prototype = Object.create(Error.prototype);
      return TimeoutErrorImpl;
    }();

    var TimeoutError = TimeoutErrorImpl; //# sourceMappingURL=TimeoutError.js.map

    /***/
  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js ***!
    \*************************************************************************/

  /*! exports provided: UnsubscriptionError */

  /***/
  function node_modulesRxjs_esm2015InternalUtilUnsubscriptionErrorJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "UnsubscriptionError", function () {
      return UnsubscriptionError;
    });

    var UnsubscriptionErrorImpl = function () {
      function UnsubscriptionErrorImpl(errors) {
        Error.call(this);
        this.message = errors ? "".concat(errors.length, " errors occurred during unsubscription:\n").concat(errors.map(function (err, i) {
          return "".concat(i + 1, ") ").concat(err.toString());
        }).join('\n  ')) : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
        return this;
      }

      UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);
      return UnsubscriptionErrorImpl;
    }();

    var UnsubscriptionError = UnsubscriptionErrorImpl; //# sourceMappingURL=UnsubscriptionError.js.map

    /***/
  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/canReportError.js":
  /*!********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/canReportError.js ***!
    \********************************************************************/

  /*! exports provided: canReportError */

  /***/
  function node_modulesRxjs_esm2015InternalUtilCanReportErrorJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "canReportError", function () {
      return canReportError;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

    function canReportError(observer) {
      while (observer) {
        var _observer = observer,
            closed = _observer.closed,
            destination = _observer.destination,
            isStopped = _observer.isStopped;

        if (closed || isStopped) {
          return false;
        } else if (destination && destination instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]) {
          observer = destination;
        } else {
          observer = null;
        }
      }

      return true;
    } //# sourceMappingURL=canReportError.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/hostReportError.js":
  /*!*********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/hostReportError.js ***!
    \*********************************************************************/

  /*! exports provided: hostReportError */

  /***/
  function node_modulesRxjs_esm2015InternalUtilHostReportErrorJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "hostReportError", function () {
      return hostReportError;
    });

    function hostReportError(err) {
      setTimeout(function () {
        throw err;
      }, 0);
    } //# sourceMappingURL=hostReportError.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/identity.js":
  /*!**************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/identity.js ***!
    \**************************************************************/

  /*! exports provided: identity */

  /***/
  function node_modulesRxjs_esm2015InternalUtilIdentityJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "identity", function () {
      return identity;
    });

    function identity(x) {
      return x;
    } //# sourceMappingURL=identity.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/isArray.js":
  /*!*************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/isArray.js ***!
    \*************************************************************/

  /*! exports provided: isArray */

  /***/
  function node_modulesRxjs_esm2015InternalUtilIsArrayJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isArray", function () {
      return isArray;
    });

    var isArray = function () {
      return Array.isArray || function (x) {
        return x && typeof x.length === 'number';
      };
    }(); //# sourceMappingURL=isArray.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/isArrayLike.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/isArrayLike.js ***!
    \*****************************************************************/

  /*! exports provided: isArrayLike */

  /***/
  function node_modulesRxjs_esm2015InternalUtilIsArrayLikeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isArrayLike", function () {
      return isArrayLike;
    });

    var isArrayLike = function isArrayLike(x) {
      return x && typeof x.length === 'number' && typeof x !== 'function';
    }; //# sourceMappingURL=isArrayLike.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/isDate.js":
  /*!************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/isDate.js ***!
    \************************************************************/

  /*! exports provided: isDate */

  /***/
  function node_modulesRxjs_esm2015InternalUtilIsDateJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isDate", function () {
      return isDate;
    });

    function isDate(value) {
      return value instanceof Date && !isNaN(+value);
    } //# sourceMappingURL=isDate.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/isFunction.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/isFunction.js ***!
    \****************************************************************/

  /*! exports provided: isFunction */

  /***/
  function node_modulesRxjs_esm2015InternalUtilIsFunctionJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isFunction", function () {
      return isFunction;
    });

    function isFunction(x) {
      return typeof x === 'function';
    } //# sourceMappingURL=isFunction.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/isInteropObservable.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/isInteropObservable.js ***!
    \*************************************************************************/

  /*! exports provided: isInteropObservable */

  /***/
  function node_modulesRxjs_esm2015InternalUtilIsInteropObservableJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isInteropObservable", function () {
      return isInteropObservable;
    });
    /* harmony import */


    var _symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../symbol/observable */
    "./node_modules/rxjs/_esm2015/internal/symbol/observable.js");

    function isInteropObservable(input) {
      return input && typeof input[_symbol_observable__WEBPACK_IMPORTED_MODULE_0__["observable"]] === 'function';
    } //# sourceMappingURL=isInteropObservable.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/isIterable.js":
  /*!****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/isIterable.js ***!
    \****************************************************************/

  /*! exports provided: isIterable */

  /***/
  function node_modulesRxjs_esm2015InternalUtilIsIterableJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isIterable", function () {
      return isIterable;
    });
    /* harmony import */


    var _symbol_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../symbol/iterator */
    "./node_modules/rxjs/_esm2015/internal/symbol/iterator.js");

    function isIterable(input) {
      return input && typeof input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_0__["iterator"]] === 'function';
    } //# sourceMappingURL=isIterable.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/isNumeric.js":
  /*!***************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/isNumeric.js ***!
    \***************************************************************/

  /*! exports provided: isNumeric */

  /***/
  function node_modulesRxjs_esm2015InternalUtilIsNumericJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isNumeric", function () {
      return isNumeric;
    });
    /* harmony import */


    var _isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./isArray */
    "./node_modules/rxjs/_esm2015/internal/util/isArray.js");

    function isNumeric(val) {
      return !Object(_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(val) && val - parseFloat(val) + 1 >= 0;
    } //# sourceMappingURL=isNumeric.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/isObject.js":
  /*!**************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/isObject.js ***!
    \**************************************************************/

  /*! exports provided: isObject */

  /***/
  function node_modulesRxjs_esm2015InternalUtilIsObjectJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isObject", function () {
      return isObject;
    });

    function isObject(x) {
      return x !== null && typeof x === 'object';
    } //# sourceMappingURL=isObject.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/isObservable.js":
  /*!******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/isObservable.js ***!
    \******************************************************************/

  /*! exports provided: isObservable */

  /***/
  function node_modulesRxjs_esm2015InternalUtilIsObservableJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isObservable", function () {
      return isObservable;
    });
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");

    function isObservable(obj) {
      return !!obj && (obj instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"] || typeof obj.lift === 'function' && typeof obj.subscribe === 'function');
    } //# sourceMappingURL=isObservable.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/isPromise.js":
  /*!***************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/isPromise.js ***!
    \***************************************************************/

  /*! exports provided: isPromise */

  /***/
  function node_modulesRxjs_esm2015InternalUtilIsPromiseJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isPromise", function () {
      return isPromise;
    });

    function isPromise(value) {
      return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
    } //# sourceMappingURL=isPromise.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/isScheduler.js ***!
    \*****************************************************************/

  /*! exports provided: isScheduler */

  /***/
  function node_modulesRxjs_esm2015InternalUtilIsSchedulerJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isScheduler", function () {
      return isScheduler;
    });

    function isScheduler(value) {
      return value && typeof value.schedule === 'function';
    } //# sourceMappingURL=isScheduler.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/noop.js":
  /*!**********************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/noop.js ***!
    \**********************************************************/

  /*! exports provided: noop */

  /***/
  function node_modulesRxjs_esm2015InternalUtilNoopJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "noop", function () {
      return noop;
    });

    function noop() {} //# sourceMappingURL=noop.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/not.js":
  /*!*********************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/not.js ***!
    \*********************************************************/

  /*! exports provided: not */

  /***/
  function node_modulesRxjs_esm2015InternalUtilNotJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "not", function () {
      return not;
    });

    function not(pred, thisArg) {
      function notPred() {
        return !notPred.pred.apply(notPred.thisArg, arguments);
      }

      notPred.pred = pred;
      notPred.thisArg = thisArg;
      return notPred;
    } //# sourceMappingURL=not.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/pipe.js":
  /*!**********************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/pipe.js ***!
    \**********************************************************/

  /*! exports provided: pipe, pipeFromArray */

  /***/
  function node_modulesRxjs_esm2015InternalUtilPipeJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "pipe", function () {
      return pipe;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "pipeFromArray", function () {
      return pipeFromArray;
    });
    /* harmony import */


    var _noop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./noop */
    "./node_modules/rxjs/_esm2015/internal/util/noop.js");

    function pipe() {
      for (var _len47 = arguments.length, fns = new Array(_len47), _key40 = 0; _key40 < _len47; _key40++) {
        fns[_key40] = arguments[_key40];
      }

      return pipeFromArray(fns);
    }

    function pipeFromArray(fns) {
      if (!fns) {
        return _noop__WEBPACK_IMPORTED_MODULE_0__["noop"];
      }

      if (fns.length === 1) {
        return fns[0];
      }

      return function piped(input) {
        return fns.reduce(function (prev, fn) {
          return fn(prev);
        }, input);
      };
    } //# sourceMappingURL=pipe.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/subscribeTo.js":
  /*!*****************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeTo.js ***!
    \*****************************************************************/

  /*! exports provided: subscribeTo */

  /***/
  function node_modulesRxjs_esm2015InternalUtilSubscribeToJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "subscribeTo", function () {
      return subscribeTo;
    });
    /* harmony import */


    var _subscribeToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./subscribeToArray */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js");
    /* harmony import */


    var _subscribeToPromise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./subscribeToPromise */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToPromise.js");
    /* harmony import */


    var _subscribeToIterable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./subscribeToIterable */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToIterable.js");
    /* harmony import */


    var _subscribeToObservable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./subscribeToObservable */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeToObservable.js");
    /* harmony import */


    var _isArrayLike__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./isArrayLike */
    "./node_modules/rxjs/_esm2015/internal/util/isArrayLike.js");
    /* harmony import */


    var _isPromise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./isPromise */
    "./node_modules/rxjs/_esm2015/internal/util/isPromise.js");
    /* harmony import */


    var _isObject__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./isObject */
    "./node_modules/rxjs/_esm2015/internal/util/isObject.js");
    /* harmony import */


    var _symbol_iterator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../symbol/iterator */
    "./node_modules/rxjs/_esm2015/internal/symbol/iterator.js");
    /* harmony import */


    var _symbol_observable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../symbol/observable */
    "./node_modules/rxjs/_esm2015/internal/symbol/observable.js");

    var subscribeTo = function subscribeTo(result) {
      if (!!result && typeof result[_symbol_observable__WEBPACK_IMPORTED_MODULE_8__["observable"]] === 'function') {
        return Object(_subscribeToObservable__WEBPACK_IMPORTED_MODULE_3__["subscribeToObservable"])(result);
      } else if (Object(_isArrayLike__WEBPACK_IMPORTED_MODULE_4__["isArrayLike"])(result)) {
        return Object(_subscribeToArray__WEBPACK_IMPORTED_MODULE_0__["subscribeToArray"])(result);
      } else if (Object(_isPromise__WEBPACK_IMPORTED_MODULE_5__["isPromise"])(result)) {
        return Object(_subscribeToPromise__WEBPACK_IMPORTED_MODULE_1__["subscribeToPromise"])(result);
      } else if (!!result && typeof result[_symbol_iterator__WEBPACK_IMPORTED_MODULE_7__["iterator"]] === 'function') {
        return Object(_subscribeToIterable__WEBPACK_IMPORTED_MODULE_2__["subscribeToIterable"])(result);
      } else {
        var value = Object(_isObject__WEBPACK_IMPORTED_MODULE_6__["isObject"])(result) ? 'an invalid object' : "'".concat(result, "'");
        var msg = "You provided ".concat(value, " where a stream was expected.") + ' You can provide an Observable, Promise, Array, or Iterable.';
        throw new TypeError(msg);
      }
    }; //# sourceMappingURL=subscribeTo.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js":
  /*!**********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js ***!
    \**********************************************************************/

  /*! exports provided: subscribeToArray */

  /***/
  function node_modulesRxjs_esm2015InternalUtilSubscribeToArrayJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "subscribeToArray", function () {
      return subscribeToArray;
    });

    var subscribeToArray = function subscribeToArray(array) {
      return function (subscriber) {
        for (var i = 0, _len48 = array.length; i < _len48 && !subscriber.closed; i++) {
          subscriber.next(array[i]);
        }

        subscriber.complete();
      };
    }; //# sourceMappingURL=subscribeToArray.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/subscribeToIterable.js":
  /*!*************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToIterable.js ***!
    \*************************************************************************/

  /*! exports provided: subscribeToIterable */

  /***/
  function node_modulesRxjs_esm2015InternalUtilSubscribeToIterableJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "subscribeToIterable", function () {
      return subscribeToIterable;
    });
    /* harmony import */


    var _symbol_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../symbol/iterator */
    "./node_modules/rxjs/_esm2015/internal/symbol/iterator.js");

    var subscribeToIterable = function subscribeToIterable(iterable) {
      return function (subscriber) {
        var iterator = iterable[_symbol_iterator__WEBPACK_IMPORTED_MODULE_0__["iterator"]]();

        do {
          var item = iterator.next();

          if (item.done) {
            subscriber.complete();
            break;
          }

          subscriber.next(item.value);

          if (subscriber.closed) {
            break;
          }
        } while (true);

        if (typeof iterator["return"] === 'function') {
          subscriber.add(function () {
            if (iterator["return"]) {
              iterator["return"]();
            }
          });
        }

        return subscriber;
      };
    }; //# sourceMappingURL=subscribeToIterable.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/subscribeToObservable.js":
  /*!***************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToObservable.js ***!
    \***************************************************************************/

  /*! exports provided: subscribeToObservable */

  /***/
  function node_modulesRxjs_esm2015InternalUtilSubscribeToObservableJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "subscribeToObservable", function () {
      return subscribeToObservable;
    });
    /* harmony import */


    var _symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../symbol/observable */
    "./node_modules/rxjs/_esm2015/internal/symbol/observable.js");

    var subscribeToObservable = function subscribeToObservable(obj) {
      return function (subscriber) {
        var obs = obj[_symbol_observable__WEBPACK_IMPORTED_MODULE_0__["observable"]]();

        if (typeof obs.subscribe !== 'function') {
          throw new TypeError('Provided object does not correctly implement Symbol.observable');
        } else {
          return obs.subscribe(subscriber);
        }
      };
    }; //# sourceMappingURL=subscribeToObservable.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/subscribeToPromise.js":
  /*!************************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToPromise.js ***!
    \************************************************************************/

  /*! exports provided: subscribeToPromise */

  /***/
  function node_modulesRxjs_esm2015InternalUtilSubscribeToPromiseJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "subscribeToPromise", function () {
      return subscribeToPromise;
    });
    /* harmony import */


    var _hostReportError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./hostReportError */
    "./node_modules/rxjs/_esm2015/internal/util/hostReportError.js");

    var subscribeToPromise = function subscribeToPromise(promise) {
      return function (subscriber) {
        promise.then(function (value) {
          if (!subscriber.closed) {
            subscriber.next(value);
            subscriber.complete();
          }
        }, function (err) {
          return subscriber.error(err);
        }).then(null, _hostReportError__WEBPACK_IMPORTED_MODULE_0__["hostReportError"]);
        return subscriber;
      };
    }; //# sourceMappingURL=subscribeToPromise.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js":
  /*!***********************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js ***!
    \***********************************************************************/

  /*! exports provided: subscribeToResult */

  /***/
  function node_modulesRxjs_esm2015InternalUtilSubscribeToResultJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "subscribeToResult", function () {
      return subscribeToResult;
    });
    /* harmony import */


    var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../InnerSubscriber */
    "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js");
    /* harmony import */


    var _subscribeTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./subscribeTo */
    "./node_modules/rxjs/_esm2015/internal/util/subscribeTo.js");
    /* harmony import */


    var _Observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Observable */
    "./node_modules/rxjs/_esm2015/internal/Observable.js");

    function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
      var innerSubscriber = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_0__["InnerSubscriber"](outerSubscriber, outerValue, outerIndex);

      if (innerSubscriber.closed) {
        return undefined;
      }

      if (result instanceof _Observable__WEBPACK_IMPORTED_MODULE_2__["Observable"]) {
        return result.subscribe(innerSubscriber);
      }

      return Object(_subscribeTo__WEBPACK_IMPORTED_MODULE_1__["subscribeTo"])(result)(innerSubscriber);
    } //# sourceMappingURL=subscribeToResult.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/internal/util/toSubscriber.js":
  /*!******************************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/internal/util/toSubscriber.js ***!
    \******************************************************************/

  /*! exports provided: toSubscriber */

  /***/
  function node_modulesRxjs_esm2015InternalUtilToSubscriberJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "toSubscriber", function () {
      return toSubscriber;
    });
    /* harmony import */


    var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../Subscriber */
    "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
    /* harmony import */


    var _symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../symbol/rxSubscriber */
    "./node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js");
    /* harmony import */


    var _Observer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../Observer */
    "./node_modules/rxjs/_esm2015/internal/Observer.js");

    function toSubscriber(nextOrObserver, error, complete) {
      if (nextOrObserver) {
        if (nextOrObserver instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]) {
          return nextOrObserver;
        }

        if (nextOrObserver[_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__["rxSubscriber"]]) {
          return nextOrObserver[_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__["rxSubscriber"]]();
        }
      }

      if (!nextOrObserver && !error && !complete) {
        return new _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"](_Observer__WEBPACK_IMPORTED_MODULE_2__["empty"]);
      }

      return new _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"](nextOrObserver, error, complete);
    } //# sourceMappingURL=toSubscriber.js.map

    /***/

  },

  /***/
  "./node_modules/rxjs/_esm2015/operators/index.js":
  /*!*******************************************************!*\
    !*** ./node_modules/rxjs/_esm2015/operators/index.js ***!
    \*******************************************************/

  /*! exports provided: audit, auditTime, buffer, bufferCount, bufferTime, bufferToggle, bufferWhen, catchError, combineAll, combineLatest, concat, concatAll, concatMap, concatMapTo, count, debounce, debounceTime, defaultIfEmpty, delay, delayWhen, dematerialize, distinct, distinctUntilChanged, distinctUntilKeyChanged, elementAt, endWith, every, exhaust, exhaustMap, expand, filter, finalize, find, findIndex, first, groupBy, ignoreElements, isEmpty, last, map, mapTo, materialize, max, merge, mergeAll, mergeMap, flatMap, mergeMapTo, mergeScan, min, multicast, observeOn, onErrorResumeNext, pairwise, partition, pluck, publish, publishBehavior, publishLast, publishReplay, race, reduce, repeat, repeatWhen, retry, retryWhen, refCount, sample, sampleTime, scan, sequenceEqual, share, shareReplay, single, skip, skipLast, skipUntil, skipWhile, startWith, subscribeOn, switchAll, switchMap, switchMapTo, take, takeLast, takeUntil, takeWhile, tap, throttle, throttleTime, throwIfEmpty, timeInterval, timeout, timeoutWith, timestamp, toArray, window, windowCount, windowTime, windowToggle, windowWhen, withLatestFrom, zip, zipAll */

  /***/
  function node_modulesRxjs_esm2015OperatorsIndexJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony import */


    var _internal_operators_audit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ../internal/operators/audit */
    "./node_modules/rxjs/_esm2015/internal/operators/audit.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "audit", function () {
      return _internal_operators_audit__WEBPACK_IMPORTED_MODULE_0__["audit"];
    });
    /* harmony import */


    var _internal_operators_auditTime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ../internal/operators/auditTime */
    "./node_modules/rxjs/_esm2015/internal/operators/auditTime.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "auditTime", function () {
      return _internal_operators_auditTime__WEBPACK_IMPORTED_MODULE_1__["auditTime"];
    });
    /* harmony import */


    var _internal_operators_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../internal/operators/buffer */
    "./node_modules/rxjs/_esm2015/internal/operators/buffer.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "buffer", function () {
      return _internal_operators_buffer__WEBPACK_IMPORTED_MODULE_2__["buffer"];
    });
    /* harmony import */


    var _internal_operators_bufferCount__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ../internal/operators/bufferCount */
    "./node_modules/rxjs/_esm2015/internal/operators/bufferCount.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "bufferCount", function () {
      return _internal_operators_bufferCount__WEBPACK_IMPORTED_MODULE_3__["bufferCount"];
    });
    /* harmony import */


    var _internal_operators_bufferTime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ../internal/operators/bufferTime */
    "./node_modules/rxjs/_esm2015/internal/operators/bufferTime.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "bufferTime", function () {
      return _internal_operators_bufferTime__WEBPACK_IMPORTED_MODULE_4__["bufferTime"];
    });
    /* harmony import */


    var _internal_operators_bufferToggle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ../internal/operators/bufferToggle */
    "./node_modules/rxjs/_esm2015/internal/operators/bufferToggle.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "bufferToggle", function () {
      return _internal_operators_bufferToggle__WEBPACK_IMPORTED_MODULE_5__["bufferToggle"];
    });
    /* harmony import */


    var _internal_operators_bufferWhen__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ../internal/operators/bufferWhen */
    "./node_modules/rxjs/_esm2015/internal/operators/bufferWhen.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "bufferWhen", function () {
      return _internal_operators_bufferWhen__WEBPACK_IMPORTED_MODULE_6__["bufferWhen"];
    });
    /* harmony import */


    var _internal_operators_catchError__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ../internal/operators/catchError */
    "./node_modules/rxjs/_esm2015/internal/operators/catchError.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "catchError", function () {
      return _internal_operators_catchError__WEBPACK_IMPORTED_MODULE_7__["catchError"];
    });
    /* harmony import */


    var _internal_operators_combineAll__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ../internal/operators/combineAll */
    "./node_modules/rxjs/_esm2015/internal/operators/combineAll.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "combineAll", function () {
      return _internal_operators_combineAll__WEBPACK_IMPORTED_MODULE_8__["combineAll"];
    });
    /* harmony import */


    var _internal_operators_combineLatest__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ../internal/operators/combineLatest */
    "./node_modules/rxjs/_esm2015/internal/operators/combineLatest.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "combineLatest", function () {
      return _internal_operators_combineLatest__WEBPACK_IMPORTED_MODULE_9__["combineLatest"];
    });
    /* harmony import */


    var _internal_operators_concat__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ../internal/operators/concat */
    "./node_modules/rxjs/_esm2015/internal/operators/concat.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "concat", function () {
      return _internal_operators_concat__WEBPACK_IMPORTED_MODULE_10__["concat"];
    });
    /* harmony import */


    var _internal_operators_concatAll__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ../internal/operators/concatAll */
    "./node_modules/rxjs/_esm2015/internal/operators/concatAll.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "concatAll", function () {
      return _internal_operators_concatAll__WEBPACK_IMPORTED_MODULE_11__["concatAll"];
    });
    /* harmony import */


    var _internal_operators_concatMap__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
    /*! ../internal/operators/concatMap */
    "./node_modules/rxjs/_esm2015/internal/operators/concatMap.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "concatMap", function () {
      return _internal_operators_concatMap__WEBPACK_IMPORTED_MODULE_12__["concatMap"];
    });
    /* harmony import */


    var _internal_operators_concatMapTo__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
    /*! ../internal/operators/concatMapTo */
    "./node_modules/rxjs/_esm2015/internal/operators/concatMapTo.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "concatMapTo", function () {
      return _internal_operators_concatMapTo__WEBPACK_IMPORTED_MODULE_13__["concatMapTo"];
    });
    /* harmony import */


    var _internal_operators_count__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
    /*! ../internal/operators/count */
    "./node_modules/rxjs/_esm2015/internal/operators/count.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "count", function () {
      return _internal_operators_count__WEBPACK_IMPORTED_MODULE_14__["count"];
    });
    /* harmony import */


    var _internal_operators_debounce__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
    /*! ../internal/operators/debounce */
    "./node_modules/rxjs/_esm2015/internal/operators/debounce.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "debounce", function () {
      return _internal_operators_debounce__WEBPACK_IMPORTED_MODULE_15__["debounce"];
    });
    /* harmony import */


    var _internal_operators_debounceTime__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
    /*! ../internal/operators/debounceTime */
    "./node_modules/rxjs/_esm2015/internal/operators/debounceTime.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "debounceTime", function () {
      return _internal_operators_debounceTime__WEBPACK_IMPORTED_MODULE_16__["debounceTime"];
    });
    /* harmony import */


    var _internal_operators_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
    /*! ../internal/operators/defaultIfEmpty */
    "./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "defaultIfEmpty", function () {
      return _internal_operators_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_17__["defaultIfEmpty"];
    });
    /* harmony import */


    var _internal_operators_delay__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
    /*! ../internal/operators/delay */
    "./node_modules/rxjs/_esm2015/internal/operators/delay.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "delay", function () {
      return _internal_operators_delay__WEBPACK_IMPORTED_MODULE_18__["delay"];
    });
    /* harmony import */


    var _internal_operators_delayWhen__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
    /*! ../internal/operators/delayWhen */
    "./node_modules/rxjs/_esm2015/internal/operators/delayWhen.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "delayWhen", function () {
      return _internal_operators_delayWhen__WEBPACK_IMPORTED_MODULE_19__["delayWhen"];
    });
    /* harmony import */


    var _internal_operators_dematerialize__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
    /*! ../internal/operators/dematerialize */
    "./node_modules/rxjs/_esm2015/internal/operators/dematerialize.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "dematerialize", function () {
      return _internal_operators_dematerialize__WEBPACK_IMPORTED_MODULE_20__["dematerialize"];
    });
    /* harmony import */


    var _internal_operators_distinct__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
    /*! ../internal/operators/distinct */
    "./node_modules/rxjs/_esm2015/internal/operators/distinct.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "distinct", function () {
      return _internal_operators_distinct__WEBPACK_IMPORTED_MODULE_21__["distinct"];
    });
    /* harmony import */


    var _internal_operators_distinctUntilChanged__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
    /*! ../internal/operators/distinctUntilChanged */
    "./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "distinctUntilChanged", function () {
      return _internal_operators_distinctUntilChanged__WEBPACK_IMPORTED_MODULE_22__["distinctUntilChanged"];
    });
    /* harmony import */


    var _internal_operators_distinctUntilKeyChanged__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(
    /*! ../internal/operators/distinctUntilKeyChanged */
    "./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "distinctUntilKeyChanged", function () {
      return _internal_operators_distinctUntilKeyChanged__WEBPACK_IMPORTED_MODULE_23__["distinctUntilKeyChanged"];
    });
    /* harmony import */


    var _internal_operators_elementAt__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(
    /*! ../internal/operators/elementAt */
    "./node_modules/rxjs/_esm2015/internal/operators/elementAt.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "elementAt", function () {
      return _internal_operators_elementAt__WEBPACK_IMPORTED_MODULE_24__["elementAt"];
    });
    /* harmony import */


    var _internal_operators_endWith__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(
    /*! ../internal/operators/endWith */
    "./node_modules/rxjs/_esm2015/internal/operators/endWith.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "endWith", function () {
      return _internal_operators_endWith__WEBPACK_IMPORTED_MODULE_25__["endWith"];
    });
    /* harmony import */


    var _internal_operators_every__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(
    /*! ../internal/operators/every */
    "./node_modules/rxjs/_esm2015/internal/operators/every.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "every", function () {
      return _internal_operators_every__WEBPACK_IMPORTED_MODULE_26__["every"];
    });
    /* harmony import */


    var _internal_operators_exhaust__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(
    /*! ../internal/operators/exhaust */
    "./node_modules/rxjs/_esm2015/internal/operators/exhaust.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "exhaust", function () {
      return _internal_operators_exhaust__WEBPACK_IMPORTED_MODULE_27__["exhaust"];
    });
    /* harmony import */


    var _internal_operators_exhaustMap__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(
    /*! ../internal/operators/exhaustMap */
    "./node_modules/rxjs/_esm2015/internal/operators/exhaustMap.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "exhaustMap", function () {
      return _internal_operators_exhaustMap__WEBPACK_IMPORTED_MODULE_28__["exhaustMap"];
    });
    /* harmony import */


    var _internal_operators_expand__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(
    /*! ../internal/operators/expand */
    "./node_modules/rxjs/_esm2015/internal/operators/expand.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "expand", function () {
      return _internal_operators_expand__WEBPACK_IMPORTED_MODULE_29__["expand"];
    });
    /* harmony import */


    var _internal_operators_filter__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(
    /*! ../internal/operators/filter */
    "./node_modules/rxjs/_esm2015/internal/operators/filter.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "filter", function () {
      return _internal_operators_filter__WEBPACK_IMPORTED_MODULE_30__["filter"];
    });
    /* harmony import */


    var _internal_operators_finalize__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(
    /*! ../internal/operators/finalize */
    "./node_modules/rxjs/_esm2015/internal/operators/finalize.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "finalize", function () {
      return _internal_operators_finalize__WEBPACK_IMPORTED_MODULE_31__["finalize"];
    });
    /* harmony import */


    var _internal_operators_find__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(
    /*! ../internal/operators/find */
    "./node_modules/rxjs/_esm2015/internal/operators/find.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "find", function () {
      return _internal_operators_find__WEBPACK_IMPORTED_MODULE_32__["find"];
    });
    /* harmony import */


    var _internal_operators_findIndex__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(
    /*! ../internal/operators/findIndex */
    "./node_modules/rxjs/_esm2015/internal/operators/findIndex.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "findIndex", function () {
      return _internal_operators_findIndex__WEBPACK_IMPORTED_MODULE_33__["findIndex"];
    });
    /* harmony import */


    var _internal_operators_first__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(
    /*! ../internal/operators/first */
    "./node_modules/rxjs/_esm2015/internal/operators/first.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "first", function () {
      return _internal_operators_first__WEBPACK_IMPORTED_MODULE_34__["first"];
    });
    /* harmony import */


    var _internal_operators_groupBy__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(
    /*! ../internal/operators/groupBy */
    "./node_modules/rxjs/_esm2015/internal/operators/groupBy.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "groupBy", function () {
      return _internal_operators_groupBy__WEBPACK_IMPORTED_MODULE_35__["groupBy"];
    });
    /* harmony import */


    var _internal_operators_ignoreElements__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(
    /*! ../internal/operators/ignoreElements */
    "./node_modules/rxjs/_esm2015/internal/operators/ignoreElements.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "ignoreElements", function () {
      return _internal_operators_ignoreElements__WEBPACK_IMPORTED_MODULE_36__["ignoreElements"];
    });
    /* harmony import */


    var _internal_operators_isEmpty__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(
    /*! ../internal/operators/isEmpty */
    "./node_modules/rxjs/_esm2015/internal/operators/isEmpty.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "isEmpty", function () {
      return _internal_operators_isEmpty__WEBPACK_IMPORTED_MODULE_37__["isEmpty"];
    });
    /* harmony import */


    var _internal_operators_last__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(
    /*! ../internal/operators/last */
    "./node_modules/rxjs/_esm2015/internal/operators/last.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "last", function () {
      return _internal_operators_last__WEBPACK_IMPORTED_MODULE_38__["last"];
    });
    /* harmony import */


    var _internal_operators_map__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(
    /*! ../internal/operators/map */
    "./node_modules/rxjs/_esm2015/internal/operators/map.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "map", function () {
      return _internal_operators_map__WEBPACK_IMPORTED_MODULE_39__["map"];
    });
    /* harmony import */


    var _internal_operators_mapTo__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(
    /*! ../internal/operators/mapTo */
    "./node_modules/rxjs/_esm2015/internal/operators/mapTo.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "mapTo", function () {
      return _internal_operators_mapTo__WEBPACK_IMPORTED_MODULE_40__["mapTo"];
    });
    /* harmony import */


    var _internal_operators_materialize__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(
    /*! ../internal/operators/materialize */
    "./node_modules/rxjs/_esm2015/internal/operators/materialize.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "materialize", function () {
      return _internal_operators_materialize__WEBPACK_IMPORTED_MODULE_41__["materialize"];
    });
    /* harmony import */


    var _internal_operators_max__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(
    /*! ../internal/operators/max */
    "./node_modules/rxjs/_esm2015/internal/operators/max.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "max", function () {
      return _internal_operators_max__WEBPACK_IMPORTED_MODULE_42__["max"];
    });
    /* harmony import */


    var _internal_operators_merge__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(
    /*! ../internal/operators/merge */
    "./node_modules/rxjs/_esm2015/internal/operators/merge.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "merge", function () {
      return _internal_operators_merge__WEBPACK_IMPORTED_MODULE_43__["merge"];
    });
    /* harmony import */


    var _internal_operators_mergeAll__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(
    /*! ../internal/operators/mergeAll */
    "./node_modules/rxjs/_esm2015/internal/operators/mergeAll.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "mergeAll", function () {
      return _internal_operators_mergeAll__WEBPACK_IMPORTED_MODULE_44__["mergeAll"];
    });
    /* harmony import */


    var _internal_operators_mergeMap__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(
    /*! ../internal/operators/mergeMap */
    "./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "mergeMap", function () {
      return _internal_operators_mergeMap__WEBPACK_IMPORTED_MODULE_45__["mergeMap"];
    });
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "flatMap", function () {
      return _internal_operators_mergeMap__WEBPACK_IMPORTED_MODULE_45__["mergeMap"];
    });
    /* harmony import */


    var _internal_operators_mergeMapTo__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(
    /*! ../internal/operators/mergeMapTo */
    "./node_modules/rxjs/_esm2015/internal/operators/mergeMapTo.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "mergeMapTo", function () {
      return _internal_operators_mergeMapTo__WEBPACK_IMPORTED_MODULE_46__["mergeMapTo"];
    });
    /* harmony import */


    var _internal_operators_mergeScan__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(
    /*! ../internal/operators/mergeScan */
    "./node_modules/rxjs/_esm2015/internal/operators/mergeScan.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "mergeScan", function () {
      return _internal_operators_mergeScan__WEBPACK_IMPORTED_MODULE_47__["mergeScan"];
    });
    /* harmony import */


    var _internal_operators_min__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(
    /*! ../internal/operators/min */
    "./node_modules/rxjs/_esm2015/internal/operators/min.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "min", function () {
      return _internal_operators_min__WEBPACK_IMPORTED_MODULE_48__["min"];
    });
    /* harmony import */


    var _internal_operators_multicast__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(
    /*! ../internal/operators/multicast */
    "./node_modules/rxjs/_esm2015/internal/operators/multicast.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "multicast", function () {
      return _internal_operators_multicast__WEBPACK_IMPORTED_MODULE_49__["multicast"];
    });
    /* harmony import */


    var _internal_operators_observeOn__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(
    /*! ../internal/operators/observeOn */
    "./node_modules/rxjs/_esm2015/internal/operators/observeOn.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "observeOn", function () {
      return _internal_operators_observeOn__WEBPACK_IMPORTED_MODULE_50__["observeOn"];
    });
    /* harmony import */


    var _internal_operators_onErrorResumeNext__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(
    /*! ../internal/operators/onErrorResumeNext */
    "./node_modules/rxjs/_esm2015/internal/operators/onErrorResumeNext.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function () {
      return _internal_operators_onErrorResumeNext__WEBPACK_IMPORTED_MODULE_51__["onErrorResumeNext"];
    });
    /* harmony import */


    var _internal_operators_pairwise__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(
    /*! ../internal/operators/pairwise */
    "./node_modules/rxjs/_esm2015/internal/operators/pairwise.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "pairwise", function () {
      return _internal_operators_pairwise__WEBPACK_IMPORTED_MODULE_52__["pairwise"];
    });
    /* harmony import */


    var _internal_operators_partition__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(
    /*! ../internal/operators/partition */
    "./node_modules/rxjs/_esm2015/internal/operators/partition.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "partition", function () {
      return _internal_operators_partition__WEBPACK_IMPORTED_MODULE_53__["partition"];
    });
    /* harmony import */


    var _internal_operators_pluck__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(
    /*! ../internal/operators/pluck */
    "./node_modules/rxjs/_esm2015/internal/operators/pluck.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "pluck", function () {
      return _internal_operators_pluck__WEBPACK_IMPORTED_MODULE_54__["pluck"];
    });
    /* harmony import */


    var _internal_operators_publish__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(
    /*! ../internal/operators/publish */
    "./node_modules/rxjs/_esm2015/internal/operators/publish.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "publish", function () {
      return _internal_operators_publish__WEBPACK_IMPORTED_MODULE_55__["publish"];
    });
    /* harmony import */


    var _internal_operators_publishBehavior__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(
    /*! ../internal/operators/publishBehavior */
    "./node_modules/rxjs/_esm2015/internal/operators/publishBehavior.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "publishBehavior", function () {
      return _internal_operators_publishBehavior__WEBPACK_IMPORTED_MODULE_56__["publishBehavior"];
    });
    /* harmony import */


    var _internal_operators_publishLast__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(
    /*! ../internal/operators/publishLast */
    "./node_modules/rxjs/_esm2015/internal/operators/publishLast.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "publishLast", function () {
      return _internal_operators_publishLast__WEBPACK_IMPORTED_MODULE_57__["publishLast"];
    });
    /* harmony import */


    var _internal_operators_publishReplay__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(
    /*! ../internal/operators/publishReplay */
    "./node_modules/rxjs/_esm2015/internal/operators/publishReplay.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "publishReplay", function () {
      return _internal_operators_publishReplay__WEBPACK_IMPORTED_MODULE_58__["publishReplay"];
    });
    /* harmony import */


    var _internal_operators_race__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(
    /*! ../internal/operators/race */
    "./node_modules/rxjs/_esm2015/internal/operators/race.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "race", function () {
      return _internal_operators_race__WEBPACK_IMPORTED_MODULE_59__["race"];
    });
    /* harmony import */


    var _internal_operators_reduce__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(
    /*! ../internal/operators/reduce */
    "./node_modules/rxjs/_esm2015/internal/operators/reduce.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "reduce", function () {
      return _internal_operators_reduce__WEBPACK_IMPORTED_MODULE_60__["reduce"];
    });
    /* harmony import */


    var _internal_operators_repeat__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(
    /*! ../internal/operators/repeat */
    "./node_modules/rxjs/_esm2015/internal/operators/repeat.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "repeat", function () {
      return _internal_operators_repeat__WEBPACK_IMPORTED_MODULE_61__["repeat"];
    });
    /* harmony import */


    var _internal_operators_repeatWhen__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(
    /*! ../internal/operators/repeatWhen */
    "./node_modules/rxjs/_esm2015/internal/operators/repeatWhen.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "repeatWhen", function () {
      return _internal_operators_repeatWhen__WEBPACK_IMPORTED_MODULE_62__["repeatWhen"];
    });
    /* harmony import */


    var _internal_operators_retry__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(
    /*! ../internal/operators/retry */
    "./node_modules/rxjs/_esm2015/internal/operators/retry.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "retry", function () {
      return _internal_operators_retry__WEBPACK_IMPORTED_MODULE_63__["retry"];
    });
    /* harmony import */


    var _internal_operators_retryWhen__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(
    /*! ../internal/operators/retryWhen */
    "./node_modules/rxjs/_esm2015/internal/operators/retryWhen.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "retryWhen", function () {
      return _internal_operators_retryWhen__WEBPACK_IMPORTED_MODULE_64__["retryWhen"];
    });
    /* harmony import */


    var _internal_operators_refCount__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(
    /*! ../internal/operators/refCount */
    "./node_modules/rxjs/_esm2015/internal/operators/refCount.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "refCount", function () {
      return _internal_operators_refCount__WEBPACK_IMPORTED_MODULE_65__["refCount"];
    });
    /* harmony import */


    var _internal_operators_sample__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(
    /*! ../internal/operators/sample */
    "./node_modules/rxjs/_esm2015/internal/operators/sample.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "sample", function () {
      return _internal_operators_sample__WEBPACK_IMPORTED_MODULE_66__["sample"];
    });
    /* harmony import */


    var _internal_operators_sampleTime__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(
    /*! ../internal/operators/sampleTime */
    "./node_modules/rxjs/_esm2015/internal/operators/sampleTime.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "sampleTime", function () {
      return _internal_operators_sampleTime__WEBPACK_IMPORTED_MODULE_67__["sampleTime"];
    });
    /* harmony import */


    var _internal_operators_scan__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(
    /*! ../internal/operators/scan */
    "./node_modules/rxjs/_esm2015/internal/operators/scan.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "scan", function () {
      return _internal_operators_scan__WEBPACK_IMPORTED_MODULE_68__["scan"];
    });
    /* harmony import */


    var _internal_operators_sequenceEqual__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(
    /*! ../internal/operators/sequenceEqual */
    "./node_modules/rxjs/_esm2015/internal/operators/sequenceEqual.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "sequenceEqual", function () {
      return _internal_operators_sequenceEqual__WEBPACK_IMPORTED_MODULE_69__["sequenceEqual"];
    });
    /* harmony import */


    var _internal_operators_share__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(
    /*! ../internal/operators/share */
    "./node_modules/rxjs/_esm2015/internal/operators/share.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "share", function () {
      return _internal_operators_share__WEBPACK_IMPORTED_MODULE_70__["share"];
    });
    /* harmony import */


    var _internal_operators_shareReplay__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(
    /*! ../internal/operators/shareReplay */
    "./node_modules/rxjs/_esm2015/internal/operators/shareReplay.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "shareReplay", function () {
      return _internal_operators_shareReplay__WEBPACK_IMPORTED_MODULE_71__["shareReplay"];
    });
    /* harmony import */


    var _internal_operators_single__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(
    /*! ../internal/operators/single */
    "./node_modules/rxjs/_esm2015/internal/operators/single.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "single", function () {
      return _internal_operators_single__WEBPACK_IMPORTED_MODULE_72__["single"];
    });
    /* harmony import */


    var _internal_operators_skip__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(
    /*! ../internal/operators/skip */
    "./node_modules/rxjs/_esm2015/internal/operators/skip.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "skip", function () {
      return _internal_operators_skip__WEBPACK_IMPORTED_MODULE_73__["skip"];
    });
    /* harmony import */


    var _internal_operators_skipLast__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(
    /*! ../internal/operators/skipLast */
    "./node_modules/rxjs/_esm2015/internal/operators/skipLast.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "skipLast", function () {
      return _internal_operators_skipLast__WEBPACK_IMPORTED_MODULE_74__["skipLast"];
    });
    /* harmony import */


    var _internal_operators_skipUntil__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(
    /*! ../internal/operators/skipUntil */
    "./node_modules/rxjs/_esm2015/internal/operators/skipUntil.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "skipUntil", function () {
      return _internal_operators_skipUntil__WEBPACK_IMPORTED_MODULE_75__["skipUntil"];
    });
    /* harmony import */


    var _internal_operators_skipWhile__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(
    /*! ../internal/operators/skipWhile */
    "./node_modules/rxjs/_esm2015/internal/operators/skipWhile.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "skipWhile", function () {
      return _internal_operators_skipWhile__WEBPACK_IMPORTED_MODULE_76__["skipWhile"];
    });
    /* harmony import */


    var _internal_operators_startWith__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(
    /*! ../internal/operators/startWith */
    "./node_modules/rxjs/_esm2015/internal/operators/startWith.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "startWith", function () {
      return _internal_operators_startWith__WEBPACK_IMPORTED_MODULE_77__["startWith"];
    });
    /* harmony import */


    var _internal_operators_subscribeOn__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(
    /*! ../internal/operators/subscribeOn */
    "./node_modules/rxjs/_esm2015/internal/operators/subscribeOn.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "subscribeOn", function () {
      return _internal_operators_subscribeOn__WEBPACK_IMPORTED_MODULE_78__["subscribeOn"];
    });
    /* harmony import */


    var _internal_operators_switchAll__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(
    /*! ../internal/operators/switchAll */
    "./node_modules/rxjs/_esm2015/internal/operators/switchAll.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "switchAll", function () {
      return _internal_operators_switchAll__WEBPACK_IMPORTED_MODULE_79__["switchAll"];
    });
    /* harmony import */


    var _internal_operators_switchMap__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(
    /*! ../internal/operators/switchMap */
    "./node_modules/rxjs/_esm2015/internal/operators/switchMap.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "switchMap", function () {
      return _internal_operators_switchMap__WEBPACK_IMPORTED_MODULE_80__["switchMap"];
    });
    /* harmony import */


    var _internal_operators_switchMapTo__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(
    /*! ../internal/operators/switchMapTo */
    "./node_modules/rxjs/_esm2015/internal/operators/switchMapTo.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "switchMapTo", function () {
      return _internal_operators_switchMapTo__WEBPACK_IMPORTED_MODULE_81__["switchMapTo"];
    });
    /* harmony import */


    var _internal_operators_take__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(
    /*! ../internal/operators/take */
    "./node_modules/rxjs/_esm2015/internal/operators/take.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "take", function () {
      return _internal_operators_take__WEBPACK_IMPORTED_MODULE_82__["take"];
    });
    /* harmony import */


    var _internal_operators_takeLast__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(
    /*! ../internal/operators/takeLast */
    "./node_modules/rxjs/_esm2015/internal/operators/takeLast.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "takeLast", function () {
      return _internal_operators_takeLast__WEBPACK_IMPORTED_MODULE_83__["takeLast"];
    });
    /* harmony import */


    var _internal_operators_takeUntil__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(
    /*! ../internal/operators/takeUntil */
    "./node_modules/rxjs/_esm2015/internal/operators/takeUntil.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "takeUntil", function () {
      return _internal_operators_takeUntil__WEBPACK_IMPORTED_MODULE_84__["takeUntil"];
    });
    /* harmony import */


    var _internal_operators_takeWhile__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(
    /*! ../internal/operators/takeWhile */
    "./node_modules/rxjs/_esm2015/internal/operators/takeWhile.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "takeWhile", function () {
      return _internal_operators_takeWhile__WEBPACK_IMPORTED_MODULE_85__["takeWhile"];
    });
    /* harmony import */


    var _internal_operators_tap__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(
    /*! ../internal/operators/tap */
    "./node_modules/rxjs/_esm2015/internal/operators/tap.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "tap", function () {
      return _internal_operators_tap__WEBPACK_IMPORTED_MODULE_86__["tap"];
    });
    /* harmony import */


    var _internal_operators_throttle__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(
    /*! ../internal/operators/throttle */
    "./node_modules/rxjs/_esm2015/internal/operators/throttle.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "throttle", function () {
      return _internal_operators_throttle__WEBPACK_IMPORTED_MODULE_87__["throttle"];
    });
    /* harmony import */


    var _internal_operators_throttleTime__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(
    /*! ../internal/operators/throttleTime */
    "./node_modules/rxjs/_esm2015/internal/operators/throttleTime.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "throttleTime", function () {
      return _internal_operators_throttleTime__WEBPACK_IMPORTED_MODULE_88__["throttleTime"];
    });
    /* harmony import */


    var _internal_operators_throwIfEmpty__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(
    /*! ../internal/operators/throwIfEmpty */
    "./node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "throwIfEmpty", function () {
      return _internal_operators_throwIfEmpty__WEBPACK_IMPORTED_MODULE_89__["throwIfEmpty"];
    });
    /* harmony import */


    var _internal_operators_timeInterval__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(
    /*! ../internal/operators/timeInterval */
    "./node_modules/rxjs/_esm2015/internal/operators/timeInterval.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "timeInterval", function () {
      return _internal_operators_timeInterval__WEBPACK_IMPORTED_MODULE_90__["timeInterval"];
    });
    /* harmony import */


    var _internal_operators_timeout__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(
    /*! ../internal/operators/timeout */
    "./node_modules/rxjs/_esm2015/internal/operators/timeout.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "timeout", function () {
      return _internal_operators_timeout__WEBPACK_IMPORTED_MODULE_91__["timeout"];
    });
    /* harmony import */


    var _internal_operators_timeoutWith__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(
    /*! ../internal/operators/timeoutWith */
    "./node_modules/rxjs/_esm2015/internal/operators/timeoutWith.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "timeoutWith", function () {
      return _internal_operators_timeoutWith__WEBPACK_IMPORTED_MODULE_92__["timeoutWith"];
    });
    /* harmony import */


    var _internal_operators_timestamp__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(
    /*! ../internal/operators/timestamp */
    "./node_modules/rxjs/_esm2015/internal/operators/timestamp.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "timestamp", function () {
      return _internal_operators_timestamp__WEBPACK_IMPORTED_MODULE_93__["timestamp"];
    });
    /* harmony import */


    var _internal_operators_toArray__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(
    /*! ../internal/operators/toArray */
    "./node_modules/rxjs/_esm2015/internal/operators/toArray.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "toArray", function () {
      return _internal_operators_toArray__WEBPACK_IMPORTED_MODULE_94__["toArray"];
    });
    /* harmony import */


    var _internal_operators_window__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(
    /*! ../internal/operators/window */
    "./node_modules/rxjs/_esm2015/internal/operators/window.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "window", function () {
      return _internal_operators_window__WEBPACK_IMPORTED_MODULE_95__["window"];
    });
    /* harmony import */


    var _internal_operators_windowCount__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(
    /*! ../internal/operators/windowCount */
    "./node_modules/rxjs/_esm2015/internal/operators/windowCount.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "windowCount", function () {
      return _internal_operators_windowCount__WEBPACK_IMPORTED_MODULE_96__["windowCount"];
    });
    /* harmony import */


    var _internal_operators_windowTime__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(
    /*! ../internal/operators/windowTime */
    "./node_modules/rxjs/_esm2015/internal/operators/windowTime.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "windowTime", function () {
      return _internal_operators_windowTime__WEBPACK_IMPORTED_MODULE_97__["windowTime"];
    });
    /* harmony import */


    var _internal_operators_windowToggle__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(
    /*! ../internal/operators/windowToggle */
    "./node_modules/rxjs/_esm2015/internal/operators/windowToggle.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "windowToggle", function () {
      return _internal_operators_windowToggle__WEBPACK_IMPORTED_MODULE_98__["windowToggle"];
    });
    /* harmony import */


    var _internal_operators_windowWhen__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(
    /*! ../internal/operators/windowWhen */
    "./node_modules/rxjs/_esm2015/internal/operators/windowWhen.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "windowWhen", function () {
      return _internal_operators_windowWhen__WEBPACK_IMPORTED_MODULE_99__["windowWhen"];
    });
    /* harmony import */


    var _internal_operators_withLatestFrom__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(
    /*! ../internal/operators/withLatestFrom */
    "./node_modules/rxjs/_esm2015/internal/operators/withLatestFrom.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "withLatestFrom", function () {
      return _internal_operators_withLatestFrom__WEBPACK_IMPORTED_MODULE_100__["withLatestFrom"];
    });
    /* harmony import */


    var _internal_operators_zip__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(
    /*! ../internal/operators/zip */
    "./node_modules/rxjs/_esm2015/internal/operators/zip.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "zip", function () {
      return _internal_operators_zip__WEBPACK_IMPORTED_MODULE_101__["zip"];
    });
    /* harmony import */


    var _internal_operators_zipAll__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(
    /*! ../internal/operators/zipAll */
    "./node_modules/rxjs/_esm2015/internal/operators/zipAll.js");
    /* harmony reexport (safe) */


    __webpack_require__.d(__webpack_exports__, "zipAll", function () {
      return _internal_operators_zipAll__WEBPACK_IMPORTED_MODULE_102__["zipAll"];
    }); //# sourceMappingURL=index.js.map

    /***/

  },

  /***/
  "./src/app/app.module.ts":
  /*!*******************************!*\
    !*** ./src/app/app.module.ts ***!
    \*******************************/

  /*! exports provided: AppModule */

  /***/
  function srcAppAppModuleTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "AppModule", function () {
      return AppModule;
    });
    /* harmony import */


    var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/platform-browser */
    "./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/platform-browser.js");
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _components_banner_banner_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./components/banner/banner.component */
    "./src/app/components/banner/banner.component.ts");
    /* harmony import */


    var _angular_elements__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! @angular/elements */
    "./node_modules/@angular/elements/__ivy_ngcc__/fesm2015/elements.js");
    /* harmony import */


    var _components_modal_modal_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./components/modal/modal.component */
    "./src/app/components/modal/modal.component.ts");

    var AppModule = /*@__PURE__*/function () {
      var AppModule = /*#__PURE__*/function () {
        function AppModule(injector) {
          _classCallCheck(this, AppModule);

          var customElement = Object(_angular_elements__WEBPACK_IMPORTED_MODULE_3__["createCustomElement"])(_components_banner_banner_component__WEBPACK_IMPORTED_MODULE_2__["BannerComponent"], {
            injector: injector
          });
          customElements.define('scania-banner', customElement);
        }

        _createClass2(AppModule, [{
          key: "ngDoBootstrap",
          value: function ngDoBootstrap() {}
        }]);

        return AppModule;
      }();

      AppModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: AppModule
      });
      AppModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function AppModule_Factory(t) {
          return new (t || AppModule)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]));
        },
        providers: [],
        imports: [[_angular_platform_browser__WEBPACK_IMPORTED_MODULE_0__["BrowserModule"]]]
      });
      return AppModule;
    }();

    (function () {
      (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](AppModule, {
        declarations: [_components_banner_banner_component__WEBPACK_IMPORTED_MODULE_2__["BannerComponent"], _components_modal_modal_component__WEBPACK_IMPORTED_MODULE_4__["ModalComponent"]],
        imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_0__["BrowserModule"]]
      });
    })();
    /***/

  },

  /***/
  "./src/app/components/banner/banner.component.ts":
  /*!*******************************************************!*\
    !*** ./src/app/components/banner/banner.component.ts ***!
    \*******************************************************/

  /*! exports provided: BannerComponent */

  /***/
  function srcAppComponentsBannerBannerComponentTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "BannerComponent", function () {
      return BannerComponent;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
    /* harmony import */


    var _modal_modal_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ../modal/modal.component */
    "./src/app/components/modal/modal.component.ts");

    function BannerComponent_div_0_ng_container_4_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
      }
    }

    function BannerComponent_div_0_ng_container_5_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
      }
    }

    function BannerComponent_div_0_ng_container_6_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
      }
    }

    function BannerComponent_div_0_ng_container_7_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
      }
    }

    function BannerComponent_div_0_banner_content_10_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "banner-content", 26);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r24 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r24.banner.content, " ");
      }
    }

    function BannerComponent_div_0_images_12_div_1_Template(rf, ctx) {
      if (rf & 1) {
        var _r37 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 28);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function BannerComponent_div_0_images_12_div_1_Template_div_click_0_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r37);

          var imageUrl_r32 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

          var ctx_r35 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

          return ctx_r35.openModal(imageUrl_r32);
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "img", 29);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var imageUrl_r32 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", imageUrl_r32, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"]);
      }
    }

    function BannerComponent_div_0_images_12_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "images");

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, BannerComponent_div_0_images_12_div_1_Template, 2, 1, "div", 27);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var index_r33 = ctx.index;

        var ctx_r25 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r25.banner.maxImagesToShow && index_r33 < ctx_r25.banner.maxImagesToShow);
      }
    }

    function BannerComponent_div_0_div_13_video_thumbnails_1_3_ng_template_0_Template(rf, ctx) {}

    function BannerComponent_div_0_div_13_video_thumbnails_1_3_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, BannerComponent_div_0_div_13_video_thumbnails_1_3_ng_template_0_Template, 0, 0, "ng-template");
      }
    }

    function BannerComponent_div_0_div_13_video_thumbnails_1_Template(rf, ctx) {
      if (rf & 1) {
        var _r46 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "video-thumbnails", 31);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function BannerComponent_div_0_div_13_video_thumbnails_1_Template_video_thumbnails_click_0_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r46);

          var videoUrl_r39 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

          var ctx_r44 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

          return ctx_r44.openModal(videoUrl_r39);
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 32);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 33);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, BannerComponent_div_0_div_13_video_thumbnails_1_3_Template, 1, 0, undefined, 34);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);

        var _r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](19);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r18);
      }
    }

    function BannerComponent_div_0_div_13_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div");

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, BannerComponent_div_0_div_13_video_thumbnails_1_Template, 4, 1, "video-thumbnails", 30);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var index_r40 = ctx.index;

        var ctx_r26 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r26.banner.maxVideosToShow && index_r40 < ctx_r26.banner.maxVideosToShow);
      }
    }

    function BannerComponent_div_0_action_18_div_1_Template(rf, ctx) {
      if (rf & 1) {
        var _r51 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 38);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "a", 39);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function BannerComponent_div_0_action_18_div_1_Template_a_click_1_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r51);

          var ctx_r50 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);

          return ctx_r50.onActionButtonClick();
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r47 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("href", ctx_r47.banner.action.url, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"])("ngClass", "has-color-" + ctx_r47.banner.type);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r47.banner.action.text, " ");
      }
    }

    function BannerComponent_div_0_action_18_ng_template_2_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 40);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r49 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", "has-color-" + ctx_r49.banner.type);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r49.banner.action.text, " ");
      }
    }

    function BannerComponent_div_0_action_18_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "action", 35);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, BannerComponent_div_0_action_18_div_1_Template, 3, 3, "div", 36);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, BannerComponent_div_0_action_18_ng_template_2_Template, 2, 2, "ng-template", null, 37, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var _r48 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](3);

        var ctx_r27 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r27.banner.action.url)("ngIfElse", _r48);
      }
    }

    function BannerComponent_div_0_ng_container_21_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
      }
    }

    function BannerComponent_div_0_ng_container_22_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
      }
    }

    function BannerComponent_div_0_ng_container_23_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
      }
    }

    function BannerComponent_div_0_ng_container_24_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
      }
    }

    function BannerComponent_div_0_Template(rf, ctx) {
      if (rf & 1) {
        var _r53 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 11);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 12);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 13);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 14);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, BannerComponent_div_0_ng_container_4_Template, 1, 0, "ng-container", 15);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, BannerComponent_div_0_ng_container_5_Template, 1, 0, "ng-container", 15);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, BannerComponent_div_0_ng_container_6_Template, 1, 0, "ng-container", 15);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, BannerComponent_div_0_ng_container_7_Template, 1, 0, "ng-container", 15);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "label", 16);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](9);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](10, BannerComponent_div_0_banner_content_10_Template, 2, 1, "banner-content", 17);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](11, "div", 18);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](12, BannerComponent_div_0_images_12_Template, 2, 1, "images", 19);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](13, BannerComponent_div_0_div_13_Template, 2, 1, "div", 19);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "total-count", 20);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](15, "div", 21);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function BannerComponent_div_0_Template_div_click_15_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r53);

          var ctx_r52 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          return ctx_r52.openModal();
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "div", 22);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](17);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](18, BannerComponent_div_0_action_18_Template, 4, 2, "action", 23);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](19, "div", 24);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](20, "div", 25);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function BannerComponent_div_0_Template_div_click_20_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r53);

          var ctx_r54 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          return ctx_r54.onCloseButtonClick();
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](21, BannerComponent_div_0_ng_container_21_Template, 1, 0, "ng-container", 15);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](22, BannerComponent_div_0_ng_container_22_Template, 1, 0, "ng-container", 15);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](23, BannerComponent_div_0_ng_container_23_Template, 1, 0, "ng-container", 15);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](24, BannerComponent_div_0_ng_container_24_Template, 1, 0, "ng-container", 15);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        var _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](11);

        var _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](13);

        var _r14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](15);

        var _r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](17);

        var _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](3);

        var _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](5);

        var _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](7);

        var _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](9);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", "has-banner-background-" + ctx_r0.banner.type);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.banner.type == "greeting")("ngIfThen", _r10);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.banner.type == "information")("ngIfThen", _r12);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.banner.type == "warning")("ngIfThen", _r14);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.banner.type == "danger")("ngIfThen", _r16);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", "has-color-" + ctx_r0.banner.type);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r0.banner.label, " ");

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.banner.content);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r0.banner.imageUrls);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r0.banner.videoUrls);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" +", ctx_r0.displayCount, " ");

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.banner.action);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.banner.type == "greeting")("ngIfThen", _r2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.banner.type == "information")("ngIfThen", _r4);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.banner.type == "warning")("ngIfThen", _r6);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.banner.type == "danger")("ngIfThen", _r8);
      }
    }

    function BannerComponent_ng_container_1_Template(rf, ctx) {
      if (rf & 1) {
        var _r56 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "scania-plugin-modal", 41);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("closeModalEventEmitter", function BannerComponent_ng_container_1_Template_scania_plugin_modal_closeModalEventEmitter_1_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r56);

          var ctx_r55 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          return ctx_r55.closeModal();
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
      }

      if (rf & 2) {
        var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("imageUrls", ctx_r1.banner.imageUrls)("videoUrls", ctx_r1.banner.videoUrls)("displayItemSource", ctx_r1.itemSource);
      }
    }

    function BannerComponent_ng_template_2_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 42);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "path", 43);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "path", 44);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }
    }

    function BannerComponent_ng_template_4_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 42);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "path", 45);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "path", 46);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }
    }

    function BannerComponent_ng_template_6_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 42);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "path", 47);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "path", 48);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }
    }

    function BannerComponent_ng_template_8_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 42);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "path", 49);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "path", 50);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }
    }

    function BannerComponent_ng_template_10_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 51);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "circle", 52);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "path", 53);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }
    }

    function BannerComponent_ng_template_12_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 51);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "circle", 54);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "path", 53);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }
    }

    function BannerComponent_ng_template_14_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 51);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "g", 55);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "path", 56);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "path", 57);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "defs");

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "clipPath", 58);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](6, "rect", 59);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }
    }

    function BannerComponent_ng_template_16_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 51);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "g", 55);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "path", 60);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "path", 57);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "defs");

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "clipPath", 58);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](6, "rect", 59);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }
    }

    function BannerComponent_ng_template_18_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 61);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "circle", 62);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "path", 63);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }
    }

    var BannerComponent = /*@__PURE__*/function () {
      var BannerComponent = /*#__PURE__*/function () {
        function BannerComponent() {
          _classCallCheck(this, BannerComponent);

          this.actionclickevent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          this.iconType = {
            'greeting': 'information-greeting',
            'information': 'information-info',
            'warning': 'warning-warning',
            'danger': 'warning-danger'
          };
          this.showBanner = false;
          this.modalOpened = false;
          this.displayCount = 0;
        }

        _createClass2(BannerComponent, [{
          key: "ngOnChanges",
          value: function ngOnChanges() {
            try {
              this.banner = JSON.parse(this.bannerconfiguration);
              this.calculateAdditionalCountForImagesNavigation();

              if (this.banner && this.banner.startDateTime && this.banner.endDateTime) {
                this.showBanner = !this.isBannerHidden();
                clearTimeout(this.startTimeOut);
                clearTimeout(this.endTimeOut);
                this.timeWatcher(); // not a good approach but okay for now
              }
            } catch (e) {
              this.banner = undefined;
            }
          }
        }, {
          key: "timeWatcher",
          value: function timeWatcher() {
            var _this167 = this;

            var currentDateTime = new Date();
            if (this.getTimeFromString(this.banner.startDateTime) > currentDateTime.getTime()) this.startTimeOut = setTimeout(function () {
              return _this167.showBanner = true;
            }, this.getTimeFromString(this.banner.startDateTime) - currentDateTime.getTime());
            if (this.getTimeFromString(this.banner.endDateTime) > currentDateTime.getTime()) this.endTimeOut = setTimeout(function () {
              return _this167.showBanner = false;
            }, this.getTimeFromString(this.banner.endDateTime) - currentDateTime.getTime());
          }
        }, {
          key: "getTimeFromString",
          value: function getTimeFromString(stringTime) {
            return new Date(parseInt(stringTime)).getTime();
          }
        }, {
          key: "calculateAdditionalCountForImagesNavigation",
          value: function calculateAdditionalCountForImagesNavigation() {
            if (this.banner.imageUrls) this.displayCount = this.banner.imageUrls.length;
            if (this.banner.videoUrls) this.displayCount += this.banner.videoUrls.length;
            if (this.banner.maxImagesToShow) this.displayCount -= this.banner.maxImagesToShow;
            if (this.banner.maxVideosToShow) this.displayCount -= this.banner.maxVideosToShow;
          }
        }, {
          key: "isBannerHidden",
          value: function isBannerHidden() {
            var currentTime = new Date();
            if (currentTime.getTime() < this.getTimeFromString(this.banner.startDateTime) || currentTime.getTime() > this.getTimeFromString(this.banner.endDateTime)) return true;
            return false;
          }
        }, {
          key: "onCloseButtonClick",
          value: function onCloseButtonClick() {
            this.banner.isEnabled = false;
          }
        }, {
          key: "onActionButtonClick",
          value: function onActionButtonClick() {
            this.actionclickevent.emit();
          }
        }, {
          key: "openModal",
          value: function openModal(itemSource) {
            if (itemSource) this.itemSource = itemSource;else this.itemSource = undefined;
            this.modalOpened = true;
          }
        }, {
          key: "closeModal",
          value: function closeModal() {
            this.modalOpened = false;
          }
        }]);

        return BannerComponent;
      }();

      BannerComponent.ɵfac = function BannerComponent_Factory(t) {
        return new (t || BannerComponent)();
      };

      BannerComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: BannerComponent,
        selectors: [["ng-component"]],
        inputs: {
          bannerconfiguration: "bannerconfiguration"
        },
        outputs: {
          actionclickevent: "actionclickevent"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
        decls: 20,
        vars: 2,
        consts: [["class", "has-banner-shadow px-4 py-2", 3, "ngClass", 4, "ngIf"], [4, "ngIf"], ["closegreeting", ""], ["closeinformation", ""], ["closewarning", ""], ["closedanger", ""], ["greeting", ""], ["information", ""], ["warning", ""], ["danger", ""], ["play", ""], [1, "has-banner-shadow", "px-4", "py-2", 3, "ngClass"], [1, "columns", "is-flex"], [1, "column", "is-flex"], [1, "icon", "is-medium", "is-horizontal-aligned"], [4, "ngIf", "ngIfThen"], [1, "ml-4", "is-uppercase", "is-underlined", "is-horizontal-aligned", "has-text-weight-bold", 3, "ngClass"], ["class", "ml-4 is-horizontal-aligned", 4, "ngIf"], [1, "gap-100"], [4, "ngFor", "ngForOf"], [1, "ml-2", "mt-auto", "pointer"], [1, "br-10", "p-1", "additional-count", 3, "click"], [1, "count-dimentions"], ["class", "ml-8 is-horizontal-aligned has-text-weight-bold", 4, "ngIf"], [1, "column", "is-narrow", "is-horizontal-aligned"], [1, "icon", "is-medium", "pointer", 3, "click"], [1, "ml-4", "is-horizontal-aligned"], ["class", "ml-2 image", 3, "click", 4, "ngIf"], [1, "ml-2", "image", 3, "click"], ["width", "40", "height", "40", 1, "image-border", "br-2", "pointer", 2, "width", "40px", "height", "40px", 3, "src"], ["class", "pointer", 3, "click", 4, "ngIf"], [1, "pointer", 3, "click"], [1, "ml-2", "image-border", "br-2", "background-black"], [1, "is-40x40", "align-center-screen"], [4, "ngTemplateOutlet"], [1, "ml-8", "is-horizontal-aligned", "has-text-weight-bold"], ["class", "is-underlined", 4, "ngIf", "ngIfElse"], ["simpleAction", ""], [1, "is-underlined"], [3, "href", "ngClass", "click"], [3, "ngClass"], [3, "imageUrls", "videoUrls", "displayItemSource", "closeModalEventEmitter"], ["width", "16", "height", "16", "viewBox", "0 0 16 16", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M14 2L2 14", "stroke", "#041E42", "stroke-width", "3"], ["d", "M2 2L14 14", "stroke", "#041E42", "stroke-width", "3"], ["d", "M14 2L2 14", "stroke", "#44A878", "stroke-width", "3"], ["d", "M2 2L14 14", "stroke", "#44A878", "stroke-width", "3"], ["d", "M14 2L2 14", "stroke", "#E35205", "stroke-width", "3"], ["d", "M2 2L14 14", "stroke", "#E35205", "stroke-width", "3"], ["d", "M14 2L2 14", "stroke", "#D6001C", "stroke-width", "3"], ["d", "M2 2L14 14", "stroke", "#D6001C", "stroke-width", "3"], ["width", "24", "height", "24", "viewBox", "0 0 24 24", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["cx", "12", "cy", "12", "r", "12", "fill", "#041E42"], ["d", "M11.1299 9.28496H13.0499V17.25H11.1299V9.28496ZM11.1299 6.20996H13.0499V7.94996H11.1299V6.20996Z", "fill", "#FAFAFA"], ["cx", "12", "cy", "12", "r", "12", "fill", "#44A878"], ["clip-path", "url(#clip0)"], ["d", "M11.134 3C11.5189 2.33333 12.4811 2.33333 12.866 3L22.8253 20.25C23.2102 20.9167 22.7291 21.75 21.9593 21.75H2.04071C1.27091 21.75 0.789782 20.9167 1.17468 20.25L11.134 3Z", "fill", "#E35205"], ["d", "M11.25 11.325H13.17V19.29H11.25V11.325ZM11.25 8.25H13.17V9.99H11.25V8.25Z", "fill", "#FAFAFA"], ["id", "clip0"], ["width", "24", "height", "24", "fill", "white"], ["d", "M11.134 3C11.5189 2.33333 12.4811 2.33333 12.866 3L22.8253 20.25C23.2102 20.9167 22.7291 21.75 21.9593 21.75H2.04071C1.27091 21.75 0.789782 20.9167 1.17468 20.25L11.134 3Z", "fill", "#D6001C"], ["width", "25", "height", "25", "viewBox", "0 0 18 18", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["cx", "9", "cy", "9", "r", "8", "stroke", "#fafafa"], ["d", "M6.33334 13.0197V4.98054C6.33334 4.78992 6.53812 4.66943 6.70475 4.762L13.94 8.78157C14.1114 8.87682 14.1114 9.1234 13.94 9.21865L6.70475 13.2382C6.53812 13.3308 6.33334 13.2103 6.33334 13.0197Z", "stroke", "#fafafa"]],
        template: function BannerComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, BannerComponent_div_0_Template, 25, 24, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, BannerComponent_ng_container_1_Template, 2, 3, "ng-container", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, BannerComponent_ng_template_2_Template, 3, 0, "ng-template", null, 2, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, BannerComponent_ng_template_4_Template, 3, 0, "ng-template", null, 3, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, BannerComponent_ng_template_6_Template, 3, 0, "ng-template", null, 4, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](8, BannerComponent_ng_template_8_Template, 3, 0, "ng-template", null, 5, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](10, BannerComponent_ng_template_10_Template, 3, 0, "ng-template", null, 6, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](12, BannerComponent_ng_template_12_Template, 3, 0, "ng-template", null, 7, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](14, BannerComponent_ng_template_14_Template, 7, 0, "ng-template", null, 8, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](16, BannerComponent_ng_template_16_Template, 7, 0, "ng-template", null, 9, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](18, BannerComponent_ng_template_18_Template, 3, 0, "ng-template", null, 10, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.banner && ctx.banner.isEnabled && ctx.showBanner);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.modalOpened);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgClass"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgForOf"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgTemplateOutlet"], _modal_modal_component__WEBPACK_IMPORTED_MODULE_2__["ModalComponent"]],
        styles: [":host {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  color: #2d2926;\n  font-size: 18px;\n  /* creates each class */\n  /* helper classes */\n  /* creates each class */\n  /* utility classes */\n}\n:host .has-color-greeting {\n  color: #041e42;\n}\n:host .has-color-information {\n  color: #44a878;\n}\n:host .has-color-warning {\n  color: #e35205;\n}\n:host .has-color-danger {\n  color: #d6001c;\n}\n:host .has-banner-background-greeting {\n  background-color: #d9e1eb;\n}\n:host .has-banner-background-information {\n  background-color: #d3e8d6;\n}\n:host .has-banner-background-warning {\n  background-color: #f7eddd;\n}\n:host .has-banner-background-danger {\n  background-color: #f5e6e8;\n}\n:host .m-0 {\n  margin: 0;\n}\n:host .p-0 {\n  padding: 0;\n}\n:host .mt-0 {\n  margin-top: 0;\n}\n:host .pt-0 {\n  padding-top: 0;\n}\n:host .mr-0 {\n  margin-right: 0;\n}\n:host .pr-0 {\n  padding-right: 0;\n}\n:host .mb-0 {\n  margin-bottom: 0;\n}\n:host .pb-0 {\n  padding-bottom: 0;\n}\n:host .ml-0 {\n  margin-left: 0;\n}\n:host .pl-0 {\n  padding-left: 0;\n}\n:host .mx-0 {\n  margin-left: 0;\n  margin-right: 0;\n}\n:host .px-0 {\n  padding-left: 0;\n  padding-right: 0;\n}\n:host .my-0 {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n:host .py-0 {\n  padding-top: 0;\n  padding-bottom: 0;\n}\n:host .m-1 {\n  margin: 0.25rem;\n}\n:host .p-1 {\n  padding: 0.25rem;\n}\n:host .mt-1 {\n  margin-top: 0.25rem;\n}\n:host .pt-1 {\n  padding-top: 0.25rem;\n}\n:host .mr-1 {\n  margin-right: 0.25rem;\n}\n:host .pr-1 {\n  padding-right: 0.25rem;\n}\n:host .mb-1 {\n  margin-bottom: 0.25rem;\n}\n:host .pb-1 {\n  padding-bottom: 0.25rem;\n}\n:host .ml-1 {\n  margin-left: 0.25rem;\n}\n:host .pl-1 {\n  padding-left: 0.25rem;\n}\n:host .mx-1 {\n  margin-left: 0.25rem;\n  margin-right: 0.25rem;\n}\n:host .px-1 {\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n}\n:host .my-1 {\n  margin-top: 0.25rem;\n  margin-bottom: 0.25rem;\n}\n:host .py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\n:host .m-2 {\n  margin: 0.5rem;\n}\n:host .p-2 {\n  padding: 0.5rem;\n}\n:host .mt-2 {\n  margin-top: 0.5rem;\n}\n:host .pt-2 {\n  padding-top: 0.5rem;\n}\n:host .mr-2 {\n  margin-right: 0.5rem;\n}\n:host .pr-2 {\n  padding-right: 0.5rem;\n}\n:host .mb-2 {\n  margin-bottom: 0.5rem;\n}\n:host .pb-2 {\n  padding-bottom: 0.5rem;\n}\n:host .ml-2 {\n  margin-left: 0.5rem;\n}\n:host .pl-2 {\n  padding-left: 0.5rem;\n}\n:host .mx-2 {\n  margin-left: 0.5rem;\n  margin-right: 0.5rem;\n}\n:host .px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n:host .my-2 {\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n}\n:host .py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n:host .m-3 {\n  margin: 0.75rem;\n}\n:host .p-3 {\n  padding: 0.75rem;\n}\n:host .mt-3 {\n  margin-top: 0.75rem;\n}\n:host .pt-3 {\n  padding-top: 0.75rem;\n}\n:host .mr-3 {\n  margin-right: 0.75rem;\n}\n:host .pr-3 {\n  padding-right: 0.75rem;\n}\n:host .mb-3 {\n  margin-bottom: 0.75rem;\n}\n:host .pb-3 {\n  padding-bottom: 0.75rem;\n}\n:host .ml-3 {\n  margin-left: 0.75rem;\n}\n:host .pl-3 {\n  padding-left: 0.75rem;\n}\n:host .mx-3 {\n  margin-left: 0.75rem;\n  margin-right: 0.75rem;\n}\n:host .px-3 {\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n:host .my-3 {\n  margin-top: 0.75rem;\n  margin-bottom: 0.75rem;\n}\n:host .py-3 {\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n}\n:host .m-4 {\n  margin: 1rem;\n}\n:host .p-4 {\n  padding: 1rem;\n}\n:host .mt-4 {\n  margin-top: 1rem;\n}\n:host .pt-4 {\n  padding-top: 1rem;\n}\n:host .mr-4 {\n  margin-right: 1rem;\n}\n:host .pr-4 {\n  padding-right: 1rem;\n}\n:host .mb-4 {\n  margin-bottom: 1rem;\n}\n:host .pb-4 {\n  padding-bottom: 1rem;\n}\n:host .ml-4 {\n  margin-left: 1rem;\n}\n:host .pl-4 {\n  padding-left: 1rem;\n}\n:host .mx-4 {\n  margin-left: 1rem;\n  margin-right: 1rem;\n}\n:host .px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n:host .my-4 {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n:host .py-4 {\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n}\n:host .m-5 {\n  margin: 1.25rem;\n}\n:host .p-5 {\n  padding: 1.25rem;\n}\n:host .mt-5 {\n  margin-top: 1.25rem;\n}\n:host .pt-5 {\n  padding-top: 1.25rem;\n}\n:host .mr-5 {\n  margin-right: 1.25rem;\n}\n:host .pr-5 {\n  padding-right: 1.25rem;\n}\n:host .mb-5 {\n  margin-bottom: 1.25rem;\n}\n:host .pb-5 {\n  padding-bottom: 1.25rem;\n}\n:host .ml-5 {\n  margin-left: 1.25rem;\n}\n:host .pl-5 {\n  padding-left: 1.25rem;\n}\n:host .mx-5 {\n  margin-left: 1.25rem;\n  margin-right: 1.25rem;\n}\n:host .px-5 {\n  padding-left: 1.25rem;\n  padding-right: 1.25rem;\n}\n:host .my-5 {\n  margin-top: 1.25rem;\n  margin-bottom: 1.25rem;\n}\n:host .py-5 {\n  padding-top: 1.25rem;\n  padding-bottom: 1.25rem;\n}\n:host .m-6 {\n  margin: 1.5rem;\n}\n:host .p-6 {\n  padding: 1.5rem;\n}\n:host .mt-6 {\n  margin-top: 1.5rem;\n}\n:host .pt-6 {\n  padding-top: 1.5rem;\n}\n:host .mr-6 {\n  margin-right: 1.5rem;\n}\n:host .pr-6 {\n  padding-right: 1.5rem;\n}\n:host .mb-6 {\n  margin-bottom: 1.5rem;\n}\n:host .pb-6 {\n  padding-bottom: 1.5rem;\n}\n:host .ml-6 {\n  margin-left: 1.5rem;\n}\n:host .pl-6 {\n  padding-left: 1.5rem;\n}\n:host .mx-6 {\n  margin-left: 1.5rem;\n  margin-right: 1.5rem;\n}\n:host .px-6 {\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n}\n:host .my-6 {\n  margin-top: 1.5rem;\n  margin-bottom: 1.5rem;\n}\n:host .py-6 {\n  padding-top: 1.5rem;\n  padding-bottom: 1.5rem;\n}\n:host .m-7 {\n  margin: 1.75rem;\n}\n:host .p-7 {\n  padding: 1.75rem;\n}\n:host .mt-7 {\n  margin-top: 1.75rem;\n}\n:host .pt-7 {\n  padding-top: 1.75rem;\n}\n:host .mr-7 {\n  margin-right: 1.75rem;\n}\n:host .pr-7 {\n  padding-right: 1.75rem;\n}\n:host .mb-7 {\n  margin-bottom: 1.75rem;\n}\n:host .pb-7 {\n  padding-bottom: 1.75rem;\n}\n:host .ml-7 {\n  margin-left: 1.75rem;\n}\n:host .pl-7 {\n  padding-left: 1.75rem;\n}\n:host .mx-7 {\n  margin-left: 1.75rem;\n  margin-right: 1.75rem;\n}\n:host .px-7 {\n  padding-left: 1.75rem;\n  padding-right: 1.75rem;\n}\n:host .my-7 {\n  margin-top: 1.75rem;\n  margin-bottom: 1.75rem;\n}\n:host .py-7 {\n  padding-top: 1.75rem;\n  padding-bottom: 1.75rem;\n}\n:host .m-8 {\n  margin: 2rem;\n}\n:host .p-8 {\n  padding: 2rem;\n}\n:host .mt-8 {\n  margin-top: 2rem;\n}\n:host .pt-8 {\n  padding-top: 2rem;\n}\n:host .mr-8 {\n  margin-right: 2rem;\n}\n:host .pr-8 {\n  padding-right: 2rem;\n}\n:host .mb-8 {\n  margin-bottom: 2rem;\n}\n:host .pb-8 {\n  padding-bottom: 2rem;\n}\n:host .ml-8 {\n  margin-left: 2rem;\n}\n:host .pl-8 {\n  padding-left: 2rem;\n}\n:host .mx-8 {\n  margin-left: 2rem;\n  margin-right: 2rem;\n}\n:host .px-8 {\n  padding-left: 2rem;\n  padding-right: 2rem;\n}\n:host .my-8 {\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n}\n:host .py-8 {\n  padding-top: 2rem;\n  padding-bottom: 2rem;\n}\n:host .mt-auto {\n  margin-top: auto;\n}\n:host .width-quarter {\n  width: 25%;\n}\n:host .height-quarter {\n  height: 25%;\n}\n:host .width-half {\n  width: 50%;\n}\n:host .height-half {\n  height: 50%;\n}\n:host .width-three-quarter {\n  width: 75%;\n}\n:host .height-three-quarter {\n  height: 75%;\n}\n:host .width-full {\n  width: 100%;\n}\n:host .height-full {\n  height: 100%;\n}\n:host .br-0 {\n  border-radius: 0 !important;\n}\n:host .br-1 {\n  border-radius: 4px !important;\n}\n:host .br-2 {\n  border-radius: 8px !important;\n}\n:host .br-3 {\n  border-radius: 12px !important;\n}\n:host .br-4 {\n  border-radius: 16px !important;\n}\n:host .br-5 {\n  border-radius: 20px !important;\n}\n:host .br-6 {\n  border-radius: 24px !important;\n}\n:host .br-7 {\n  border-radius: 28px !important;\n}\n:host .br-8 {\n  border-radius: 32px !important;\n}\n:host .br-9 {\n  border-radius: 36px !important;\n}\n:host .br-10 {\n  border-radius: 40px !important;\n}\n:host .opacity-0 {\n  opacity: 0;\n}\n:host .opacity-1 {\n  opacity: 0.1;\n}\n:host .opacity-2 {\n  opacity: 0.2;\n}\n:host .opacity-3 {\n  opacity: 0.3;\n}\n:host .opacity-4 {\n  opacity: 0.4;\n}\n:host .opacity-5 {\n  opacity: 0.5;\n}\n:host .opacity-6 {\n  opacity: 0.6;\n}\n:host .opacity-7 {\n  opacity: 0.7;\n}\n:host .opacity-8 {\n  opacity: 0.8;\n}\n:host .opacity-9 {\n  opacity: 0.9;\n}\n:host .opacity-10 {\n  opacity: 1;\n}\n:host .is-rounded {\n  border-radius: 9999px;\n}\n:host .image {\n  display: block;\n  position: relative;\n}\n:host .image img {\n  display: block;\n  height: auto;\n  width: 100%;\n}\n:host .image-border {\n  border: 1px solid #53565a;\n}\n:host .is-32x32 {\n  height: 32px !important;\n  width: 32px !important;\n}\n:host .is-40x40 {\n  height: 40px !important;\n  width: 40px !important;\n}\n:host .is-48x48 {\n  height: 48px !important;\n  width: 48px !important;\n}\n:host .is-64x64 {\n  height: 64px !important;\n  width: 64px !important;\n}\n:host .is-96x96 {\n  height: 96px !important;\n  width: 96px !important;\n}\n:host .is-128x128 {\n  height: 128px !important;\n  width: 128px !important;\n}\n:host .is-256x256 {\n  height: 256px !important;\n  width: 256px !important;\n}\n:host .column {\n  display: block;\n  flex-basis: 0;\n  flex-grow: 1;\n  flex-shrink: 1;\n}\n:host .column.is-narrow {\n  flex: none;\n}\n:host .has-banner-shadow {\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n}\n:host .has-text-weight-bold {\n  font-weight: bold;\n}\n:host .position-relative {\n  position: relative;\n}\n:host .position-fixed {\n  position: fixed;\n}\n:host .position-absolute {\n  position: absolute;\n}\n:host .is-flex {\n  display: flex;\n}\n:host .is-underlined {\n  text-decoration: underline;\n}\n:host .is-uppercase {\n  text-transform: uppercase;\n}\n:host .pointer {\n  cursor: pointer;\n}\n:host .forbidden {\n  cursor: not-allowed;\n}\n:host .icon {\n  align-items: center;\n  display: inline-flex;\n  justify-content: center;\n  height: 1.5rem;\n  width: 1.5rem;\n}\n:host .icon.is-small {\n  height: 1rem;\n  width: 1rem;\n}\n:host .icon.is-medium {\n  height: 2rem;\n  width: 2rem;\n}\n:host .icon.is-large {\n  height: 3rem;\n  width: 3rem;\n}\n:host .is-pulled-left {\n  float: left;\n}\n:host .is-pulled-right {\n  float: right;\n}\n:host .is-horizontal-aligned {\n  margin-top: auto;\n  margin-bottom: auto;\n}\n:host .is-hidden {\n  display: none;\n}\n:host .additional-count {\n  background-color: #d9d9d9;\n  color: #53565a;\n  font-size: 14px;\n}\n:host .margin-auto {\n  margin: auto;\n}\n:host .background-black {\n  background-color: #2d2926;\n}\n:host .background-grey {\n  background-color: #d9d9d9;\n}\n:host .background-white {\n  background-color: #fafafa;\n}\n:host .text-left {\n  text-align: left;\n}\n:host .text-right {\n  text-align: right;\n}\n:host .text-center {\n  text-align: center;\n}\n:host .align-center-screen {\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n}\n:host .gap-100 {\n  margin-left: 100px;\n}\n:host .count-dimentions {\n  min-width: 15px;\n  height: 15px;\n}"],
        encapsulation: 3
      });
      return BannerComponent;
    }();
    /***/

  },

  /***/
  "./src/app/components/modal/modal.component.ts":
  /*!*****************************************************!*\
    !*** ./src/app/components/modal/modal.component.ts ***!
    \*****************************************************/

  /*! exports provided: ModalComponent */

  /***/
  function srcAppComponentsModalModalComponentTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ModalComponent", function () {
      return ModalComponent;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");

    function ModalComponent_div_2_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div");
      }
    }

    function ModalComponent_icon_9_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "icon");
      }
    }

    function ModalComponent_div_11_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 14);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "video", 15);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", ctx_r2.displayList[ctx_r2.displayItemIndex].src, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"]);
      }
    }

    function ModalComponent_div_12_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 14);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "img", 16);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", ctx_r3.displayList[ctx_r3.displayItemIndex].src, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"]);
      }
    }

    function ModalComponent_icon_15_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "icon");
      }
    }

    function ModalComponent_ng_template_16_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 17);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "path", 18);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "path", 19);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }
    }

    function ModalComponent_ng_template_18_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 20);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "path", 21);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }
    }

    function ModalComponent_ng_template_20_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "svg", 20);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "path", 22);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }
    }

    var _c0 = function _c0(a0) {
      return {
        "opacity-5 forbidden": a0
      };
    };

    var ModalComponent = /*@__PURE__*/function () {
      var ModalComponent = /*#__PURE__*/function () {
        function ModalComponent() {
          _classCallCheck(this, ModalComponent);

          this.videoUrls = [];
          this.imageUrls = [];
          this.closeModalEventEmitter = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          this.displayList = [];
          this.displayItemIndex = 0;
        }

        _createClass2(ModalComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            if (!this.videoUrls) this.videoUrls = [];
            if (!this.imageUrls) this.imageUrls = [];
            this.displayList = [].concat(_toConsumableArray(this.imageUrls.map(function (imageUrl) {
              return {
                src: imageUrl,
                type: 'image'
              };
            })), _toConsumableArray(this.videoUrls.map(function (videoUrl) {
              return {
                src: videoUrl,
                type: 'video'
              };
            })));
            if (this.displayItemSource) for (var index = 0; index < this.displayList.length; index++) {
              if (this.displayList[index].src === this.displayItemSource) {
                this.displayItemIndex = index;
                break;
              }
            }
          }
        }, {
          key: "closeModal",
          value: function closeModal() {
            this.closeModalEventEmitter.emit();
          }
        }, {
          key: "next",
          value: function next() {
            if (this.displayItemIndex < this.displayList.length - 1) this.displayItemIndex++;
          }
        }, {
          key: "previous",
          value: function previous() {
            if (this.displayItemIndex > 0) this.displayItemIndex--;
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {}
        }]);

        return ModalComponent;
      }();

      ModalComponent.ɵfac = function ModalComponent_Factory(t) {
        return new (t || ModalComponent)();
      };

      ModalComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: ModalComponent,
        selectors: [["scania-plugin-modal"]],
        inputs: {
          videoUrls: "videoUrls",
          imageUrls: "imageUrls",
          displayItemSource: "displayItemSource"
        },
        outputs: {
          closeModalEventEmitter: "closeModalEventEmitter"
        },
        decls: 22,
        vars: 11,
        consts: [[1, "position-fixed", "modal-overlay", "width-full", "height-full", 3, "click"], [1, "pointer", "mt-4", "is-pulled-right", "mr-4"], [4, "ngTemplateOutlet"], [1, "mt-5", "position-fixed", "modal-body", "width-full", "height-full", "align-center-screen", 3, "click"], [1, "position-fixed", 3, "click"], [1, "columns"], [1, "columns", "is-flex"], [1, "column", "is-narrow", "is-horizontal-aligned", 3, "click"], [1, "is-rounded", "p-3", "background-white", "pointer", "align-center-screen", 3, "ngClass"], [1, "column", "width-full", "height-full"], ["class", "m-4", 4, "ngIf"], ["close", ""], ["left", ""], ["right", ""], [1, "m-4"], ["controls", "", 1, "content-maximum", "br-2", 3, "src"], [1, "content-maximum", "br-2", 3, "src"], ["width", "25", "height", "25", "viewBox", "0 0 16 16", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M14 2L2 14", "stroke", "#fff", "stroke-width", "3"], ["d", "M2 2L14 14", "stroke", "#fff", "stroke-width", "3"], ["width", "16", "height", "18", "viewBox", "0 0 16 18", "fill", "none", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M4 1L12 9L4 17", "stroke", "#53565A", "stroke-width", "2", 2, "transform", "rotate(180deg)", "transform-origin", "50% 50%"], ["d", "M4 1L12 9L4 17", "stroke", "#53565A", "stroke-width", "2"]],
        template: function ModalComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ModalComponent_Template_div_click_0_listener() {
              return ctx.closeModal();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, ModalComponent_div_2_Template, 1, 0, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ModalComponent_Template_div_click_3_listener() {
              return ctx.closeModal();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ModalComponent_Template_div_click_4_listener($event) {
              return $event.stopPropagation();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "div", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "div", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "left", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ModalComponent_Template_left_click_7_listener() {
              return ctx.previous();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "div", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](9, ModalComponent_icon_9_Template, 1, 0, "icon", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "content", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](11, ModalComponent_div_11_Template, 2, 1, "div", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](12, ModalComponent_div_12_Template, 2, 1, "div", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "right", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ModalComponent_Template_right_click_13_listener() {
              return ctx.next();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "div", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](15, ModalComponent_icon_15_Template, 1, 0, "icon", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](16, ModalComponent_ng_template_16_Template, 3, 0, "ng-template", null, 11, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](18, ModalComponent_ng_template_18_Template, 2, 0, "ng-template", null, 12, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](20, ModalComponent_ng_template_20_Template, 2, 0, "ng-template", null, 13, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
          }

          if (rf & 2) {
            var _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](17);

            var _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](19);

            var _r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](7, _c0, ctx.displayItemIndex === 0));

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.displayList[ctx.displayItemIndex].type === "video");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.displayList[ctx.displayItemIndex].type === "image");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](9, _c0, ctx.displayItemIndex === ctx.displayList.length - 1));

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", _r9);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["NgTemplateOutlet"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgClass"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgIf"]],
        styles: [".modal-overlay[_ngcontent-%COMP%] {\n  top: 0;\n  left: 0;\n  background-color: rgba(196, 196, 196, 0.7);\n  z-index: 2;\n}\n\n.modal-body[_ngcontent-%COMP%] {\n  top: 25px;\n  left: 0;\n  z-index: 2;\n}\n\n.content-maximum[_ngcontent-%COMP%] {\n  max-width: 1000px !important;\n  max-width: 700px !important;\n}"]
      });
      return ModalComponent;
    }();
    /***/

  },

  /***/
  "./src/main.ts":
  /*!*********************!*\
    !*** ./src/main.ts ***!
    \*********************/

  /*! no exports provided */

  /***/
  function srcMainTs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony import */


    var _app_app_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./app/app.module */
    "./src/app/app.module.ts");
    /* harmony import */


    var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/platform-browser */
    "./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/platform-browser.js");

    _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["platformBrowser"]().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_0__["AppModule"])["catch"](function (err) {
      return console.error(err);
    });
    /***/

  },

  /***/
  0:
  /*!***************************!*\
    !*** multi ./src/main.ts ***!
    \***************************/

  /*! no static exports found */

  /***/
  function _(module, exports, __webpack_require__) {
    module.exports = __webpack_require__(
    /*! /var/www/html/scania-plugin/src/main.ts */
    "./src/main.ts");
    /***/
  }
}, [[0, "runtime"]]]);